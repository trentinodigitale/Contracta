@page "/modal/RichiestaCodici.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.Portale
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@inject IConfiguration configuration;
@inject IHttpContextAccessor _accessor;
@using static eProcurementNext.HTML.BasicFunction;
@using Microsoft.VisualBasic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.cnvModel;
@* <!-- #Include File="../CTL_Library/Functions/Intest_nosession.inc" --> *@
@model eProcurementNext.Razor.Pages.modal.RichiestaCodiciModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new EprocResponse(GetParamURL(HttpContext.Request.QueryString.ToString(), "XML_ATTACH_TYPE"));
}
@{

	//' tipoDaValidare      : intero Enumerato, indica il tipo di dati atteso. 1 = String; 2 = Intero/Long ; 3 = Float,Double
	//' sottoTipoDaValidare : (opz.) intero Enumerato, se il tipoDaValidare è 1 (stringa), questo parametro indica che tipo di stringa di aspettiamo.
	//'                           * 0 = Formato custom, occorre specificare l'espressione regolare nel parametro regExp
	//'                           * 1 = Formato table like, valori attesi : stringa compresa tra 2 e 100 caratteri e possiede solo caratteri minuscoli e maiuscoli, numeri e il caratteri underscore "_"
	//'                           * 2 = Formato sort like , valori attesi : stringa compresa tra 2 e 50 caratteri e possiede solo decimali,caratteri dalla a alla z, underscore e virgole e spazi,
	//'							* 3 = Formato sql filter

	//'function validate (nomeParametro, valoreDaValidare, tipoDaValidare, sottoTipoDaValidare, regExp, obblig )
	
	validate("Table", GetValueFromForm(Request,"Table"), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);

	validate("AttribKey", GetValueFromForm(Request, "AttribKey"), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);

	validate("Modello", GetParamURL(Request.QueryString.ToString(), "Modello"), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);
	
	validate(GetValueFromForm(Request, "AttribKey").Trim(), (GetValueFromForm(Request,(GetValueFromForm(Request,"AttribKey").Trim())).Trim()).Replace("-", ""), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);


	validate("PartitaIva", GetValueFromForm(Request, "PartitaIva"), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);

	validate("EMailUtente", GetValueFromForm(Request, "EMailUtente"), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_FILTROSQL, "", 0, HttpContext, session);

	////' è sufficiente mettere la replace dell'apice lato dll
	////'call validate( "Login", Request.Form("Login") , TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0)

	validate("CodiceAccesso", GetValueFromForm(Request, "CodiceAccesso"), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0, HttpContext, session);

	validate("codicefiscale", GetValueFromForm(Request, "codicefiscale").Replace("-", ""), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0, HttpContext, session);
	
	htmlToReturn.Write("<html>");
	htmlToReturn.Write("<head>");
	htmlToReturn.Write($@"<meta http-equiv=""content-type"" content=""text/html; charset=utf-8""/>");
	htmlToReturn.Write($@"<link rel=""stylesheet"" type=""text/css"" href=""./css_joomla/print.css"" media=""print"" />");
	htmlToReturn.Write($@"<link rel=""stylesheet"" type=""text/css"" href=""./css_joomla/style.css"" media=""screen,projection"" />");
	
	htmlToReturn.Write($@"<link rel=""shortcut icon"" href=""favicon.ico"" type=""image/x-icon"" />");
	<!--[if IE]>
		<link rel="stylesheet" type="text/css" href="./css_joomla/iefix.css" />
	<![endif]-->
	<!--[if lt IE 7]>
		<link rel="stylesheet" type="text/css" href="./css_joomla/ie6fix.css" />
	<![endif]-->
	htmlToReturn.Write(@"<script type=""text/javascript"" src=""./js/mootools.js""></script>");
	htmlToReturn.Write(@"<script type=""text/javascript"" src=""./js/common.js""></script>");
	htmlToReturn.Write(@"<script type=""text/javascript"" src=""./js/forms.js""></script>");

	htmlToReturn.Write("</head>");
	htmlToReturn.Write("<body>");
	htmlToReturn.Write($@"<div id=""mb_box"" class="""">");
	htmlToReturn.Write($@"<h2 id=""mb_title"">");
	htmlToReturn.Write("<span>");

	if(string.Equals(CStr(GetParamURL(Request.QueryString.ToString(), "Modello")).ToUpper(),"RECUPEROLOGIN"))
	{
		htmlToReturn.Write("Recupero codice di accesso e nome utente");
	}
	if(string.Equals(CStr(GetParamURL(Request.QueryString.ToString(), "Modello")).ToUpper(),"RECUPEROPWD"))
	{
		htmlToReturn.Write("Recupero Password");
	}

	htmlToReturn.Write("</span>");
	htmlToReturn.Write("</h2>");

	htmlToReturn.Write("<fieldset>");
	htmlToReturn.Write("<p>");

	bool TestCaptcha(dynamic valSession, dynamic valCaptcha)
	{
		bool _TestCaptcha;
		dynamic tmpSession;
		valSession = CStr(valSession).Trim();
		valCaptcha = CStr(valCaptcha).Trim();
		if(valSession == null  || valCaptcha == null)
		{
			_TestCaptcha = false;
		}
		else
		{
			tmpSession = valSession;
			valSession = Trim(session[valSession]);
			session[tmpSession] = "";
			if (string.IsNullOrEmpty(valSession)){
				_TestCaptcha = false;
			}else{
				valCaptcha = Replace(valCaptcha, "i", "I");
				if (Strings.StrComp(valSession,valCaptcha, CompareMethod.Text) == 0 ){
					_TestCaptcha = true;
				}else{
					_TestCaptcha = false;
				}
			}
		}
		return _TestCaptcha;
	}

	//response.flush
	//'--verifico il codice antispam se è stato inserito correttamente
	//'if not TestCaptcha("ASPCAPTCHA", Request.Form("captchacode")) then

	if(!TestCaptcha("captcha_access_totale",GetValueFromForm(Request,session["captcha_field_name"])))
	{
		htmlToReturn.Write(ApplicationCommon.CNV("Codice di controllo non valido"));
		//'Response.End 
	}
	else
	{

		RichiestaCodici richiestaCodici = new RichiestaCodici(HttpContext,session);
		richiestaCodici.run(htmlToReturn);
	}
	htmlToReturn.Write("</p>");

	htmlToReturn.Write("</fieldset>");

	htmlToReturn.Write("<br/><br/><br/><br/>");

	htmlToReturn.Write($@"<div class=""btns"">");
	htmlToReturn.Write($@"<input type=""button"" value=""Indietro"" onclick=""history.back(-1)"" />");
	htmlToReturn.Write("</div>");

	htmlToReturn.Write("</div>");
	htmlToReturn.Write("</body>");

	htmlToReturn.Write("</html>");					

	
	
		
		
		
		
}@Html.Raw(htmlToReturn.Out())
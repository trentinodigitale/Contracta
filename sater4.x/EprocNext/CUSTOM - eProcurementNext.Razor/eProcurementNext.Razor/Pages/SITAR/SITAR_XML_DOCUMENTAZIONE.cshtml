@page "/SITAR/SITAR_XML_DOCUMENTAZIONE.asp"
@inject eProcurementNext.Session.ISession session;
@using System.IO;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonDB.Basic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.ctl_profiler
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.HTML.BasicFunction;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.logModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel;
@using static eProcurementNext.CommonModule.Basic;
@using static eProcurementNext.Razor.Pages.SITAR.SITAR_XML_DOCUMENTAZIONEModel;
@using eProcurementNext.CtlProcess;
@using static eProcurementNext.Session.SessionMiddleware
@model eProcurementNext.Razor.Pages.SITAR.SITAR_XML_DOCUMENTAZIONEModel
@{
    LoadSession(HttpContext, session);
    EprocResponse response = new();
    CommonDbFunctions cdf = new();

    HttpContext.Response.ContentType = "TEXT/XML";
    if (GetParamURL(Request.QueryString.ToString(), "VIDEO") != "1")
    {
        HttpContext.Response.Headers.Add("Content-Disposition", "attachment; filename=SITAR_XML_DOCUMENTAZIONE.XML");
    }

    //'per invocarla : http://localhost/application/sitar/SITAR_XML_DOCUMENTAZIONE.asp?iddoc=145324&backoffice=yes&VIDEO=1

    string vbTab = string.Empty;
    string RUP_Login = string.Empty;
    string RUP_CF = string.Empty;
    string RUP_Pwd = string.Empty;
    string CF_Ente = string.Empty;
    string g_ID_DOC = string.Empty; // '-- ID della GARA
    string g_id_PDA = string.Empty;
    string g_SQLfilter = string.Empty;
    string OPERATION = string.Empty;
    string cfRapLeg = string.Empty;
    string strSQL = string.Empty;
    string FILE_ALLEGATO = string.Empty;

    var sqlParams = new Dictionary<string, object?>();

    //'-- init
    vbTab = "    ";

    string SOVRASCR = "true";

    //'-- id del documento di richiesta sitar
    g_ID_DOC = GetParamURL(Request.QueryString.ToString(), "IDDOC");
    validate("IDDOC", g_ID_DOC, TIPO_PARAMETRO_INT, 0, "", 1, HttpContext, session);

    TSRecordSet rs_pwd = new TSRecordSet();
    TSRecordSet rsEsiti = new TSRecordSet();
    TSRecordSet rs_Lotti = new TSRecordSet();
    TSRecordSet rs_Lotti_PDA = new TSRecordSet();
    TSRecordSet rs_Gara = new TSRecordSet();
    TSRecordSet rs_ComAggiudic = new TSRecordSet();
    TSRecordSet rs_Aziende = new TSRecordSet();
    TSRecordSet rs_RapLeg = new TSRecordSet();

    sqlParams.Add("@ID_DOC", CInt(g_ID_DOC));
    rs_Gara = GetRS("select * from SITAR_XML_DATI_GARA where idHeader = @ID_DOC", sqlParams);
    rs_Gara.MoveFirst();

    RUP_Login = CStr(rs_Gara["CFTEC1"]);
    RUP_CF = CStr(rs_Gara["CFTEC1"]);

    sqlParams.Clear();
    sqlParams.Add("@RUP_Login", RUP_Login);
    rs_pwd = GetRS("select dbo.OCP_getPasswordWS(@RUP_Login) as account", sqlParams);
    rs_pwd.MoveFirst();

    string sitar_account = CStr(rs_pwd["account"]);
    string[] arr = sitar_account.Split("@@@");

    string SITAR_LOGIN = arr[0];
    string SITAR_PASSWORD = arr[1];

    CF_Ente = CStr(rs_Gara["CFEIN"]);

    sqlParams.Clear();
    sqlParams.Add("@ID_DOC", CInt(g_ID_DOC));
    rs_Lotti = GetRS("select *  from SITAR_XML_LISTA_LOTTI with(nolock) where idHeader = @ID_DOC order by idRiga", sqlParams);

    response.Write(@"<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:bean='http://beans.ws.vigilanza.sil.eldasoft.it'>
   <soapenv:Header/>
   <soapenv:Body>
      <bean:istanziaPubblicazioneDocumenti>
         <bean:login>
			<bean:login>" + RUP_Login + @"</bean:login>
			<bean:password>" + RUP_Pwd + @"</bean:password>
		</bean:login>
        <bean:pubblicazioneDocumenti>
			<bean:testata>
				<bean:CFEIN>" + CF_Ente + @"</bean:CFEIN>
				<bean:SOVRASCR>" + SOVRASCR + @"</bean:SOVRASCR>
			</bean:testata>
			<bean:oggettoXML>
                    <![CDATA[");
    response.Write(@"<bean:richiestaSincrona_IstanzaPubblicazioneDocumenti test='false' xmlns:bean='http://beans.vigilanza.sil.eldasoft.it'>
	<bean:Pubblicazione>");

    response.Write(addOptionalTag(CStr(rs_Gara["W3IDGARA"]), "bean:W3IDGARA"));
    response.Write(addOptionalTag(CStr(rs_Gara["W9PBCOD_PUBB"]), "bean:W9PBCOD_PUBB"));
    response.Write(@"<bean:W9PBTIPDOC>" + CStr(rs_Gara["W9PBTIPDOC"]) + @"</bean:W9PBTIPDOC>");
    response.Write(addOptionalTag(CStr(rs_Gara["W9PBDATAPUBB"]), "bean:W9PBDATAPUBB"));
    response.Write(addOptionalTag(CStr(rs_Gara["W9PBDATASCAD"]), "bean:W9PBDATASCAD"));
    //'prima passavamo il campo 'W9PBDATADEC', quindi per non cambiare tutti ipunti dove veniva usato il nome W9PBDATADEC abbiamo trasformato solo qui questo tag in W9PBDATAPR
    response.Write(addOptionalTag(CStr(rs_Gara["W9PBDATADEC"]), "bean:W9PBDATAPR"));

    /*'tag W9PBTIPDOC . Tipologia documento
    '1	Delibera/determina a contrarre o atto equivalente
    '2	Avviso per manifestazione di interesse, indagini di mercato (art.36 comma 2b,2c,2d)
    '3	Documentazione di gara - Bando di gara di appalto, concessione o concorso
    '4	Avviso in merito alla modifica dell'ordine di importanza dei criteri, bando di concessione (art.173)
    '5	Avviso costituzione del privilegio
    '6	Documentazione di gara - Lettera di invito
    '7	Provvedimento che determina le esclusioni dalla procedura di affidamento e le ammissioni all'esito delle valutazioni dei requisiti soggettivi, economico-finanziari, e tecnico-professionali
    '8	Provvedimento di nomina commissione di aggiudicazione e Curricula dei componenti della stessa in caso di criterio di aggiudicazione oepv 
    '9	Provvedimento per eventuali esclusioni a seguito verifica offerte tecniche
    '10	Provvedimento per eventuali esclusioni a seguito apertura offerte economiche
    '11	Provvedimento per formazione Commissione per la valutazione dell'offerta anomala nel caso del criterio del prezzo più basso
    '12	Provvedimento per eventuale esclusione offerta anomala
    '13	Provvedimento di aggiudicazione non efficace con elenco verbali delle commissione di gara
    '14	Provvedimento di adesione
    '15	Provvedimento di aggiudicazione decreto o ordinativo
    '16	Provvedimento di revoca dell'aggiudicazione o dell'adesione
    '17	Provvedimento di gara non aggiudicata o deserta
    '18	Provvedimento di aggiudicazione efficace
    '19	Decreto o determina di affidamento  di lavori, servizi e forniture di somma urgenza e di protezione civile (art.163)
    '20	Avviso di aggiudicazione o affidamento (esito di gara)
    '21	Testo integrale contratto di acquisto beni e servizi di importo unitario superiore al milione di euro
    '22	Provvedimento di autorizzazione subappalto
    '23	Atto per eventuale scioglimento contratto per eccesso durata sospensione esecuzione
    '24	Provvedimento di eventuali modifiche al contratto d'appalto
    '25	Provvedimento di eventuale recesso dal contratto
    '26	Provvedimento di eventuale risoluzione del contratto
    '27	Avviso contratto di sponsorizzazione (art.19)
    '99	Altro documento*/

    response.Write(@"</bean:Pubblicazione>
	<bean:Documenti>
		<bean:W9DGTITOLO>" + CStr(rs_Gara["W9DGTITOLO"]) + @"</bean:W9DGTITOLO>");

    FILE_ALLEGATO = CStr(rs_Gara["AllegatoPerOCP"]);

    response.Write(@"<bean:file>" + cdf.base64attach(FILE_ALLEGATO) + @"</bean:file>
	</bean:Documenti>");

    rs_Lotti.MoveFirst();

    //'-- <!-- indicare i CIG per i quali la pubblicazione ha significato -->

    while(!rs_Lotti.EOF) {
        response.Write(@"<bean:cigLotti>" + encodeXML(CStr(rs_Lotti["W3CIG"])) + @"</bean:cigLotti>");

        rs_Lotti.MoveNext();
    }

    response.Write(@"</bean:richiestaSincrona_IstanzaPubblicazioneDocumenti>
    ]]>
                </bean:oggettoXML>
            </bean:pubblicazioneDocumenti>
        </bean:istanziaPubblicazioneDocumenti>
    </soapenv:Body>
    </soapenv:Envelope>");
}
@Html.Raw(response.Out())
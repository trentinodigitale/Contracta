@page "/Portale/rss_new.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule
@using eProcurementNext.DashBoard
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.HTML.BasicFunction;
@using static eProcurementNext.DashBoard.Basic;
@inject IHttpContextAccessor accessor;
@inject IConfiguration configuration;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.trace_in_log_utenteModel;
@using Microsoft.VisualBasic;
@using eProcurementNext.Razor;
@using static eProcurementNext.Razor.Pages.Portale.rss_newModel;
@model eProcurementNext.Razor.Pages.Portale.rss_newModel
@using static eProcurementNext.Session.SessionMiddleware
@using static eProcurementNext.HTML.Basic;
@{
    LoadSession(HttpContext, session);
    EprocResponse htmlToReturn = new EprocResponse(GetParamURL(HttpContext.Request.QueryString.ToString(), "XML_ATTACH_TYPE"));

    //'-- Parametro che indica se visualizzare i bandi in corso o gli scaduti
    bool showScaduti = false;
    int nNumRow = 0;
    TSRecordSet? rsBandi2 = null;
    TSRecordSet? rsBandi = null;
    int nNumRowTotale = 0;
    if (GetParamURL(Request.QueryString.ToString(), "SCADUTI").ToLower() == "yes" || GetParamURL(Request.QueryString.ToString(), "SCADUTI") == "1")
    {
        showScaduti = true;
    }
    else
    {
        showScaduti = false;
    }

    if (!string.IsNullOrEmpty(CStr(GetParamURL(Request.QueryString.ToString(), "Table"))))
    {
        string XFilterHide = GetParamURL(Request.QueryString.ToString(), "FilterHide");
        string XFilter = GetParamURL(Request.QueryString.ToString(), "Filter");
        string Xsort = GetParamURL(Request.QueryString.ToString(), "sort");
        string XsortOrder = GetParamURL(Request.QueryString.ToString(), "sortorder");


        //'-- verifico che il parametro non contenga dati pericolosi
        validate("FilterHide", XFilterHide, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_FILTROSQL, "", 0, HttpContext, session);
        validate("Filter", XFilter, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_FILTROSQL, "", 0, HttpContext, session);
        validate("sort", Xsort, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_SORT, "", 0, HttpContext, session);
        validate("sortOrder", XsortOrder, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0, HttpContext, session);

        //'--determino se devo visualizzare scaduti /non scaduti
        bool bVisualScaduti;
        string strFilterScaduto = "";
        bool attacked;
        string sort = "";
        string sortOrder = "";

        strFilterScaduto = "";
        bVisualScaduti = false;

        if (Strings.InStr(GetParamURL(Request.QueryString.ToString(), "FilterHide"), "Scaduto=0 or Scaduto=1") > 0)
        {
            bVisualScaduti = true;
            strFilterScaduto = "Scaduto=0 or Scaduto=1";

        }
        else
        {
            if (Strings.InStr(GetParamURL(Request.QueryString.ToString(), "FilterHide"), "Scaduto=0") > 0)
            {
                bVisualScaduti = true;
                //'Response.Write " In corso"
                strFilterScaduto = "Scaduto=0";
            }
            else
            {
                if (Strings.InStr(GetParamURL(Request.QueryString.ToString(), "FilterHide"), "Scaduto=1") > 0)
                {
                    bVisualScaduti = true;
                    //'Response.Write " Conclusi"
                    strFilterScaduto = "Scaduto=1";
                }
            }
        }
        //'--determino il filtro nascosto sulla tipologia dei bandi da ereditare sulla ricerca
        string strFilterTipologia;
        strFilterTipologia = "";
        if (Strings.InStr(GetParamURL(Request.QueryString.ToString(), "FilterHide"), "(Tipologia=1 or Tipologia=3)") > 0)
        {
            strFilterTipologia = "(Tipologia=1 or Tipologia=3)";
        }
        else
        {
            if (Strings.InStr(GetParamURL(Request.QueryString.ToString(), "FilterHide"), "Tipologia=1") > 0)
            {
                strFilterTipologia = "Tipologia=1";
            }

            if (Strings.InStr(GetParamURL(Request.QueryString.ToString(), "FilterHide"), "Tipologia=2") > 0)
            {
                strFilterTipologia = "Tipologia=2";
            }
            if (Strings.InStr(GetParamURL(Request.QueryString.ToString(), "FilterHide"), "Tipologia=3") > 0)
            {
                strFilterTipologia = "Tipologia=3";
            }

        }
        attacked = false;
        BlackList mp_objDB = new BlackList();
        Viewer objDash = new Viewer(configuration, accessor, session);

        //'table
        if (!mp_objDB.isDevMode(session) && (!isValid(GetParamURL(Request.QueryString.ToString(), "Table"), 1)))
        {
            attacked = true;
        }
        //'filterhide
        if (!string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "FilterHide")))
        {
            if (!mp_objDB.isDevMode(session) && (!isValidaSqlFilter(GetParamURL(Request.QueryString.ToString(), "FilterHide"))))
            {
                attacked = true;
            }
        }
        //'filter
        if (!string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "Filter")))
        {
            if (!mp_objDB.isDevMode(session) && (!isValidaSqlFilter(GetParamURL(Request.QueryString.ToString(), "Filter"))))
            {
                attacked = true;
            }

        }
        string strSql = "";
        //'--- fine controlli di sicurezza
        if (attacked == false)
        {
            //'--controllo se devo inserire la paginazione
            //TSRecordSet? objDB = null;
            //'-- se è necessaria la paginazione
            if (!string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "nPag")))
            {
                if (CInt(GetParamURL(Request.QueryString.ToString(), "nPag")) > 0 && CInt(GetParamURL(Request.QueryString.ToString(), "numRowForPag")) > 0)
                {
                    strSql = "select top " + (CInt(GetParamURL(Request.QueryString.ToString(), "numRowForPag")) * CInt(GetParamURL(Request.QueryString.ToString(), "nPag")));
                }
                else
                {
                    strSql = "select";
                }
            }
            else
            {
                strSql = "select";
            }
            string strTable = GetParamURL(Request.QueryString.ToString(), "Table");
            //'--Att. 184428per i quesiti sostituisco alla tabella la vista
            //'--per evitare di far cambiare integrazione di So.re.sa
            if (strTable.ToLower() == "document_chiarimenti")
            {
                strTable = "view_Document_Chiarimenti_portale";
            }
            strSql = strSql + " * from " + strTable;

            bool bWhere = false;
            if (!string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "FilterHide")))
            {
                strSql = strSql + " where " + GetParamURL(Request.QueryString.ToString(), "FilterHide");
                bWhere = true;
            }
            if (!string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "Filter")))
            {
                if (bWhere == true)
                {
                    strSql = strSql + " and " + GetParamURL(Request.QueryString.ToString(), "Filter");
                }
                else
                {
                    strSql = strSql + " where " + GetParamURL(Request.QueryString.ToString(), "Filter");
                }
            }
            if (!string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "sort")))
            {
                sort = GetParamURL(Request.QueryString.ToString(), "sort");
                if (sort.ToLower() == "a_base_asta" && strTable.ToUpper() == "DASHBOARD_VIEW_DOCUMENTI_PUBBLICI")
                {
                    sort = "a_base_asta_tec";
                }
            }
            else
            {
                if ((GetParamURL(Request.QueryString.ToString(), "sort")) != "NONE")
                {
                    sort = "expirydate";
                }
            }

            if (!string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "sortorder")))
            {
                sortOrder = GetParamURL(Request.QueryString.ToString(), "sortorder");
            }
            else
            {
                if (GetParamURL(Request.QueryString.ToString(), "sort") != "NONE")
                {
                    sortOrder = "desc";
                }

            }


            if (GetParamURL(Request.QueryString.ToString(), "sort") != "NONE")
            {
                strSql = strSql + $" order by {sort} {sortOrder} ,1";
            }

            //' Aggiungiamo alla sort anche la prima colonna come secondo discriminante
            //' ( che dovrebbe essere sempre l'id o una chiave univoca simile )

            nNumRow = 0;

            CommonDbFunctions cdf = new CommonDbFunctions();
            try
            {
                rsBandi = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString);
            }
            catch (Exception ex)
            {
                //n = err.number;
                //s = err.source;
                string d = ex.Message;

                traceInLogUtente(0, "rss_new.asp", "Descrizione:" + d + " --- QueryString:" + GetQueryStringFromContext(Request.QueryString), HttpContext, session);

                //'-- Se è attiva la modalità debug visualizziamo più informazioni riguardo l'errore, query sql comprese

                //Da tradurre questa parte
                if ((CStr(ApplicationCommon.Application["debug-mode"]).ToLower() == "yes") || (CStr(ApplicationCommon.Application["debug-mode"]).ToLower() == "si") || (CStr(ApplicationCommon.Application["debug-mode"]) == "true"))
                {
                    htmlToReturn.Write("Desc:" + d);
                }
                else
                {
                    //'-- Se è disattivato il debug-mode ma è attiva ma la SYS di visione degli errori tecnici
                    if (CStr(ApplicationCommon.Application["dettaglio-errori"]).ToLower() == "yes" || CStr(ApplicationCommon.Application["dettaglio-errori"]).ToLower() == "si")
                    {
                        htmlToReturn.Write("Desc:" + d);
                    }
                    else
                    {
                        //'-- Scriviamo l'errore nell'event viewer
                        eProcurementNext.CommonDB.Basic.TraceErr(ex, ApplicationCommon.Application.ConnectionString);
                        //		TraceErr s, d, n, ProgID
                        htmlToReturn.Write(" Errore in data : " + DateTime.Now + "<br/>" + ex.Message);
                    }
                }

                throw new ResponseEndException(htmlToReturn.Out(), Response, "");

            }

            nNumRow = rsBandi.RecordCount;

            //' Calcolo il numero di record senza paginazione
            string strSql2 = "";
            strSql2 = strSql2 + "select * from " + strTable; //'--Request.QueryString("Table")
            bWhere = false;
            if (!string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "FilterHide")))
            {
                strSql2 = strSql2 + " where " + GetParamURL(Request.QueryString.ToString(), "FilterHide");
                bWhere = true;
            }

            if (!string.IsNullOrEmpty((GetParamURL(Request.QueryString.ToString(), "Filter"))))
            {
                if (bWhere)
                {
                    strSql2 = strSql2 + " and " + GetParamURL(Request.QueryString.ToString(), "Filter");
                }
                else
                {
                    strSql2 = strSql2 + " where " + GetParamURL(Request.QueryString.ToString(), "Filter");
                }
            }

            try
            {
                rsBandi2 = cdf.GetRSReadFromQuery_(strSql2, ApplicationCommon.Application.ConnectionString);
            }
            catch (Exception ex)
            {
                //'-- gestione errore

                //n = err.number
                //s = err.source
                string d = ex.Message;

                traceInLogUtente(0, "rss_new.asp", "Descrizione:" + d + " --- QueryString:" + GetQueryStringFromContext(Request.QueryString), HttpContext, session);

                //'-- Se è attiva la modalità debug visualizziamo più informazioni riguardo l'errore, query sql comprese
                if ((CStr(ApplicationCommon.Application["debug-mode"]).ToLower() == "yes") || (CStr(ApplicationCommon.Application["debug-mode"]).ToLower() == "si") || (CStr(ApplicationCommon.Application["debug-mode"]) == "true"))
                {
                    htmlToReturn.Write("Desc:" + d);

                }
                else
                {
                    //	'-- Se è disattivato il debug-mode ma è attiva ma la SYS di visione degli errori tecnici
                    if (CStr(ApplicationCommon.Application["dettaglio-errori"]).ToLower() == "yes" || CStr(ApplicationCommon.Application["dettaglio-errori"]).ToLower() == "si")
                    {
                        htmlToReturn.Write("Desc:" + d);
                    }
                    else
                    {
                        //'-- Scriviamo l'errore nell'event viewer
                        eProcurementNext.CommonDB.Basic.TraceErr(ex, ApplicationCommon.Application.ConnectionString);
                        //TraceErr s, d, n, ProgID
                        htmlToReturn.Write(" Errore in data : " + DateTime.Now + "<br/> Desc:" + ex.Message);
                    }

                    throw new ResponseEndException(htmlToReturn.Out(), Response, "");
                }
            }
            if (rsBandi2.RecordCount > 0)
            {
                nNumRowTotale = rsBandi2.RecordCount;
            }


        }
        else
        {
            nNumRow = 0;
        }


    }
    else
    {
        //'--recupero i bandi ordinati per Data Scadenza
        try
        {
            if (showScaduti == true)
            {
                rsBandi = cdf.GetRSReadFromQuery_("SELECT * FROM DASHBOARD_VIEW_BANDI_RSS  where expirydate <= getdate() order by expirydate desc", ApplicationCommon.Application.ConnectionString);
            }
            else
            {
                rsBandi = cdf.GetRSReadFromQuery_("SELECT * FROM DASHBOARD_VIEW_BANDI_RSS  where expirydate > getdate() order by expirydate desc", ApplicationCommon.Application.ConnectionString);
            }
        }
        catch (Exception ex)
        {
            htmlToReturn.Write("ERRORE:" + ex.Message);
            throw new ResponseEndException(htmlToReturn.Out(), Response, "");
        }

    }
    if (!string.IsNullOrEmpty(CStr(session["IdPfu"])) || CStr(session["IdPfu"]) == "-20" || CStr(session["IdPfu"]) == "-10")
    {

        MainGlobalAsa.SessionAbandon(session);
        //session.abandon();
    }

    Response.ContentType = "text/xml";
    //'-- Metadati e informazioni di testata del feed rss
    //'response.write "<?xml version=""1.0"" encoding=""ISO-8859-1"" ?>"  & vbcrlf
    htmlToReturn.Write(@"<?xml version=""1.0"" encoding=""UTF-8""?>" + Environment.NewLine);
    //'if request.querystring("no_xslt") = "" then
    //'	response.write "<?xml-stylesheet href=""./css/rss_xslt.asp"" type=""text/xsl"" media=""screen"" ?>" & vbcrlf
    //'end if
    htmlToReturn.Write($@"<rss version=""2.0"" xmlns:afs=""http://www.aflink.it/XMLBANDI"">" + Environment.NewLine);
    //'response.write "<rss version=""2.0"">"  & vbcrlf

    htmlToReturn.Write("<channel>" + Environment.NewLine);

    if (string.IsNullOrEmpty(CStr(GetParamURL(Request.QueryString.ToString(), "title"))))
    {
        if (Strings.InStr(GetParamURL(Request.QueryString.ToString(), "FilterHide"), "Scaduto=1") > 0)
        {
            htmlToReturn.Write("<title>Elenco dei bandi di gara Scaduti</title>" + Environment.NewLine);
        }
        else
        {
            htmlToReturn.Write("<title>Elenco dei bandi di gara In Corso</title>" + Environment.NewLine);
        }
    }
    else
    {
        htmlToReturn.Write("<title>" + HtmlEncode(CStr(GetParamURL(Request.QueryString.ToString(), "title"))) + "</title>" + Environment.NewLine);
    }

    htmlToReturn.Write("<ttl>15</ttl>" + Environment.NewLine);

    if (string.IsNullOrEmpty(CStr(GetParamURL(Request.QueryString.ToString(), "title"))))
    {
        htmlToReturn.Write("<description>Bandi pubblici " + ApplicationCommon.Application["NOMEAPPPORTALE"] + "</description>" + Environment.NewLine);
    }
    else
    {
        htmlToReturn.Write("<description>" + HtmlEncode(CStr(GetParamURL(Request.QueryString.ToString(), "title"))) + "</description>" + Environment.NewLine);
    }

    htmlToReturn.Write("<language>IT-it</language>" + Environment.NewLine);
    htmlToReturn.Write("<afs:totRecord>" + nNumRowTotale + "</afs:totRecord>" + Environment.NewLine);
    //'response.write "<link>" & application("AppServer") & cstr(application("strVirtualDirectory")) & "</link>" & vbcrlf
    TSRecordSet? rsMlg = null;
    //'--recupero il template per il blocco item del feed
    if (!string.IsNullOrEmpty(CStr(GetParamURL(Request.QueryString.ToString(), "ML_KEY"))))
    {
        //'-- Se la chiave di multilinguismo del template dei singoli item viene passata come parametro
        rsMlg = cdf.GetRSReadFromQuery_("select dbo.CNV_ESTESA( ML_Description ,'I') as ML_Description from lib_multilinguismo with(nolock) where ML_KEY = '" + GetParamURL(Request.QueryString.ToString(), "ML_KEY").Replace("'", "''").Trim() + "'", ApplicationCommon.Application.ConnectionString);
    }
    else
    {
        rsMlg = cdf.GetRSReadFromQuery_("select dbo.CNV_ESTESA( ML_Description ,'I') as ML_Description from lib_multilinguismo with(nolock) where ML_KEY = 'TEMPLATE_RSS_ML'", ApplicationCommon.Application.ConnectionString);
    }
    //'-- Se sono presenti bandi
    if (nNumRow > 0)
    {
        //'-- Se è presente un template per il feed rss
        if (rsMlg.RecordCount > 0)
        {
            rsMlg.MoveFirst();
            rsBandi.MoveFirst();
            if (!string.IsNullOrEmpty(CStr(GetParamURL(Request.QueryString.ToString(), "nPag"))))
            {
                if (CInt(GetParamURL(Request.QueryString.ToString(), "nPag")) > 1 && CInt(GetParamURL(Request.QueryString.ToString(), "numRowForPag")) > 0)
                {
                    rsBandi.position = CInt(GetParamURL(Request.QueryString.ToString(), "numRowForPag")) * (CInt(GetParamURL(Request.QueryString.ToString(), "nPag")) - 1) + 1;
                }
            }
            string template = CStr(GetValueFromRS(rsMlg.Fields["ML_Description"]));
            //'stop
            while (!rsBandi.EOF)
            {
                string corpoItem = "";

                //'-- Recupero il template da adottare per il blocco "<item>" gia elaborato
                corpoItem = elabTemplate(template, rsBandi);

                //'-- Effettuo un html encode del contenuto del tag description
                int inizioTag = Strings.InStr(1, corpoItem.ToLower(), "<description>");
                inizioTag = inizioTag + "<description>".Length;

                int fineTag = Strings.InStr(1, corpoItem.ToLower(), "</description>");

                string bloccoDescription = Strings.Mid(corpoItem, inizioTag, fineTag - inizioTag);
                //''-- tolgo gli a capo dal tag description
                //'bloccoDescription_new = replace(bloccoDescription, vbcrlf, " ")
                //'corpoItem = replace(corpoItem, bloccoDescription, bloccoDescription_new)
                corpoItem = corpoItem.Replace(bloccoDescription, HtmlEncode(bloccoDescription));
                corpoItem = corpoItem.Replace(bloccoDescription, HtmlEncode(bloccoDescription));
                htmlToReturn.Write(corpoItem);
                rsBandi.MoveNext();
            }
        }
        else
        {
            rsBandi.MoveFirst();
            if (CInt(GetParamURL(Request.QueryString.ToString(), "nPag")) > 1 && CInt(GetParamURL(Request.QueryString.ToString(), "numRowForPag")) > 0)
            {
                rsBandi.position = CInt(GetParamURL(Request.QueryString.ToString(), "numRowForPag")) * (CInt(GetParamURL(Request.QueryString.ToString(), "nPag")) - 1) + 1;
            }
            while (!rsBandi.EOF)
            {
                htmlToReturn.Write("<item>" + Environment.NewLine);
                htmlToReturn.Write("<title>" + "Bando" + " " + GetValueFromRS(rsBandi.Fields["protocollobando"]) + "</title>" + Environment.NewLine);
                htmlToReturn.Write("<link><![CDATA[" + ApplicationCommon.Application["AppServer"] + ApplicationCommon.Application["strVirtualDirectory"] + "/index.asp?SHOWBANDO=" + GetValueFromRS(rsBandi.Fields["idmsg"]) + "]]></link>" + Environment.NewLine);
                htmlToReturn.Write("<category>" + getTipologia(CStr(GetValueFromRS(rsBandi.Fields["tipologia"]))) + "</category>" + Environment.NewLine);
                htmlToReturn.Write("<description>" + Environment.NewLine);
                htmlToReturn.Write(HtmlEncode("<p>" + GetValueFromRS(rsBandi.Fields["oggetto"]) + "</p>") + Environment.NewLine);
                string strdate = CStr(GetValueFromRS(rsBandi.Fields["expirydate"])).Replace("T", " ");
                strdate = Strings.Mid(strdate, 9, 2) + "/" + Strings.Mid(strdate, 6, 2) + "/" + Strings.Mid(strdate, 1, 4) + " " + Strings.Mid(strdate, 12, 5);
                htmlToReturn.Write(HtmlEncode("<span><strong>" + "Scadenza " + "</strong>" + strdate + "</span>") + Environment.NewLine);
                htmlToReturn.Write("</description>" + Environment.NewLine);
                htmlToReturn.Write("</item>" + Environment.NewLine);

                rsBandi.MoveNext();
            }
        }
        //'else	'-- SE NON SONO PRESENTI ELEMENTI
        //
        //'	response.write "<item>" & vbcrlf
        //'	response.write "<title>Nessun bando presente</title>" & vbcrlf
        //'	response.write "<description>" & vbcrlf
        //'	Response.Write server.htmlencode( "<p>Nessun bando presente</p>" )  & vbcrlf
        //'	response.write "</description>" & vbcrlf
        //'	response.write "</item>" & vbcrlf

    }
    htmlToReturn.Write("</channel>" + Environment.NewLine);
    htmlToReturn.Write("</rss>" + Environment.NewLine);

    //response.flush

    //' ***** Funzioni di utilità *****
    string getTipologia(string str)
    {
        string _getTipologia = "";
        switch (CStr(str))
        {
            case "1":
                _getTipologia = "Forniture";
                break;
            case "2":
                _getTipologia = "Lavori pubblici";
                break;
            case "3":
                _getTipologia = "Servizi";
                break;
            case "4":
                _getTipologia = "AltraTipologia";
                break;
            default:
                _getTipologia = str;
                break;
        }
        return _getTipologia;


    }
    string getTipoBando(string idmsg)
    {
        string ret = string.Empty;
        CommonDbFunctions cdf = new CommonDbFunctions();
        TSRecordSet? rsrs = null;
        string tipobando = string.Empty;

        rsrs = cdf.GetRSReadFromQuery_("select tipobando from tab_messaggi_fields where idmsg = " + idmsg, ApplicationCommon.Application.ConnectionString);

        rsrs.MoveFirst();

        tipobando = CStr(GetValueFromRS(rsrs.Fields["tipobando"]));
        ret = tipobando;
        string sql = "";

        ////'Faccio prima questa query andando per attributo dztnome =  tipobando e recupero il dztidtid
        rsrs = cdf.GetRSReadFromQuery_("select dztidtid from dizionarioattributi where dztnome = 'tipobando'", ApplicationCommon.Application.ConnectionString);

        if (rsrs.RecordCount > 0)
        {

            rsrs.MoveFirst();

            sql = "select * from tipidatirange,descsi where tdriddsc=iddsc and tdridtid=" + GetValueFromRS(rsrs.Fields["dztidtid"]) + " and tdrdeleted = 0 and tdrCodice = '" + tipobando + "'";

            rsrs = cdf.GetRSReadFromQuery_(sql, ApplicationCommon.Application.ConnectionString);

            if (rsrs.RecordCount > 0)
            {

                rsrs.MoveFirst();
                return GetValueFromRS(rsrs.Fields["dscTesto"]);
            }

        }
        return ret;
    }
    string formatPubDate(DateTime data)
    {
        string ret = string.Empty;

        string strDate = string.Empty;
        string giorno = string.Empty;
        string mese = string.Empty;
        string strdate = DateToStr(data).Replace("T", " ");

        return strdate;
    }
    string formatDate(DateTime data)
    {
        if (IsNull(data) == false)
        {
            string strDate = "";

            strDate = CStr(data).Replace("T", " ");
            strDate = Strings.Mid(strDate, 9, 2) + "/" + Strings.Mid(strDate, 6, 2) + "/" + Strings.Mid(strDate, 1, 4) + " " + Strings.Mid(strDate, 12, 5);
            return strDate;
        }
        else
        {
            return "";
        }
    }
    //'Tipi bandi che c'erano scritti nel pdf :
    //'Bando
    //'Esito
    //'Avviso
    string elabTemplate(dynamic templ, TSRecordSet objDocument)
    {
        //on error resume next
        long l;// ' Long
        long i;// ' Long
        long j;// ' Long
        string[] ss;// ' String
        string c;// ' String
        bool b;// ' Boolean
        Dictionary<string, string> Coll;// ' New Collection
        TSRecordSet? rs = null; //'As ADODB.Recordset

        string template = "";
        template = templ;
        Coll = new Dictionary<string, string>();
        string strTipo;// ' String
        string strField;// ' String
        string strItem; //' String
        dynamic VALORE;// ' Variant

        l = template.Length;
        b = false;
        j = 0;
        
        for (i = 1; i <= l; i++)
        {
            //' legge il carattere i-esimo
            c = Strings.Mid(template, CInt(i), 1);
            if (c == "#")
            {
                if (!b)
                {
                    b = true;
                    j = i;
                }
                else
                {
                    b = false;
                    strItem = Strings.Mid(template, CInt(j) + 1, CInt(i) - CInt(j) - 1);

                    try
                    {
                        Coll.Add(strItem, strItem);
                    }
                    catch
                    {
                        //err.Clear
                    }
                }
            }
        }
        //'stop

        string x = "";
        //' -- STEP 2: scorre la collezione dei campi da calcolare e poi li rimpiazza nell'espressione con il valore
        foreach (KeyValuePair<string, string> item in Coll)
        {
            x = item.Value;
            ss = x.Split(".");
            strTipo = ss[0].ToUpper();
            strField = ss[1];

            switch (strTipo)
            {
                case "DOCUMENT":

                    VALORE = "";
                    //'stop
                    CommonDbFunctions cdf = new CommonDbFunctions();
                    if (cdf.FieldExistsInRS(objDocument, strField))
                    {
                        switch (strField.ToUpper())
                        {
                            case "TIPOLOGIA":
                                VALORE = getTipologia(GetValueFromRS(objDocument.Fields[strField]));
                                break;

                            case "EXPIRYDATE":
                                VALORE = formatDate(GetValueFromRS(objDocument.Fields[strField]));
                                break;

                            case "RECEIVEDDATAMSG":
                                VALORE = formatPubDate(GetValueFromRS(objDocument.Fields[strField]));
                                break;

                            default:
                                VALORE = GetValueFromRS(objDocument.Fields[strField]);
                                break;
                        }
                    }
                    else //'-- Se la vista non ritorna ancora il tipo bando lo vado a recuperare a mano passando alla funzione l'idmsg
                    {
                        if (strField == "TIPOBANDO")
                        {
                            VALORE = "";
                            VALORE = getTipoBando(GetValueFromRS(objDocument.Fields["idmsg"]));
                        }
                    }
                    if (IsNull(VALORE))
                    {
                        VALORE = "";
                    }
                    template = template.Replace(CStr("#" + x + "#"), CStr(VALORE));
                    break;
                case "ML":

                    string strSql = "select dbo.CNV_ESTESA( ML_Description ,'I') as ML_Description from LIB_Multilinguismo with(nolock) where ML_KEY = '" + strField + "' and ML_LNG = 'I'";
                    CommonDbFunctions cd = new CommonDbFunctions();
                    rs = cd.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString);

                    string Value;// 'As String
                    Value = "";
                    if (!rs.EOF && rs.BOF)
                    {
                        rs.MoveFirst();
                        Value = GetValueFromRS(rs.Fields["ML_Description"]);
                    }
                    if (string.IsNullOrEmpty(Value))
                    {
                        Value = "???" + strField + "???";
                    }
                    template = template.Replace(CStr("#" + CStr(x) + "#"), CStr(Value));
                    break;
                default:
                    VALORE = "";
                    if (!IsNull(GetValueFromRS(objDocument.Fields[strField])))
                    {
                        VALORE = GetValueFromRS(objDocument.Fields[strField]);
                    }
                    break;


            }
        }
        
        return template;


    }


}@Html.Raw(htmlToReturn.Out())
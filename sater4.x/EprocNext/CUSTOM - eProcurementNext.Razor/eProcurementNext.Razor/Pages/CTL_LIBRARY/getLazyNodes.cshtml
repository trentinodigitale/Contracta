@page "/CTL_LIBRARY/getLazyNodes.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.HTML.BasicFunction;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.getLazyNodesModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using Microsoft.VisualBasic;
@using static eProcurementNext.Session.SessionMiddleware
@model eProcurementNext.Razor.Pages.CTL_LIBRARY.getLazyNodesModel
@{
	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();
}
@{
	//'-- PARAMETRI DI INPUT. in GET
	//'--		1. key		Chiave del nodo che si sta aprendo
	//'--		2. dominio  ID del dominio su cui ci troviamo
	//'--		3. format   format del dominio su cui ci troviamo
	//'--		4. editable Se il dominio � editabile o meno
	//'--		5. filter	Eventuale filter da applicare al dominio
	//'--		6. level	livello del nodo selezionato
	//'--		7. father	codice 'father' (path gerarchico),DMV_Father,  del nodo selzionato

	//'--	IN OUTPUT
	//'		Ritorno la lista dei nodi figli di 1 livello sottostante in formato JSON. [ { ... }, { ... }, ... ]

	bool debugMode = false;
	string res = "";
	if (debugMode) 
	{
		res = "[";
		res = res +  $@"{{ ""title"": ""Node 1"", ""key"": ""k1"", ""isLazy"": true }},";
		res = res +  $@"{{ ""title"": ""Node 2"", ""key"": ""k2"", ""isLazy"": false }},";
		res = res +  $@"{{ ""title"": ""Node 3"", ""key"": ""k3"", ""isLazy"": true }},";
		res = res +  $@"{{ ""title"": """ + HtmlEncode(CStr(GetParamURL(Request.QueryString.ToString(), "key") )) + $@""", ""key"": ""k4"", ""isLazy"": true }}";
		res = res +  $@",{{ ""title"": """ + GetQueryStringFromContext(Request.QueryString) + $@""", ""key"": ""k5"", ""isLazy"": true }}";
		res = res +  $@"]";
	} 
	else 
	{
		string key = CStr(GetParamURL(Request.QueryString.ToString(), "key"));
		string idDom = CStr(GetParamURL(Request.QueryString.ToString(), "dominio"));
		string father = CStr(GetParamURL(Request.QueryString.ToString(), "father"));
		string strFormat = CStr(GetParamURL(Request.QueryString.ToString(), "format"));
		string editable = CStr(GetParamURL(Request.QueryString.ToString(), "editable"));
		string Filtro = "";
		Filtro = CStr(GetParamURL(Request.QueryString.ToString(), "filter"));

		string strConnectionString = ApplicationCommon.Application.ConnectionString;
		string idpfu = CStr(session[eProcurementNext.Session.SessionProperty.IdPfu]);
		long level;
		if (GetParamURL(Request.QueryString.ToString(), "level") == "")
		{
			level = CLng(0);
		}
		else 
		{
			level = CLng(GetParamURL(Request.QueryString.ToString(), "level"));
		}

		//'------------------
		//'--- SICUREZZA ----
		//'------------------

		validate( "key", Strings.Replace(Strings.Replace(Strings.Replace(Strings.Replace(Strings.Replace(key,@".",@""),@"-",@""),@" ",@""),@"#",@""),@"\",@"") , TIPO_PARAMETRO_STRING,SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session); 
		validate( "dominio", idDom, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);
		validate( "editable", editable, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0,  HttpContext, session);
		validate( "format", Strings.Replace(strFormat,"-",""), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);
		validate( "FILTER", Filtro, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_FILTROSQL, "", 0, HttpContext, session);
		validate( "father", father, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_FILTROSQL, "", 0, HttpContext, session); //'-- giusto per impedire codice malevolo

		string PathImage = "../../CTL_Library/images/Domain/";

		//ObjSession = session("Session")
		string suffix= CStr(session[eProcurementNext.Session.SessionProperty.SESSION_SUFFIX]);

		string strQuery = "";
		string strSql = $@"select * from lib_domain where DM_ID = '" + Replace(idDom, $@"'", $@"''") + "'";

		string OldSort = "";

		TSRecordSet rs = GetRS(strSql);
		string sql = "";
		string oldSql = "";

		if (!IsNull(rs.Fields["DM_Query"])) 
		{
			strQuery = CStr(rs["DM_Query"]).Trim();
		}

		if (string.IsNullOrEmpty(strQuery)) 
		{
			sql = $@"select a.id, a.DMV_DM_ID,a.DMV_Cod,a.DMV_Father,a.DMV_Level,ISNULL( cast(ML_Description as nvarchar(max)),  a.DMV_DescML  ) as DMV_DescML,a.DMV_Image,a.DMV_Sort,a.DMV_CodExt,a.DMV_Module , a.DMV_Deleted  " + $@" from lib_domainvalues a WITH (NOLOCK) " + $@" left  join LIB_Multilinguismo WITH (NOLOCK) on   a.DMV_DescML = ML_KEY and ML_LNG = '" + suffix + "' " + $@" where DMV_DM_ID = '" + idDom.Replace("'", "''") + $@"' ";

			if (!string.IsNullOrEmpty(CStr(Filtro))) 
			{
				//'-- verif (ico se il filtro � una restrizione del tipo IN
				if ( Strings.Left(Filtro, 10).ToUpper() == "SQL_WHERE=" ) {

					sql = sql + " and ( " + MidVb6(Filtro, 11) + " ) ";
					sql = sql.Replace("<ID_USER>", CStr(idpfu));
				}
			}

			OldSort = " order by a.DMV_Father, a.dmv_sort ";
		} 
		else 
		{
			oldSql = strQuery;
			int ind = InStrVb6(1, oldSql.ToUpper(), "ORDER BY");

			if (ind > 0) 
			{ 
				OldSort = " " + Strings.Right( oldSql, oldSql.Length - ind + 1);
				oldSql = Strings.Left(oldSql, ind - 1);
			}

			oldSql = oldSql.Replace("#LNG#", suffix);

			if (!string.IsNullOrEmpty(CStr(Filtro)))
			{
				//'-- verif (ico se il filtro � una restrizione del tipo IN
				if ( Strings.Left(Filtro, 10).ToUpper() == "SQL_WHERE=" ) {

					sql = oldSql + " and ( " + MidVb6(Filtro, 11) + " ) ";
					sql = sql.Replace("<ID_USER>", idpfu);

				}
				else 
				{
					if (Filtro.ToUpper() == "IDPFU") 
					{
						sql = oldSql + " and  idpfu = " + idpfu;
					}
				}
			} 
			else 
			{
				sql = oldSql ;
			}
		}

		//'-- prendo tutti i nodi che iniziano per il codice selezionato e hanno un livello in pi�

		//'-----------------------------------------
		//'-- ricostruisco la query'
		//'-----------------------------------------
		strFormat = strFormat.ToUpper();
		bool SelectOnlyChild = true;

		if ( strFormat.Contains("A", StringComparison.Ordinal) ) {
			SelectOnlyChild = false;
		}

		//'-- prendo il dominio filtrato'
		string queryFinale = " set nocount on " + Environment.NewLine;

		//'-- normalizzo la query togliendo tab ed invii
		sql = sql.Replace(Environment.NewLine , " ");
		sql = sql.Replace(Strings.Chr(9).ToString(), " ");

		//'-- Aggiungo una colonna per determinare l'ordinamento richiesto, subito prima del primo FROM per evitare distinct
		if ( !string.IsNullOrEmpty(OldSort) ) {
			int indFrom = InStrVb6(1, UCase(sql), " FROM ");
			string L_SQL = Strings.Left( sql , indFrom );
			string R_SQL = Strings.Right( sql , sql.Length - indFrom - 4 );
			sql = L_SQL + " , ROW_NUMBER() over( " + OldSort + " ) as n_R_p_o FROM " + R_SQL;
		}

		queryFinale = queryFinale + "select * into #T0 from ( " + Environment.NewLine;
		queryFinale = queryFinale + sql + Environment.NewLine;
		queryFinale = queryFinale + " ) a " + Environment.NewLine;

		//'se presente la colonna dmv_deleted nella query sql filtro i valori a deleted
		int dmv_deleted = 0;
		if ( sql.ToUpper().Contains("DMV_DELETED", StringComparison.Ordinal) ) {
			dmv_deleted = 1;
		}

		//'verifica se presente la colonna DMV_Deleted
		if (dmv_deleted == 0)
		{
			//err.Clear		
			try
			{
				TSRecordSet rs_t = GetRS_noEventViewer(sql.ToUpper().Replace("SELECT ", "SELECT top 0 dmv_deleted, "));
				dmv_deleted = 1;
			}
			catch
			{

			}		
		}	

		//'solo se presente la colonna e non � richiesto di vedere i deleted aggiungo la where
		if ( dmv_deleted == 1 && !strFormat.Contains("Y", StringComparison.Ordinal) ) { 
			queryFinale = queryFinale + " where ISNULL(dmv_deleted,0) = 0 " + Environment.NewLine;
		}

		//'-- applico la restrizione al ramo richiesto'
		queryFinale = queryFinale + $@" select * into #T1 from #T0 where DMV_Level = " + CStr((level + 1));
		queryFinale = queryFinale + $@"	and Left( DMV_Father, Len('" + father.Replace("'", "''") + "')) = '" + father.Replace("'", "''") + "'";

		//'-- se necessario verif (ico se il nodo risultato � una foglia o un ramo
		if (SelectOnlyChild) 
		{
			queryFinale = queryFinale + @" select distinct t1.DMV_Father into #TF from #T0 T0 INNER JOIN #t1 t1 on left( t0.DMV_Father , len( t1.DMV_Father)) = t1.DMV_Father and t0.DMV_Level = t1.DMV_Level + 1 ";

			queryFinale = queryFinale + " select a.* , case when b.DMV_Father is null then '1' else '0' end as foglia ";
			queryFinale = queryFinale + " from #T1 a  left join #TF  b on a.DMV_Father = b.DMV_Father ";  
		}
		else 
		{
			queryFinale = queryFinale + " select a.* , '0' as foglia  from #T1 a ";
		}

		//'-- nel caso in cui sulla query era stato applicato un ordinamento � stata generata una colonna che rispecchia l'ordinamento richiesto
		//'-- quindi si va a sfruttare questa colonna per applicarlo sul risultato
		if (!string.IsNullOrEmpty(OldSort)) 
		{
			queryFinale = queryFinale + " order by n_R_p_o ";
		}
		else 
		{ 
			//'-- altrimenti si applica l'ordinamento base dei gerarchici
			queryFinale = queryFinale + " order by a.DMV_Father, a.dmv_sort ";
		}

		rs = GetRS(queryFinale);
		rs.MoveFirst();

		int k = 0;

		if (rs.RecordCount > 0) 
		{
			res = "[";	
			k = 1;
		}

		while (!rs.EOF)
		{
			//err.Clear 

			dynamic id    =  rs.Fields["DMV_Cod"];
			dynamic Path  =  rs.Fields["DMV_Father"];
			dynamic Desc  =  rs.Fields["DMV_DescML"];
			level =  CLng(rs.Fields["DMV_Level"]);
			dynamic icon  =  rs.Fields["DMV_Image"];
			dynamic codExt = rs.Fields["DMV_CodExt"];

			//err.Clear

			int deleted = 0;
			try
			{
				deleted = CInt(rs.Fields["DMV_Deleted"]);
				if (IsNull(rs["DMV_Deleted"])) 
				{
					deleted = 0;
				}
			}
			catch
			{
				deleted = 0;
			}

			int foglia = 1;// codice originale era foglia = true
			foglia = CInt(rs["foglia"]!);
			//err.clear
			string visValue;
			if (deleted == 0) 
			{
				visValue = "";

				//'-- Se nella format non c'� ne la C ne la D, lascio il default che visualizza la descrizione e basta
				if ( !strFormat.Contains("C", StringComparison.Ordinal) && !strFormat.Contains("D", StringComparison.Ordinal) ) {
					visValue = CStr(Desc);
				}

				if ( strFormat.Contains("C", StringComparison.Ordinal)) {
					visValue = CStr(codExt);
				}

				if ( strFormat.Contains("D", StringComparison.Ordinal)) {

					if ( !string.IsNullOrEmpty(visValue) ) {
						visValue = visValue + " - ";
					}

					visValue = visValue + Desc;
				}

				res = res + $@"{{ ""title"": """ + escapeJson(visValue) + $@""", ""key"": """ + escapeJson(CStr(id)) + $@""",";
				res = res + $@"""icon"": """ + escapeJson(CStr(icon)) + $@""" , ""father"": """ + escapeJson(CStr(Path)) + $@""" , ""level"": """ + CStr(level) + $@"""";

				//'-- se l'elemento � un nodo (quindi non ha figli) disattivo il lazy cos� da non far uscire il "+" con la possibilit�
				//'-- di espandere il nodo e fare la richiesta al server per sapere poi che non ha nodi
				if (foglia == 1) 
				{
					res = res + $@",""isLazy"": false";
				} 
				else 
				{
					res = res + $@",""isLazy"": true";
				}

				//'-- se non sono su una foglia e non � stato scelto di selezionare tutti i nodi allora rendo il nodo corrente non selezionabile
				if (foglia == 0 && SelectOnlyChild) 
				{
					res = res + $@",""unselectable"": true";
				}
				else 
				{
					res = res + $@",""unselectable"": false";
				}

				res = res + $@"}}";

				if (k < rs.RecordCount) 
				{
					res = res + ",";
				}
			}

			k = k + 1;
			rs.MoveNext();
		}

		if (rs.RecordCount > 0) 
		{
			if (Strings.Right(res,1) == ",") 
			{
				res = Strings.Left(res, res.Length - 1);
			}

			res = res +  "]";
		}
	}

	//'Aggiunto supporto per il protocollo JSONP.
	//'Se in request c'� l'argomento '?callback=xxx',
	//'il risultato in output sar� : 'xxx(result)'
	if (!string.IsNullOrEmpty(CStr(GetParamURL(Request.QueryString.ToString(), "callback")).Trim()))
	{
		res = CStr(GetParamURL(Request.QueryString.ToString(), "callback")).Trim() + "(" + res + ")";
	}

	//' imposto il content type di output come json
	//Response.CodePage = 65001
	Response.ContentType = "application/json;charset=UTF-8";
	htmlToReturn.Write(res);
	//'response.end

	//'-- Parametri impostabili sui nodi ritornati
	//'{
	//'    title: null, // (required) Displayed name of the node (html is allowed here)
	//'    key: null, // May be used with activate(), select(), find(), ...
	//'    isFolder: false, // Use a folder icon. Also the node is expandable but not selectable.
	//'    isLazy: false, // Call onLazyRead(), when the node is expanded for the first time to allow for delayed creation of children.
	//'    tooltip: null, // Show this popup text.
	//'    href: null, // Added to the generated <a> tag.
	//'    icon: null, // Use a custom image (filename relative to tree.options.imagePath). 'null' for default icon, 'false' for no icon.
	//'    addClass: null, // Class name added to the node's span tag.
	//'    noLink: false, // Use <span> instead of <a> tag for this node
	//'    activate: false, // Initial active status.
	//'    focus: false, // Initial focused status.
	//'    expand: false, // Initial expanded status.
	//'    select: false, // Initial selected status.
	//'    hideCheckbox: false, // Suppress checkbox display for this node.
	//'    unselectable: false, // Prevent selection.
	//'    // The following attributes are only valid if passed to some functions:
	//'    children: null // Array of child nodes.
	//'    // NOTE: we can also add custom attributes here.
	//'    // This may then also be used in the onActivate(), onSelect() or onLazyTree() callbacks.
	//'}

	TSRecordSet GetRS( string strSql){

		//dim obj
		//dim rs

		//set obj = server.CreateObject("ctldb.clsTabManage")
		return cdf.GetRSReadFromQuery_( CStr(strSql ) , CStr(ApplicationCommon.Application["ConnectionString"]) );


		//set GetRS = rs

	}

	string escapeJson(string str)
	{	
		string strToReturn;
		//'--ripulisco i caratteri non ammessi
		strToReturn = NormString(str);

		string acapo = Strings.Chr(13).ToString() + Strings.Chr(10).ToString();

		strToReturn = strToReturn.Replace($@"\", $@"\\");
		strToReturn =  strToReturn.Replace($@"""", $@"\""");
		strToReturn =  strToReturn.Replace(acapo, $@" ");

		return strToReturn;
	}

	string NormString(string str)
	{
		//'--agg caratteri accentati
		string strOk = @" ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.:,;''|!""£$%&/()=?^+*§°çàèéùòìÀÈÉÙÒÌ\#";

		string Tmp = str;

		string ValueOut = "";
		while (!string.IsNullOrEmpty(Tmp))
		{
			string NCH = Strings.Left(Tmp, 1);

			if (strOk.Contains(NCH.ToUpper(), StringComparison.Ordinal)){

				ValueOut = ValueOut + NCH;
			}
			Tmp = Strings.Right(Tmp, Tmp.Length-1 );
		}

		return ValueOut;
	}

	TSRecordSet GetRS_noEventViewer(string strSql){

		//ADODB.Connection connAtt = new ADODB.Connection();

		//connAtt.ConnectionString = cstr(ApplicationCommon.Application["ConnectionString"]);

		//connAtt.Open();

		TSRecordSet rsMsg = new TSRecordSet();

		//rsMsg.CursorLocation = (ADODB.CursorLocationEnum)3; //'adUseClient
		//rsMsg.CursorType = (ADODB.CursorTypeEnum)1; //'adOpenKeyset
		//rsMsg.LockType = (ADODB.LockTypeEnum)1; //'adLockReadOnly
		//rsMsg.ActiveConnection = connAtt;

		//rsMsg.Open(strSql);

		//connAtt.Close();

		rsMsg = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application["ConnectionString"]);

		return rsMsg;

	
	}


}
@Html.Raw(htmlToReturn.Out())
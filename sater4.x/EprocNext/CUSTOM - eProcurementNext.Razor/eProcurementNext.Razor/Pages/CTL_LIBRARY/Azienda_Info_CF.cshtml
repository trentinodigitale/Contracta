@page "/CTL_LIBRARY/Azienda_Info_CF.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.Azienda_Info_CFModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.Azienda_info_extModel;
@using Microsoft.VisualBasic;
@using static eProcurementNext.Session.SessionMiddleware
@model eProcurementNext.Razor.Pages.CTL_LIBRARY.Azienda_Info_CFModel
@*
<!-- #INCLUDE FILE="../ctl_library/functions/cnv.inc" -->
<!-- #Include File="../ctl_library/functions/CheckSession.inc" -->
<!-- #INCLUDE FILE="../ctl_library/Functions/security.inc" -->
<!-- #INCLUDE FILE="../ctl_library/Document/common.asp" -->
<!-- #INCLUDE FILE="../ctl_library/functions/Azienda_info_ext.inc" -->

*@
@{
	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();
}
@{
	string CF = GetParamURL(Request.QueryString.ToString(), "CF"); //'-- prendere il codice fiscale
	string CHIAVE_GUID = GetParamURL(Request.QueryString.ToString(), "GUID"); //'-- valore della colonna 'guid' della ctl_doc. recuperata tramite 'VIEW_URL_PARAMS'

	//'-- validare rispetto ad una stringa table like, OPPURE possiamo usare un RegEx
	validate("CF", CF, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 1, HttpContext, session);
	validate("GUID", CHIAVE_GUID, TIPO_PARAMETRO_STRING, 0, @"^([-{}\w]*[\{\}0-9A-Fa-f])*$", 0, HttpContext, session);	

	if (string.IsNullOrEmpty(CHIAVE_GUID)) 
	{
		generaChiaveSessione();
	} 
	else 
	{
		session["SESSION_WORK_KEY"] = CHIAVE_GUID;
		session.Save();
	}

	if (!string.IsNullOrEmpty(CF)) 
	{
		string esito_chiamata;

		if (!string.IsNullOrEmpty(CHIAVE_GUID)) 
		{
			//'Se non esiste il record in base alla CHIAVE_GUID ed al CF RICHIESTO avvio la chiamata al servizio esterno
			//'Se esiste il record in base alla CHIAVE_GUID ed al CF RICHIESTO e la dataInserimneto è diversa da oggi  avvio la chiamata al servizio esterno
			//'Altrimenti do l'esito positivo
			//Set objDB = CreateObject("ctldb.clstabmanage")
			//dim rs
			TSRecordSet rs = cdf.GetRSReadFromQuery_(CStr("SELECT * FROM Parix_Dati with (nolock) WHERE sessionid='" + CHIAVE_GUID.Replace("'", "''") + "' AND nome_campo = 'codicefiscale' AND  valore = '" + CF.Replace("'", "''") + "' AND CAST( dataInserimento  AS Date ) =  CAST( GETDATE() AS Date )"), ApplicationCommon.Application.ConnectionString);
			if (rs.RecordCount <= 0) 
			{
				esito_chiamata = Get_Dati_Azienda_Ext(CF, session, htmlToReturn);
			} 
			else 
			{
				esito_chiamata = "";
			}
		} 
		else 
		{
			esito_chiamata = Get_Dati_Azienda_Ext(CF, session, htmlToReturn);
		}

		if (string.IsNullOrEmpty(CStr(esito_chiamata))) 
		{
			htmlToReturn.Write("1#OK");
		} 
		else 
		{
			//'-- capire se ritornare errore o dare sempre un ok
			//'-- POTREBBE uscirebbe un msg/errore tecnico a video 
			htmlToReturn.Write("0#" + esito_chiamata);
		}
	} 
	else 
	{
		htmlToReturn.Write("0#CODICE FISCALE NON TROVATO");
	}

	string timestamp(DateTime data) 
	{
		return DateAndTime.DateDiff("s", "01/01/1970 00:00:00", data).ToString();
	}

	string generaChiaveSessione() 
	{
		string sessionid = CStr(this.session.SessionID);
		string addKey = CStr(timestamp(DateAndTime.Now));
		addKey = Strings.Right(addKey, addKey.Length - 2);
		string extendedSessionId = addKey + sessionid;

		//'-- normalizzo togliendo gli 0 a sinistra
		while (!string.IsNullOrEmpty(extendedSessionId) && Strings.Left(extendedSessionId, 1) == "0")
		{
			extendedSessionId = Strings.Right(extendedSessionId, extendedSessionId.Length - 1);
		}

		session["SESSION_WORK_KEY"] = extendedSessionId;
		session.Save();
		return Strings.Left(extendedSessionId, 50);
	}
}
@Html.Raw(htmlToReturn.Out())
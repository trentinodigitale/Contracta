@page "/login.asp"
@inject eProcurementNext.Session.ISession session;
@inject eProcurementNext.BizDB.ITabManage _TabManage;
@inject IConfiguration configuration;
@inject eProcurementNext.Authentication.IEprocNextAuthentication _JWTauth;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.CommonModule
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using eProcurementNext.CommonDB;
@using static eProcurementNext.Razor.Pages.loginModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.net_utilsModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.captcha_accessModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.trace_in_log_utenteModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.ctl_profiler;
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.Extensions.Primitives
@using Microsoft.VisualBasic;
@using System.Web
@using System.IO;
@using System.Security.Claims
@using static eProcurementNext.Razor.Pages.Functions.costanti;
@using static eProcurementNext.Session.SessionMiddleware;
@model eProcurementNext.Razor.Pages.loginModel
@*
<!-- #Include File="CTL_LIBRARY/functions/CTL_Profiler.inc" -->

<!-- #INCLUDE File="CTL_LIBRARY/FUNCTIONS/CheckBlacklist.inc" -->
<!-- #INCLUDE File="Functions/verificabrowser.inc" -->
<!-- #INCLUDE FILE="./CTL_LIBRARY/functions/security.inc" -->
<!-- #INCLUDE FILE="CTL_LIBRARY/FUNCTIONS/AntiFixation.inc" -->
<!-- #INCLUDE File="./CTL_Library/functions/trace_in_log_utente.inc" -->
<!-- #Include File="./CTL_Library/functions/captcha_access.inc" -->
<!-- #INCLUDE FILE="./CTL_LIBRARY/functions/net_utils.inc" -->

*@
@{
    LoadSession(HttpContext, session);

    dynamic TimeStartPage = DateTime.Now.Ticks;
    CommonDbFunctions cdf = new CommonDbFunctions();
    EprocResponse htmlToReturn = new EprocResponse(GetParamURL(HttpContext.Request.QueryString.ToString(), "XML_ATTACH_TYPE"));
    string token = session.SessionID;

    DeleteAllCookies(HttpContext);

    List<Claim> claims = new List<Claim>
            {
                new Claim("JWT_Token", token)
            };

    bool Cookie_HttpOnly = CStr(ConfigurationServices.GetKey("Cookie_HttpOnly", "true")).ToLower() == "true";
    bool Cookie_Secure = CStr(ConfigurationServices.GetKey("Cookie_Secure", "true")).ToLower() == "true";
    //session.Init(token);
    //session.Load(token);
    //MainGlobalAsa.Session_onStart(session);
}
@*
<!-- #INCLUDE File="Functions/Initialize_Component.asp" -->
<!-- #INCLUDE File="Functions/costanti.asp" -->
<!-- #INCLUDE File="Functions/Permessi.asp" -->
<!-- #INCLUDE File="ctl_library/Functions/cnv.inc" -->
<!-- #INCLUDE FILE="Functions/ConvertiData.inc" -->
*@
@{

    string strSuffLing = "";

    if (!string.IsNullOrEmpty(session["strSuffLing"]))
    {
        strSuffLing = CStr(session["strSuffLing"]);
    }

    if (!string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "A")))
    {
        strSuffLing = GetParamURL(Request.QueryString.ToString(), "A");
        session["strSuffLing"] = strSuffLing;
        session.Save();
    }

    if (string.IsNullOrEmpty(strSuffLing))
    {
        if (string.IsNullOrEmpty(session["strSuffLing"]))
        {
            strSuffLing = "I";
            session["strSuffLing"] = "I";
            session.Save();
        }
    }

    //'-- Alzo il flag per segnalare al global.asa, metodo application_onend, che questa virtual directory è soggetta a login, non è quindi una virtual directory di servizio (come quella per gli allegati di firma)
    ApplicationCommon.Application["appWithLogin"] = "1";

    //'set objAzienda = mycreateobject(BuildProgId("AFLAzienda.Azienda") ,AppServer)
    //'if err.number<> 0 then
    //'	call errore(err.number,"CNV.asp","objAzienda." & err.description)
    //'end if

    //'set objMP = mycreateobject(BuildProgId("AFLSrv.BOMarketPlace") ,AppServer)
    //'if err.number<> 0 then
    //'	call errore(err.number,"CNV.asp","objMP." & err.description)
    //'end if

    //'validazione input utente
    validate("strMnemonicoMP", GetValueFromForm(Request, "strMnemonicoMP").Trim(), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0, HttpContext, session);
    validate("strMnemonicoMP", GetParamURL(Request.QueryString.ToString(), "strMnemonicoMP").Trim(), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0, HttpContext, session);
    validate("FlagCheckWeb", GetValueFromForm(Request, "FlagCheckWeb").Trim(), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0, HttpContext, session);
    validate("PartenzaSeller", GetValueFromForm(Request, "PartenzaSeller").Trim(), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0, HttpContext, session);



    //'----------------------------------------------------------------------------------------------------
    //'--------------------------RACCOLTA DATI---------------------------------------------
    dynamic IdCompany;      //'Codice dell'azienda
    dynamic Login;          //'login dell'utente o dell'azienda in caso di prospect
    dynamic Password;       //'password dell'utente o dell'azienda in caso di prospect
    string chiamante = "";      //'indica da quale form proveniamo
    dynamic? ITypeAzi = null;       //'identificativo del tipo di azienda
    dynamic? ICodeAzi = null;       //'identificativo dell'azienda
    dynamic? RagSociale = null;     //'ragione sociale dell' azienda
    dynamic IdPfu;          //'identificativo di tipo numerico dell'utente
    dynamic sLng;           //'suffisso lingua dell'utente
    dynamic sProfilo;       //'profilo dell'utente A,B,S,AB,AS,ABS
    dynamic UserName;       //'descrizione dell'utente
    dynamic IDAZI;          //'identificativo dell'azienda
    dynamic Funzionalita;   //'stringa delle funzionalit� dell'utente
    string strFormDiProvenienza = "";   //'indica la form da cui provengo: se ha valore=1 vuol dire che provengo dalla form del
                                        //'folder MyHomePage; se � vuoto vuol dire che vengo dal form di Application
    string strAvailRisVideo;        //'flag che mi dice che tipo di risoluzione adotta l'utente
                                    //'se=1 vuol dire che la risoluzione � 1024x768
                                    //'se=0 vuol dire che la risoluzione � 800x600

    string NoOpenNewPage = "";

    string strSql;
    dynamic FlagCheckWeb;
    dynamic strMnemonicoMP;
    TSRecordSet? rs = null;

    dynamic LoginFedera;
    dynamic? tabIdAzi = null;

    StreamWriter? fileTextLog = null;
    string stridentUserForlog = string.Empty;

    string accessGUID = string.Empty;

    string procedi = CStr(GetParamURL(Request.QueryString.ToString(), "getownses")).ToUpper();

    var sqlParams = new Dictionary<string, object?>();

    //'-- SE NON PROVENIAMO DALLA CONFERMA UTENTE PER PRENDERE IL CONTROLLO DELLA SESSIONE
    //'-- IN PRESENZA DI SESSIONI MULTIPLE
    if (string.IsNullOrEmpty(procedi))
    {
        session["redirectback"] = GetParamURL(Request.QueryString.ToString(), "redirectback");
        StringValues tempVariable;
        if (Request.HasFormContentType && !Request.Form.TryGetValue("strMnemonicoMP", out tempVariable))
        {
            session["strMnemonicoMP"] = "";
        }
        else
        {
            //session["strMnemonicoMP"] = tempVariable.First() != null ? tempVariable.First() : "";
            session["strMnemonicoMP"] = !string.IsNullOrEmpty(tempVariable) ? tempVariable.First() : "";
        }
        if (Request.HasFormContentType && !Request.Form.TryGetValue("FlagCheckWeb", out tempVariable))
        {
            session["FlagCheckWeb"] = "";
        }
        else
        {
            //session["FlagCheckWeb"] = tempVariable.First() != null ? tempVariable.First() : "";
            session["FlagCheckWeb"] = !string.IsNullOrEmpty(tempVariable) ? tempVariable.First() : "";
        }
        if (Request.HasFormContentType && !Request.Form.TryGetValue("IDAZIENDA", out tempVariable))
        {
            session["IDAZIENDA"] = "";
        }
        else
        {
            //session["IDAZIENDA"] = tempVariable.First() != null ? tempVariable.First() : "";
            session["IDAZIENDA"] = !string.IsNullOrEmpty(tempVariable) ? tempVariable.First() : "";
        }
        if (Request.HasFormContentType && !Request.Form.TryGetValue("PartenzaSeller", out tempVariable))
        {
            session["PartenzaSeller"] = "";
        }
        else
        {
            //session["PartenzaSeller"] = tempVariable.First() != null ? tempVariable.First() : "";
            session["PartenzaSeller"] = !string.IsNullOrEmpty(tempVariable) ? tempVariable.First() : "";
        }
        if (Request.HasFormContentType && !Request.Form.TryGetValue("AvailRisVideo", out tempVariable))
        {
            session["AvailRisVideo"] = "";
        }
        else
        {
            //session["AvailRisVideo"] = tempVariable.First() != null ? tempVariable.First() : "";
            session["AvailRisVideo"] = !string.IsNullOrEmpty(tempVariable) ? tempVariable.First() : "";
        }
        if (Request.HasFormContentType && !Request.Form.TryGetValue("ProvenienzaMyHomePage", out tempVariable))
        {
            session["ProvenienzaMyHomePage"] = "";
        }
        else
        {
            //session["ProvenienzaMyHomePage"] = tempVariable.First() != null ? tempVariable.First() : "";
            session["ProvenienzaMyHomePage"] = !string.IsNullOrEmpty(tempVariable) ? tempVariable.First() : "";
        }
        if (Request.HasFormContentType && !Request.Form.TryGetValue("closeparent", out tempVariable))
        {
            session["closeparent"] = "";
        }
        else
        {
            //session["closeparent"] = tempVariable.First() != null ? tempVariable.First() : "";
            session["closeparent"] = !string.IsNullOrEmpty(tempVariable) ? tempVariable.First() : "";
        }
        if (Request.HasFormContentType && !Request.Form.TryGetValue("USERNAME", out tempVariable))
        {
            session["USERNAME"] = "";
        }
        else
        {
            session["USERNAME"] = !string.IsNullOrEmpty(tempVariable) ? tempVariable.First() : "";
        }
        if (Request.HasFormContentType && !Request.Form.TryGetValue("PASSWORD", out tempVariable))
        {
            Password = "";
            //session["PASSWORD"] = "";
        }
        else
        {
            Password = !string.IsNullOrEmpty(tempVariable) ? tempVariable.First() : "";
            //session["PASSWORD"] = !String.IsNullOrEmpty(tempVariable) tempVariable.First() : "";
        }
        if (Request.HasFormContentType && !Request.Form.TryGetValue("ajax", out tempVariable))
        {
            session["ajax"] = "";
        }
        else
        {
            session["ajax"] = !string.IsNullOrEmpty(tempVariable) ? tempVariable.First() : "";
        }
        if (Request.HasFormContentType && !Request.Form.TryGetValue("IDMSGPARTECIPA", out tempVariable))
        {
            session["IDMSGPARTECIPA"] = "";
        }
        else
        {
            session["IDMSGPARTECIPA"] = !string.IsNullOrEmpty(tempVariable) ? tempVariable.First() : "";
        }
        if (Request.HasFormContentType && !Request.Form.TryGetValue("STRURLPARTECIPA", out tempVariable))
        {
            session["STRURLPARTECIPA"] = "";
        }
        else
        {
            session["STRURLPARTECIPA"] = !string.IsNullOrEmpty(tempVariable) ? tempVariable.First() : "";
        }
        if (Request.HasFormContentType && !Request.Form.TryGetValue("strCheckIscrizione", out tempVariable))
        {
            session["strCheckIscrizione"] = "";
        }
        else
        {
            session["strCheckIscrizione"] = !string.IsNullOrEmpty(tempVariable) ? tempVariable.First() : "";
        }

        bool bPrimoLogin = true;
        strAvailRisVideo = CStr(session["AvailRisVideo"]);
        strFormDiProvenienza = CStr(session["ProvenienzaMyHomePage"]);
        chiamante = GetParamURL(Request.QueryString.ToString(), "chiamante");

        NoOpenNewPage = GetParamURL(Request.QueryString.ToString(), "NoOpenNewPage");
        var closeParent = session["closeparent"];
        session["closeParent"] = closeParent;
        session.Save();


        if (!string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "UpdateContratto")))
        {
            Login = session["Login"];
            //Password = session["Password"];
            IdCompany = session["IdCompany"];
            FlagCheckWeb = GetParamURL(Request.QueryString.ToString(), "FlagCheckWeb");
            strMnemonicoMP = session["MnemonicoMPCurr"];
            chiamante = CStr(session["chiamante"]);
        }
        else
        {
            Login = session["USERNAME"];//'login dell'utente
                                        //Password = session["PASSWORD"];
            IdCompany = session["IDAZIENDA"];//'identificativo dell'azienda
            FlagCheckWeb = session["PartenzaSeller"];//'indica la form da cui parto: assume i seguenti valori se 1=seller o buyer<>1
            strMnemonicoMP = session["strMnemonicoMP"].Trim();
        }

        session["FlagCheckWeb"] = FlagCheckWeb;

        LoginFedera = 0;

        //'---------------------------------------
        //'-- GESTIONE LOGIN CON ACCESS GUID  ----
        //'---------------------------------------
        accessGUID = GetParamURL(Request.QueryString.ToString(), "acckey");

        if (!string.IsNullOrEmpty(accessGUID))
        {
            int accessGuidIdpfu = getAccessFromGuid(accessGUID);

            if (!string.IsNullOrEmpty(CStr(accessGuidIdpfu)))
            {
                //'-- cerca  il codice azienda a partire dalla login e pwd
                sqlParams.Add("@accessGuidIdpfu", accessGuidIdpfu);
                rs = cdf.GetRSReadFromQuery_("select IdAzi, pfuLogin, pfuPassword, aziLog, aziRagioneSociale, pfuFunzionalita, idPfu, lngSuffisso, pfuNome, pfuProfili from ProfiliUtente with(nolock) inner join Aziende with(nolock) on pfuIdAzi = IdAzi inner join Lingue with(nolock) on IdLng = pfuIdLng where IdPfu = @accessGuidIdpfu", ApplicationCommon.Application.ConnectionString, sqlParams);

                if (rs is not null && rs.RecordCount > 0)
                {
                    rs.MoveFirst();

                    LoginFedera = 1;    //'-- sfrutto la stessa variabile utilizzata per federa visto che viene gi� testata successivamente nella pagina
                    IdCompany = CStr(rs["aziLog"]);

                    Login = CStr(rs["pfuLogin"]);
                    Password = CStr(rs["pfuLogin"]); //'--coincide pwd e login per il check di lunghezza faccio dopo.
                    IdCompany = CStr(rs["aziLog"]);
                    tabIdAzi = rs.Fields["idAzi"];
                    if (string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "strMnemonicoMP")))
                    {
                        strMnemonicoMP = "PA";
                    }
                    else
                    {
                        strMnemonicoMP = GetParamURL(Request.QueryString.ToString(), "strMnemonicoMP");
                        session["strMnemonicoMP"] = GetParamURL(Request.QueryString.ToString(), "strMnemonicoMP");
                    }
                }
                else
                {
                    htmlToReturn.Write("accessGuid + idpfu non valido");
                    throw new ResponseEndException(htmlToReturn.Out(), Response, "accessGuid + idpfu non valido");
                    //response.end
                }
            }
            else
            {
                htmlToReturn.Write("accesso non valido o finestra temporale superata");
                throw new ResponseEndException(htmlToReturn.Out(), Response, "accesso non valido o finestra temporale superata");
                //response.end
            }
        }

        //'------------- ACCESSO ALL'APPLICAZIONE TRAMITE LOGIN FEDERATO
        if (!string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "LOGINFEDERA")))
        {
            DebugTrace dt = new DebugTrace();
            dt.Write("Accesso LOGINFEDERA: " + Request.QueryString.ToString());
            //'-- verifica che esista il collegamento con federa
            string USER_CF = string.Empty;

            string guid = GetParamURL(Request.QueryString.ToString(), "LOGINFEDERA");
            dt.Write("Guid: " + guid);
            DateTime federaOra = DateTime.Now.AddDays(-1); //Retrodatiamo la data corrente di -1 per lasciare il default come controllo non superato (Bug n° 567)
            var ternaFedera = getFederaValues(guid); //'now & "@@@" & login & "@@@" & codicefiscale
            dt.Write("Terna Federa: " + ternaFedera);
            if (!string.IsNullOrEmpty(ternaFedera))
            {
                try
                {
                    string[] fv = Strings.Split(ternaFedera, "@@@");
                    if (fv.Length >= 3)
                    {
                        federaOra = CDate(fv[0]);
                        Login = fv[1];
                        USER_CF = fv[2];
                    }
                }
                catch (Exception ex)
                {
                    eProcurementNext.CommonDB.Basic.TraceErr(ex, ApplicationCommon.Application.ConnectionString);
                }
            }

            TSRecordSet rsTmp;

            //'-- se il tempo trascorso dal collegamento a federa è inferiore a 30 minuti
            if (Math.Abs(DateAndTime.DateDiff("n", federaOra, DateAndTime.Now)) < 30)
            {
                if (!string.IsNullOrEmpty(Login))
                {
                    //'-- cerca  il codice azienda a partire dalla login e pwd
                    var TMPTK = CStr(GetParamURL(Request.QueryString.ToString(), "TMPTK"));

                    //'- se � stato passato il token temporaneo per agganciarci all'id token IAM
                    if (!string.IsNullOrEmpty(TMPTK))
                    {
                        //'-- lo recuperiamo e lo mettiamo in sessione
                        rsTmp = cdf.GetRSReadFromQuery_(CStr("exec SSO_GET_ID_TOKEN '" + TMPTK.Replace("'", "''") + "'"), ApplicationCommon.Application["ConnectionString"]);

                        if (rsTmp.RecordCount > 0)
                        {
                            var idToken = rsTmp.Fields["idToken"];

                            dt.Write("E' stato recuperato il token di accesso: " + CStr(idToken));                      
                            session["OPEN_ID_TOKEN"] = CStr(idToken);
                        }
                    }

                    string strSelectLogin = "select pfulogin , pfupassword , azilog  , aziRagioneSociale , pfuFunzionalita , idPfu , lngSuffisso , pfunome , pfuProfili  from profiliutente with(nolock) inner join  aziende with(nolock) on pfuidazi = idazi inner join lingue on IdLng = pfuIdLng where ( pfuCodiceFiscale = '" + USER_CF.Replace("'", "''") + "' or pfuUserID = '" + USER_CF.Replace("'", "''") + "' ) and pfuidazi = " + GetParamURL(Request.QueryString.ToString(), "FEDERA_AZI");

                    string strSqlCheckBlock = "select rel_valueinput as conditionSQL, rel_valueoutput as mlng from CTL_Relations with(nolock) where  REL_Type = 'CHECK_LOGIN_ACCESS' and REL_ValueInput <> ''";

                    rsTmp = cdf.GetRSReadFromQuery_(CStr(strSqlCheckBlock), ApplicationCommon.Application["ConnectionString"]);

                    //'-- se esiste la relazione CHECK_LOGIN_ACCESS con una condizione di blocco valorizzata
                    for (int i = 0; i < rsTmp.RecordCount; i++)
                    {
                        dt.Write("Esiste la relazione CHECK_LOGIN_ACCESS con una condizione di blocco valorizzata");
                        string strConditionSQL = CStr(rsTmp.Fields["conditionSQL"]);
                        string strBlockMlng = CStr(rsTmp.Fields["mlng"]);

                        string strNewSelect = strSelectLogin + " and ( " + strConditionSQL + " ) ";

                        TSRecordSet rsTmp2 = cdf.GetRSReadFromQuery_(CStr(strNewSelect), ApplicationCommon.Application["ConnectionString"]);

                        //'-- SE L'UTENTE RIENTRA NELLA CONDIZIONE DI BLOCCO PREVISTA DALLA RELAZIONE CHECK_LOGIN_ACCESS, BLOCCHIAMO CON IL MSG INDICATO NELLA RELAZIONE STESSA
                        if (rsTmp2.RecordCount > 0)
                        {
                            dt.Write("L'UTENTE RIENTRA NELLA CONDIZIONE DI BLOCCO PREVISTA DALLA RELAZIONE CHECK_LOGIN_ACCESS, QUINDI BLOCCHIAMO CON IL MSG: " + CStr(strBlockMlng));
                            throw new ResponseRedirectException("./OpenID/output.asp?lo=lista_attivita&ACCESSO=CNV&KEY_MLNG=" + strBlockMlng, Response);
                        }

                        //set rsTmp2 = nothing

                        rsTmp.MoveNext();

                    }

                    //set rsTmp = nothing

                    rs = cdf.GetRSReadFromQuery_(CStr(strSelectLogin), ApplicationCommon.Application["ConnectionString"]);

                    if (rs.RecordCount > 0)
                    {
                        dt.Write("Utente trovato nella profiliutente");
                        LoginFedera = 1;

                        IdCompany = rs.Fields["azilog"];

                        Login = rs.Fields["pfulogin"];
                        Password = rs.Fields["pfulogin"];
                        IdCompany = rs.Fields["azilog"];
                        strMnemonicoMP = "PA"; //'Request.querystring( "strMnemonicoMP" )

                        //'-- Alzo il flag 'UtenteFedera' sull'utente
                        dt.Write("Alzo il flag 'UtenteFedera' sull'utente");
                        _TabManage.ExecSql("update profiliutente set UtenteFedera = 1 where idpfu = " + CStr(rs.Fields["idPfu"]), ApplicationCommon.Application["ConnectionString"]);

                    }

                }

            }
            else
            {

                htmlToReturn.Write("Tempo limite superato");
                throw new ResponseEndException(htmlToReturn.Out(), Response, "Tempo limite superato");
                //response.end

            }

        }

        //'-------------CONTROLLO PARAMETRI PASSATI PER CONSENTIRE ACCESSO SENZA CODICE AZIENDA
        if (IdCompany == "ONLYLOGIN")
        {
            //'-- cerca  il codice azienda a partire dalla login e pwd
            //set objDB = createobject( "ctldb.clsTabManage" )
            rs = cdf.GetRSReadFromQuery_("select azilog from profiliutente with(nolock), aziende with(nolock) where pfuidazi = idazi and pfulogin = '" + Login.Replace("'", "''") + "' and pfupassword = '" + Password.Replace("'", "''") + "'", ApplicationCommon.Application["ConnectionString"]);
            if (rs.RecordCount > 0)
            {
                IdCompany = rs.Fields["azilog"];
            }
        }

        //'-------------CONTROLLO PARAMETRI PASSATI PER CONSENTIRE ACCESSO SOLO CON LOGIN DI SISTEMA
        if (GetParamURL(Request.QueryString.ToString(), "SYSTEMLOGIN").ToLower() == "yes")
        {

            strMnemonicoMP = GetParamURL(Request.QueryString.ToString(), "MP");

            //'-- cerca  il codice azienda a partire dalla login
            string? login = Request.HttpContext.GetServerVariable("REMOTE_USER");
            login = login == null ? "" : login.Replace(@"/", @"\");
            while (Strings.InStr(1, login, @"\") > 0)
            {
                login = Strings.Mid(login, Strings.InStr(1, login, @"\") + 1);
            }

            //set objDB = createobject( "ctldb.clsTabManage" )
            rs = cdf.GetRSReadFromQuery_("select azilog , pfupassword from profiliutente with(nolock), aziende with(nolock) where pfuidazi = idazi and pfulogin = '" + Login.Replace("'", "''") + "' and pfudeleted = 0 and azideleted = 0 ", ApplicationCommon.Application["ConnectionString"]);
            if (rs.RecordCount > 0)
            {
                rs.MoveFirst();
                IdCompany = rs.Fields["azilog"];
                Password = rs.Fields["pfupassword"];
            }

        }

        //'-------------CONTROLLO PARAMETRI PASSATI PER CONSENTIRE ACCESSO FORNITORI POTENZIALI
        if (GetParamURL(Request.QueryString.ToString(), "DocumentLogin").ToLower() == "yes")
        {

            //'-- cerca  il codice azienda a partire dalla login e pwd
            string myidazi = GetParamURL(Request.QueryString.ToString(), "IdAzi");
            strMnemonicoMP = GetParamURL(Request.QueryString.ToString(), "MP");

            //set objDB = createobject( "ctldb.clsTabManage" )
            rs = cdf.GetRSReadFromQuery_(@"select azilog,pfulogin,pfupassword from profiliutente with(nolock), aziende with(nolock) where pfuidazi = idazi and idazi = " + CLng(myidazi), ApplicationCommon.Application["ConnectionString"]);
            if (rs.RecordCount > 0)
            {
                rs.MoveFirst();
                IdCompany = rs.Fields["azilog"];
                Login = rs.Fields["pfulogin"];
                Password = rs.Fields["pfupassword"];
            }

            bPrimoLogin = false;

        }

        //set objDB = nothing

        //'-----------------------------------------------------------------------------------------------------
        //'----------------------------VARIABILI DI SESSIONE---------------------------------------------------
        session["FlagAvailRisVideo"] = strAvailRisVideo;
        //'--mi conservo il precedente
        session["OldIdPfu"] = session["IdPfu"];

        session["UM"] = 0;
        session["chiamante"] = chiamante;
        session["IdMP"] = "";
        IDAZI = 0;
        IdPfu = 0;
        sLng = "";
        UserName = "";
        sProfilo = "";
        Funzionalita = "";

        //if	err.number<> 0 then
        //	call errore (Err.description, "login.asp:FolderExists ", Err.Number)
        //end if

        //'--creo il file di log interno se � indicato nell'entrata del file application.ini
        if (ApplicationCommon.Application["MakeLog"] == "1")
        {
            stridentUserForlog = " User:" + "LOGIN=" + Login + ":PWD=" + Password + ":IDCOMPANY=" + IdCompany;
            string strFilePath = ApplicationCommon.Application["PathFileLog"] + "LogWebClient.htm";
            try
            {
                if (!string.IsNullOrEmpty(strFilePath.Trim()))
                {
                    fileTextLog = new(strFilePath);

                    //fileTextLog = sw.OpenTextFile(strFilePath,8,true)
                    fileTextLog.WriteLine(DateAndTime.Now.ToString() + stridentUserForlog + "<br>");

                }
                else
                {
                    errore("Err.description", "login.asp: Path of LogFile Empty ", 11, htmlToReturn);

                }
            }
            catch (Exception ex)
            {
                errore(ex.Message, "login.asp: MarkeLog ", 12, htmlToReturn);
            }

        }

        //'--Recupero Mnemonico del Market Place
        if (string.IsNullOrEmpty(strMnemonicoMP))
        {
            errore("strMP is Empty plase contact system administrator", "login.asp:GetInfoMP", 13, htmlToReturn);
        }

        //'--Recupero IDMP
        //'set objRsMP=objMP.GetInfoMP(cstr(strMnemonicoMP),false)
        //'if	err.number<> 0 then
        //'	Err.description =  Err.description
        //'	Err.source		= "login.asp:GetInfoMP"
        //'	errore Err.description, Err.source, Err.Number
        //'end if

        strSql = "SELECT a.*, b.aziRagioneSociale, c.lngSuffisso FROM MarketPlace a with(nolock) inner join Aziende b with(nolock) on b.idazi = a.mpIdAziMaster inner join Lingue c on c.IdLng = a.mpIdLng where a.mpDeleted = 0 and a.mpLog= '" + strMnemonicoMP.Replace("'", "''") + "'";
        //set objDB = createobject( "ctldb.clsTabManage" )
        TSRecordSet objRsMP = cdf.GetRSReadFromQuery_(CStr(strSql), ApplicationCommon.Application["ConnectionString"]);
        //set objDB = nothing

        //'Write_CTL_Profiler "login.ASP.GET_MP" , "" , ""

        if (objRsMP != null)
        {

            if (!(objRsMP.EOF && !objRsMP.BOF) && objRsMP.RecordCount > 0)
            {

                dynamic IdMp = objRsMP.Fields["IdMp"];
                strMnemonicoMP = objRsMP.Fields["mpLog"];
                dynamic strRagSocMP = objRsMP.Fields["mpRagioneSociale"];

                session["MnemonicoMPCurr"] = strMnemonicoMP;
                session["RagSocMPCurr"] = strRagSocMP;
                session["IdMP"] = IdMp;

            }
            else
            {

                //strErrore  = "objRsMP is Empty"
                //Err.source = "login.asp:GetInfoMP"
                errore("objRsMP is Empty", "login.asp:GetInfoMP", 0, htmlToReturn);
            }

        }
        else
        {

            //strErrore  = "objRsMP is nothing"
            //Err.source = "login.asp:GetInfoMP"
            errore("objRsMP is nothing", "login.asp:GetInfoMP", 0, htmlToReturn);

        }

        //'--scrittura nel log
        if (ApplicationCommon.Application["MakeLog"] == "1" && fileTextLog != null)
        {
            fileTextLog.WriteLine(DateAndTime.Now.ToString() + stridentUserForlog + ":recupero informazioni Mp OK <br>");
        }

        //'--Recupero tipo di unit� di misura
        //'Utilizzato del server per capire cosa restituire nelle griglie dei prodotti per le descrizioni
        //'delle unit� di misura.Se il valore della chiave = 0 allora applichiamo CNV("UM") altrimenti
        //'la descrizione originale del gruppo unit� di misura.
        //'CodRit = -1
        //'CodRit = InfoMPByKey ("DESCUMATTRIBUTES","Software\AFSoluzioni\AFLink\Options\User",Idmp,rsValue)
        //'if CodRit <> 0 or err.number <> 0 then
        //'	Err.description = Err.description
        //'	Err.source      = "login.asp:GetValueForKey"
        //'	errore Err.description, Err.source, Err.Number
        //'end if
        //'if not rsValue is nothing then
        //'	if not(rsValue.bof and rsValue.eof)then
        //'		if trim(rsValue.fields("RdDefValue").value) <> "" and trim(rsValue.fields("RdDefValue").value) <> "0" then
        //'			Session("UM") = rsValue.fields("RdDefValue").value
        //'		end if
        //'	end if
        //'end if

        session["UM"] = 0;

        //'--Controlliamo la terna di ingresso
        Login = Login.Trim();
        Password = Password.Trim();
        IdCompany = IdCompany.Trim();

        //''' -- gestione del servizio cessato
        string SYS_SERVIZIO = "";

        //err.clear
        SYS_SERVIZIO = ApplicationCommon.Application["SERVIZIO"];
        //' se la SYS non � presente assume servizio cessato per default
        if (!ApplicationCommon.Application.KeyExists("SERVIZIO"))
        {
            SYS_SERVIZIO = "-";
        }

        if (string.IsNullOrEmpty(Login) || (string.IsNullOrEmpty(Password) && SYS_SERVIZIO != "-") || string.IsNullOrEmpty(IdCompany))
        {

            if (string.IsNullOrEmpty(IdCompany))
            {

                ExitApplicationWeb(ApplicationCommon.CNV("Inserire Codice Azienda."), htmlToReturn);

            }
            else
            {

                if (string.IsNullOrEmpty(Login) && string.IsNullOrEmpty(Password))
                {
                    ExitApplicationWeb(ApplicationCommon.CNV("Inserire Login e Password."), htmlToReturn);
                }
                else
                {

                    if (string.IsNullOrEmpty(Login))
                    {
                        ExitApplicationWeb(ApplicationCommon.CNV("Inserire Login."), htmlToReturn);
                    }
                    else
                    {
                        ExitApplicationWeb(ApplicationCommon.CNV("Inserire Password."), htmlToReturn);
                    }

                }

            }

        }
        else
        {
            if (IdCompany.Length > 7 || Login.Length > 50 || Password.Length > 50)
            {

                ExitApplicationWeb(ApplicationCommon.CNV("Inserire Login  corrette."), htmlToReturn);

            }
            else
            {
                //'--recuperiamo le informazioni dell'azienda.
                session["Login"] = Login;
                session["IdCompany"] = IdCompany;
                //session["Password"] = Password;

                //'''if SYS_SERVIZIO = "-" and Login = "E_SILVIA_ROSSI" then
                if (SYS_SERVIZIO == "-")
                {

                    //' controlla solo IdCompany e Login
                    strSql = "select * from ProfiliUtente, aziende,lingue where idazi=pfuidazi and azideleted=0 and pfuDeleted=0 and pfuIdLng = IdLng and azilog='" + IdCompany + "' and pfulogin = '" + Login + "'";
                    //set objDB = createobject( "ctldb.clsTabManage" )
                    TSRecordSet rs1 = cdf.GetRSReadFromQuery_(CStr(strSql), ApplicationCommon.Application["ConnectionString"]);

                    if (!(rs1.EOF && rs1.BOF))
                    {
                        rs1.MoveFirst();

                        ITypeAzi = CONST_AZIENDA_WEBBUYER;
                        if (CStr(rs1.Fields["aziprofili"]).Contains("S", StringComparison.Ordinal))
                        {
                            ITypeAzi = CONST_AZIENDA_WEBSELLER;
                        }

                        ICodeAzi = rs1.Fields["idAzi"];
                        RagSociale = rs1.Fields["aziRagioneSociale"];
                        sProfilo = rs1.Fields["pfuProfili"];
                        IdPfu = rs1.Fields["idPfu"];
                        sLng = rs1.Fields["lngSuffisso"];
                        UserName = rs1.Fields["pfunome"];

                        //' deve avere solo il permesso del dossier

                        rs1 = cdf.GetRSReadFromQuery_("select Funzionalita from Profili_Funzionalita where codice = 'DISMESSO'", ApplicationCommon.Application["ConnectionString"]);

                        if (!(rs1.EOF && rs1.BOF))
                        {
                            rs1.MoveFirst();
                            Funzionalita = rs1.Fields["Funzionalita"];
                        }
                        else
                        {
                            Funzionalita
                        }

                        //set rs1 = nothing

                        //'response.write "ciao"
                        //'response.end

                        //set objDB = nothing

                        //'err.clear

                    }
                    else
                    {
                        ExitApplicationWeb(ApplicationCommon.CNV("Inserire Login  corrette."), htmlToReturn);
                    }


                }
                else
                {

                    //'--Chiamiamo il metodo server per recuperare le varie propriet� dell'azienda.
                    if (LoginFedera == 0)
                    {

                        //'set objAzienda = mycreateobject(BuildProgId("AFLAzienda.Azienda"),AppServer)
                        //'ITypeAzi = objAzienda.GetTipoAzienda (cstr(IdCompany),Login,Password, ICodeAzi, RagSociale,Funzionalita,sProfilo,IdPfu,sLng,UserName, cstr(strMnemonicoMP))

                        strSql = "declare @tipoLogin integer = -1" + Environment.NewLine;
                        strSql = strSql + "declare @idAzi integer = -1" + Environment.NewLine;
                        strSql = strSql + "declare @pfuFunzionalita varchar(4000)" + Environment.NewLine;
                        strSql = strSql + "declare @ragSoc varchar(80)" + Environment.NewLine;
                        strSql = strSql + "declare @pfuProfili varchar(20)" + Environment.NewLine;
                        strSql = strSql + "declare @idpfu int" + Environment.NewLine;
                        strSql = strSql + "declare @sLng varchar(5)" + Environment.NewLine;
                        strSql = strSql + "declare @userName varchar(30)" + Environment.NewLine;

                        strSql = strSql + "exec GetTipoLogin '" + IdCompany.Replace("'", "''") + "', '" + Login.Replace("'", "''") + "', '" + Password.Replace("'", "''") + "', '" + strMnemonicoMP.Replace("'", "''") + "', @idAzi output,@pfuFunzionalita output,@ragSoc output,@tipoLogin output,@pfuProfili output,@idpfu output,@sLng output,@userName output" + Environment.NewLine;
                        strSql = strSql + "select @tipoLogin as tipoLogin, @idAzi as idAzi, @pfuFunzionalita as pfuFunzionalita, @ragSoc as ragSoc, @pfuProfili as pfuProfili, @idpfu as idpfu, @sLng as lng,@userName as username";

                        //objDB = createobject( "ctldb.clsTabManage" )
                        TSRecordSet objRS = cdf.GetRSReadFromQuery_(CStr(strSql), ApplicationCommon.Application["ConnectionString"]);

                        //'Write_CTL_Profiler "login.ASP.GETTIPOLOGIN" , "" , ""

                        ITypeAzi = -1;

                        if (objRS != null)
                        {
                            if (!(objRS.EOF && !!objRS.BOF))
                            {

                                objRS.MoveFirst();
                                ITypeAzi = objRS.Fields["tipoLogin"];
                                ICodeAzi = objRS.Fields["idAzi"];
                                RagSociale = objRS.Fields["ragSoc"];
                                Funzionalita = objRS.Fields["pfuFunzionalita"];
                                sProfilo = objRS.Fields["pfuProfili"];
                                IdPfu = objRS.Fields["idpfu"];
                                sLng = objRS.Fields["lng"];
                                UserName = objRS.Fields["username"];

                            }
                        }

                        //set objDB = nothing

                    }
                    else
                    {

                        ITypeAzi = CONST_AZIENDA_WEBBUYER;

                        if (!string.IsNullOrEmpty(CStr(GetParamURL(Request.QueryString.ToString(), "FEDERA_AZI"))))
                        {
                            ICodeAzi = GetParamURL(Request.QueryString.ToString(), "FEDERA_AZI");
                        }
                        else
                        {
                            ICodeAzi = tabIdAzi;
                        }
                        if (rs != null)
                        {
                            RagSociale = rs.Fields["aziRagioneSociale"];
                            Funzionalita = rs.Fields["pfuFunzionalita"];
                            sProfilo = rs.Fields["pfuProfili"];
                            IdPfu = rs.Fields["idPfu"];
                            sLng = rs.Fields["lngSuffisso"];
                            UserName = rs.Fields["pfunome"];
                        }

                    }

                }

                //'--controllo che un altro utente non � gi� loggato dalla stessa macchina
                if (GetParamURL(Request.QueryString.ToString(), "DocumentLogin").ToLower() == "yes")
                {
                    if (!EnableCurrentLogin(htmlToReturn))
                    {
                        htmlToReturn.Write($@"
							<script language=""javascript"">
								self.close();
							</script>
						");
                        throw new ResponseEndException(htmlToReturn.Out(), Response, "end");
                        //Response.end
                    }
                }

                //if (err.number <> 0 ){
                //	Err.description = "" & Err.description
                //	Err.source = "login.asp:GetTipoAzienda"
                //	errore Err.description, Err.source, Err.Number
                //}

                //'--scrittura nel log
                if (ApplicationCommon.Application["MakeLog"] == "1")
                {
                    fileTextLog.WriteLine(DateAndTime.Now.ToString() + stridentUserForlog + ":recupero informazioni Azienda OK <br>");
                }

                int n_length = Funzionalita.Length;

                //'IMPOSTAZIONI DELLE VARIABILI DI SESSIONI E MESSAGGISTICA DI EVENTUALI ERRORI
                //'settiamo alcune variabili di sessione comuni a tutti i tipi di societ�
                session["ICodeAzi"] = ICodeAzi;
                session["RagSociale"] = RagSociale;
                session["ITypeAzi"] = ITypeAzi;
                session["IdPfu"] = IdPfu;
                session["UserName"] = UserName;
                session["IdPfu"] = IdPfu;

                //'-- IP dell'utente che ha effettuato il login (verr� verificato nel checkSession per
                //'-- controllare che l'utente proviene sempre dallo stesso pc)
                session["ip_login"] = getIpClient(Request);

                //set objDB = createobject( "ctldb.clsTabManage" )

                //'------ INIZIO GENERAZIONE E MESSA IN SESSIONE DI NOMECAMPO+VALORE DA UTILIZZARE NEI FORM DEI DOCUMENTI PER PREVENIRE ATTACCHI "CROSS SITE REQUEST FORGERY" --
                session["TS_NomeCampoToken"] = getSicurityCaptchaFieldName();

                strSql = "select NEWID() as token";
                rs = cdf.GetRSReadFromQuery_(CStr(strSql), ApplicationCommon.Application["ConnectionString"]);
                rs.MoveFirst();
                session["TS_ValoreCampoToken"] = CStr(rs.Fields["token"]);
                //set rs = nothing
                //'------ FINE GENERAZIONE E MESSA IN SESSIONE DI NOMECAMPO+VALORE DA UTILIZZARE NEI FORM DEI DOCUMENTI PER PREVENIRE ATTACCHI "CROSS SITE REQUEST FORGERY" --

                //on error resume next

                //'--CONTROLLO SE SONO UN UTENTE CHE APPARTIENE AD UN AZIENDA CESSATA
                //set objDB = createobject( "ctldb.clsTabManage" )
                rs = cdf.GetRSReadFromQuery_(CStr("select idpfu from aziende a with(nolock),profiliutente b with(nolock) where a.azideleted=1 and a.idazi = b.pfuidazi and b.pfulogin = '" + Login.Replace("'", "''") + "' and a.azilog = '" + IdCompany.Replace("'", "''") + "' "), ApplicationCommon.Application["ConnectionString"]);

                if (rs.RecordCount > 0)
                {

                    TSRecordSet rs1 = cdf.GetRSReadFromQuery_(CStr("select aziAcquirente from aziende a with(nolock),profiliutente b with(nolock) where a.idazi = b.pfuidazi and b.pfulogin = '" + Login.Replace("'", "''") + "' and a.azilog = '" + IdCompany.Replace("'", "''") + "' "), ApplicationCommon.Application["ConnectionString"]);
                    if (CInt(rs1.Fields["aziAcquirente"]) > 0)
                    {
                        ExitApplicationWeb(ApplicationCommon.CNV("Ente di riferimento cessato, rivolgersi all'amministratore dell'ente."), htmlToReturn);
                    }
                    else
                    {
                        ExitApplicationWeb(ApplicationCommon.CNV("L'Operatore Economico risulta cessato, rivolgersi all'amministratore."), htmlToReturn);
                    }

                }


                //'Write_CTL_Profiler "login.ASP.check_cessata" , "" , ""

                //'--CONTROLLO SE SONO UN UTENTE ELIMINATO
                string strSqlCheckUtenteEliminato = "exec CK_UTENTE_ELIMINATO '" + Login.Replace("'", "''") + "' , '" + IdCompany.Replace("'", "''") + "','" + Password.Replace("'", "''") + "'";

                TSRecordSet rsEl = cdf.GetRSReadFromQuery_(CStr(strSqlCheckUtenteEliminato), ApplicationCommon.Application["ConnectionString"]);

                if (rsEl.RecordCount > 0)
                {
                    rsEl.MoveFirst();
                    if (CStr(rsEl.Fields["id"]) == "ERRORE")
                    {
                        ExitApplicationWeb(ApplicationCommon.CNV("Utente disabilitato, rivolgersi all'amministratore."), htmlToReturn);
                    }
                }

                //'Write_CTL_Profiler "login.ASP.CK_UTENTE_ELIMINATO" , "" , ""

                int totTentativi = 0; //'valore di default, controllo non attivo

                //'-- SE STIAMO EFFETTUANDO UN LOGIN FEDERATO ( AD ES. CON SPID O UN SSO QUALSIASI ) NON DOBBIAMO CONTROLLARE I TENTATIVI EFFETTUATI CON LA TERNA AFLINK
                if (LoginFedera != 1)
                {

                    rs = cdf.GetRSReadFromQuery_(CStr("select DZT_ValueDef from lib_dictionary with(nolock) where dzt_name = 'SYS_PWD_TENTATIVI_LOGIN'"), ApplicationCommon.Application["ConnectionString"]);

                    if (rs.RecordCount > 0)
                    {

                        totTentativi = CInt(rs.Fields["DZT_ValueDef"]);

                        //'-- controllo se l'account � bloccato
                        rs = cdf.GetRSReadFromQuery_(CStr("select idpfu from aziende a with(nolock),profiliutente b with(nolock) where a.idazi = b.pfuidazi and b.pfulogin = '" + Login.Replace("'", "''") + "' and a.azilog = '" + IdCompany.Replace("'", "''") + "' and pfuStato = 'block' and pfudeleted = 0 "), ApplicationCommon.Application["ConnectionString"]);

                        if (rs.RecordCount > 0)
                        {

                            ExitApplicationWeb(ApplicationCommon.CNV("I dati inseriti sono riferiti ad un utenza bloccata, contattare il fornitore del servizio"), htmlToReturn);

                        }

                    }

                }

                //'--------------------------------------------------------------
                //'-- VERIFICHIAMO EVENTUALI CONDIZIONI DI BLOCCO SULLE UTENZE --
                //'--------------------------------------------------------------
                if (IsNumeric(IdPfu))
                {

                    if (IdPfu > 0)
                    {

                        string strSelectLogin = "select idPfu from profiliutente with(nolock) inner join  aziende with(nolock) on pfuidazi = idazi where idPfu = " + CStr(IdPfu);
                        string strSqlCheckBlock = "select rel_valueinput as conditionSQL, rel_valueoutput as mlng from CTL_Relations with(nolock) where  REL_Type = 'CHECK_LOGIN_ACCESS' and REL_ValueInput <> ''";

                        TSRecordSet rsTmp = cdf.GetRSReadFromQuery_(CStr(strSqlCheckBlock), ApplicationCommon.Application["ConnectionString"]);

                        //'-- se esiste la relazione CHECK_LOGIN_ACCESS con una condizione di blocco valorizzata
                        for (int i = 0; i < rsTmp.RecordCount; i++)
                        {

                            string strConditionSQL = CStr(rsTmp.Fields["conditionSQL"]);
                            string strBlockMlng = CStr(rsTmp.Fields["mlng"]);

                            string strNewSelect = strSelectLogin + " and ( " + strConditionSQL + " ) ";

                            TSRecordSet rsTmp2 = cdf.GetRSReadFromQuery_(CStr(strNewSelect), ApplicationCommon.Application["ConnectionString"]);

                            //'-- SE L'UTENTE RIENTRA NELLA CONDIZIONE DI BLOCCO PREVISTA DALLA RELAZIONE CHECK_LOGIN_ACCESS, BLOCCHIAMO CON IL MSG INDICATO NELLA RELAZIONE STESSA
                            if (rsTmp2.RecordCount > 0)
                            {
                                ExitApplicationWeb(ApplicationCommon.CNV(strBlockMlng), htmlToReturn);
                            }

                            //set rsTmp2 = nothing

                            rsTmp.MoveNext();

                        }

                        //set rsTmp = nothing

                    }

                }

                rs = cdf.GetRSReadFromQuery_(CStr("select * from lib_dictionary with(nolock) where dzt_name = 'SYS_DISATTIVA_BLACKLIST'"), ApplicationCommon.Application["ConnectionString"]);

                dynamic blacklistDisattivata;
                if (rs.RecordCount == 0)
                {

                    blacklistDisattivata = "0"; //'black list attiva di default!

                }
                else
                {

                    blacklistDisattivata = rs.Fields["DZT_ValueDef"];

                }

                string chiavecoll = getIpClient(Request) + "-tentativi";

                switch (session["ITypeAzi"])
                {
                    case CONST_AZIENDA_PROSPECT:
                        session["sProfilo"] = sProfilo;
                        session["TipoAzienda"] = -1;
                        session["IDAZI"] = ICodeAzi;
                        session["Funzionalita"] = ApplicationCommon.Application["StrFunzionalitaProspect"];
                        break;
                    case CONST_AZIENDA_BUYER:
                    case CONST_AZIENDA_SELLER:
                    case CONST_AZIENDA_BUYER_SELLER:
                    case CONST_AZIENDA_WEBBUYER:
                    case CONST_AZIENDA_WEBSELLER:
                    case CONST_AZIENDA_WEBBUYER_SELLER:  //'tutti gli altri
                        session["TipoAzienda"] = 0;
                        session["sProfilo"] = sProfilo;
                        session["IdPfu"] = IdPfu;
                        session["IDAZI"] = ICodeAzi;
                        session["Funzionalita"] = Funzionalita;
                        if (string.IsNullOrEmpty(sProfilo))
                        {
                            ExitApplicationWeb(ApplicationCommon.CNV("Utente senza alcuna funzionalità, rivolgersi al B-Manager per l'abilitazione."), htmlToReturn);
                        }
                        break;

                    default:
                        _TabManage.ExecSql("insert CTL_LOG_PROC ( DOC_NAME , PROC_NAME , idPfu,Parametri,data) select 'LOGIN' as DOC_NAME, 'FAILED' as PROC_NAME, (select top 1 idpfu from aziende a with(nolock),profiliutente b with(nolock) where a.idazi = b.pfuidazi and b.pfulogin = '" + Login.Replace("'", "''") + "' and a.azilog = '" + IdCompany.Replace("'", "''") + "') as idPfu,'CodAzienda#=#" + IdCompany + "#@#UserName#=#" + Login + "#@#SessionId#=#" + session.SessionID + "#@#IP#=#" + getIpClient(Request).Replace("'", "''") + "' as Parametri, getDate() as data", ApplicationCommon.Application["ConnectionString"]);

                        //'-- Controllo se � attivo il "numero massimo di tenativi"
                        if (totTentativi > 0)
                        {

                            //'-- Se i tentativi hanno una coppia codiceAziende-userName corretti
                            rs = cdf.GetRSReadFromQuery_(CStr("select isnull(pfuTentativiLogin,0) as pfuTentativiLogin from aziende a with(nolock),profiliutente b with(nolock) where a.idazi = b.pfuidazi and b.pfudeleted = 0 and b.pfulogin = '" + Login.Replace("'", "''") + "' and a.azilog = '" + IdCompany.Replace("'", "''") + "'"), ApplicationCommon.Application["ConnectionString"]);

                            if (rs.RecordCount > 0)
                            {

                                int tentativiAppLogin = CInt(rs.Fields["pfuTentativiLogin"]);

                                //'-- Incremento il contatore dei login falliti per un'utenza nota (quindi l'utente ha inserito codiceAzienda e username corretti, ma password sbagliati)
                                _TabManage.ExecSql("UPDATE ProfiliUtente SET pfuTentativiLogin = isnull(pfuTentativiLogin,0) + 1  from aziende a with(nolock),profiliutente b where a.idazi = b.pfuidazi and pfulogin = '" + Login.Replace("'", "''") + "' and azilog = '" + IdCompany.Replace("'", "''") + "' ", ApplicationCommon.Application["ConnectionString"]);

                                //'-- Se l'account ha superato gli N tentativi disponibili
                                if (CInt(rs.Fields["pfuTentativiLogin"]) + 1 >= totTentativi)
                                {

                                    //'-- Settiamo lo stato dell'utente a bloccato
                                    _TabManage.ExecSql("UPDATE ProfiliUtente SET pfuStato = 'block',pfuTentativiLogin = 0 from aziende a with(nolock),profiliutente b where a.idazi = b.pfuidazi and pfulogin = '" + Login.Replace("'", "''") + "' and azilog = '" + IdCompany.Replace("'", "''") + "' ", ApplicationCommon.Application["ConnectionString"]);

                                    //'-- Resettiamo i tentativi anche per l'ip
                                    Dictionary<string, dynamic> collblack = ApplicationCommon.Application["blacklist"];
                                    tentativiAppLogin = 0;

                                    if (collblack.ContainsKey(chiavecoll))
                                    {

                                        collblack[getIpClient(Request) + "-tentativi"] = tentativiAppLogin;

                                    }
                                    else
                                    {

                                        collblack.Add(getIpClient(Request) + "-tentativi", CInt(0));

                                    }

                                    ApplicationCommon.Application["blacklist"] = collblack;

                                    ExitApplicationWeb(ApplicationCommon.CNV("E' stato raggiunto il limite di tentativi errati per accedere al sistema"), htmlToReturn);

                                }
                                else
                                {

                                    //err.clear

                                    //'-- avviso l'utente sul numero di tentativi rimasti quando scendono sotto il 5
                                    if ((totTentativi - tentativiAppLogin - 1) < 5)
                                    {
                                        ExitApplicationWeb(ApplicationCommon.CNV("Inserire Login  corrette.") + " - " + ApplicationCommon.CNV("Tentativi rimasti") + " : " + (totTentativi - tentativiAppLogin - 1), htmlToReturn);
                                    }
                                    else
                                    {
                                        ExitApplicationWeb(ApplicationCommon.CNV("Inserire Login  corrette."), htmlToReturn);
                                    }

                                }

                            }

                            //err.Clear

                            //'-- Se � attiva la blacklist
                            if (blacklistDisattivata == "0")
                            {

                                //'-- Aggiorno le informazioni nell'application per quanto riguarda il numero di tentativi di login falliti da un dato ip
                                Dictionary<string, dynamic> collblack = ApplicationCommon.Application["blacklist"];

                                int tentativiAppLogin = 0;

                                if (collblack.ContainsKey(chiavecoll))
                                {

                                    tentativiAppLogin = CInt(collblack[chiavecoll]);

                                }
                                else
                                {

                                    collblack.Add(chiavecoll, CInt(0));

                                }

                                tentativiAppLogin = CInt(collblack[chiavecoll]);

                                tentativiAppLogin = CInt(tentativiAppLogin) + 1;

                                collblack[chiavecoll] = tentativiAppLogin;

                                ApplicationCommon.Application["blacklist"] = collblack;

                                //err.Clear

                                //'-- Se si sono superati gli N tentativi errati blocchiamo l'ip
                                if (tentativiAppLogin >= totTentativi)
                                {


                                    //ObjSessionn = session("Session")
                                    //set ObjSessionn(0) = Request.QueryString
                                    //set ObjSessionn(1) = Request.form
                                    //set ObjSessionn(3) = request
                                    //set ObjSessionn(5) = session
                                    //set ObjSessionn(6) = application

                                    //set objBlack = createobject( "ctldb.BlackList" )
                                    BlackList objBlack = new();
                                    objBlack.addIp(objBlack.getAttackInfo(HttpContext, CStr(session["IdPfu"]), "Superato il numero massimo di login errati"), session, ApplicationCommon.Application.ConnectionString);

                                    //'Se � presente NOMEAPPLICAZIONE nell'application
                                    if (!string.IsNullOrEmpty((CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"]))))
                                    {

                                        throw new ResponseRedirectException("/" & ApplicationCommon.Application["NOMEAPPLICAZIONE"] + "/blocked.asp", Response);


                                    }
                                    else
                                    {

                                        throw new ResponseRedirectException(ApplicationCommon.Application["strVirtualDirectory"] + "/blocked.asp", Response);

                                    }
                                    throw new ResponseEndException(htmlToReturn.Out(), Response, "superati gli N tentativi");
                                    //Response.End

                                }

                                //err.Clear

                                //'-- avviso l'utente sul numero di tentativi rimasti quando scendono sotto il 5
                                if ((totTentativi - tentativiAppLogin - 1) < 5)
                                {
                                    ExitApplicationWeb(ApplicationCommon.CNV("Inserire Login  corrette.") + " - " + ApplicationCommon.CNV("Tentativi rimasti") + " : " + (totTentativi - tentativiAppLogin - 1), htmlToReturn);
                                }
                                else
                                {
                                    ExitApplicationWeb(ApplicationCommon.CNV("Inserire Login  corrette."), htmlToReturn);
                                }

                            }

                            //err.Clear

                            ExitApplicationWeb(ApplicationCommon.CNV("Inserire Login  corrette."), htmlToReturn);

                        }
                        else
                        {

                            //err.Clear

                            //'se il metodo non trova l'azienda (-1) oppure l'azienda � in attesa (-2)
                            ExitApplicationWeb(ApplicationCommon.CNV("Inserire Login  corrette."), htmlToReturn);

                        }
                        break;
                }

                //'response.write session("Funzionalita")
                //'response.end

                session["strSuffLing"] = sLng; //'la lingua sar� uguale a quella con cui la societ� si � censita
                session["strUserLanguage"] = sLng; //'la lingua sar� quella con cui si � censito l'utente

                //'-- Controllo se un utente Federa sta provando a fare il login con il metodo tradizionale ed ha il nostro account/profiliutente scaduto.
                //'--  SPIEGAZIONE : Facciamo questo perch� agli utenti federa ,allo scadere della password, non deve scattare l'attivit� di 'cambio password' obbligatorio e di conseguenza
                //'--	 per non avere un utente con la password che non scade mai.. facciamo in modo di bloccargli l'accesso con il login tradizionale e gli lasciamo
                //'--  la possibilit� di loggarsi solo con federa. Per togliersi la password aflink scaduta.. l'utente o si deve loggare con federa e fare un cambio password oppure
                //'--  fa un recupero password dal portale
                if (string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "LOGINFEDERA")))
                {


                    rs = cdf.GetRSReadFromQuery_(CStr("select idpfu from profiliutente with(nolock) where isnull(UtenteFedera,0) = 1 and isnull(PasswordScaduta,0) = 1 and idpfu = " + IdPfu), ApplicationCommon.Application["ConnectionString"]);

                    if (rs.RecordCount > 0)
                    {
                        //set rs = nothing
                        ExitApplicationWeb("Password AFLink scaduta", htmlToReturn);
                    }

                    //'-- in caso di accesso con credenziali non federa abbasso il flag di accesso Federa
                    //'-- questo per ripristinare la gestione di scadenza delle password come per gli altri utenti
                    _TabManage.ExecSql("UPDATE ProfiliUtente SET UtenteFedera = 0  WHERE UtenteFedera = 1 and idpfu = " + IdPfu + " ", ApplicationCommon.Application["ConnectionString"]);


                }

                //'-- Controllo se � attivo il "numero massimo di tenativi"
                if (totTentativi > 0)
                {

                    //'-- aggiorno la data di ultimo accesso e resetto i tentativi falliti di login
                    _TabManage.ExecSql("UPDATE ProfiliUtente SET pfuLastLogin = GETDATE(),pfuTentativiLogin = 0  WHERE idpfu = " + IdPfu + " ", ApplicationCommon.Application["ConnectionString"]);

                    //'Write_CTL_Profiler "login.ASP.UPDATE_pfuLastLogin" , "" , ""

                    Dictionary<string, dynamic> collblack = ApplicationCommon.Application["blacklist"];

                    int tentativiAppLogin = 0;

                    collblack[chiavecoll] = tentativiAppLogin;

                    ApplicationCommon.Application["blacklist"] = collblack;

                }
                else
                {

                    //'-- aggiorno la data di ultimo accesso
                    _TabManage.ExecSql("UPDATE ProfiliUtente SET pfuLastLogin = GETDATE()  WHERE idpfu = " + IdPfu + " ", ApplicationCommon.Application["ConnectionString"]);

                }

                //err.Clear

                if (string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "LOGINFEDERA")))
                {
                    traceInLogUtente(1, "LOGIN.ASP", "Login effettuato con successo.idpfu:" + CStr(IdPfu), HttpContext, session);
                }
                else
                {
                    traceInLogUtente(1, "LOGIN.ASP", "Login Federa effettuato con successo.idpfu:" + CStr(IdPfu), HttpContext, session);
                }

                //on error resume next

                //'-- Per impedire il session fixation genero un codice di controllo sessione a meno che non � gi� presente
                //'if cstr(Session("AFLINKFIXATION")) = "" then

                //'end if

                //'-- Traccio nella CTL_LOG_PROC il login effettuato correttamente

                _TabManage.ExecSql("insert into CTL_LOG_PROC ( DOC_NAME , PROC_NAME , idPfu,Parametri,data) values( 'LOGIN' , 'START', " + session["IdPfu"] + " , 'CodAzienda#=#" + IdCompany + "#@#UserName#=#" + Login.Replace("'", "''") + "#@#SessionId#=#" + session.SessionID.Replace("'", "''") + "#@#IP#=#" + getIpClient(Request).Replace("'", "''") + "',getDate())", ApplicationCommon.Application["ConnectionString"]);
                //set objDB = nothing

                //'Write_CTL_Profiler "login.ASP.CTL_LOG_PROC_LOGIN" , "" , ""

                //err.Clear
                //on error goto 0

                if (ApplicationCommon.Application["LoadFromFrame"].ToLower() != "no")
                {

                    //'controllo popup bloccati
                    if (session["ajax"] != "1")
                    {
                        htmlToReturn.Write($@"

						<HTML>
						<head><meta http-equiv=content-type content=text/html; charset=utf-8>
						<script language=""javascript"">
					");
                    }
                    else
                    {
                        //response.clear
                    }
                    htmlToReturn.Write($@"

						var myTest = window.open(""about:blank"","""",""directories=no,height=1,width=1,menubar=no,resizable=no,scrollbars=yes,status=no,titlebar=no,top=0,location=no"");
						if (!myTest) {{
							alert('" + ApplicationCommon.CNV("Disabilitare il blocco dei PopUp!") + $@"');
						}} else {{
							myTest.close();
						}}
					");

                    if (session["ajax"] != 1)
                    {
                        htmlToReturn.Write($@"
							</script>
							</head>
							</html>
						");
                    }

                    //Response.flush

                }

                //'--setto token di sessione per utente loggato
                //set objDB = createobject( "ctldb.clsTabManage" )
                strSql = " update profiliutente set pfuToken=NEWID() where idpfu=" + IdPfu;
                _TabManage.ExecSql(CStr(strSql), ApplicationCommon.Application["ConnectionString"]);

                //'Write_CTL_Profiler "login.ASP.NEWID" , "" , ""

                strSql = " select pfutoken from profiliutente with(nolock) where idpfu=" + IdPfu;
                rs = cdf.GetRSReadFromQuery_(CStr(strSql), ApplicationCommon.Application["ConnectionString"]);

                //'Write_CTL_Profiler "login.ASP.pfutoken" , "" , ""

                session["pfuToken"] = rs.Fields["pfutoken"];
                //set objDB = nothing
                //err.clear

                session["MnemonicoMP"] = strMnemonicoMP;

                //'-- avvalora variabili per il funzionamento dei moduli CTL
                //dim ObjSession
                //ObjSession = session("Session")
                //ObjSession(2) = session("IdPfu")
                //ObjSession(10) = session("Funzionalita")
                //ObjSession(11) = session("strSuffLing")
                //ObjSession(12) = session("IdMP")
                //ObjSession(14) = session("IDAZI")
                //set ObjSession(13) = objNewDizMlng("MultiLinguismo")
                //ObjSession(15) = session("IDAZI_Master")
                //session("Session") = ObjSession


                //'--valorizzo collezzione degli utenti in sessione
                if (!ObjUsersLogged.ContainsKey(session.SessionID))
                {
                    ObjUsersLogged.Add(session.SessionID, "");
                }

                var claimsIdentity = new ClaimsIdentity(
                claims, CookieAuthenticationDefaults.AuthenticationScheme);

                var authProperties = new AuthenticationProperties
                        {
                            AllowRefresh = true,
                            // Refreshing the authentication session should be allowed.


                            //ExpiresUtc = DateTimeOffset.UtcNow.AddDays(7),
                            // The time at which the authentication ticket expires. A
                            // value set here overrides the ExpireTimeSpan option of
                            // CookieAuthenticationOptions set with AddCookie.

                            //IsPersistent = true,
                            // Whether the authentication session is persisted across
                            // multiple requests. When used with cookies, controls
                            // whether the cookie's lifetime is absolute (matching the
                            // lifetime of the authentication ticket) or session-based.

                            //IssuedUtc = <DateTimeOffset>,
                            // The time at which the authentication ticket was issued.

                            //RedirectUri = <string>
                            // The full path or absolute URI to be used as an http
                            // redirect response value.


                        };


                var principal = new ClaimsPrincipal(claimsIdentity);


                //SignInAsync creates an encrypted cookie and adds it to the current response.
                // If AuthenticationScheme isn't specified, the default scheme is used.
                try
                {
                    //HttpContext.SignInAsync(
                    //    CookieAuthenticationDefaults.AuthenticationScheme,
                    //    new ClaimsPrincipal(principal),
                    //    authProperties).Wait();
                    session["SessionIsAuth"] = true;
                    HttpContext.Response.Cookies.Append(Cookie_Auth_Name, token, new CookieOptions() { HttpOnly = Cookie_HttpOnly, Secure = Cookie_Secure });
                }
                catch (ObjectDisposedException ex)
                {
                    Console.WriteLine(ex.Message);
                }
                catch (AggregateException ex)
                {
                    Console.WriteLine(ex.Message);
                }


            }



        }

    }
    else
    {
        //'-- se proveniamo dalla pagina di conferma sessione multipla con OK. Tracciamo nel log
        //'-- la volont� dell'utente di prendere possesso della sessione facendo disconettere forzatamente chi era collegato con la sua utenza

        traceInLogUtente(1, "LOGIN.ASP", "Conferma possesso sessione", HttpContext, session);
    }

    if (string.IsNullOrEmpty(CStr(session["AFLINKFIXATION"])))
    {

    }


    IdPfu = session["IdPfu"];
    var IDMP = session["IdMP"];
    FlagCheckWeb = session["FlagCheckWeb"];
    strSuffLing = session["strSuffLing"];
    strMnemonicoMP = session["MnemonicoMP"];
    UserName = session["UserName"];
    IDAZI = session["IDAZI"];

    //'-- NON EFFETTUO IL CONTROLLO DELLA SESSIONE MULTIPLA SE STO ENTRANDO IN ACCESS GUID ( vedi applicazione legacy )
    if (string.IsNullOrEmpty(CStr(accessGUID)))
    {
        //'----- GESTIONE PER IMPEDIRE LE SESSIONI CONCORRENTI
        controllaSessioniConcorrenti(htmlToReturn);
    }
    else
    {
        IdPfu = session["IdPfu"];
        string SessionID = session.SessionID;

        string ipServer = CStr(ApplicationCommon.getAflinkRegistryKey("IdIpNode"));
        sqlParams.Clear();
        sqlParams.Add("@SessionID", SessionID);
        sqlParams.Add("@ipServ", ipServer);
        sqlParams.Add("@IdPfu", IdPfu);
        cdf.Execute("update ProfiliUtente set pfuSessionID = @SessionID, pfuIpServerLogin = @ipServ where IdPfu=@IdPfu", ApplicationCommon.Application.ConnectionString, parCollection: sqlParams);
    }

    //'-- AGGIORNO L'APPLICATION IN PRESENZA DI MESSAGGI DI SISTEMA
    refreshMsgSys();

    //'-- gestione del contratto per i fornitori
    //'call HandleContratto()
    //
    //'--leggo la stringa delle opzioni utente per la My Home Page
    //'set objBousers = mycreateobject(BuildProgId("AFLSRV.BOUSERS"), AppServer)
    //'strOpzioni = objBousers.GetOpzioniHomePage(clng(IdPfu))
    //'if err.number <> 0 then
    //'	Err.description = Err.description
    //'	Err.Source		= Err.Source & " login.asp:GetOpzioniHomePage. ITypeAzi="&session("ITypeAzi")
    //'	errore Err.description, Err.source, Err.Number
    //'end if
    //'set objBousers = nothing

    sqlParams.Clear();
    sqlParams.Add("@IdPfu", IdPfu);
    strSql = "SELECT pfuopzioni FROM ProfiliUtente with(nolock) WHERE IdPfu=@IdPfu";
    rs = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString, sqlParams);

    string strOpzioni = string.Empty;
    if (rs is not null && rs.RecordCount > 0)
    {
        rs.MoveFirst();
        strOpzioni = CStr(rs["pfuopzioni"]);
    }

    session["OpzioniMyHomePage"] = strOpzioni;
    session["HomePageLight"] = 0;

    //'-- Inserisco in sessione un gruppo 'fittizio' legato alla lista_attivita, questo per non far vedere
    //'-- folder all'utente fino a che non arriva nella home.
    session["GROUPS_NAME"] = "LISTA_ATTIVITA";

    //'--imposto HomePage Light in base ad una opzione utente
    if (Strings.Left(Strings.Mid(strOpzioni, HomePageLight, strOpzioni.Length), 1) == "1")
    {
        session["HomePageLight"] = 1;
        session["UrlHomePage"] = "Home/HomeLightAFS.asp";
    }
    else
    {
        session["HomePageLight"] = 0;
        session["UrlHomePage"] = ApplicationCommon.Application["UrlHomePage"];
    }

    //'--imposto i separatori di decimali e migliaia in sessione
    session["SEP_DECIMALI"] = ",";
    session["SEP_MIGLIAIA"] = ".";
    if (Strings.Left(Strings.Mid(strOpzioni, UseMigliaiaDecimali, strOpzioni.Length), 1) == "1")
    {
        session["SEP_DECIMALI"] = ".";
        session["SEP_MIGLIAIA"] = ",";
    }

    if (IsMasterPageNew())
    {
        htmlToReturn.Write("<script>try{sessionStorage.clear();}catch{}</script>");
    }

    switch (session["ITypeAzi"])
    {
        case CONST_AZIENDA_PROSPECT:
            //'--Azienda Prospect
            htmlToReturn.Write("<script>");
            if (CStr(ApplicationCommon.Application["LoadFromFrame"]).ToLower() == "no")
            {
                htmlToReturn.Write($@"self.location='" + session["UrlHomePage"] + $@"?IDMP=" + IDMP + $@"&FlagCheckWeb=" + FlagCheckWeb + "&LinguaSito=" + strSuffLing + "&strOpzioni=" + strOpzioni + "&strMnemonicoMP=" + URLEncode(strMnemonicoMP) + "&UserName=" + URLEncode(UserName) + "';");
            }
            else
            {
                htmlToReturn.Write($@"main=window.open('" + session["UrlHomePage"] + "?IDMP=" + IDMP + "&FlagCheckWeb=" + FlagCheckWeb + "&LinguaSito=" + strSuffLing + "&strOpzioni=" + strOpzioni + "&strMnemonicoMP=" + URLEncode(strMnemonicoMP) + "&UserName=" + URLEncode(UserName) + "','main','toolbar=" + CONST_TOOLBAR + ",location=" + CONST_LOCATION + ",directories=" + CONST_DIRECTORIES + ",status=" + CONST_STATUS + ",menubar=" + CONST_MENUBAR + ",resizable=yes,copyhistory=" + CONST_COPYHISTORY + ",scrollbars=yes,width=790,height=590');");

            }

            htmlToReturn.Write($@"</script>");
            break;

        case CONST_AZIENDA_BUYER:
        case CONST_AZIENDA_SELLER:
        case CONST_AZIENDA_BUYER_SELLER:
        case CONST_AZIENDA_WEBBUYER:
        case CONST_AZIENDA_WEBSELLER:
        case CONST_AZIENDA_WEBBUYER_SELLER: //'tutti gli altri

            //'--controllo se ci sono attivit� da eseguire
            ControlloAttivita(htmlToReturn);

            //'--------------------------------------------------------------
            if (string.IsNullOrEmpty(strFormDiProvenienza))
            {
                htmlToReturn.Write("<script>");

                if (CStr(ApplicationCommon.Application["LoadFromFrame"]).ToLower() == "no" || NoOpenNewPage == "1")
                {

                    if (session["closeparent"] == "1")
                    {

                        //' provenienza joomla
                        //'Per mantenere un unica finestra e non aprire un popup, cambio la location del parent. se per motivi di sicurezza lato client (quando portale e applicaz. sono su domini diversi) dovesse andare in errore la .location sul parent. apro l'applicazione in un popup
                        htmlToReturn.Write($@"

									try
									{{
										parent.location='" + session["UrlHomePage"] + "?IDMP=" + IDMP + "&FlagCheckWeb=" + FlagCheckWeb + "&LinguaSito=" + strSuffLing + "&strOpzioni=" + strOpzioni + "&strMnemonicoMP=" + URLEncode(strMnemonicoMP) + "&UserName=" + URLEncode(UserName) + $@"';
									}}
									catch(e)
									{{
										main=window.open('" + session["UrlHomePage"] + "?lScreen='+ window.screen.availWidth + '&IDMP=" + IDMP + "&FlagCheckWeb=" + FlagCheckWeb + "&LinguaSito=" + strSuffLing + "&strOpzioni=" + strOpzioni + "&strMnemonicoMP=" + URLEncode(strMnemonicoMP) + "&UserName=" + URLEncode(UserName) + "','main','toolbar=" + CONST_TOOLBAR + ",location=" + CONST_LOCATION + ",directories=" + CONST_DIRECTORIES + ",status=" + CONST_STATUS + ",menubar=" + CONST_MENUBAR + ",resizable=yes,copyhistory=" + CONST_COPYHISTORY + $@",scrollbars=yes,width=790,height=590');
									}}

						");
                    }
                    else
                    {
                        htmlToReturn.Write($@"
									self.location='" + session["UrlHomePage"] + "?IDMP=" + IDMP + "&FlagCheckWeb=" + FlagCheckWeb + "&LinguaSito=" + strSuffLing + "&strOpzioni=" + strOpzioni + "&strMnemonicoMP=" + URLEncode(strMnemonicoMP) + "&UserName=" + URLEncode(UserName) + $@"';
						");
                    }

                }
                else
                {
                    htmlToReturn.Write($@"
								main=window.open('" + session["UrlHomePage"] + "?lScreen='+ window.screen.availWidth + '&IDMP=" + IDMP + "&FlagCheckWeb=" + FlagCheckWeb + "&LinguaSito=" + strSuffLing + "&strOpzioni=" + strOpzioni + "&strMnemonicoMP=" + URLEncode(strMnemonicoMP) + "&UserName=" + URLEncode(UserName) + "','main','toolbar=" + CONST_TOOLBAR + ",location=" + CONST_LOCATION + ",directories=" + CONST_DIRECTORIES + ",status=" + CONST_STATUS + ",menubar=" + CONST_MENUBAR + ",resizable=yes,copyhistory=" + CONST_COPYHISTORY + $@",scrollbars=yes,width=790,height=590');
					");
                }
                htmlToReturn.Write($@"
						</script>
				");

            }
            else
            {
                htmlToReturn.Write($@"
						<script>

						main=window.open('MyHomePage/main.asp?FlagCheckWeb=" + FlagCheckWeb + "&LinguaSito=" + strSuffLing + "&strOpzioni=" + strOpzioni + "&strMnemonicoMP=" + URLEncode(strMnemonicoMP) + "&UserName=" + URLEncode(UserName) + "','main','toolbar=" + CONST_TOOLBAR + ",location=" + CONST_LOCATION + ",directories=" + CONST_DIRECTORIES + ",status=" + CONST_STATUS + ",menubar=" + CONST_MENUBAR + ",resizable=yes,copyhistory=" + CONST_COPYHISTORY + $@",scrollbars=yes,width=790,height=590');
						</script>
					");

            }

            //'--------------scrittura nel log--------------------
            if (ApplicationCommon.Application["MakeLog"] == "1")
            {
                fileTextLog.WriteLine(DateAndTime.Now.ToString() + stridentUserForlog + ":recupero opzioni HomePage OK <br>");
            }
            //'---------------------------------------------------
            break;
        default:
            break;
    }
    //'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    //'PROCEDURA    : [errore]
    //'
    //'AUTORE       : []
    //'
    //'@bsub  Public | errore | permetti di effettuare la redirect ad u'altra pagina per visualizzare l'errore
    //'@bparm Descrizione | string | indica il tipo di errore che si � generato
    //'@bparm Sorgente | string | indica la pagina in cui si � generato l'errore e l'eventuale metodo
    //'@bparm Codice | intero | numero dell'errore
    //''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    void errore(string Descrizione, string Sorgente, int Codice, eProcurementNext.CommonModule.EprocResponse htmlToReturn)
    {
        string strMsgErr = URLEncode("[Description:" + Descrizione + "][Code:" + Codice + "][Source:" + Sorgente + "]");
        htmlToReturn.Write("<script>parent.location='Functions/errore.asp?strErrore=" + strMsgErr + "'</script>");
        throw new ResponseEndException(htmlToReturn.Out(), Response, "error");
    }

    //'----------------------------------------------------------------------------------------------------
    //'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    //'PROCEDURA    : [ExitApplicationWeb]
    //'
    //'AUTORE       : []
    //'
    //'@bsub  Public | ExitApplicationWeb | Costruisce la pagina di errore
    //'@bparm Title | string | indica la motivazione per cui non si pu� accedere all'applicazione
    //''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    void ExitApplicationWeb(string Title, EprocResponse htmlToReturn)
    {


        //'--se chiamante non � corretto
        //'--visualizzo la pagina attacco fraudolento
        //
        //'--controllo che chiamante � presente nella SYS ELENCO_PAGINE_CHIAMANTI
        //'--se presente la sys
        //'--		chiamante deve essere nella lista  ,pag1,.....,pagN,
        //'--altrimenti se la sys � vuota
        //'--		tolgo https:// oppure  http:// da chiamante
        //'--		tolgo  https:// oppure  http:// da WEBSERVERPORTALE
        //'--		la parte sinistra (len di WEBSERVERPORTALE) di chiamante deve coincidere con WEBSERVERPORTALE
        int n_IsOkChiamante = 1;

        if (!string.IsNullOrEmpty(ApplicationCommon.Application["ELENCO_PAGINE_CHIAMANTI"]))
        {

            if (("," + CStr(ApplicationCommon.Application["ELENCO_PAGINE_CHIAMANTI"]).ToUpper() + ",").Contains("," + chiamante.ToUpper() + ",") == false )
            {
                n_IsOkChiamante = 0;
            }
        }
        else
        {
            string chiamante_norm = chiamante.ToLower().Replace("https://", "");
            chiamante_norm = chiamante_norm.Replace("http://", "");
            string WEBSERVERPORTALE_norm = ApplicationCommon.Application["WEBSERVERPORTALE"].ToLower().Replace("https://", "");
            WEBSERVERPORTALE_norm = WEBSERVERPORTALE_norm.Replace("http://", "");

            if (Strings.Left(chiamante_norm, WEBSERVERPORTALE_norm.Length) != WEBSERVERPORTALE_norm)
            {
                n_IsOkChiamante = 0;
            }
        }

        //'response.write WEBSERVERPORTALE_norm & "<br>"
        //'response.write left ( chiamante_norm , len(WEBSERVERPORTALE_norm) )
        //'response.end
        //
        //'--se parametro chiamante corrotto redirect alla pagina di attacco fraudolento
        if (n_IsOkChiamante == 0)
        {
            throw new ResponseRedirectException($@"{ApplicationCommon.Application["strVirtualDirectory"]}/blocked.asp", Response);
        }

        if (session["redirectback"] != "yes")
        {

            if (IsNull(session["strSuffLing"]))
            {
                session["strSuffLing"] = "I";
            }
            htmlToReturn.Write($@"<html>");
            htmlToReturn.Write($@"<head><meta http-equiv=content-type content=text/html; charset=utf-8>");
            htmlToReturn.Write($@"<title>");
            htmlToReturn.Write($@"</title>");
            htmlToReturn.Write($@"</head>");
            htmlToReturn.Write($@"<link ""rel=stylesheet"" href=""Themes/Default/VerticalModel.css"" type=""text/css"" >");
            htmlToReturn.Write($@"<link ""rel=stylesheet"" href=""Themes/Default/Common.css"" type=""text/css"" >");
            htmlToReturn.Write($@"<body >");
            htmlToReturn.Write($@"<table border=""0"" cellpadding=""2"" cellspacing=""0"" width=""300"" align=""left"">");
            htmlToReturn.Write($@"<tr><td>");
            htmlToReturn.Write($@"<font class=""FontDescText"">");
            htmlToReturn.Write(ApplicationCommon.CNV("Attenzione"));
            htmlToReturn.Write($@"</font>");
            htmlToReturn.Write($@"</td></tr>");
            htmlToReturn.Write($@"<tr><td>");
            htmlToReturn.Write($@"<font class=""FontDescText"">");
            htmlToReturn.Write(Title);
            htmlToReturn.Write($@"</font>");
            htmlToReturn.Write($@"</td></tr>");
            htmlToReturn.Write($@"</table>");
            htmlToReturn.Write($@"<br><br><br>");
            htmlToReturn.Write($@"<p align=""left""><a href=""" + HtmlEncode(chiamante) + "?strMnemonicoMP=" + URLEncode(strMnemonicoMP) + "&USERNAME=" + URLEncode(session["Login"]) + "&IDAZIENDA=" + session["IdCompany"] + "&SuffissoLingua=" + session["strSuffLing"] + @""" target=""_self""><img src=""images/General/LabelListFunctions/back.gif"" border=""0"" alt=""" + ApplicationCommon.CNV("Torna alla Homepage") + @"""></a></p>");
            htmlToReturn.Write($@"</body>");
            htmlToReturn.Write($@"</html>");

        }
        else
        {
            StringValues STRURLPARTECIPA = "";
            string STRURLPARTECIPA_Value = "";
            StringValues IDMSGPARTECIPA = "";
            string IDMSGPARTECIPA_Value = "";

            if (Request.HasFormContentType)
            {
                if (Request.Form.TryGetValue("STRURLPARTECIPA", out STRURLPARTECIPA))
                {
                    STRURLPARTECIPA_Value = STRURLPARTECIPA.First();
                }
                if (Request.Form.TryGetValue("IDMSGPARTECIPA", out IDMSGPARTECIPA))
                {
                    IDMSGPARTECIPA_Value = IDMSGPARTECIPA.First();
                }
            }
            //'Response.Redirect server.htmlencode(request.QueryString("chiamante")) & "?Errore="  & Title & "&USERNAME=" & server.URLEncode(session("Login"))&"&IDAZIENDA="&session("IdCompany")& "&STRURLPARTECIPA=" & server.URLEncode(Request.Form("STRURLPARTECIPA")) & "&IDMSGPARTECIPA=" & Request.Form("IDMSGPARTECIPA")
            throw new ResponseRedirectException(HtmlEncode(chiamante) + "?Errore=" + Title + "&USERNAME=" + URLEncode(session["Login"]) + "&IDAZIENDA=" + session["IdCompany"] + "&STRURLPARTECIPA=" + STRURLPARTECIPA_Value + "&IDMSGPARTECIPA=" + IDMSGPARTECIPA_Value, Response);
        }

        throw new ResponseEndException(htmlToReturn.Out(), Response, "errore");
    }

    //'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    //'PROCEDURA    : [CheckFirstlogin]
    //'
    //'AUTORE       : []
    //'
    //'@bsub  Public | CheckFirstlogin | gestione della prima login
    //''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    void CheckFirstlogin()
    {
        throw new Exception("metodo non usato nei sorgenti");
        //if not IsEnabled2(FirstLoginUser,session("OpzioniMyHomePage")) then
        //	if session("ajax") <> "1"	then
        //		if lcase(Application("LoadFromFrame"))="no" then
        //			%>
        //				<script language="javascript">
        //					self.location='first_login.asp?STRURLPARTECIPA=<%=server.urlencode(session("STRURLPARTECIPA"))%>&lScreen='+ window.screen.availWidth + '&strMnemonicoMP=<%=server.URLEncode(strMnemonicoMP)%>&FlagCheckWeb=<%=FlagCheckWeb%>&LoadForm=1&IDMP=<%=IDMP%>';
        //				</script>
        //		<%
        //		else
        //			%>
        //				<script language="javascript">
        //					const_width=500;
        //					const_height=480;
        //					sinistra=(screen.width-const_width)/2;
        //					alto=(screen.height-const_height)/2;
        //					window.open('first_login.asp?STRURLPARTECIPA=<%=server.urlencode(session("STRURLPARTECIPA"))%>&lScreen='+ window.screen.availWidth + '&strMnemonicoMP=<%=server.URLEncode(strMnemonicoMP)%>&FlagCheckWeb=<%=FlagCheckWeb%>&LoadForm=1&IDMP=<%=IDMP%>','first_login','toolbar=no,location=no,directories=no,status=<%=CONST_STATUS%>,menubar=no,resizable=yes,copyhistory=no,scrollbars=yes,width='+const_width+',height='+const_height+',left='+sinistra+',top='+alto+',screenX='+sinistra+',screenY='+alto+'');
        //				</script>
        //		<%
        //		end if
        //	else
        //		response.clear
        //		if lcase(Application("LoadFromFrame"))="no" then
        //			%>


        //				self.location='<%=Application("strVirtualDirectory")%>/first_login.asp?STRURLPARTECIPA=<%=server.urlencode(session("STRURLPARTECIPA"))%>&lScreen='+ window.screen.availWidth + '&strMnemonicoMP=<%=server.URLEncode(strMnemonicoMP)%>&FlagCheckWeb=<%=FlagCheckWeb%>&LoadForm=1&IDMP=<%=IDMP%>';

        //		<%
        //		else
        //			%>

        //				const_width=500;
        //				const_height=480;
        //				sinistra=(screen.width-const_width)/2;
        //				alto=(screen.height-const_height)/2;
        //				window.open('<%=Application("strVirtualDirectory")%>/first_login.asp?STRURLPARTECIPA=<%=server.urlencode(session("STRURLPARTECIPA"))%>&lScreen='+ window.screen.availWidth + '&strMnemonicoMP=<%=server.URLEncode(strMnemonicoMP)%>&FlagCheckWeb=<%=FlagCheckWeb%>&LoadForm=1&IDMP=<%=IDMP%>','first_login','toolbar=no,location=no,directories=no,status=<%=CONST_STATUS%>,menubar=no,resizable=yes,copyhistory=no,scrollbars=yes,width='+const_width+',height='+const_height+',left='+sinistra+',top='+alto+',screenX='+sinistra+',screenY='+alto+'');

        //		<%
        //		end if
        //	end if

        //	Response.end

        //end if

    }

    //'DESC=controlla se abilitare il login corrente
    //'     non lo abilita se dalla stessa macchina � loggato un altro utente
    bool EnableCurrentLogin(EprocResponse htmlToReturn)
    {
        bool boolToReturn = true;

        if (!string.IsNullOrEmpty(session["OldIdPfu"]))
        {
            if (CStr(session["IdPfu"]) != CStr(IdPfu))
            {
                htmlToReturn.Write($@"

					<iframe id=""FrmLogOut"" name=""FrmLogOut"" src=""functions/Loading.asp"" height=""0"" width=""0"">
					</iframe>

					<script language=""javascript"">

						alert('" + ApplicationCommon.CNV("attenzione chiudere tutte le altre sessioni aperte") + @"');


					</script>

				");

                boolToReturn = false;
            }
        }

        return boolToReturn;
    }

    void HandleContratto()
    {
        throw new Exception("metodo non usato nei sorgenti");
    }

    void HandleCompletaIscrizione()
    {
        throw new Exception("metodo non usato nei sorgenti");
    }

    //' x Checkattivita
    void ControlloAttivita(EprocResponse htmlToReturn)
    {
        //Response.clear

        //'if instr(1,Application("CheckAttivita"),session("sProfilo")) > 0 then
        if (verificaProfilo(ApplicationCommon.Application["CheckAttivita"], session["sProfilo"]))
        {
            if (session["ajax"] == "1")
            {
                htmlToReturn.Write($@"

					const_width=screen.width;
					const_height=screen.height;
					sinistra=(screen.width-const_width)/2;
					alto=(screen.height-const_height)/2;

				");

                if (ApplicationCommon.Application["LoadFromFrame"].ToLower() == "no")
                {
                    htmlToReturn.Write("self.location = '" + ApplicationCommon.Application["strVirtualDirectory"] + "/ctl_library/path.asp?ROOT=YES&KEY=viewer&url=" + URLEncode("CheckAttivita.asp?STRURLPARTECIPA=" + URLEncode(session["STRURLPARTECIPA"]) + @"&hScreen=' + window.screen.availHeight + '&lScreen='+ window.screen.availWidth + '&strMnemonicoMP=" + strMnemonicoMP + "&FlagCheckWeb=" + FlagCheckWeb + "&LoadForm=1&IDMP=" + IDMP) + "';");
                }
                else
                {
                    htmlToReturn.Write("window.open('" + ApplicationCommon.Application["strVirtualDirectory"] + "/ctl_library/path.asp?ROOT=YES&KEY=viewer&url=" + URLEncode("CheckAttivita.asp?STRURLPARTECIPA=" + URLEncode(session["STRURLPARTECIPA"]) + @"&hScreen=' + window.screen.availHeight + '&lScreen='+ window.screen.availWidth + '&strMnemonicoMP=" + strMnemonicoMP + "&FlagCheckWeb=" + FlagCheckWeb + "&LoadForm=1&IDMP=" + IDMP) + "','first_login','toolbar=no,location=no,directories=no,status=" + CONST_STATUS + ",menubar=no,resizable=yes,copyhistory=no,scrollbars=yes,width='+const_width+',height='+const_height+',left='+sinistra+',top='+alto+',screenX='+sinistra+',screenY='+alto+'');");
                }
            }
            else
            {
                htmlToReturn.Write($@"

					<script language=""javascript"">

						try
						{{
							//document.domain = '" + getBaseDomain() + $@"';
						}}
						catch(e){{}}

						const_width=screen.width;
						const_height=screen.height;
						sinistra=(screen.width-const_width)/2;
						alto=(screen.height-const_height)/2;


				");

                if (CStr(ApplicationCommon.Application["LoadFromFrame"]).ToLower() == "no")
                {
                    if (session["closeparent"] == "1")
                    {
                        //' provenienza joomla
                        string strRedirectToApp = ApplicationCommon.Application["strVirtualDirectory"] + "/ctl_library/path.asp?ROOT=YES&KEY=viewer&url=" + URLEncode("CheckAttivita.asp?STRURLPARTECIPA=" + URLEncode(session["STRURLPARTECIPA"]) + "&hScreen=' + window.screen.availHeight + '&lScreen='+ window.screen.availWidth + '&strMnemonicoMP=" + strMnemonicoMP + "&FlagCheckWeb=" + FlagCheckWeb + "&LoadForm=1&IDMP=" + IDMP);

                        //'Per mantenere un unica finestra e non aprire un popup, cambio la location del parent. se per motivi di sicurezza lato client (quando portale e applicaz. sono su domini diversi) dovesse andare in errore la .location sul parent. apro l'applicazione in un popup
                        htmlToReturn.Write($@"

								try
								{{
									parent.location = '" + strRedirectToApp + $@"';
								}}
								catch(e)
								{{
									" + "window.open('" + ApplicationCommon.Application["strVirtualDirectory"] + "/ctl_library/path.asp?ROOT=YES&KEY=viewer&url=" + URLEncode("CheckAttivita.asp?STRURLPARTECIPA=" + URLEncode(session["STRURLPARTECIPA"]) + @"&hScreen=' + window.screen.availHeight + '&lScreen=' + window.screen.availWidth + '&strMnemonicoMP=" + strMnemonicoMP + "&FlagCheckWeb=" + FlagCheckWeb + "&LoadForm=1&IDMP=" + IDMP) + "', 'first_login', 'toolbar=no,location=no,directories=no,status=" + CONST_STATUS + ",menubar=no,resizable=yes,copyhistory=no,scrollbars=yes,width=' + const_width + ',height=' + const_height + ',left=' + sinistra + ',top=' + alto + ',screenX=' + sinistra + ',screenY=' + alto + ''); " + @"
								}}


						");
                    }
                    else
                    {
                        htmlToReturn.Write(@"self.location = '" + ApplicationCommon.Application["strVirtualDirectory"] + "/ctl_library/path.asp?ROOT=YES&KEY=viewer&url=" + URLEncode("CheckAttivita.asp?STRURLPARTECIPA=" + URLEncode(session["STRURLPARTECIPA"]) + @"&hScreen=' + window.screen.availHeight + '&lScreen='+ window.screen.availWidth + '&strMnemonicoMP=" + strMnemonicoMP + "&FlagCheckWeb=" + FlagCheckWeb + "&LoadForm=1&IDMP=" + IDMP) + "';");
                    }

                }
                else
                {
                    htmlToReturn.Write(@"window.open('" + ApplicationCommon.Application["strVirtualDirectory"] + @"/ctl_library/path.asp?ROOT=YES&KEY=viewer&url=" + URLEncode("CheckAttivita.asp?STRURLPARTECIPA=" + URLEncode(session["STRURLPARTECIPA"]) + @"&hScreen=' + window.screen.availHeight + '&lScreen='+ window.screen.availWidth + '&strMnemonicoMP=" + strMnemonicoMP + "&FlagCheckWeb=" + FlagCheckWeb + "&LoadForm=1&IDMP=" + IDMP) + @"','first_login','toolbar=no,location=no,directories=no,status=" + CONST_STATUS + @",menubar=no,resizable=yes,copyhistory=no,scrollbars=yes,width='+const_width+',height='+const_height+',left='+sinistra+',top='+alto+',screenX='+sinistra+',screenY='+alto+'');");
                }



                if (session["closeparent"] == "1" && CStr(ApplicationCommon.Application["LoadFromFrame"]).ToLower() != "no")
                {
                    //'-- Chiudo la modale chiamante (provenienza joomla) ricaricando la pagina opener
                    htmlToReturn.Write($@"

							try
							{{
								parent.location.href=parent.location.href;
							}}
							catch(e) {{}}

					");
                }
                htmlToReturn.Write($@"


					</script>


				");
            }
            Write_CTL_Profiler("login.ASP.FINE", "", "", Request, TimeStartPage, configuration, ApplicationCommon.Application);

            //throw new ResponseEndException(htmlToReturn.Out(), "login.ASP.FINE");
        }
        else
        {
            if (session["ajax"] != "1")
            {

                if (session["closeparent"] == "1" && CStr(ApplicationCommon.Application["LoadFromFrame"]).ToLower() != "no")
                {
                    //'-- Chiudo la modale chiamante (provenienza joomla) ricaricando la pagina opener
                    htmlToReturn.Write($@"

					<script language=""javascript"">
						try
						{{
							parent.location.href=parent.location.href;
						}}
						catch(e) {{}}
					</script>
				");
                }

            }

        }
    }

    string getBaseDomain()
    {
        string? server;
        string[] a;
        string x;

        server = Request.HttpContext.GetServerVariable("server_name");

        a = Strings.Split(server, ".");

        x = a[a.Length - 1];

        if (a.Length - 1 > 1)
        {
            x = a[a.Length - 1 - 1] + "." + a[a.Length - 1];
        }
        else
        {
            x = a[a.Length - 1];
        }

        return x;
    }

    void DeleteFileAttach()
    {
        throw new Exception("metodo non usato nei sorgenti");
    }

    bool verificaProfilo(dynamic listaProfiliAttivi, dynamic profiliUtente)
    {

        bool boolToReturn;

        if (string.IsNullOrEmpty(CStr(listaProfiliAttivi).Trim()) || string.IsNullOrEmpty(CStr(profiliUtente).Trim()))
        {
            boolToReturn = true;
        }
        else
        {
            boolToReturn = false;
            int totChar = profiliUtente.Length;

            for (int i = 1; i <= totChar; i++)
            {
                string checkChar = Strings.Mid(profiliUtente, i, 1);

                if (listaProfiliAttivi.Contains(checkChar))
                {
                    boolToReturn = true;
                }
            }
        }

        return boolToReturn;
    }

    void controllaSessioniConcorrenti(EprocResponse htmlToReturn)
    {

        //on error resume next

        //'-- PRE-REQUISITI PER EFFETTUARE IL CONTROLLO SULLE SESSIONI CONCORRENTI :
        //'--		* L'utente deve essersi autenticato con successo
        //'--		* L'utente loggato non deve avere nelle lettere di profilo il # ( carattere speciale associato al profilo SysAdmin che permette ad utenze di backoffice di effettuare login multipli su pi� postazioni, vedi HD )
        if (!IsEmpty(session["IdPfu"]) && session["IdPfu"] > 0)
        {

            if (!(session["sProfilo"].Contains("#")))
            {

                IdPfu = session["IdPfu"];

                string SessionID = session.SessionID;
                procedi = CStr(GetParamURL(Request.QueryString.ToString(), "getownses")).ToUpper();
                //'ipServer = cstr(Request.ServerVariables("LOCAL_ADDR"))
                string ipServer = CStr(ApplicationCommon.getAflinkRegistryKey("IdIpNode"));

                //'-------------------------------------------------------------------------------
                //'-- 1. SE PROVENIAMO DALLA CONFERMA DELL'UTENTE PER IL POSSESSO DELLA SESSIONE -
                //'-------------------------------------------------------------------------------
                if (procedi == "YES")
                {
                    accessGUID = CStr(session["accessGUID"]);

                    //'---------------------------------------------------------------------------
                    //'-- 2.A VERIFICA DI SICUREZZA PER LA CONFERMA DI POSSESSO DELLA SESSIONE ( non pi� necessaria visto che non c'� il problema del bilanciatore, tutti i dati sensibili sono messi direttamente in session)
                    //'---------------------------------------------------------------------------
                    //'tmpIdpfu = getAccessFromGuid(accessGUID)

                    //'-- se l'idpfu NON coincide ( sono passati i 30 secondi di access guid o l'utente non � corretto )
                    //'if tmpIdpfu <> IdPfu then

                    //'	set objDB = nothing
                    //'	ExitApplicationWeb( CNVMP(session("IdMP"),"Accesso non consentito per superamento tempo di inattivita. Effettuare nuovamente il login"))

                    //'end if
                }
                else
                {
                    //'---------------------------------------------------------------------------
                    //'-- 2.B VERIFICO SE ASSOCIATO AL MIO PROFILO C'� GI� UN UTENZA COLLEGATA  --
                    //'---------------------------------------------------------------------------
                    strSql = "select idpfu from profiliutente with(nolock) where idpfu = " + CStr(IdPfu) + " and isnull(pfuSessionID,'') <> '' and isnull(pfuSessionID,'') <> '" + SessionID.Replace("'", "''") + "'";
                    try
                    {
                        TSRecordSet? rs = cdf.GetRSReadFromQuery_(CStr(strSql), ApplicationCommon.Application["ConnectionString"]);

                        //'-- Se non ci sono errori ( quindi � presente la colonna pfuSessionID )
                        //'--	e la select ha ritornato record
                        if (rs is not null && rs.RecordCount > 0)
                        {
                            throw new ResponseRedirectException("login_conferma.asp?lo=lista_attivita", Response);
                        }

                    }
                    catch (Exception ex) when (ex is not EprocNextException)
                    {

                    }

                }

                //'--------------------------------------------------------------------------------------------
                //'-- 3. SUPERATI I CONTROLLI E L'EVENTUALE CONFERMA UTENTE AGGIORNO CON L'ATTUALE SESSIONID	-
                //'--------------------------------------------------------------------------------------------
                _TabManage.ExecSql("update profiliutente set pfuSessionID = '" + SessionID.Replace("'", "''") + "', pfuIpServerLogin = '" + ipServer.Replace("'", "''") + "' where idpfu=" + CStr(IdPfu), ApplicationCommon.Application.ConnectionString);

                //'if procedi <> "" then
                //'	response.write strSql
                //'	response.end
                //'end if
            }
        }
        else
        {
            ExitApplicationWeb(ApplicationCommon.CNV("Inserire Login  corrette."), htmlToReturn);
        }

        //on error goto 0
    }

    void refreshMsgSys()
    {
        long contatore;
        //'-- Se non era mai stato inserito un messaggio dall'ultimo avvio dell'applicazione
        if (IsEmpty(ApplicationCommon.Application["CONTATORE_MESSAGGI"]))
        {
            contatore = 0;
        }
        else
        {
            contatore = CLng(ApplicationCommon.Application["CONTATORE_MESSAGGI"]);
        }

        //'--msgSysAttivo = getSysMessageAttivo()
        //'-- legge tutti i messaggi di sistema attualmente attivi
        string strSQL = "select * from Messaggi_di_sistema_attivi order by DF asc";

        //objDBmsg = createobject( "ctldb.clsTabManage" )
        TSRecordSet? rsMsg = cdf.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString);

        //'-- se sono presenti messaggi
        if (rsMsg is not null && rsMsg.RecordCount > 0)
        {
            //'-- li carico in application
            rsMsg.MoveFirst();
            while (!rsMsg.EOF)
            {

                string msgSysAttivo = CStr(rsMsg["Body"]);
                bool bFound = false;
                //'-- se il messaggio non è già nella coda lo inserisco
                for (int i = 1; i <= contatore; i++)
                { //to contatore

                    if (ApplicationCommon.Application[i + "_SYS_MSG"] == msgSysAttivo)
                    {
                        bFound = true;
                        break;
                    }

                }

                if (bFound == false)
                {
                    contatore = contatore + 1;
                    ApplicationCommon.Application["CONTATORE_MESSAGGI"] = contatore;
                    ApplicationCommon.Application[contatore + "_SYS_MSG"] = msgSysAttivo;
                    ApplicationCommon.Application[contatore + "_SYS_DI"] = rsMsg.Fields["DI"];
                    ApplicationCommon.Application[contatore + "_SYS_DF"] = rsMsg.Fields["DF"];
                }

                rsMsg.MoveNext();
            }
        }

        string getSysMessageAttivo()
        {
            string strToReturn = string.Empty;

            string strSQL = "select Body from CTL_DOC with(nolock) inner join Document_FermoSistema with(nolock) on idHeader = Id where TipoDoc = 'FERMOSISTEMA' and Deleted = 0 and StatoFunzionale = 'Confermato' and ( ( getdate() >= DataSysMsgDA and getdate() < DataInizio ) or ( getdate() >= DataAvvisoDal and getdate() < DataAvvisoAl ) )";

            TSRecordSet? rsMsg = cdf.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString);

            if (rsMsg is not null && rsMsg.RecordCount > 0)
            {
                rsMsg.MoveFirst();
                strToReturn = CStr(rsMsg["Body"]);
            }

            return strToReturn;
        }
    }
    session.Save();
    session["SessionIsAuth"] = true;
    HttpContext.Response.Cookies.Append(Cookie_Auth_Name, token, new CookieOptions() { HttpOnly = Cookie_HttpOnly, Secure = Cookie_Secure });
}
@Html.Raw(htmlToReturn.Out())
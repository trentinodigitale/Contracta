@page "/Report/prn_PDA_COMUNICAZIONE_OFFERTA_RISP.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using Microsoft.VisualBasic
@using System.Globalization
@using static eProcurementNext.CommonDB.Basic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.print_documentModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.Report.prn_PDA_COMUNICAZIONE_OFFERTA_RISPModel;
@using static eProcurementNext.Session.SessionMiddleware;
@model eProcurementNext.Razor.Pages.Report.prn_PDA_COMUNICAZIONE_OFFERTA_RISPModel
@{
    CommonDbFunctions cdf = new();
    LoadSession(HttpContext, session);
    EprocResponse htmlToReturn = new();
    var sqlParams = new Dictionary<string, object?>();
    objDoc = PrintDocument(session, htmlToReturn, HttpContext, Response, Request);//PrintDocument ok
    string idDoc = objDoc.mp_IDDoc;
}
@{

    htmlToReturn.Write($@"
	<html>
	<head>
	<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">

	<link rel=""stylesheet"" type=""text/css"" href=""../ctl_library/themes/GridPrint.css""  />
	<style>
	.display_none
	{{
		display: none;

	}}
	</style>
	<title>" + ApplicationCommon.CNV("Offerta Migliorativa") + $@"</title>
	</head>");

    void Header()
    {
        htmlToReturn.Write($@"<tr><td height=""50px"" align=""center"" valign=""top"" >");

        string imgHeader = ApplicationCommon.CNV("HEADER_STAMPE");

        if (imgHeader.Contains("???", StringComparison.Ordinal))
        {
            htmlToReturn.Write($@"<img height=""50px"" src=""logo_new.gif"" border=""0"" alt=""" + ApplicationCommon.CNV("ALT LOGO") + $@"""/>");
        }
        else
        {
            htmlToReturn.Write(imgHeader);
        }

        htmlToReturn.Write($@"</td></tr>

				<tr><td align=""center"" valign=""top"" >" + ApplicationCommon.CNV("HEADER_STAMPA_BUSTA_OFFERTA") + $@"</td></tr>");

    }

    string stazioneappaltante(dynamic cod)
    {
        //'--recupero info ente
        string ret = string.Empty;
        sqlParams.Clear();
        sqlParams.Add("@cod", CInt(cod));
        TSRecordSet? rsEnte = cdf.GetRSReadFromQuery_("select aziRagioneSociale from Aziende where idazi=@cod", ApplicationCommon.Application.ConnectionString, sqlParams);
        if (rsEnte is not null && rsEnte.RecordCount > 0)
        {
            rsEnte.MoveFirst();
            ret = CStr(rsEnte["aziRagioneSociale"]);
        }
        return ret;
    }

    string recuperoTipoProcedura(string cod)
    {
        string ret = string.Empty;
        sqlParams.Clear();
        sqlParams.Add("@cod", CInt(cod));
        TSRecordSet? rstipoproc = cdf.GetRSReadFromQuery_("select c21.tipodoc,ISNULL(DB.TipoProceduraCaratteristica,'') as TipoProceduraCaratteristica, dbo.GetCodDom2DescML('Caratteristica',ISNULL(DB.TipoProceduraCaratteristica,''),'I') as desc_carat, db.ProceduraGara, dbo.GetDescDominioFromDztNome('ProceduraGara','I',ISNULL(db.ProceduraGara,'')) as Desc_ProceduraGara  from Document_MicroLotti_Dettagli_view D  inner join ctl_doc c on c.id=D.IdHeader and C.TipoDoc='PDA_COMUNICAZIONE_OFFERTA_RISP' inner join ctl_doc C1 on C1.id=C.LinkedDoc  inner join ctl_doc C11 on C11.id=C1.LinkedDoc  inner join ctl_doc C2 on C2.id=C11.LinkedDoc  inner join ctl_doc C21 on C21.id=C2.LinkedDoc inner join document_bando DB on DB.idHeader=c21.id where D.IdHeader=@cod", ApplicationCommon.Application.ConnectionString, sqlParams);
        if (rstipoproc is not null && rstipoproc.RecordCount > 0)
        {
            rstipoproc.MoveFirst();
            if (CStr(rstipoproc["tipodoc"]) == "BANDO_SEMPLIFICATO")
            {
                ret = "Bando Semplificato";
            }
            if (CStr(rstipoproc["tipodoc"]) == "BANDO_GARA" && !string.IsNullOrEmpty(CStr(rstipoproc["TipoProceduraCaratteristica"])))
            {
                ret = CStr(rstipoproc["desc_carat"]);
            }
            if (CStr(rstipoproc["tipodoc"]) == "BANDO_GARA" && string.IsNullOrEmpty(CStr(rstipoproc["TipoProceduraCaratteristica"])))
            {
                ret = CStr(rstipoproc["Desc_ProceduraGara"]);
            }
        }
        return ret;
    }

    string recuperoDivisioneLotti(string cod)
    {
        string ret = string.Empty;
        sqlParams.Clear();
        sqlParams.Add("@cod", CInt(cod));
        TSRecordSet? rsDivisioneLotti = cdf.GetRSReadFromQuery_("select DB.Divisione_Lotti as DivisioneLotti  from Document_MicroLotti_Dettagli_view D  inner join ctl_doc c on c.id=D.IdHeader and C.TipoDoc='PDA_COMUNICAZIONE_OFFERTA_RISP' inner join ctl_doc C1 on C1.id=C.LinkedDoc  inner join ctl_doc C11 on C11.id=C1.LinkedDoc  inner join ctl_doc C2 on C2.id=C11.LinkedDoc  inner join ctl_doc C21 on C21.id=C2.LinkedDoc inner join document_bando DB on DB.idHeader=c21.id where D.IdHeader=@cod", ApplicationCommon.Application.ConnectionString, sqlParams);
        if (rsDivisioneLotti is not null && rsDivisioneLotti.RecordCount > 0)
        {
            rsDivisioneLotti.MoveFirst();
            ret = CStr(rsDivisioneLotti["DivisioneLotti"]);
        }
        return ret;
    }

    string infoOfferta(string cod, string param)
    {
        string ret = string.Empty;
        sqlParams.Clear();
        sqlParams.Add("@cod", CInt(cod));
        TSRecordSet? rsofferta = cdf.GetRSReadFromQuery_("select C.idpfu,p.pfuNomeUtente + ' ' + p.pfuCognome as Responsabile ,C.Body,C.ProtocolloRiferimento from  Document_MicroLotti_Dettagli_view D inner join ctl_doc C on C.id=D.idheader and C.tipodoc='PDA_COMUNICAZIONE_OFFERTA_RISP' inner join profiliUtente P on P.idpfu=C.idpfu where D.idheader=@cod", ApplicationCommon.Application.ConnectionString, sqlParams);
        if (rsofferta is not null && rsofferta.RecordCount > 0)
        {
            rsofferta.MoveFirst();
            if (param == "Oggetto")
            {
                ret = CStr(rsofferta["Body"]);
            }
            if (param == "Registro_Bando")
            {
                ret = CStr(rsofferta["ProtocolloRiferimento"]);
            }
            if (param == "Responsabile")
            {
                ret = CStr(rsofferta["Responsabile"]);
            }
        }
        return ret;
    }

    string DenominazioneATI(string cod)
    {
        string ret = string.Empty;
        sqlParams.Clear();
        sqlParams.Add("@cod", CInt(cod));
        TSRecordSet? rsDenominazioneATI = cdf.GetRSReadFromQuery_("select value from Document_MicroLotti_Dettagli_view D inner join ctl_doc c on c.id=D.IdHeader and C.TipoDoc='PDA_COMUNICAZIONE_OFFERTA_RISP' inner join ctl_doc_value CV on CV.IdHeader=c.Id and DSE_ID='TESTATA_RTI' and CV.DZT_Name='DenominazioneATI' where D.idheader=@cod", ApplicationCommon.Application.ConnectionString, sqlParams);

        if (rsDenominazioneATI is not null)
        {
            if (rsDenominazioneATI.RecordCount > 0)
            {
                rsDenominazioneATI.MoveFirst();
                ret = CStr(rsDenominazioneATI["value"]);
            }
            else
            {
                //'-- se il campo è vuoto recuperiamo la ragione sociale del fornitore
                sqlParams.Clear();
                sqlParams.Add("@cod", CInt(cod));
                rsDenominazioneATI = cdf.GetRSReadFromQuery_("select aziRagioneSociale  from Document_MicroLotti_Dettagli_view D inner join ctl_doc c on c.id=D.IdHeader and C.TipoDoc='PDA_COMUNICAZIONE_OFFERTA_RISP' inner join aziende a on a.idazi = c.destinatario_azi where D.idheader=@cod", ApplicationCommon.Application.ConnectionString, sqlParams);
                if (rsDenominazioneATI is not null && rsDenominazioneATI.RecordCount > 0)
                {
                    ret = CStr(rsDenominazioneATI["aziRagioneSociale"]);
                }
            }
        }
        return ret;
    }

    void info_concorrente(string cod)
    {
        string ret = string.Empty;
        sqlParams.Clear();
        sqlParams.Add("@cod", cod);
        TSRecordSet? rsinfo_concorrente = cdf.GetRSReadFromQuery_("select C.azienda,aziIndirizzoLeg + ' - ' + aziCAPLeg + ' ' + aziLocalitaLeg + ' (' + aziProvinciaLeg +') ' as aziIndirizzoLeg,'C.F. '+ vatValore_FT as cF, 'P.IVA ' + aziPartitaIVA as PIVA  from Document_MicroLotti_Dettagli_view D inner join ctl_doc c on c.id=D.IdHeader and C.TipoDoc='PDA_COMUNICAZIONE_OFFERTA_RISP' inner join Aziende A on A.IdAzi=C.Destinatario_Azi inner join DM_Attributi on A.IdAzi=lnk and dztNome='codicefiscale' where D.idheader=@cod", ApplicationCommon.Application.ConnectionString, sqlParams);
        if (rsinfo_concorrente is not null && rsinfo_concorrente.RecordCount > 0)
        {
            rsinfo_concorrente.MoveFirst();
            htmlToReturn.Write($@"<tr><td>" + CStr(rsinfo_concorrente["aziIndirizzoLeg"]) + $@"</td></tr>
							<tr><td>" + CStr(rsinfo_concorrente["cF"]) + $@"&nbsp;" + CStr(rsinfo_concorrente["PIVA"]) + $@"</td></tr>");
        }
    }

    string recuperoNumeroLotto(string cod)
    {
        string ret = string.Empty;
        sqlParams.Clear();
        sqlParams.Add("@tipoDoc", "PDA_COMUNICAZIONE_OFFERTA_RISP");
        sqlParams.Add("@cod", cod);
        TSRecordSet? rs_recuperoNumeroLotto = cdf.GetRSReadFromQuery_("select top 1 NumeroLotto from Document_MicroLotti_Dettagli where TipoDoc=tipoDoc and IdHeader=@cod", ApplicationCommon.Application.ConnectionString, sqlParams);
        if (rs_recuperoNumeroLotto is not null && rs_recuperoNumeroLotto.RecordCount > 0)
        {
            rs_recuperoNumeroLotto.MoveFirst();
            ret = CStr(rs_recuperoNumeroLotto["NumeroLotto"]);
        }
        return ret;
    }


    htmlToReturn.Write($@"<body>
	<table style=""font-weight:bold; align=center; vertical-align:center;"" width=""100%"" >
	");
    Header();
    htmlToReturn.Write($@"
							</table>
	<table cellpadding=0 cellspacing=0>
		 <thead>



    	<tr><td>&nbsp;
	</td></tr>

		<tr>
    	  <td nowrap style=""font-size:18px; align=left""><b>Stazione appaltante:</b> " + stazioneappaltante(DOC_FieldTecnical("TESTATA", "Azienda")) + $@"</td>
    	</tr>
		<tr>
    	  <td nowrap style=""font-size:18px; align=left""><b>Tipo Procedura:</b> " + recuperoTipoProcedura(idDoc) + $@"</td>
    	</tr>
		<tr>
    	  <td nowrap style=""font-size:18px; align=left""><b>Titolo:</b> " + DOC_FieldTecnical("TESTATA", "Titolo") + $@" <b>e numero registro di sistema:</b> " + infoOfferta(idDoc, "Registro_Bando") + $@" </td>
    	</tr>

		<tr><td>&nbsp;</td></tr>



        <tr><td>&nbsp;</td></tr>
        <tr ><td style=""border:0px;"" ><label style=""font-size:18px; font-weight:bold; align:left"">

        <tr><td>&nbsp;</td></tr>
        </thead>

        <tr>
			<td style=""border:0px;"" >");


    //dim ObjSession
    //ObjSession = session("Session")
    //set ObjSession(0) = Request.QueryString
    //set ObjSession(1) = Request.form

    //'-- Passiamo di nuovo anche la request all'indice 3 per permettere alla classe ctldb.blacklist di recuperare l'ip
    //set ObjSession(3) = request
    //set ObjSession(5) = session
    //set ObjSession(6) = application
    //ObjSession(9) = application("Server_RDS")
    //ObjSession(10) = session("Funzionalita")' permessi utenti
    //set ObjSession(13) = objNewDizMlng("MultiLinguismo")
    //session("Session") = ObjSession

    //'--stampo la griglia dell'offerta del microlotto
    //Set objDB = CreateObject("ctldb.clstabmanage")

    //'--recupero modello offerta microlotto
    TSRecordSet? rsM = cdf.GetRSReadFromQuery_("select MOD_Name from CTL_DOC_SECTION_MODEL where idheader = " + idDoc + " and DSE_ID in( 'OFFERTA' )", ApplicationCommon.Application.ConnectionString);
    if (rsM is not null && rsM.RecordCount > 0)
    {
        string strModelloOfferta = CStr(rsM["MOD_Name"]);

        // '--recupero modello griglia
        Dictionary<string, Field> mp_Columns = new Dictionary<string, Field>();
        Dictionary<string, Grid_ColumnsProperty> mp_ColumnsProperty = new Dictionary<string, Grid_ColumnsProperty>();
        LibDbModelExt mp_objDB = new LibDbModelExt();
        mp_objDB.GetFilteredFieldsWeb(strModelloOfferta, ref mp_Columns, ref mp_ColumnsProperty, CStr(session["strSuffLing"]), 0, 0, ApplicationCommon.Application.ConnectionString, session, true);
        //mp_Columns.Remove("FNZ_DEL");

        //'--rimuovo colonna Esito
        //'mp_Columns.Remove "EsitoRiga"
        //stop
        Grid_ColumnsProperty prop;
        try
        {
            prop = mp_ColumnsProperty["EsitoRiga"];
            prop.Hide = true;
        }
        catch
        {
            //err.Clear
            //'-- creo la property per nascondere la colonna
            prop = new Grid_ColumnsProperty();
            prop.Hide = true;
            mp_ColumnsProperty.Add("EsitoRiga", prop);
        }
        //Set mp_objDB = nothing
        //Grid_ColumnsProperty prop;
        try
        {
            prop = mp_ColumnsProperty["FNZ_DEL"];
            prop.Hide = true;
        }
        catch
        {
            //err.Clear
            //'-- creo la property per nascondere la colonna
            prop = new Grid_ColumnsProperty();
            prop.Hide = true;
            mp_ColumnsProperty.Add("FNZ_DEL", prop);
        }

        //'--recupero recordset dei dati per la griglia
        //
        //'dim rs
        //'set rs = objDB.GetRSReadFromQuery( cstr("select * from Document_MicroLotti_Dettagli where TipoDoc = 'OFFERTA' and idheaderlotto =" & idDoc  & " order by id asc") , application("connectionstring") )
        Grid mp_objGrid = new Grid();
        mp_objGrid.Columns = mp_Columns;
        mp_objGrid.ColumnsProperty = mp_ColumnsProperty;
        string strColId = "Id";
        bool bAutocol = false;

        //'mp_objGrid.RecordSetWeb rs, strColId, bAutocol
        mp_objGrid.SetMatrixDisposition(false);
        mp_objGrid.SetMatrix(objDoc.Sections["OFFERTA"].mp_Matrix);

        mp_objGrid.id = "GridViewer";
        mp_objGrid.width = "100%";
        mp_objGrid.Editable = false;
        //'mp_objGrid.ShowTotal CNV("totale") , "2"
        mp_objGrid.Html(htmlToReturn);
    }

    htmlToReturn.Write($@"</td>
        </tr>
		<tr><td>&nbsp;
	</td></tr>");
    if (recuperoDivisioneLotti(idDoc) != "0")
    {
        htmlToReturn.Write($@"<tr>
			  <td nowrap style=""font-size:18px; align=left""><b>VALORE OFFERTA DEL LOTTO " + recuperoNumeroLotto(idDoc) + $@": </b> " + DOC_Field("TOTALI", "ValoreEconomico") + $@" &euro; </td>
			</tr>");
    }
    else
    {
        htmlToReturn.Write($@"<tr>
			  <td nowrap style=""font-size:18px; align=left""><b>VALORE OFFERTA</b> " + DOC_Field("TOTALI", "ValoreEconomico") + $@" &euro; </td>
			</tr>");
    }
    htmlToReturn.Write($@"<tr><td>&nbsp;</td></tr>
		<tr>
    	  <td nowrap style=""font-size:18px; align=left""><b>Ragione sociale del Concorrente: </b> " + DenominazioneATI(idDoc) + $@" </td>
    	</tr>"

    );

    info_concorrente(idDoc);

    htmlToReturn.Write(
                                                            $@"</table>
	<br/><br/><br/>

	<table width=""100%"">

		<tr>

			<td align=""right"">");


    string? param_mostra_nome = Get_Func_Property("prn_PDA_COMUNICAZIONE_OFFERTA_RISP.asp", "Responsabile", "HIDE", "0", CInt("-1"));
    if ((CStr(param_mostra_nome).ToUpper()) == "0")
    {

        htmlToReturn.Write(infoOfferta(idDoc, "Responsabile") + $@"<br/>");
    }
    htmlToReturn.Write($@"<b>Firmato digitalmente</b>
			</td>

		</tr>

	</table>



	</body>
	</html>");

    try
    {
        FreeMemDocument(session);
    }
    catch
    {

    }
}@Html.Raw(htmlToReturn.Out())
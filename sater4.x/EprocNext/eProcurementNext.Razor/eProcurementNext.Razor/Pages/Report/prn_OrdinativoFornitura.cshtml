@page "/Report/prn_OrdinativoFornitura.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using Microsoft.VisualBasic
@using System.Globalization
@using static eProcurementNext.CommonDB.Basic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.print_documentModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.Report.prn_OrdinativoFornituraModel;
@using static eProcurementNext.Session.SessionMiddleware;
@model eProcurementNext.Razor.Pages.Report.prn_OrdinativoFornituraModel
@{
	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();
	var sqlParams = new Dictionary<string, object?>();
	objDoc = PrintDocument(session, htmlToReturn, HttpContext, Response, Request);//PrintDocument ok
	string idDoc = objDoc.mp_IDDoc;
}
@{
	htmlToReturn.Write($@"
	<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"">
	<html>
	<head>

	<link rel=""stylesheet"" type=""text/css"" href=""css/odc.css"" media=""all"" />");

	addMetaTag(htmlToReturn); 

	int NumPagCorrente;
	NumPagCorrente = 0;
	/*dynamic iif(dynamic a ,dynamic b ,dynamic c )
	{
	if(a)
	{
	return b;
	}
	else
	{
	return c;
	}
	}*/

	//'Response.Write DOC_FieldTecnical( "TESTATA", "IdAziDest")
	//'Response.End


	//'--recupero info fornitore
	TSRecordSet rsForn = null;
	sqlParams.Clear();
	sqlParams.Add("@id",CStr(DOC_FieldTecnical("TESTATA", "IdAziDest")).Replace("'", "''"));
	rsForn = cdf.GetRSReadFromQuery_("select Aziragionesociale,Azipartitaiva,isnull(Aziindirizzoleg,'') as Aziindirizzoleg,isnull(AziCapleg,'') as AziCapleg ,isnull(Azilocalitaleg,'') as Azilocalitaleg, isnull(AziProvincialeg,'') as AziProvincialeg,isnull(AziFax,'') as AziFax from  aziende where idazi=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
	rsForn.MoveFirst();

	//'--recupero info ente
	TSRecordSet rsEnte = null;
	sqlParams.Clear();
	sqlParams.Add("@id", DOC_FieldTecnical("TESTATA", "Azienda").Replace("'", "''") );

	rsEnte = cdf.GetRSReadFromQuery_("select * from  aziende with(nolock) inner join dm_attributi with(nolock) on lnk=idazi and idapp=1 and dztNome='codicefiscale' where  idazi=@id",  ApplicationCommon.Application.ConnectionString, sqlParams);
	rsEnte.MoveFirst();


	//'--recupero info punto ordinante
	TSRecordSet rsPO = null;
	sqlParams.Clear();
	sqlParams.Add("@idpfu", CStr(DOC_FieldTecnical("TESTATA", "UserRup")).Replace("'", "''"));
	rsPO = cdf.GetRSReadFromQuery_("select * from  profiliutente where idpfu=@idpfu", ApplicationCommon.Application.ConnectionString, sqlParams);
	rsPO.MoveFirst();

	//'--recupero AOO e AreaDiAppartenenza dal documento CAMBIO_RUOLO_UTENTE inviato

	string Aoo;
	Aoo = "";
	TSRecordSet rsAooUtente = null;
	sqlParams.Clear();
	sqlParams.Add("@nome", "aoo");
	sqlParams.Add("@idpfu", CStr(DOC_FieldTecnical("TESTATA", "UserRup")).Replace("'", "''"));
	rsAooUtente = cdf.GetRSReadFromQuery_("select dbo.GetCodDom2DescML('aoo',attvalue,'I') as Aoo from ProfiliUtenteAttrib where dztnome=@nome and idpfu=@idpfu", ApplicationCommon.Application.ConnectionString, sqlParams);
	if (rsAooUtente.RecordCount > 0){
		rsAooUtente.MoveFirst();
		Aoo = CStr(rsAooUtente["Aoo"]);
	}

	string AreaDiAppartenenza;
	AreaDiAppartenenza = "";
	sqlParams.Clear();
	sqlParams.Add("@nome", "AreaDiAppartenenza");
	sqlParams.Add("@idpfu",CStr(DOC_FieldTecnical("TESTATA", "UserRup")).Replace("'", "''"));
	TSRecordSet rsAreaUtente = cdf.GetRSReadFromQuery_("select isnull(attvalue,'') as AreaDiAppartenenza from ProfiliUtenteAttrib where dztnome=@nome and idpfu=@idpfu", ApplicationCommon.Application.ConnectionString, sqlParams);
	if (rsAreaUtente.RecordCount > 0) 
	{
		rsAreaUtente.MoveFirst();
		AreaDiAppartenenza = CStr(rsAreaUtente["AreaDiAppartenenza"]).Trim();
	}

	string StrutturaDiAppartenenza;
	StrutturaDiAppartenenza="";
	//'--se visibile il campo strutturaaziendale allora ne recupero il valore per visualizzarlo
	string nHideStrutturaDiAppartenenza;
	nHideStrutturaDiAppartenenza = CStr(Get_Func_Property("ODC_TESTATA", "strutturaaziendale", "HIDE", "1", CInt("-1")));
	if (nHideStrutturaDiAppartenenza == "0" ){
		StrutturaDiAppartenenza = CStr(DOC_Field("TESTATA", "StrutturaAziendale"));
	}


	//'--se INTEGRATIVO recupero registro e descrizione ODF integrato
	TSRecordSet rsODFIntegrato = null;
	string RegstroODFIntegrato = "";
	string DesrizioneODFIntegrato = "";

	if (!String.IsNullOrEmpty(CStr(DOC_FieldTecnical( "DOCUMENT", "IdDocIntegrato"))) && CStr(DOC_FieldTecnical( "DOCUMENT", "IdDocIntegrato")) != "0"){

		sqlParams.Clear();
		sqlParams.Add("@id", DOC_FieldTecnical("DOCUMENT", "IdDocIntegrato"));
		rsODFIntegrato = cdf.GetRSReadFromQuery_("select protocollo,note from ctl_doc where id=@id", ApplicationCommon.Application.ConnectionString,sqlParams);
		rsODFIntegrato.MoveFirst();
		RegstroODFIntegrato = CStr(rsODFIntegrato.Fields["protocollo"]);
		DesrizioneODFIntegrato = CStr(rsODFIntegrato.Fields["note"]);
	}

	//'--determino le info per le pagine da stampare
	int nNumProduct;
	int NumCol;
	int NumColAllegati;
	double nLineeForPage;
	int nLineeSpazioProdotti;
	int nNumLineeFirstPage;
	int nLineeTotali;
	int NumLineeStampate;
	int NumLineeStampatePagina = 0;
	int NumLineeParteFissa;
	int LastRowDiplayed;
	bool bDrawIntestAllegati;
	int LastColDisplayed;
	int LastRowDiplayed1;

	bDrawIntestAllegati = false;


	LastRowDiplayed1 = 0;
	LastRowDiplayed = 0;
	LastColDisplayed = 0;

	NumLineeParteFissa = 38;

	if (!String.IsNullOrEmpty(RegstroODFIntegrato)){
		NumLineeParteFissa = NumLineeParteFissa + 2;
	}

	if (!String.IsNullOrEmpty(Aoo)){
		NumLineeParteFissa = NumLineeParteFissa + 1;
	}

	if (!String.IsNullOrEmpty(AreaDiAppartenenza))
	{
		NumLineeParteFissa = NumLineeParteFissa + 1;
	}

	if (!String.IsNullOrEmpty(StrutturaDiAppartenenza))
	{
		NumLineeParteFissa = NumLineeParteFissa + 1;
	}

	NumLineeStampate = 0;

	NumCol = objDoc.Sections["PRODOTTI"].mp_Columns.Count;

	NumColAllegati = objDoc.Sections["DOCUMENTAZIONE"].mp_Columns.Count;

	//'--numero di linee per pagina
	nLineeForPage = 58;

	//'--numero di linee prodotti a disposizione della prima pagina	
	nNumLineeFirstPage = 17;

	if (!String.IsNullOrEmpty(RegstroODFIntegrato)){
		NumLineeParteFissa = 30;
	}

	//'--numero di linee vuote tra un prodotto ed il successivo
	nLineeSpazioProdotti = 2;

	//'--numero di linee per i totali
	//'nLineeForTotali = 10
	int nLineeForTotali = 6;

	//'--determino le colonne da nascondere per i dettagli prodotti
	//'--recupero codice dalla convenzione
	string CodiceModelloConvenzione = "";
	string CodiceModelloStampaOrdinativo = "";
	string strSQL = "";

	TSRecordSet rsModelloStampa = null;
	sqlParams.Clear();
	sqlParams.Add("@id", DOC_FieldTecnical("TESTATA", "Id_Convenzione"));
	sqlParams.Add("@dse_id", "TESTATA_PRODOTTI");
	sqlParams.Add("@name", "Tipo_Modello_Convenzione");
	strSQL = "select value from ctl_doc_value where idheader=@id and dse_id=@dse_id and dzt_name=@name";

	rsModelloStampa = cdf.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString,sqlParams);
	if (rsModelloStampa.RecordCount > 0) {
		rsModelloStampa.MoveFirst();
		CodiceModelloConvenzione = GetValueFromRS(rsModelloStampa.Fields["value"]);
	}

	CodiceModelloStampaOrdinativo = "MODELLO_BASE_CONVENZIONI_" + CodiceModelloConvenzione + "_MOD_StampaOrdinativo";

	//'--recupero ente della convenzione
	//'--recupero info ente
	TSRecordSet rsEnteConvenzione = null;
	sqlParams.Clear();
	sqlParams.Add("@tipoDoc","CONVENZIONE");
	sqlParams.Add("@id", DOC_FieldTecnical("TESTATA", "Id_Convenzione"));

	rsEnteConvenzione = cdf.GetRSReadFromQuery_("select aziragionesociale from ctl_doc c ,aziende,profiliutente p where p.idpfu=c.idpfu and pfuidazi=idazi and c.tipodoc=@tipoDoc and c.id=@id", ApplicationCommon.Application.ConnectionString,sqlParams);
	rsEnteConvenzione.MoveFirst();
	//'--recupero colonne del modello di stampa
	//'Set objDB = CreateObject("ctldb.lib_dbmodelExt")

	//'ObjSession = session("Session")
	//'nCodRit= objDB.GetFilteredFieldsWeb(CodiceModelloStampaOrdinativo, mp_ColumnsC, mp_ColumnsPropertyC, session("strSuffLing"), 0, 0, Application("ConnectionString"), ObjSession, true)

	string strListColumn=",";

	TSRecordSet rsColumnStampa;
	sqlParams.Clear();
	sqlParams.Add("@name", Replace(CodiceModelloStampaOrdinativo, "'", "''"));

	strSQL = "select MA_DZT_Name from CTL_models ,CTL_modelattributes where MOD_Name = @name  and MOD_ID = MA_MOD_ID order by ma_order";

	rsColumnStampa = cdf.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString,sqlParams);
	if (rsColumnStampa.RecordCount > 0) {
		rsColumnStampa.MoveFirst();
		while (!rsColumnStampa.EOF) {
			strListColumn = strListColumn + CStr(rsColumnStampa.Fields["MA_DZT_Name"]).ToUpper() + ",";
			rsColumnStampa.MoveNext();
		}
	}

	//'
	//'for i=1 to	mp_ColumnsC.count
	//'	strListColumn = strListColumn & ucase(cstr(mp_ColumnsC(i).name)) & ","
	//'next
	//'Response.write strListColumn
	//'Response.end

	//'--recupero colonne del modello dei prodotti
	Dictionary<string, Field> ColumnProdotti = objDoc.Sections["PRODOTTI"].mp_Columns;

	string strHideCol = ",";

	for (int i = 1; i < ColumnProdotti.Count; i++)
	{
		if (Strings.InStr(1, strListColumn, "," + (CStr(ColumnProdotti.ElementAt(i).Value.Name) + ",").ToUpper()) == 0)
		{
			strHideCol = strHideCol + CStr(ColumnProdotti.ElementAt(i).Value.Name) + ",";
			NumCol = NumCol - 1;
		}
	}

	//'--recupero il numero di allegati da stampare
	int nNumAllegati;
	nNumAllegati = DOC_NumRow("DOCUMENTAZIONE", "");



	string strHideColAllegati = ",FNZ_DEL,TipoFile,AnagDoc,Obbligatorio,RichiediFirma,NotEditable,";

	//'Response.Write nNumAllegati

	//objDB = null;



	nNumProduct = DOC_NumRow("PRODOTTI", "");

	//'--determino numero linee vuote tra un prodotto e l'altro che serviranno nella prima pagina
	//'nLineeSpazioProdotti =  fix ( (nNumProduct*NumCol)/nLineeForPage)  



	//'nNumLineeTotali = (NumCol + nLineeSpazioProdotti) * nNumProduct + NumLineeParteFissa + nLineeForTotali + NumPagAllegati

	int nNumLineeTotali = (NumCol + nLineeSpazioProdotti) * nNumProduct + NumLineeParteFissa + nLineeForTotali + nNumAllegati;
	//'nNumLineeTotali = (NumCol * nNumProduct) + nLineeSpazioProdotti + (nLineeForPage-nNumLineeFirstPage) + nLineeForTotali 
	//'nNumLineeTotali = (NumCol + nLineeSpazioProdotti) * nNumProduct + nNumLineeFirstPage + nLineeForTotali
	//'nResiduoLinee =  nLineeForPage - (nNumLineeTotali mod nLineeForPage)

	double nResiduoLinee;
	double nNumPag;

	if (nNumLineeTotali < nLineeForPage)
	{
		nResiduoLinee = 0;
		nNumPag = 1;
	}
	else
	{
		nResiduoLinee = nNumLineeTotali % nLineeForPage;

		nNumPag = Fix(nNumLineeTotali / nLineeForPage);
	}

	//'nNumPag = int (nNumLineeTotali / nLineeForPage)

	//'if nResiduoLinee < nLineeForTotali and nResiduoLinee <> 0 then
	if (nResiduoLinee != 0)
	{
		nNumPag = nNumPag + 1;
	}

	//'Response.Write "nNumPag1=" & nNumPag & "<br>"
	//'-- controlla se le righe rimaste sull'ultima pagina sono sufficienti a rappresentare i totali.
	//'-- nel caso in cui non bastano si aggiunge una pagina
	if (( nLineeForPage - nResiduoLinee ) < nLineeForTotali){
		nNumPag = nNumPag + 1;
	}

	double idx_NumPagTotali;
	idx_NumPagTotali = nNumPag;


	//'-- sull'ultima PAGINA RESTANO QUESTE RIGHE
	double righeUP = nLineeForPage - (nResiduoLinee + nLineeForTotali);

	//'if righeUP < nNumAllegati then
	//'	nNumPag = nNumPag + 1
	//'end if

	double startRowAllegati = nNumPag;


	string filigrana = CStr(GetParamURL(Request.QueryString.ToString(), "filigrana"));

	if (!string.IsNullOrEmpty(filigrana)) {
		filigrana = "background-image:url(../images/" + HtmlEncode(filigrana.Replace("..", "")) + ".png)";
	}

	htmlToReturn.Write($@"</head>

	<body style=" + filigrana + $@">


		 <div style=""text-align: center;"">
			<center>");

	bool bDrawTotali = false;
	for (int k = 1; k <= nNumPag; k++) {

		htmlToReturn.Write($@"<table border=0 style=""height:1400px;"" >");
		Header();

		//'--se si tratta della prima pagina disegno le parti fisse
		if (k == 1) {
			DisplayParteFissa();
			nLineeForPage = 17;
		} else {
			nLineeForPage = 58;
		}

		//'if not bDrawTotali and NumLineeStampate < nLineeForPage then
		//'if not bDrawTotali  and ( LastRowDiplayed1 < k or LastColDisplayed < NumCol )then
		if (!bDrawTotali) {

			htmlToReturn.Write($@"<tr>
						<td valign=""top"" >
							<div style=""margin-top: 15px; text-align: left; width:800px; vertical-align:top;"">");

			htmlToReturn.Write(GetHtmlData_Dettagli_TABLE_PERPAGINA(k, "PRODOTTI", "", "", "", strHideCol, "", CInt(nLineeForPage), "", "", "VERTICALE", ref NumLineeStampate, ref NumLineeStampatePagina, NumCol, ref LastRowDiplayed1, ref LastColDisplayed));

			htmlToReturn.Write($@"</div>
						</td>
					</tr>");
		}


		//'--se sono sulla pagina dei totali vedo se entrano nella stessa pagina o in una nuova
		if (k == idx_NumPagTotali) {

			NumLineeStampate = NumLineeStampate + nLineeForTotali;
			bDrawTotali = true;

			if ((NumLineeStampatePagina + nLineeForTotali) < 58) {

				DisegnoTotali();

				nLineeForPage = 58 - NumLineeStampatePagina - nLineeForTotali;
			} else {

				//'--SALTO PAGINA
				PrintPagina();
				htmlToReturn.Write($@"<table border=0 style=""height:1400px;"" >");
				Header();

				DisegnoTotali();

				nLineeForPage = 58 - nLineeForTotali;
			}

		} else {
			nLineeForPage = 58 - NumLineeStampatePagina;
		}

		if (bDrawTotali) {

			if (nNumAllegati >= 1) {
				//'--per la prim apagina degli allegati il numero di linee per pagine e quello rimanente
				if (!bDrawIntestAllegati) {
					htmlToReturn.Write($@"<tr>
								<td valign=""top"" >
								<div style=""margin-left:3px; margin-top: 10px; text-align: left; width: 800px; font-weight:bold;"">
								ALLEGATI
								</div>
								</td>
							</tr>");

					bDrawIntestAllegati = true;
				}
				//'stampo la griglia degli allegati

				htmlToReturn.Write($@"<tr>
					<td valign=""top"" >
						<div style=""margin-top: 15px; text-align: left; width:800px; vertical-align:top;"">");

				htmlToReturn.Write(GetHtmlData_Dettagli_TABLE_PERPAGINA(k, "DOCUMENTAZIONE", "", "", "Allegato;Nome file,Descrizione;Descrizione", strHideColAllegati, "", CInt(nLineeForPage), "", "", "", ref NumLineeStampate, ref NumLineeStampatePagina, NumColAllegati, ref LastRowDiplayed, ref LastColDisplayed));

				htmlToReturn.Write($@"</div>
					</td>
					</tr>");
			}
		}


		if (k == nNumPag) {
			DisegnoFraseFinale();
		}

		//'--PIE DI PAGINA
		footer();
		htmlToReturn.Write($@"</table>");

		//'--SALTO PAGINA
		if (k < nNumPag) {
			PrintPagina();
		}
	}

	htmlToReturn.Write($@"</center>
		</div>
	</body>
	</html>");

	void PrintPagina() {

		htmlToReturn.Write($@"<div style=""page-break-after: always""></div>");

	}



	void Header() {

		htmlToReturn.Write($@"<tr><td height=""50px"" align=""center"" valign=""top"" >");

		string imgHeader = ApplicationCommon.CNV("HEADER_STAMPE");

		if (imgHeader.Contains("???", StringComparison.Ordinal) ) {
			htmlToReturn.Write($@"<img height=""50px"" src=""logo_new.gif"" border=""0"" alt=""" + ApplicationCommon.CNV("ALT LOGO") + @"""/>");
		} else {
			htmlToReturn.Write(imgHeader);
		}

		htmlToReturn.Write($@"</td></tr>");

	}

	//'------------------------------------------------------------------------------
	//'-- funzione per disegnare il pie pagina
	//'------------------------------------------------------------------------------
	void footer()
	{

		NumPagCorrente = NumPagCorrente + 1;

		htmlToReturn.Write($@"<tr><td valign=""bottom"" height=""5px"" >
						<table id=""piedipagina1"" width=""800px"" height=""5px"" style=""vertical-align: bottom; bottom: 0px"">
							<tr><td align=""left"" ><b></b></td></tr><tr>
							<td style=""border-bottom: 1px solid black;border-top: 1px solid black;""  valign=""bottom"" align=""right"" >
								Pagina: " + NumPagCorrente +
																			$@"</td>
							</tr>
						</table>
						</td></tr>");
	}



	//'--DISEGNA INFO SUI TOTALI E DESCRIZIONE FINALE  
	void DisegnoTotali()
	{


		htmlToReturn.Write($@"<tr>
				<td valign=""top"" >
				<div style=""text-align: left; width:100%; vertical-align:top;  margin-top: 50px;"">
					<table align=""left"" border=0>");
		if (DOC_FieldTecnical("TESTATA", "Tipoimporto") == "ivaesclusa" || DOC_FieldTecnical("TESTATA", "Tipoimporto") == "IvaIPTescluse" || DOC_FieldTecnical("TESTATA", "Tipoimporto") == "ivainclusa")
		{
			htmlToReturn.Write($@"<tr>
		                    <td nowrap class=""Input"">

		                       TOTALE ORDINATIVO DI FORNITURA(IVA ESCLUSA)
		                    </td>
		                    <td class=""Input"" align=right>
		                        <font >"
								+ DOC_FieldHTML("TESTATA", "RDA_Total") +
														   $@"</font>
		                    </td>
		                </tr>

						 <tr>
		                    <td nowrap class=""Input"">
		                        IVA
		                    </td>
		                    <td class=""Input"" align=right>
		                        <font >"
								+ DOC_FieldHTML("TESTATA", "ValoreIva") +
															  $@"</font>
		                    </td>
		                </tr>");
		}
		htmlToReturn.Write($@"<tr>
		                    <td nowrap class=""Input"">");
		if (DOC_FieldTecnical("TESTATA", "Tipoimporto") != "esente")
		{
			htmlToReturn.Write($@"TOTALE ORDINATIVO DI FORNITURA(IVA INCLUSA)");
		}
		else
		{
			htmlToReturn.Write($@"TOTALE ORDINATIVO DI FORNITURA (IVA ESENTE)");
		}
		htmlToReturn.Write($@"</td>
		                    <td class=""Input"" align=right>
		                        <font >"
				+ DOC_FieldHTML("TESTATA", "TotalIva") +
										$@"</font>
		                    </td>
		                </tr>

		            </table>
				</div>
				</td>
			</tr>
			<tr>
				<td valign=""top"" >
					&nbsp;
				</td>	
			</tr>
			<tr>
				<td valign=""top"" >"
		+ DOC_FieldHTML("NOTECONTRATTO", "NoteContratto") +
						$@"</td>
			</tr>			
			<tr>
				<td valign=""top"" >"
		+ DOC_FieldHTML("NOTECONTRATTO", "NoteConvenzione") +
						$@"</td>
			</tr>
			<!--tr>
				<td valign=""top"" >");
		if (DOC_FieldTecnical("TESTATA", "Tipoimporto") == "ivaesclusa" || DOC_FieldTecnical("TESTATA", "Tipoimporto") == "IvaIPTescluse")
		{
			htmlToReturn.Write($@"<div style=""width: 800px; margin-top: 10px; text-align: left; font-weight:bold; font-size:8pt;"">"
				+ ApplicationCommon.CNV("frase finale stampa ordinativo") +

			$@"</div>");
		}
		htmlToReturn.Write($@"</td>
			</tr-->");




	}



	//'--disegna la parte fissa della prima pagina
	void DisplayParteFissa() {
		htmlToReturn.Write($@"
		<tr>
			<td valign=""top"">");


		//'--titolo ordinativo

		htmlToReturn.Write($@"<div style=""font-size:16px; text-align: left; width: 800px; align: center;font-weight:bold;"">
			ORDINATIVO");

		if (!string.IsNullOrEmpty(RegstroODFIntegrato))
		{

			htmlToReturn.Write($@"INTEGRATIVO");
		}


		htmlToReturn.Write($@"DI FORNITURA - CONVENZIONE" + DOC_FieldHTML("TESTATA", "RDA_Object") +
				$@"<br> [num. Registro" + DOC_FieldHTML("DOCUMENT", "Protocollo") + $@"]
			<div>
			</td>
		</tr>");
		string statoFunzionale = "";
		if (statoFunzionale == "Accettato" || statoFunzionale == "Rifiutato")
		{

			htmlToReturn.Write($@"<!-- Aggiunta 'testata' per indicare se accettato o rifiutato con le relative note-->					
			<tr>
				<td valign=""top"">
				<br/>
				<div style=""text-align: center; width: 800px; align: center;border: 1px solid;padding: 3px"">");

			statoFunzionale = DOC_FieldHTML("DOCUMENT", "StatoFunzionale");
			if (statoFunzionale == "Accettato")
			{
				htmlToReturn.Write($@"<strong>Conferma Ordinativo di fornitura</strong><br/><strong>NOTE:</strong>");
				htmlToReturn.Write(DOC_FieldHTML("NOTE", "Note"));
			}
			if (statoFunzionale == "Rifiutato")
			{
				htmlToReturn.Write($@"<br/><strong>Rifiuto Ordinativo di fornitura</strong><br/><strong>NOTE:</strong>");
				htmlToReturn.Write(DOC_FieldHTML("NOTE", "Note"));
			}

			htmlToReturn.Write($@"<div>

				</td>
			</tr>");

		}

		htmlToReturn.Write($@"<tr>
			<td valign=""top"" >	");

		//'--info ordinativo

		htmlToReturn.Write($@"<div style=""width: 800px; margin-top: 15px; text-align: left"">
		        <table align=""left"" border=""0"">

				<!-- Togliere il campo ""Data creazione""

					 <tr>
		                <td nowrap class=""Input"">
		                    Data di creazione:
		                </td>
		                <td>
		                    <font>"
							+ DOC_FieldHTML("DOCUMENT", "RDA_DataCreazione") +
																	$@"</font>
		                </td>
		            </tr>
				-->

					 <tr>
		                <td nowrap class=""Input"">
		                    Descrizione:
		                </td>
		                <td>
		                    <font>"
							+ DOC_FieldHTML("DOCUMENT", "Note") +
																	$@"</font>
		                </td>
		            </tr>

		             <tr>
		                <td nowrap class=""Input"">");

		string TipoScadenzaOrdinativo = DOC_FieldTecnical("DOCUMENT", "TipoScadenzaOrdinativo");

		//'togliere "Periodo di validità" e sostituirlo con "Scadenza" se sulla convenzione è "Scadenza fissata" o " Durata definita dal PO" 
		//'e la data è la scadenza presa dall'ODC, altrimenti mettere Durata: xxx Mesi, dove xxx è definito sulla convenzione.
		if (TipoScadenzaOrdinativo == "duratafissata") {

			htmlToReturn.Write($@"Durata in mesi:");

		} else {
			//'TipoScadenzaOrdinativo = "scadenzafissata" or TipoScadenzaOrdinativo = "datamassimadivalidita"

			htmlToReturn.Write($@"<!-- Periodo di validita': -->
								Scadenza: ");

		}
		htmlToReturn.Write($@"</td>
		                <td>");
		if (TipoScadenzaOrdinativo == "duratafissata") {
			htmlToReturn.Write($@"<font>"
					+ DOC_FieldHTML("DOCUMENT", "NumeroMesi") +
			$@"</font>");
		} else {
			htmlToReturn.Write($@"<font>"

				+ DOC_FieldHTML("DOCUMENT", "RDA_DataScad") +
										$@"</font>

    <!-- ");

			if (TipoScadenzaOrdinativo != "immediatamenteesecutivo") {
				htmlToReturn.Write($@"&nbsp;-&nbsp;
								<font>
								al" + DOC_FieldHTML("DOCUMENT", "RDA_DataScad") +
				$@"</font>");
			}
			htmlToReturn.Write($@"-->");
		}
		htmlToReturn.Write($@"</td>
		            </tr>
		             <tr>
		                <td nowrap class=""Input"">"
					+ DOC_Field_Label("DOCUMENT", "CIG_MADRE") + $@":
		                </td>
		                <td>
		                    <font>");

		//'--recupero CIG MADRE - c'è una correzione da fare nella libreria per recuperarlo direttamente dal documento
		TSRecordSet rsCIG_MADRE;
		sqlParams.Clear();
		sqlParams.Add("@id", idDoc);
		rsCIG_MADRE = cdf.GetRSReadFromQuery_("select CIG_MADRE from  Document_ODC_view where  ID = @id", ApplicationCommon.Application.ConnectionString,sqlParams);
		rsCIG_MADRE.MoveFirst();
		htmlToReturn.Write(CStr(rsCIG_MADRE.Fields["CIG_MADRE"]));
		rsCIG_MADRE = null;

		//'=DOC_FieldHTML( "DOCUMENT", "CIG_MADRE")%>
		htmlToReturn.Write($@"</font>
		                </td>
		            </tr>
		            <tr>
		                <td nowrap class=""Input"">"
				+ DOC_Field_Label("DOCUMENT", "CIG") + $@":
		                </td>
		                <td>
		                    <font>"
				+ DOC_FieldHTML("DOCUMENT", "CIG") +
									  $@"</font>
		                </td>
		            </tr>");

		if (!string.IsNullOrEmpty(RegstroODFIntegrato)) {

			htmlToReturn.Write($@"<tr>
		                <td nowrap class=""Input"">
		                    Ordinativo di riferimento:
		                </td>
		                <td>
		                    <font>"
						+ RegstroODFIntegrato +

																	$@"</font>
		                </td>
		            </tr>
		            <tr>
		                <td nowrap class=""Input"">

		                </td>
		                <td>
		                    <font>"
						+ DesrizioneODFIntegrato +

																	$@"</font>
		                </td>
		            </tr>");
		}

		htmlToReturn.Write($@"</font>
		                </td>
		            </tr>
		            <tr>
		                <td nowrap class=""Input"">"
				+ DOC_Field_Label("DOCUMENT", "Obbligo_Cig_Derivato") + $@":
		                </td>
		                <td>
		                    <font>"
				+ DOC_FieldHTML("DOCUMENT", "Obbligo_Cig_Derivato") +
											  $@"</font>
		                </td>
		            </tr>");

		if (DOC_Field("DOCUMENT", "Obbligo_Cig_Derivato") == "no")
		{
			htmlToReturn.Write($@"</font>
		                </td>
		            </tr>
		            <tr>
		                <td nowrap class=""Input"">"
					+ DOC_Field_Label("DOCUMENT", "Motivazione_ObbligoCigDerivato") + $@":
		                </td>
		                <td>
		                    <font>"
					+ DOC_FieldHTML("DOCUMENT", "Motivazione_ObbligoCigDerivato") +
														  $@"</font>
		                </td>
		            </tr>");
		}

		htmlToReturn.Write($@"</table>
		    </div>    
		    </td>
		 </tr>
		 <tr> 
			<td valign=""top"" >	
			<div style=""width: 800px; margin-top: 15px; text-align: right"">	      
		    	<table align=""right"" border=0>
		               <tr>
		                   <td nowrap=""nowrap"" class=""Input"">
		                       Fornitore
		                   </td>
		                   <td>" +

		HtmlEncode(CStr(rsForn.Fields["Aziragionesociale"])));


		htmlToReturn.Write($@"</td>
		                </tr>
		               <tr>
		                   <td nowrap=""nowrap"" class=""Input"">
		                       Partita IVA
		                   </td>
		                   <td>" +

		CStr(rsForn.Fields["Azipartitaiva"])

		+ $@"</td>
		                </tr>
		                <tr>
		                   <td nowrap=""nowrap"" class=""Input"">
		                       Indirizzo
		                   </td>
		                   <td>" +

		HtmlEncode(CStr(rsForn.Fields["Aziindirizzoleg"])));

		htmlToReturn.Write($@"<br>" + 
		HtmlEncode(CStr(rsForn.Fields["AziCapleg"])));
		htmlToReturn.Write($@"&nbsp;" + 
		HtmlEncode(CStr(rsForn.Fields["Azilocalitaleg"])));
		htmlToReturn.Write($@"(" + 
		HtmlEncode(CStr(rsForn.Fields["AziProvincialeg"])));
		htmlToReturn.Write($@")");
		htmlToReturn.Write($@"</td>
		                </tr>
		                <tr>
		                   <td nowrap=""nowrap"" class=""Input"">
		                       Fax
		                   </td>
		                   <td>" + 
		HtmlEncode(CStr(rsForn.Fields["AziFax"])));

		htmlToReturn.Write($@"</td>
		                </tr> 

		           </table>

			</div>				
			</td>
		</tr>
		<tr>	
			<td valign=""top"">");
		//'--info punto ordinante		
		htmlToReturn.Write($@"<div style=""width: 800px; margin-top: 15px; text-align: left"">

				<table align=""left"" border=0>
		               <tr>
		                   <td nowrap=""nowrap"" class=""Input"">
		                       Il sottoscritto
		                   </td>
		                   <td>" + 
		HtmlEncode(CStr(rsPO.Fields["pfunome"])));


		htmlToReturn.Write($@"</td>
		                </tr>
		               <tr>
		                   <td nowrap=""nowrap"" class=""Input"">
		                      Codice Fiscale
		                   </td>
		                   <td>" + 

		HtmlEncode(CStr(rsPO.Fields["pfucodicefiscale"])));

		htmlToReturn.Write($@"</td>
		                </tr>
		                <tr>
		                   <td nowrap=""nowrap"" class=""Input"">
		                       in qualita' di
		                   </td>
		                   <td>" +

		CStr(rsPO.Fields["pfuruoloaziendale"]));

		htmlToReturn.Write($@"</td>
		                </tr>
		                <tr>
		                   <td nowrap=""nowrap"" class=""Input"">
		                       Per l'Amministrazione
		                   </td>
		                   <td>" + 

		HtmlEncode(CStr(rsEnte.Fields["AziRagioneSociale"])));

		htmlToReturn.Write($@"</td>
		                </tr> ");
		if (!String.IsNullOrEmpty(Aoo))
		{
			htmlToReturn.Write($@"<tr>
		                   <td nowrap=""nowrap"" class=""Input"">
		                       AOO
		                   </td>
		                   <td>" + 

			HtmlEncode(Aoo));

			htmlToReturn.Write($@"</td>
		                </tr>");
		}
		if (!String.IsNullOrEmpty(AreaDiAppartenenza)) {
			htmlToReturn.Write($@"<tr>
		                   <td nowrap=""nowrap"" class=""Input"">"
			+ ApplicationCommon.CNV("Ufficio di Appartenenza") +
								$@"</td>
		                   <td>" + 

			HtmlEncode(AreaDiAppartenenza));


			htmlToReturn.Write($@"</td>
		                </tr>");
		}

		if (!String.IsNullOrEmpty(StrutturaDiAppartenenza) ){
			htmlToReturn.Write($@"
		                <tr>
		                   <td nowrap=""nowrap"" class=""Input"">
		                       " + ApplicationCommon.CNV("Struttura di Appartenenza") + $@"
		                   </td>
		                   <td>

		                      " + HtmlEncode(StrutturaDiAppartenenza) + $@"

		                   </td>
		                </tr>");
		}

		htmlToReturn.Write($@"<tr>
		                   <td nowrap=""nowrap"" class=""Input"">
		                      Codice Fiscale
		                   </td>
		                   <td>" + 

		CStr(rsEnte.Fields["vatValore_FT"]));

		htmlToReturn.Write($@"</td>
		                </tr>
		                <tr>
		                   <td nowrap=""nowrap"" class=""Input"">
		                       Telefono
		                   </td>
		                   <td>" + 

		CStr(rsPO.Fields["pfutel"]));

		htmlToReturn.Write($@"</td>
		                </tr> 

		                <tr>
		                   <td nowrap=""nowrap"" class=""Input"">
		                       Email
		                   </td>
		                   <td>" + 

		CStr(rsPO.Fields["pfue_mail"]));

		htmlToReturn.Write($@"</td>
		                </tr>");

		if (!String.IsNullOrEmpty(DOC_FieldHTML("TESTATA", "CodiceIPA")))
		{
			htmlToReturn.Write($@"<tr>
							   <td nowrap=""nowrap"" class=""Input"">"
							+ ApplicationCommon.CNV("CodiceIPA") +
											   $@"</td>
							   <td>"
						+ DOC_FieldHTML("TESTATA", "CodiceIPA") +
											   $@"</td>
							</tr>");
		}

		htmlToReturn.Write($@"<tr>
		                   <td nowrap=""nowrap"" class=""Input"">
		                       Indirizzo di fatturazione
		                   </td>
		                   <td>"

							+ DOC_FieldHTML("TESTATA", "IndirizzoRitiro") + $@"-&nbsp;"
							+ DOC_FieldHTML("TESTATA", "FatturazioneCap") + $@"-&nbsp;"
							+ DOC_FieldHTML("TESTATA", "FatturazioneLocalita") + $@"&nbsp;("
							+ DOC_FieldHTML("TESTATA", "FatturazioneProvincia") + $@"&nbsp;) -"
							+ DOC_FieldHTML("TESTATA", "FatturazioneStato") + $@"&nbsp;



		                   </td>
		                </tr> 
						<tr>
		                   <td nowrap=""nowrap"" class=""Input"">
		                       Indirizzo di consegna
		                   </td>
		                   <td>"

							+ DOC_FieldHTML("TESTATA", "ReferenteIndirizzo") + $@"-&nbsp;"
							+ DOC_FieldHTML("TESTATA", "ReferenteCap") + $@" - &nbsp;"
							+ DOC_FieldHTML("TESTATA", "ReferenteLocalita") + $@"&nbsp;("
							+ DOC_FieldHTML("TESTATA", "ReferenteProvincia") + $@" & nbsp;) -"
							+ DOC_FieldHTML("TESTATA", "ReferenteStato") + $@"&nbsp;



		                   </td>
		                </tr>");
		if (!String.IsNullOrEmpty(DOC_Field("TESTATA", "Allegato"))) {

			htmlToReturn.Write($@"<tr>
							   <td nowrap=""nowrap"" class=""Input"">
								   Altri Indirizzi di consegna
							   </td>
							   <td>
									Vedi allegato:" + DOC_Field("TESTATA", "Allegato") + $@"</td>
							</tr>");
		}


		htmlToReturn.Write($@"</table>

			</div>
			</td>
		</tr>
		<tr>	
			<td>");
		//'--info articolo

		htmlToReturn.Write($@"<div style=""width: 800px; margin-top: 15px; text-align: left"">
				- vista la Convenzione " + DOC_FieldHTML("TESTATA", "RDA_Object") + $@"stipulata
				il" + DOC_FieldHTML("TESTATA", "DataStipulaConvenzione") + $@", tra" + HtmlEncode(CStr(rsEnteConvenzione.Fields["Aziragionesociale"]).ToUpper()) + $@"e"
		+ CStr(rsForn.Fields["AziRagioneSociale"]) +
																$@"ve visti i prezzi e le altre condizioni della fornitura, stabiliti nella Convenzione;
			</div>

			</td>
		</tr>
		<tr>
			<td valign=""top"" >
			<div style=""margin-top: 25px; text-align: center; width: 800px; align: center;font-weight:bold;"">"
		+ ApplicationCommon.CNV("SOTTOSCRIVE IL CONTRATTO PER") +
										$@"</div>
			</td>
		</tr>");


	}


	void DisegnoFraseFinale() { 

		htmlToReturn.Write($@"<tr>
				<td valign=""top"" >");
		if (DOC_FieldTecnical("TESTATA", "Tipoimporto") == "ivaesclusa" || DOC_FieldTecnical("TESTATA", "Tipoimporto") == "IvaIPTescluse") {
			htmlToReturn.Write($@"<div style=""width: 800px; margin-top: 10px; text-align: left; font-weight:bold; font-size:8pt;"">"
			+ ApplicationCommon.CNV("frase finale stampa ordinativo") +

					$@"</div>");
		}
		htmlToReturn.Write($@"</td>
			</tr>");

		string nHidecheckConsegna;
		nHidecheckConsegna = CStr(Get_Func_Property("ODC_DICHIARAZIONI", "check_consegna_ODA_quantitativi_impegnati", "HIDE", "1", CInt("-1")));

		if (nHidecheckConsegna == "0")
		{
			htmlToReturn.Write($@"
			<tr>
				<td valign=""top"" >							   
					<div style=""width: 800px; margin-top: 10px; text-align: left; font-weight:bold; font-size:8pt;"">");

			if (CStr(DOC_Field("DICHIARAZIONI", "check_consegna_ODA_quantitativi_impegnati")) == "1")
			{
				htmlToReturn.Write($@"
										<table align=""left"" border=0>			
											<tr>
												<td nowrap class=""Input"">
													<font class=""Input""><img src=""../ctl_library/images/domain/checked.gif"" /></font>
												</td>
												<td>
													<p>
														"+ ApplicationCommon.CNV("check_consegna_ODA_quantitativi_impegnati") + $@"
													</p>
												</td>
											</tr>
										</table>");
			}
			else
			{
				htmlToReturn.Write($@"
										<table align=""left"" border=0>			
											<tr>
												<td nowrap class=""Input"">
													<font class=""Input""><img src=""../ctl_library/images/domain/unchecked.gif"" /></font>
												</td>
												<td>
													<p>
														"+ ApplicationCommon.CNV("check_consegna_ODA_quantitativi_impegnati") + $@"
													</p>
												</td>
											</tr>
										</table>");
			}

			htmlToReturn.Write($@"</div>

				</td>
			</tr>");
		}

				if (String.IsNullOrEmpty(filigrana)) {

					htmlToReturn.Write($@"<tr>
					<td valign=""top"" >
						<span class=""firmatodigitalmente"" >"
									+ HtmlEncode(CStr(rsPO.Fields["pfunome"])) +
													 	$@"<br>(firmato digitalmente)
						 	</span>
						</td>
					</tr>

					<tr>
						<td height=""100%"" >
							&nbsp;				
						</td>
					</tr>");
				}


			}
			

		try
		{
			FreeMemDocument(session);
		}
		catch
		{
			
		}
	}
	@Html.Raw(htmlToReturn.Out())
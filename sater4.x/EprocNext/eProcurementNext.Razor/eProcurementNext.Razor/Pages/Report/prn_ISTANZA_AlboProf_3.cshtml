@page "/Report/prn_ISTANZA_AlboProf_3.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using Microsoft.VisualBasic
@using System.Globalization
@using static eProcurementNext.CommonDB.Basic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel;
@using static eProcurementNext.Session.SessionMiddleware
@{
	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();
	var sqlParams = new Dictionary<string, object?>();
}
@{
	//'SE ESISTE IL MODELLO DINAMICO SIGNIFICA CHE SONO SU UN DOCUMENTO PRECEDENTE ALLE MODIFICHE
	TSRecordSet rs;
	sqlParams.Add("@id", CInt(GetParamURL(Request.QueryString.ToString(), "IDDOC")));
	sqlParams.Add("@dse_ID", "TESTATA");
	sqlParams.Add("@name", "ISTANZA_AlboProf_3_03_03_2020_TESTATA");
	rs = GetRS("select IdHeader from CTL_DOC_SECTION_MODEL where IdHeader = @id and  DSE_ID=@dse_ID and MOD_Name = @name ", sqlParams);
	try
	{
		if (rs.RecordCount > 0)
		{
			throw new ResponseRedirectException("prn_ISTANZA_AlboProf_3_03_03_2020_PRE.asp?" + GetQueryStringFromContext(Request.QueryString), Response);
		}
		else
		{
			throw new ResponseRedirectException("prn_ISTANZA_AlboProf_3_03_03_2020_POST.asp?" + GetQueryStringFromContext(Request.QueryString), Response);
		}
	}
	catch
	{
		ShowError("Errore Chiamata");
	}

	void ShowError(string ErrText)
	{
		//on error resume next
		throw new ResponseRedirectException("../ctl_library/MessageBoxWin.asp?ML=yes&MSG=" + URLEncode(TruncateMessage(ErrText)) + "&CAPTION=Errore&ICO=2", Response);
	}
}
@Html.Raw(htmlToReturn.Out())
@page "/Report/OFFERTA_PRODOTTI.asp"
@inject eProcurementNext.Session.ISession session;
@using System.Data.SqlClient;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using Microsoft.VisualBasic
@using System.Globalization
@using System.Diagnostics
@using static eProcurementNext.CommonDB.Basic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.print_documentModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.TemplateReportModel;
@using static eProcurementNext.Razor.Pages.Report.OFFERTA_PRODOTTIModel;
@model eProcurementNext.Razor.Pages.Report.OFFERTA_PRODOTTIModel
@using static eProcurementNext.Session.SessionMiddleware
@{

	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();

	objDoc = PrintDocument(session, htmlToReturn, HttpContext,Response,Request);//PrintDocument ok
	string IDDOC = objDoc.mp_IDDoc;
	var sqlParams = new Dictionary<string, object?>();

	string PrintRibasso()
	{
		string _PrintRibasso = "";
		SqlConnection sqlConn = null;		

		try
		{

			string strSql = "";
			SqlCommand cmd1;
			SqlDataReader rs;
			bool bFound = false;
			string valore = "";

			sqlConn = new SqlConnection(ApplicationCommon.Application.ConnectionString);
			sqlConn.Open();


			// la stampa si attiva solo c'è il parametro relativo valorizzato a YES o 1
			strSql = @"select valore from CTL_Parametri with (nolock) where Contesto='OFFERTE_PRODOTTI'
						and Oggetto='PRINT' and Proprieta = 'RIBASSO' and Deleted=0";

			cmd1 = new SqlCommand(strSql, sqlConn);
			using (rs = cmd1.ExecuteReader())
			{

				if (rs.Read())
				{
					bFound = true;
					valore = rs.GetString(rs.GetOrdinal("valore")).ToUpper();
				}

			}

			rs.Close();

			if (bFound && (valore == "YES" || valore == "1"))
			{
				_PrintRibasso = "YES";
			}


			sqlConn.Close();

		}
		catch
		{
			try { sqlConn.Close(); } catch { }
		}

		return _PrintRibasso;
	}

}
@{
	htmlToReturn.Write($@"
	<html>
	<head>
	<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">

	<link rel=""stylesheet"" type=""text/css"" href=""../ctl_library/themes/main_base_print.css""  />
	<link rel=""stylesheet"" type=""text/css"" href=""../ctl_library/themes/GridPrint.css""  />

	<style>
	.display_none
	{{
		display: none;

	}}
	</style>
	<title>" + ApplicationCommon.CNV("OFFERTA") + $@"</title>
	</head>");
	void Header()
	{
		htmlToReturn.Write($@"<tr><td height=""50px"" align=""center"" valign=""top"" >");
		string imgHeader = ApplicationCommon.CNV("HEADER_STAMPE");
		if (imgHeader.Contains("???", StringComparison.Ordinal ))
		{
			htmlToReturn.Write($@"<img height=""50px"" src=""logo_new.gif"" border=""0"" alt=""" + ApplicationCommon.CNV("ALT LOGO") + $@"""/>");
		}
		else
		{
			htmlToReturn.Write(imgHeader);
		}
		htmlToReturn.Write("</td></tr>");
		htmlToReturn.Write($@"<tr><td align=""center"" valign=""top"">" + ApplicationCommon.CNV("HEADER_STAMPA_BUSTA_OFFERTA") + "</td></tr>");
	}
	dynamic stazioneappaltante(dynamic cod)
	{
		//'--recupero info ente
		TSRecordSet rsEnte = null;
		sqlParams.Clear();
		sqlParams.Add("@id", cod);
		rsEnte = cdf.GetRSReadFromQuery_("select aziRagioneSociale from aziende with(nolock) where idazi = @id", ApplicationCommon.Application.ConnectionString, sqlParams);
		rsEnte.MoveFirst();
		return GetValueFromRS(rsEnte.Fields["aziRagioneSociale"]);
	}
	string recuperoTipoProcedura(string cod)
	{
		string _recuperoTipoProcedura = "";
		TSRecordSet rstipoproc = null;
		sqlParams.Clear();
		sqlParams.Add("@id", cod);
		rstipoproc = cdf.GetRSReadFromQuery_("select c2.tipodoc,ISNULL(DB.TipoProceduraCaratteristica,'') as TipoProceduraCaratteristica,dbo.GetCodDom2DescML('Caratteristica',ISNULL(DB.TipoProceduraCaratteristica,''),'I') as desc_carat,db.ProceduraGara, dbo.GetDescDominioFromDztNome('ProceduraGara','I',ISNULL(db.ProceduraGara,'')) as Desc_ProceduraGara from ctl_doc c inner join ctl_doc C2 on C2.id=C.LinkedDoc inner join document_bando DB on DB.idHeader=c2.id where C.id=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
		rstipoproc.MoveFirst();

		if(GetValueFromRS(rstipoproc.Fields["tipodoc"]) == "BANDO_SEMPLIFICATO")
		{
			_recuperoTipoProcedura = "Bando Semplificato";
		}
		if(GetValueFromRS(rstipoproc.Fields["tipodoc"]) == "BANDO_GARA" && !string.IsNullOrEmpty(GetValueFromRS(rstipoproc.Fields["TipoProceduraCaratteristica"])))
		{
			_recuperoTipoProcedura = GetValueFromRS(rstipoproc.Fields["desc_carat"]);
		}
		if(GetValueFromRS(rstipoproc.Fields["tipodoc"]) == "BANDO_GARA" && string.IsNullOrEmpty(GetValueFromRS(rstipoproc.Fields["TipoProceduraCaratteristica"])))
		{
			_recuperoTipoProcedura = GetValueFromRS(rstipoproc.Fields["Desc_ProceduraGara"]);
		}
		return _recuperoTipoProcedura;
	}
	string infoOfferta (string cod,string param)
	{
		string _infoOfferta = "";
		TSRecordSet rsofferta = null;
		sqlParams.Clear();
		sqlParams.Add("@id", cod);
		rsofferta = cdf.GetRSReadFromQuery_("select C.idpfu,p.pfuNomeUtente + ' ' + p.pfuCognome as Responsabile ,isnull(C.Body,b.Body) as Body,C.ProtocolloRiferimento from  ctl_doc C  with(nolock) left join profiliUtente P  with(nolock) on P.idpfu=C.idpfu inner join ctl_doc b with(nolock) on b.id = c.LinkedDoc where C.id=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
		rsofferta.MoveFirst();
		if(param == "Oggetto")
		{
			_infoOfferta = GetValueFromRS(rsofferta.Fields["Body"]);
		}
		if( param == "Registro_Bando" )
		{
			_infoOfferta = GetValueFromRS(rsofferta.Fields["ProtocolloRiferimento"]);
		}
		if(param == "Responsabile")
		{
			_infoOfferta = GetValueFromRS(rsofferta.Fields["Responsabile"]);
		}
		return _infoOfferta;

	}
	string DenominazioneATI(string cod)
	{
		string _DenominazioneATI = "";
		TSRecordSet rsDenominazioneATI = null;
		sqlParams.Clear();
		sqlParams.Add("@id", cod);
		rsDenominazioneATI = cdf.GetRSReadFromQuery_("select value from ctl_doc c inner join ctl_doc_value CV on CV.IdHeader=c.Id and DSE_ID='TESTATA_RTI' and CV.DZT_Name='DenominazioneATI' where C.id=@id", ApplicationCommon.Application.ConnectionString, sqlParams); 
		if(rsDenominazioneATI.RecordCount >0)
		{
			rsDenominazioneATI.MoveFirst();
			_DenominazioneATI = GetValueFromRS(rsDenominazioneATI.Fields["value"]);
		}
		else
		{
			_DenominazioneATI = "";
		}
		//'-- se il campo è vuoto recuperiamo la ragione sociale del fornitore
		if(string.IsNullOrEmpty(_DenominazioneATI.Trim()))
		{
			sqlParams.Clear();
			sqlParams.Add("@id", cod);
			rsDenominazioneATI = cdf.GetRSReadFromQuery_("select aziRagioneSociale  from  ctl_doc c  inner join aziende a on a.idazi = c.azienda where C.id=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
			if(rsDenominazioneATI.RecordCount >0)
			{
				rsDenominazioneATI.MoveFirst();
				_DenominazioneATI = GetValueFromRS(rsDenominazioneATI.Fields["aziRagioneSociale"]);
			}
		}
		return _DenominazioneATI;
	}
	void info_concorrente(string cod)
	{
		TSRecordSet rsinfo_concorrente = null;
		sqlParams.Clear();
		sqlParams.Add("@id", cod);
		rsinfo_concorrente = cdf.GetRSReadFromQuery_("select C.azienda,aziIndirizzoLeg + ' - ' + aziCAPLeg + ' ' + aziLocalitaLeg + ' (' + aziProvinciaLeg +') ' as aziIndirizzoLeg,'C.F. '+ vatValore_FT as cF, 'P.IVA ' + aziPartitaIVA as PIVA  from ctl_doc c inner join Aziende A on A.IdAzi=C.Azienda inner join DM_Attributi on A.IdAzi=lnk and dztNome='codicefiscale' where C.id=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
		rsinfo_concorrente.MoveFirst();
		htmlToReturn.Write("<tr><td>" + GetValueFromRS(rsinfo_concorrente.Fields["aziIndirizzoLeg"]) + "</td></tr>");
		htmlToReturn.Write("<tr><td>" + GetValueFromRS(rsinfo_concorrente.Fields["cF"]) + "&nbsp;" + GetValueFromRS(rsinfo_concorrente.Fields["PIVA"]) + "</td></tr>");

	}
	htmlToReturn.Write($@"
	<body style=""min-width:1500px; padding-left:20px; padding-right:20px; padding-top:20px; padding-bottom:20px;"" >
	<table  border=0 width=""100%"">
	<tr><td>
	<table style=""font-weight:bold; align=center; vertical-align:center;"" width=""100%"" >");
	Header();
	htmlToReturn.Write($@"
	</table>
	</td></tr>

	<tr><td>   
	<table  cellpadding=0 cellspacing=0 >
		 <thead >

    	<tr><td>&nbsp;</td></tr>");
	string paramValue = "";
	string TemplateName = "";
	string ViewName = "";
	string[] aSplit = null;

	paramValue = "";
	paramValue = Get_Func_Property("OFFERTA_PRODOTTI.asp", "Template_header", "DefaultValue", "", CInt("-1"));

	//'response.write "paramValue=" + paramValue
	//'response.end

	if(string.IsNullOrEmpty(paramValue))
	{
		htmlToReturn.Write($@"
		<tr>
    	  <td nowrap style=""font-size:18px; align=left""><b>Stazione appaltante:</b> " + stazioneappaltante(DOC_FieldTecnical("COPERTINA", "Destinatario_Azi")) + $@"</td>
    	</tr>
		<tr>
    	  <td nowrap style=""font-size:18px; align=left""><b>Tipo Procedura:</b> " + recuperoTipoProcedura(IDDOC) + $@"</td>
    	</tr>
		<tr>
    	  <td style=""font-size:18px; align=left""><b>Titolo:</b> " + infoOfferta(IDDOC, "Oggetto") + $@"");
		string regSisOff = infoOfferta(IDDOC, "Registro_Bando");
		if(!string.IsNullOrEmpty(regSisOff))
		{
			htmlToReturn.Write($@"<b>e numero registro di sistema:</b>" + regSisOff + $@"</td>");
		}
		htmlToReturn.Write("</tr>");
	}
	else
	{
		aSplit = paramValue.Split("#");

		TemplateName = aSplit[0];
		ViewName = aSplit[1];

		//' chiama la funzione che converte il template
		TSRecordSet rsTemp = null;
		sqlParams.Clear();
		sqlParams.Add("@id", GetParamURL(Request.QueryString.ToString(), "IDDOC"));
		rsTemp = cdf.GetRSReadFromQuery_("select * from  " + ViewName + " where iddoc=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
		if(rsTemp.RecordCount >0)
		{
			rsTemp.MoveFirst();
			htmlToReturn.Write(elabTemplate(ApplicationCommon.CNV(TemplateName), rsTemp));

		}
	}
	htmlToReturn.Write($@"

		<tr><td>&nbsp;</td></tr>	

		<tr >

		   <td >



  		    </td>
		</tr>");
	TSRecordSet rs1 = null;
	TSRecordSet rs2 = null;
	string concessione = "";
	string datainvio = "";
	string keymlng = "";

	//'response.write Request.QueryString("IDDOC")
	//'response.end

	datainvio = DOC_FieldTecnical("TESTATA", "DataInvio");

	//'if datainvio="" or isnull(datainvio) or datainvio="NULL" then
	if(!IsDate(datainvio))
	{
		//'datainvio = Date()
		//datainvio = datepart("yyyy",Date()) & "-" & right("00" & datepart("m",Date()),2) & "-" & right(datepart("d",Date()),2)
		datainvio = DateAndTime.DatePart("yyyy", DateAndTime.Now) + "-" + Strings.Right("00" + DateAndTime.DatePart("M", DateAndTime.Now), 2) + "-" + Strings.Right(CStr(DateAndTime.DatePart("d", DateAndTime.Now)), 2);

		//datainvio = DateTime.Now.ToString("yyyy-MM-dd");
		//'response.write "datainvio2=" & datainvio
		//'response.end
	}
	//'response.write "datainvio=" & datainvio
	//'response.end

	//'--se si tratta di una busta economica recupero la key per inserire il testo
	if(GetParamURL(Request.QueryString.ToString(), "BUSTA") == "BUSTA_ECONOMICA" && DOC_FieldTecnical( "TESTATA", "CriterioAggiudicazioneGara" ) != "16291" && DOC_FieldTecnical( "TESTATA", "Concessione" ) != "si")
	{
		//' vede se è una offerta su concessione
		concessione = DOC_FieldTecnical("TESTATA", "Concessione");

		//'set rs2=	GetRS( "select isnull(concessione,'no') as concessione from  ctl_doc b inner join Document_Bando c on c.idHeader = b.LinkedDoc where b.id=" & Request.QueryString("IDDOC") )  

		//'if rs2.recordcount>0 then	

		//'	rs2.moveFirst
		//'	concessione = rs2("concessione").value

		//'end if

		//'set rs2=nothing
		sqlParams.Clear();
		sqlParams.Add("@rel_type","PRINT_OFFERTA");

		sqlParams.Add("@data", datainvio.Replace("'", "''"));

		if(concessione == "si")
		{	sqlParams.Add("@rel_ValueInput","TESTO_DICHIARAZIONE_OFFERTA_CONCESSIONI");
			rs1 = cdf.GetRSReadFromQuery_("select REL_ValueOutput from CTL_RelationsTime where REL_Type = @rel_type and REL_ValueInput = @rel_ValueInput and REL_Data_I <= @data and REL_Data_F >= @data", ApplicationCommon.Application.ConnectionString, sqlParams);
		}
		else
		{
			sqlParams.Add("@Value_type", "TESTO_DICHIARAZIONE_OFFERTA");
			rs1 = cdf.GetRSReadFromQuery_("select REL_ValueOutput from CTL_RelationsTime where REL_Type = @rel_type and REL_ValueInput = @Value_type and REL_Data_I <= @data and REL_Data_F >= @data", ApplicationCommon.Application.ConnectionString, sqlParams);
		}
		keymlng = "";
		if(rs1.RecordCount >0)
		{
			rs1.MoveFirst();
			keymlng = GetValueFromRS(rs1.Fields["REL_ValueOutput"]);
		}
		//set rs1=nothing

		//'response.write "keymlng=" & keymlng
		//'response.end
		if(!string.IsNullOrEmpty(keymlng) && !string.IsNullOrEmpty(ApplicationCommon.CNV(keymlng)))
		{
			htmlToReturn.Write($@"
			<tr><td>

					<table width=""100%"" >
						<tr>

							<td align=""left"" style=""text-align:justify"">				
								"+ApplicationCommon.CNV(keymlng)+$@"<br/>				
							</td>

						</tr>	
					</table>
					</td></tr> ");
		}
	}
	htmlToReturn.Write($@"
	</table>
	</td></tr> 



	</table>
	<table border=0 width=""100%""  >    
        <tr><td>&nbsp;</td></tr>
        <tr ><td style=""border:0px;"" ><label style=""font-size:18px; font-weight:bold; align:left"">");
	if(string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "BUSTA")))
	{
		htmlToReturn.Write(ApplicationCommon.CNV("Offerta Economica"));
	}
	else
	{
		htmlToReturn.Write(ApplicationCommon.CNV(GetParamURL(Request.QueryString.ToString(), "BUSTA")));
	}
	htmlToReturn.Write($@"
	 <tr><td>&nbsp;</td></tr>
		</label></td></tr>
        </thead>

        <tr>
			<td style=""border:0px;"" >");
	//dim ObjSession
	//ObjSession = session("Session")
	//set ObjSession(0) = Request.QueryString
	//set ObjSession(1) = Request.form
	//
	//'-- Passiamo di nuovo anche la request all'indice 3 per permettere alla classe ctldb.blacklist di recuperare l'ip
	//set ObjSession(3) = request
	//set ObjSession(5) = session
	//set ObjSession(6) = application
	//ObjSession(9) = application("Server_RDS")
	//ObjSession(10) = session("Funzionalita")' permessi utenti
	//set ObjSession(13) = objNewDizMlng("MultiLinguismo")
	//session("Session") = ObjSession

	//'--stampo la griglia dell'offerta del microlotto
	//objDB = CreateObject("ctldb.clstabmanage")
	//'--recupero modello offerta microlotto			
	TSRecordSet rsM = null;
	sqlParams.Clear();
	sqlParams.Add("@id",IDDOC.Replace("'", "''") );

	if(!string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "BUSTA")))
	{
		sqlParams.Add("@DSE_ID",GetParamURL(Request.QueryString.ToString(), "BUSTA").Replace("'", "''") );
		rsM = cdf.GetRSReadFromQuery_(CStr("select MOD_Name from CTL_DOC_SECTION_MODEL with(nolock) where idheader = @id and DSE_ID = @DSE_ID"), ApplicationCommon.Application.ConnectionString, sqlParams);
	}
	else
	{
		sqlParams.Add("@DSE_ID", "PRODOTTI");
		rsM = cdf.GetRSReadFromQuery_(CStr("select MOD_Name from CTL_DOC_SECTION_MODEL with(nolock) where idheader = @id and DSE_ID = @DSE_ID"), ApplicationCommon.Application.ConnectionString, sqlParams);
	}
	if(rsM.RecordCount >0)
	{
		string strModelloOfferta = GetValueFromRS(rsM.Fields["MOD_Name"]);
		//'Response.Write 		strModelloOfferta

		//  '--recupero modello griglia
		LibDbModelExt mp_objDB = new LibDbModelExt();
		Dictionary<string, Field> mp_Columns = new Dictionary<string, Field>();
		Dictionary<string, Grid_ColumnsProperty> mp_ColumnsProperty = new Dictionary<string, Grid_ColumnsProperty>();
		mp_objDB.GetFilteredFieldsWeb(strModelloOfferta,ref mp_Columns, ref mp_ColumnsProperty, CStr(session["strSuffLing"]), 0, 0, ApplicationCommon.Application.ConnectionString, session, true);
		//'--rimuovo colonna Esito
		if(!string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "BUSTA")))
		{
			mp_Columns.Remove("FNZ_DEL");
		}
		Grid_ColumnsProperty prop;
		try
		{
			prop = mp_ColumnsProperty["EsitoRiga"];
			prop.Hide = true;
		}
		catch
		{
			// err.Clear
			//'-- creo la property per nascondere la colonna 
			prop = new Grid_ColumnsProperty();
			prop.Hide = true;
			mp_ColumnsProperty.Add("EsitoRiga", prop);
		}
		//'on error resume next
		// 'Set prop = mp_ColumnsProperty("FNZ_DEL")
		//'If err.number <> 0 Then
		//'    err.Clear
		//	'-- creo la property per nascondere la colonna 
		//'    Set prop = CreateObject("CtlHtml.Grid_ColumnsProperty")
		//'    prop.Hide = true
		//'    mp_ColumnsProperty.add prop , "FNZ_DEL"
		//'Else
		//'	prop.Hide = true
		//'End If


		//Set mp_objDB = nothing
		// '--recupero recordset dei dati per la griglia

		//'dim rs
		//'set rs = objDB.GetRSReadFromQuery( cstr("select * from Document_MicroLotti_Dettagli where TipoDoc = 'OFFERTA' and idheader=" & replace( idDoc , "'" , "''" )
		Grid mp_objGrid = new Grid();
		mp_objGrid.Columns = mp_Columns;
		mp_objGrid.ColumnsProperty = mp_ColumnsProperty;
		string strColId = "";
		bool bAutocol;
		strColId = "Id";
		bAutocol=false;
		//' mp_objGrid.RecordSetWeb rs, strColId, bAutocol
		mp_objGrid.SetMatrixDisposition(false);
		// stop
		//err.clear
		try
		{
			if (!string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "BUSTA")))
			{
				mp_objGrid.SetMatrix(objDoc.Sections[GetParamURL(Request.QueryString.ToString(), "BUSTA").Replace("'", "''")].mp_Matrix);
			}
			else
			{
				mp_objGrid.SetMatrix(objDoc.Sections["PRODOTTI"].mp_Matrix);
			}

		}
		catch(Exception e)
		{
			TracciaErrore("STAMPA-RECUPERO MATRICE", "Errore nel recupero matrice elenco prodotti - " + e.Message, 0, "OFFERTA_PRODOTTI.asp");

		}
		mp_objGrid.id = "GridViewer";
		mp_objGrid.width = "100%";
		mp_objGrid.Editable = false;
		//'--mp_objGrid.ShowTotal CNV("totale") , "2"
		mp_objGrid.Html(htmlToReturn);
		// set mp_objGrid = nothing
	}
	htmlToReturn.Write($@"

        </td>
        </tr>
		<tr><td>&nbsp;</td></tr>");
	if(GetParamURL(Request.QueryString.ToString(), "BUSTA") == "BUSTA_ECONOMICA" && DOC_FieldTecnical( "TESTATA", "CriterioAggiudicazioneGara" ) !=  "16291" && DOC_FieldTecnical( "TESTATA", "Concessione" ) != "si"  && Get_Func_Property("OFFERTA_TESTATA_TOTALI", "ValoreEconomico", "Hide", "0", -1 ) == "0" )
	{

		string sRibasso = PrintRibasso();

		

		if (sRibasso == "YES" ||  sRibasso == "1")
			sRibasso = @"<tr>
							<td nowrap style=""font-size:18px; align=left""><b>" + ApplicationCommon.CNV("RIBASSO_PERC_PRINT") + ": </b> " + DOC_FieldTecnical("TOTALI", "ValoreSconto") + $@" % </td>
						</tr>	";
		else
			sRibasso = "";

		htmlToReturn.Write($@"
		<tr>
			  <td nowrap style=""font-size:18px; align=left""><b>VALORE DELL'OFFERTA ECONOMICA: </b> " + DOC_Field("TOTALI", "ValoreEconomico") + $@" &euro; </td>
		</tr>	" + sRibasso +
		
		"	<tr><td>&nbsp;</td></tr>");	
	}
	if(string.IsNullOrEmpty(paramValue))
	{
		htmlToReturn.Write($@"
		<tr>
    	  <td nowrap style=""font-size:18px; align=left""><b>Ragione sociale del Concorrente: </b> " + DenominazioneATI(IDDOC) + $@" </td>
    	</tr>");
		info_concorrente(IDDOC);
	}
	htmlToReturn.Write($@"
	<br/><br/><br/>

	<table width=""100%"">

		<tr>

			<td align=""right"">");


	string param_mostra_nome = Get_Func_Property("OFFERTA_PRODOTTI.asp", "Responsabile", "HIDE", "0", CInt("-1"));
	if(CStr(param_mostra_nome).ToUpper() == "0")
	{
		htmlToReturn.Write($@"" + infoOfferta(IDDOC, "Responsabile") + "<br/>");
	}
	htmlToReturn.Write($@"
	<b>Firmato digitalmente</b>
				</td>

			</tr>		

		</table>

		</td></tr>
		</table>

	</body>
	</html>");
	void TracciaErrore(string source, string text, int tipo, string oggetto)
	{
		Exception e = new Exception(text);
        e.Source = source;
        StackTrace st = new StackTrace(true);
		e = eProcurementNext.CommonDB.Basic.SetStackTrace(e, st);
 

        // oltre allo StackTrace nel contesto aggiungere eventuali altre 
        // informazioni che possano essere d'aiuto a chi dovrà valutare l'errore
        string contesto = st.ToString();
        TraceErr(e, ApplicationCommon.Application.ConnectionString, contesto);
		throw new ResponseRedirectException("../ctl_library/MessageBoxWin.asp?ML=yes&MSG=INFO_UTENTE_ERRORE_PROCESSO&CAPTION=Errore&ICO=2", Response);
	}
	
	//'-- Testo aggiunto in automatico per liberare la memoria dei nuovi report
	try
	{
		FreeMemDocument(session);
	}
	catch
	{
		
	}
}@Html.Raw(htmlToReturn.Out())
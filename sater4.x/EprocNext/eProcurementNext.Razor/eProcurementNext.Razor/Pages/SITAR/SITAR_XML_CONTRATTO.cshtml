@page "/SITAR/SITAR_XML_CONTRATTO.asp"
@inject eProcurementNext.Session.ISession session;
@using System.IO;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonDB.Basic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.ctl_profiler
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.HTML.BasicFunction;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.logModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.CtlProcess;
@using static eProcurementNext.Session.SessionMiddleware
@model eProcurementNext.Razor.Pages.SITAR.SITAR_XML_CONTRATTOModel
@{
    LoadSession(HttpContext, session);
    EprocResponse response = new();
    HttpContext.Response.ContentType = "TEXT/XML";
    if (GetParamURL(Request.QueryString.ToString(), "VIDEO") != "1")
    {
        HttpContext.Response.Headers.Add("Content-Disposition", "attachment; filename=ITAR_XML_CONTRATTO.XML");
    }

    string vbTab = string.Empty;
    string RUP_Login = string.Empty;
    string RUP_Pwd = string.Empty;
    string CF_Ente = string.Empty;
    string g_ID_DOC = string.Empty; // '-- ID della GARA
    string g_id_PDA = string.Empty;
    string g_SQLfilter = string.Empty;
    string OPERATION = string.Empty;
    string cfRapLeg = string.Empty;
    string strSQL = string.Empty;

    var sqlParams = new Dictionary<string, object?>();

    //'-- init
    vbTab = "    ";

    string SOVRASCR = "true";

    g_ID_DOC = GetParamURL(Request.QueryString.ToString(), "IDDOC");
    validate("IDDOC", g_ID_DOC, TIPO_PARAMETRO_INT, 0, "", 1, HttpContext, session);

    TSRecordSet rs_pwd = new TSRecordSet();
    TSRecordSet rsEsiti = new TSRecordSet();
    TSRecordSet rs_Lotti = new TSRecordSet();
    TSRecordSet rs_Lotti_PDA = new TSRecordSet();
    TSRecordSet rs_Gara = new TSRecordSet();
    TSRecordSet rs_ComAggiudic = new TSRecordSet();
    TSRecordSet rs_Aziende = new TSRecordSet();
    TSRecordSet rs_RapLeg = new TSRecordSet();

    rs_pwd = GetRS("select dbo.OCP_getPasswordWS('') as account");
    rs_pwd.MoveFirst();

    string sitar_account = CStr(rs_pwd["account"]);
    string[] arr = sitar_account.Split("@@@");

    string SITAR_LOGIN = arr[0];
    string SITAR_PASSWORD = arr[1];

    sqlParams.Add("@ID_DOC", CInt(g_ID_DOC));
    rs_Gara = GetRS("select CFEIN from SITAR_XML_DATI_GARA with(nolock) where idHeader = @ID_DOC", sqlParams);

    CF_Ente = CStr(rs_Gara["CFEIN"]);

    strSQL = "select * from SITAR_XML_LISTA_LOTTI where idheader = @ID_DOC";
    rsEsiti = GetRS(strSQL, sqlParams);

    response.Write(@"<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:bean='http://beans.ws.vigilanza.sil.eldasoft.it'>
	<soapenv:Header/>
	<soapenv:Body>
		<bean:istanziaContratto>
			<bean:login>
				<bean:login>" + SITAR_LOGIN + @"</bean:login>
				<bean:password>" + SITAR_PASSWORD + @"</bean:password>
			</bean:login>
			<bean:esito>
				<bean:testata>
					<bean:CFEIN>" + CF_Ente + @"</bean:CFEIN>
					<bean:SOVRASCR>" + SOVRASCR + @"</bean:SOVRASCR>
				</bean:testata>
				<bean:oggettoXML>
    <![CDATA[
    <bean:richiestaSincrona_IstanzaContratto test='false' xmlns:bean='http://beans.vigilanza.sil.eldasoft.it' >");

    if (rsEsiti.RecordCount > 0)
    {
        rsEsiti.MoveFirst();

        //'-- Ciclo sui lotti
        while (!rsEsiti.EOF)
        {
            response.Write(@"<bean:listaLottiContratti>
	<bean:W3CIG>" + encodeXML(CStr(rsEsiti["W3CIG"])) + @"</bean:W3CIG>
    <bean:contratto>");

            response.Write(addOptionalTag(CStr(rsEsiti["W3DATA_STI"]), "bean:W3DATA_STI"));
            response.Write(addOptionalTag(CStr(rsEsiti["W9INDECO"]), "bean:W9INDECO"));
            response.Write(addOptionalTag(CStr(rsEsiti["W9INSCAD"]), "bean:W9INSCAD"));

            response.Write(@"<bean:W3PROFILO2>true</bean:W3PROFILO2>
		<bean:W3MIN2>true</bean:W3MIN2>
		<bean:W3OSS2>true</bean:W3OSS2>

    </bean:contratto>
  </bean:listaLottiContratti>");
            rsEsiti.MoveNext();
        }
    }

    response.Write(@"</bean:richiestaSincrona_IstanzaContratto>
    ]]>
                    </bean:oggettoXML>
                </bean:esito>

            </bean:istanziaContratto>
        </soapenv:Body>
    </soapenv:Envelope>");
    

    string addOptionalTag(string Value, string tag)
    {
        //on error resume next

        string result = string.Empty;
        if (!string.IsNullOrEmpty(Value))
        {
            try
            {
                string encodedValue = encodeXML(Value);
                result = $"<{tag}>{encodedValue}</{tag}>{Environment.NewLine}";
                //response.Write vbcrlf
            }
            catch { }
        }
        return result;
    }

    string encodeXML(string str)
    {
        //on error resume next

        string result = "";
        if (!string.IsNullOrEmpty(str))
        {
            result = System.Net.WebUtility.HtmlEncode(str);
            result = result.Replace("'", "&apos;");
        }
        return result;
    }
}
@Html.Raw(response.Out())
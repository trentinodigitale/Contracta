@page "/CTL_LIBRARY/PDF/genera_buste.asp"
@inject eProcurementNext.Session.ISession session;
@using System.IO;
@using eProcurementNext.CommonDB
@using eProcurementNext.Core.Storage
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonDB.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.HTML.BasicFunction;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.CtlProcess;
@using Microsoft.VisualBasic;
@using eProcurementNext.Razor;
@model eProcurementNext.Razor.Pages.CTL_LIBRARY.PDF.zip_pdfModel
@using static eProcurementNext.Session.SessionMiddleware
@using static eProcurementNext.CommonModule.Const;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.PDF.pdf_functionsModel
@{
	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();

	var sqlParams = new Dictionary<string, object?>();
	string strSqlBusteEconomiche;
	string strSqlBusteTecniche;
	TSRecordSet rsBuste;
	int numeroLotto;
	bool esito;

	//'--- Se tipo_zip � vuoto o ALL mettere sia le buste economiche che tecniche nel file zip. in 2 cartelle separate
	//'--  Se tipo_zip = ECONOMICA. metteremo solo i pdf delle economiche ( senza cartella )
	//'--  Se tipo_zip = TECNICA. metteremo solo i pdf delle tecniche ( senza cartella )

	string idOfferta = GetParamURL(Request.QueryString.ToString(), "ID_OFFERTA");

	string tipoZip = GetParamURL(Request.QueryString.ToString(), "TIPO_ZIP");      //'-- da implementare dopo. per ora produce i pdf di entrambi i tipi di buste

	//'application("buste-" & idOfferta) = ""
	//'session("guid_buste_offerta") = ""
	//'response.write GENERA_CON_WARNIG
	//'response.end
	string codOperation = string.Empty;

	bool endResponse = false;

	//'-- Se si sta aprendo il popup di download (la percentuale � messa a-100) faccio scaricare il file zip e ripulisco
	if (CStr(session["percentuale"]) == "-100")
	{
		codOperation = session.SessionIDMinimal;
		session["percentuale"] = CLng(0);
		session["guid_buste_offerta"] = string.Empty;

		ApplicationCommon.Application["buste-" + CStr(session["id_offerta"])] = "";
		pulisci_e_scarica(true);
		finishImport(codOperation);
		endResponse = true;
		//throw new ResponseEndException(htmlToReturn.Out(), Response, "");
	}
	if (!endResponse)
	{
		//'-- Se l'utente sta richiedendo un nuovo import, ripuliamo e ne iniziamo uno nuovo
		if (!string.IsNullOrEmpty(CStr(idOfferta)))
		{
			session["id_offerta"] = idOfferta;
			codOperation = CStr(session["guid_buste_offerta"]);
			ApplicationCommon.Application["buste-" + CStr(session["id_offerta"])] = "";
			pulisci_e_scarica(false);
			finishImport(codOperation);
		}

		//'-- Se � la prima operazione e non si sta passando l'id dell'offerta
		if (string.IsNullOrEmpty(idOfferta) && string.IsNullOrEmpty(CStr(session["guid_buste_offerta"])))
		{
			message("Parametro ID_OFFERTA Obbligatorio");
		}
		else
		{
			validate("ID_OFFERTA", idOfferta, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);
			validate("tipoZip", idOfferta, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);
		}

		//'-- Verifico se � in corso la stessa operazione a parit� di ID offerta
		//'if cstr(idOfferta) <> "" then
		//'	if cstr(application("buste-" & idOfferta)) <> "" then
		//'		dim ultimaOperazione
		//'		dim diffMinute
		//'		ultimaOperazione = application("buste-" & idOfferta)
		//'		diffMinute = DateDiff("n",ultimaOperazione,now)
		//'		'-- Se non sono passati 5 minuti
		//'		if diffMinute <= 5 then
		//'			call viewMessage("Operazione bloccata. E' in corso un altra importazione per la stessa offerta")
		//'		end if
		//'	end if
		//'end if
		//'-- Aggiorno la data di ultima operazione per l'offerta passata 
		//'application("buste-" & idOfferta) = now

		idOfferta = CStr(session["id_offerta"]);

		//'-- effettuo ( una volta sola ) il controllo se sono presenti warning sui lotti
		//'-- e se c'erano gia state in precedenza delle generazioni di pdf su una qualsiasi delle buste dell'offerta 
		if (string.IsNullOrEmpty(session["check_warning_lotti"]))
		{
			//'-- Invoco il processo 'CONTROLLO_PRODOTTI,ISTANZA_SDA_FARMACI' per effettuare i controlli sui lotti
			esito = ExecuteProcess("CONTROLLO_PRODOTTI", "ISTANZA_SDA_FARMACI", idOfferta);

			sqlParams.Clear();
			sqlParams.Add("@idOfferta", CInt(idOfferta));
			TSRecordSet rs = cdf.GetRSReadFromQuery_("select EsitoRiga from Document_MicroLotti_Dettagli lotti with (nolock) where lotti.IdHeader = @idOfferta and lotti.TipoDoc = 'OFFERTA'", CStr(ApplicationCommon.Application["ConnectionString"]), sqlParams);

			if (rs.RecordCount == 0)
			{
				finishImport(codOperation);
				message("Nessun lotto trovato");
			}

			rs = cdf.GetRSReadFromQuery_("select EsitoRiga from OFFERTA_LISTA_BUSTE_VIEW where IdHeader = @idOfferta and Tipodoc='OFFERTA'  and (EsitoRiga like '%State_OK%'  or EsitoRiga like '%State_Warning.%') and  EsitoRiga not like '%State_ERR.%'", CStr(ApplicationCommon.Application["ConnectionString"]), sqlParams);
			if (rs.RecordCount == 0)
			{
				//'-- Se non trovo sull'esitoriga lo stato ad ok blocco l'elaborazione
				finishImport(codOperation);
				message("Sono presenti errori sui lotti. Correggerli prima di effettuare tale operazione");
			}
			string strSql = @" select top 1 lotti.NumeroLotto, lotti.Id , firme.F1_SIGN_HASH ,firme.F2_SIGN_HASH
										from Document_MicroLotti_Dettagli lotti with (nolock)
										inner join Document_Microlotto_Firme firme with (nolock) ON lotti.Id = firme.IdHeader 
										where lotti.IdHeader = @idOfferta and lotti.TipoDoc = 'OFFERTA' 
											and ( firme.F1_SIGN_HASH <> '' or firme.F2_SIGN_HASH <> '' ) ";

			rs = cdf.GetRSReadFromQuery_(strSql, CStr(ApplicationCommon.Application["ConnectionString"]), sqlParams);

			//'response.write "totR:" & rs.recordcount

			if (rs.RecordCount > 0)
			{
				session["warning_vecchi_pdf"] = "SI";
			}
			else
			{
				session["warning_vecchi_pdf"] = "";
			}

			//set rs = nothing

			session["check_warning_lotti"] = "OK";

		}

		//'-- Verifico se � la prima invocazione
		if (string.IsNullOrEmpty(CStr(session["guid_buste_offerta"])))
		{
			//'response.write "init"
			//'response.end

			initImport(idOfferta);

			if (CLng(session["tot_record"]) > 0)
			{
				visualizzaPercentuale(0);
				//'redirectJS("genera_buste.asp")
			}
			else
			{
				string codiceOperazione = session.SessionIDMinimal;
				finishImport(codiceOperazione);
				viewMessage("Nessuna busta da generare");
			}
		}
		else
		{
			codOperation = CStr(session["guid_buste_offerta"]);
			long start_id = CLng(session["id_start"]);
			long totLotti = CLng(session["tot_record"]);
			int end_id = CInt(start_id) + CInt(totLotti / 100) + 1;

			//'-- Calcolo la percentuale totale di elaborazione
			int perc = 100 - CInt(100 / totLotti * (session["id_last"] - end_id));

			//'-- Aggiornamento variabili in sessione
			session["percentuale"] = perc;
			session["id_start"] = end_id;

			execStepImport(CStr(codOperation), CInt(start_id), CInt(end_id));

			//'-- Incremento l'id di partenza di 1 in + rispetto all'ultimo elaborato
			session["id_start"] = end_id + 1;

			//'-- se abbiamo elaborato tutti i lotti usciamo altrimenti ri-iteriamo
			if (CLng(end_id) >= CLng(session["id_last"]))
			{
				//'response.write "arrivo fino qui?"
				session["percentuale"] = -100;
				visualizzaPercentuale(-100);
			}
			else
			{
				//'if perc < 50 then
				//'	call visualizzaPercentuale( perc )
				//'else
				visualizzaPercentuale(perc);
				//'	response.end
				//'end if

				//'redirectJS("genera_buste.asp")
			}
		}
	}

	//'-------------------------------------	FINE PAGINA ---'
	//Response end non necessario!
	//throw new ResponseEndException(htmlToReturn.Out(), Response, "FINE PAGINA");
	//'-------------------------------------	FINE PAGINA ---'

	void execStepImport( string codOperation, int start_id, int end_id )
	{
		//'response.write "step. codOperation:" & codOperation & ". start_id : " & start_id & " - endId: " & end_id

		//'-- variabili per il pdf
		//dim obj
		//dim res
		//dim pageOrientation
		//dim nomePdf

		////'-- variabili per la firma
		//dim tmp
		//dim strHASHPDF
		//dim strColName
		//dim table       //'-- TABELLA CHE CONTIENE LE FIRME
		//dim area
		//dim identity
		//dim sign_lock
		//dim idPfu
		//dim idLotto

		//'strSqlBusteEconomiche = " select lotti.NumeroLotto, lotti.id "
		//'strSqlBusteEconomiche = strSqlBusteEconomiche & "		from document_microlotti_dettagli lotti "
		//'strSqlBusteEconomiche = strSqlBusteEconomiche &  "			inner join Document_Microlotto_Firme firme ON lotti.id = firme.idheader and firme.f1_sign_attach = '' "
		//'strSqlBusteEconomiche = strSqlBusteEconomiche & "	where lotti.idheader = " & cstr( clng( idOfferta ) ) & " and lotti.TipoDoc = 'OFFERTA' "

		//'strSqlBusteTecniche = " select lotti.NumeroLotto, lotti.id "
		//'strSqlBusteTecniche = strSqlBusteTecniche & "		from document_microlotti_dettagli lotti "
		//'strSqlBusteTecniche = strSqlBusteTecniche &  "			inner join Document_Microlotto_Firme firme ON lotti.id = firme.idheader and firme.f2_sign_attach = '' "
		//'strSqlBusteTecniche = strSqlBusteTecniche & "	where lotti.idheader = " & cstr( clng( idOfferta ) ) & " and lotti.TipoDoc = 'OFFERTA' "

		sqlParams.Clear();
		sqlParams.Add("@codOperation", codOperation);
		sqlParams.Add("@start_id", start_id);
		sqlParams.Add("@end_id", end_id);
		strSqlBusteEconomiche = "select * from Genera_Buste_Offerta with (nolock) where Busta = 'ECONOMICA' and CodiceOperazione = @codOperation and id >= @start_id and id <= @end_id";
		strSqlBusteTecniche = "select * from Genera_Buste_Offerta with (nolock) where Busta = 'TECNICA' and CodiceOperazione = @codOperation and id >= @start_id and id <= @end_id";

		string path = CStr(ApplicationCommon.Application["PathFolderAllegati"]);
		string nomeDirectoryTemporanea = CStr(session["dir_temp_lavoro"]);

		//'-- Puliamo situazioni pregresse
		//'call pulisciFilesUtente(fs)

		string pageOrientation = "landscape";

		string pathEconomiche = $@"{path}{nomeDirectoryTemporanea}\buste_economiche";

		//'response.write pathEconomiche
		//'response.end

		if ( !(CommonStorage.ExistsDirectory(pathEconomiche)) )
		{
			CommonStorage.CreateDirectory(pathEconomiche);
		}

		rsBuste = cdf.GetRSReadFromQuery_(strSqlBusteEconomiche, CStr(ApplicationCommon.Application["ConnectionString"]), sqlParams);
		session["tot_elaborati"] = session["tot_elaborati"] + CInt(rsBuste.RecordCount);
		elaboraBuste(rsBuste, "OFFERTA_BUSTA_ECO", "Busta_ECO_", "F1", pageOrientation, pathEconomiche);

		rsBuste = cdf.GetRSReadFromQuery_(strSqlBusteTecniche, CStr(ApplicationCommon.Application["ConnectionString"]), sqlParams);

		if (rsBuste.RecordCount > 0)
		{
			string pathTecniche = $@"{path}{nomeDirectoryTemporanea}\buste_tecniche";

			if (!CommonStorage.ExistsDirectory(pathTecniche))
			{	
				CommonStorage.CreateDirectory(pathTecniche);
			}


			session["tot_elaborati"] = session["tot_elaborati"]  + CInt(rsBuste.RecordCount);
			elaboraBuste(rsBuste, "OFFERTA_BUSTA_TEC", "Busta_TEC_", "F2", pageOrientation, pathTecniche);

			//set fs = nothing
			//set rsBuste = nothing

		}
	}

	void pulisci_e_scarica(bool bDownload) 
	{
		//on error goto 0

		if (bDownload == true ) 
		{
			//'-- Produco il file zip della directory di lavoro
			//Dim objZip;
			//'Set objZip = Server.CreateObject("XStandard.Zip")
			//Set objZip = Server.CreateObject("AFUtils.Zip");

			string path = CStr(ApplicationCommon.Application["PathFolderAllegati"]);
			idOfferta = CStr(session["id_offerta"]);

			string nomeFileZip = $"{path}buste_lotti_{CStr(idOfferta)}_{CStr(session["idPfu"])}.zip";

			//'-- Cancello un file zip precedente ( se presente )
			if (CommonStorage.ExistsFile(nomeFileZip))
			{
				CommonStorage.DeleteFile(nomeFileZip);
			}
			try
			{
				//objZip.Pack(cstr(path + cstr(session["dir_temp_lavoro"]), cstr(nomeFileZip)));
				new Zip().Pack($"{path}{CStr(session["dir_temp_lavoro"])}", CStr(nomeFileZip));
			}
			catch(Exception ex)
			{
				TracciaErrore("genera_buste.asp.Errore nella generazione del file zip", "objZip.ErrorDescription" + " - " + ex.Message, 0, "pulisci_e_scarica()");
				htmlToReturn.Write($@"Errore nella generazione del file zip :" + "objZip.ErrorDescription" + " - " + ex.Message);
				throw new ResponseEndException(htmlToReturn.Out(), Response, "Errore nella generazione del file zip :");
			}

			//'--controllo che lo ZIP non abbia taglia 0

			ritornaFile(nomeFileZip);

			CommonStorage.DeleteFile(nomeFileZip);
		}

		pulisciFilesUtente();
	}

	void initImport(string idOfferta)
	{
		string codiceOperazione;
		TSRecordSet rs;
		string strSql;

		codiceOperazione = session.SessionIDMinimal;
		clearOperation(codiceOperazione);

		//on error goto 0

		//'response.write "test"

		//'-- SI DETERMINANO LE BUSTE DA FIRMARE, LE CONOMICHE MANCANTI E LE EVENTUALI BUSTE TECNICHE SE PRESENTI ( OEV OPPURE CON CONFORMITA )
		sqlParams.Clear();
		sqlParams.Add("@codiceOperazione", codiceOperazione);
		sqlParams.Add("@idOfferta", CInt(idOfferta));
		strSql = @"INSERT INTO Genera_Buste_Offerta (CodiceOperazione, NumeroLotto, IdLotto, Busta) 
					 select @codiceOperazione as CodiceOperazione, NumeroLotto, Id, Busta from OFFERTA_BUSTE_DA_GENERARE where idheader = @idOfferta";

		//'-- Popolo la tabella con i lotti da elaborare 
		cdf.Execute(strSql, ApplicationCommon.Application.ConnectionString, parCollection: sqlParams);

		sqlParams.Clear();
		sqlParams.Add("@codiceOperazione", codiceOperazione);
		rs = cdf.GetRSReadFromQuery_("select id from Genera_Buste_Offerta with (nolock) where CodiceOperazione = @codiceOperazione order by id asc", CStr(ApplicationCommon.Application["ConnectionString"]), sqlParams);

		//'response.write cstr("select id from Genera_Buste_Offerta where CodiceOperazione = '" & replace(codiceOperazione,"'","''") & "' order by id asc")

		session["tot_record"] = rs.RecordCount;
		session["id_offerta"] = CLng(idOfferta);

		if (rs.RecordCount > 0)
		{
			rs.MoveFirst();
			session["id_start"] = CInt(rs["id"]!);

			rs.MoveLast();
			session["id_last"] = CInt(rs["id"]!);
		}

		//'-- Creo la directory di lavoro
		string nomeFileTemporaneo = CommonStorage.GetTempName();
		string nomeDirectoryTemporanea = $"{CStr(session["idPfu"])}{nomeFileTemporaneo}";

		string path = CStr(ApplicationCommon.Application["PathFolderAllegati"]);

		session["dir_lavoro_buste"] = $"{path}{nomeDirectoryTemporanea}";

		CommonStorage.CreateDirectory($"{path}{nomeDirectoryTemporanea}");

		session["dir_temp_lavoro"] = nomeDirectoryTemporanea;
		session["guid_buste_offerta"] = codiceOperazione;
		session["percentuale"] = CLng(0);
		session["tot_elaborati"] = CLng(0);
	}

	void pulisciFilesUtente()
	{
		//'response.write "pulisciFiles:" & cstr(session("dir_lavoro_buste")) 
		//'response.write "<br/>"

		//on error resume next
		try
		{
			CommonStorage.DeleteDirectory(CStr(session["dir_lavoro_buste"]));
		}
		catch
		{
		}
	}

	void ritornaFile(string strFilePath)
	{
		htmlToReturn.Clear();
		HttpContext.Response.Clear();
		Response.Headers.TryAdd("Content-Disposition", "attachment; filename=offerta.zip");
		using (FileStream fs = new FileStream(strFilePath, FileMode.Open, FileAccess.Read))
		{
			byte[] b = new byte[1024];
			int len;
			int counter = 0;
			while (true)
			{
				len = fs.Read(b, 0, b.Length);
				byte[] c = new byte[len];
				b.Take(len).ToArray().CopyTo(c,0);
				htmlToReturn.BinaryWrite(HttpContext, c);
				if(len == 0 || len < 1024){
					break;
				}
				counter++;
			}
		}
	}

	void elaboraBuste(TSRecordSet rsBuste, string TipoDoc, string prefissoFile, string areaSign, string pageOrientation, string path)
	{
		//on error goto 0

		if (rsBuste.RecordCount > 0)
		{
			//'-- compongo l'url della pagina
			string strSite;
			string applicazione;
			string strURL;

			if (IsEmpty(ApplicationCommon.Application["WEBSERVERAPPLICAZIONE_INTERNO"]) || string.IsNullOrEmpty(ApplicationCommon.Application["WEBSERVERAPPLICAZIONE_INTERNO"]) ){
				strSite="http://";
				if (HttpContext.GetServerVariable("SERVER_PORT_SECURE") == "1" )
				{
					strSite="https://";
				}
				//newcode
				strSite = "https://";
				//endnewcode
				strSite = strSite + Request.HttpContext.GetServerVariable("LOCAL_ADDR");
			}
			else
			{
				strSite = CStr(ApplicationCommon.Application["WEBSERVERAPPLICAZIONE_INTERNO"]);
			}

			if (IsEmpty(ApplicationCommon.Application["NOMEAPPLICAZIONE"]) || CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"]).Trim() == "")
			{
				applicazione = CStr(ApplicationCommon.Application["ApplicationName"]);
			}
			else
			{
				applicazione = CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"]);
			}

			strURL = $"{strSite}/{applicazione}";

			rsBuste.MoveFirst();

			while (! rsBuste.EOF)
			{ //'-- itero sulle buste
				numeroLotto = CInt(rsBuste["NumeroLotto"]!);
				int idLotto = CInt(rsBuste["IdLotto"]!);

				string nomePdf = $"{prefissoFile}{CStr(numeroLotto)}.pdf";

				//'on error resume next

				string fileGenerato = $@"{path}\{nomePdf}";

				string strURLBusta = $@"{strURL}/report/{TipoDoc}.asp?IDDOC={idLotto}&TYPEDOC={TipoDoc}&backoffice=yes";
				string strCmd = "pdf=" + URLEncode(fileGenerato);
				strCmd = strCmd + "&url=" + URLEncode(strURLBusta) + "";
				strCmd = strCmd +  "&PDF_A=YES";
				string res;
				try{
					//#if DEBUG
					//	res = "1#pdfok";
					//#else
						res = invokePdf(strCmd, CStr(idLotto), null, HttpContext, session);
					//#endif
				}
				catch(Exception  ex)
				{
					ShowError(ex.Message);
					TracciaErrore($"genera_buste.asp.elaboraBuste({TipoDoc})", ex.ToString(), 0, "elaboraBuste()");
				}

				//'-- se va in errore rifaccio un secondo tentativo
				if (Strings.Left(res,2) == "0#") 
				{
					//#if DEBUG
					//	res = "1#pdfok";                                                                                    
					//#else
					res = invokePdf(strCmd, CStr(idLotto), null, HttpContext, session);
					//#endif
				}

				////'-- Se la generazione � andata bene
				if (Strings.Left(res,2) == "1#")
				{
					//#if DEBUG
					//	res = "1#hash";
					//#else
					strCmd = $"mode=SIGN&pdf={URLEncode(fileGenerato)}&issigned=false";
					res = invokeAttach64(strCmd, CStr(idLotto), null, HttpContext, session);
					//#endif

					//	res = obj.parsePdf(fileGenerato, "0")

					//'-- se l'hash è stato generato correttamente
					if (Strings.Split(res, "#")[0] == "1")
					{

						string strHASHPDF = Strings.Split(res, "#")[1];

						if (string.IsNullOrEmpty(strHASHPDF))
						{
							TracciaErrore("genera_buste.asp.elaboraBuste(" + TipoDoc + ")", res, 0, "elaboraBuste()");
							htmlToReturn.Write("Errore nella generazione dell'hash pdf di una busta. Ripetere l'operazione. Riferimento dell'errore:" + DateTime.Now.ToString());
						}
						else
						{
							string errHash = hashProcess(CStr(idLotto), strHASHPDF, "OFFERTA_BUSTA_ECO", areaSign, "SIGN_HASH", "idHeader", "Document_Microlotto_Firme");

							if (!string.IsNullOrEmpty(errHash))
							{
								TracciaErrore("genera_buste.asp.elaboraBuste(" + TipoDoc + ")", errHash, 0, "elaboraBuste()");
								htmlToReturn.Write("Errore nel salvataggio dell'hash pdf di una busta. Ripetere l'operazione. Riferimento dell'errore:" + DateTime.Now.ToString());
							}
						}

					}
					else
					{
						TracciaErrore("genera_buste.asp.elaboraBuste(" + TipoDoc + ")", res, 0, "elaboraBuste()");
						htmlToReturn.Write("Errore nella generazione dell'hash pdf di una busta. Ripetere l'operazione. Riferimento dell'errore:" + DateTime.Now.ToString());
					}

				}
				else
				{


					TracciaErrore("genera_buste.asp.elaboraBuste(" + TipoDoc + ")", res, 0, "elaboraBuste()");
					htmlToReturn.Write("Errore nel genera pdf di una busta. Ripetere l'operazione. Riferimento dell'errore:" + DateTime.Now.ToString());
					//'response.write res

				}

				rsBuste.MoveNext();
			}
		}
	}

	string hashProcess(string idDoc, string strHASHPDF, string typeDoc, string area, string strColName, string identity, string table) 
	{
		int idPfu = CInt(session["IdPfu"]!);

		TSRecordSet rs;

		if (string.IsNullOrEmpty(table))
		{
			sqlParams.Clear();
			sqlParams.Add("@typeDoc", typeDoc);
			rs = cdf.GetRSReadFromQuery_("select DOC_Table from LIB_Documents with (nolock) where DOC_ID = @typeDoc", CStr(ApplicationCommon.Application["ConnectionString"]), sqlParams);
			table = CStr(rs["DOC_Table"]);
		}

		if (string.IsNullOrEmpty(identity))
		{ 
			identity = "id";
		}

		if (string.IsNullOrEmpty(idDoc) || string.IsNullOrEmpty(table))
		{
			//'call ShowError("Mancano parametri indispensabili alla firma digitale , IDDOC o TABLE")
			return "Mancano parametri indispensabili alla firma digitale , IDDOC o TABLE";
		}
		string sign_lock;
		if (!string.IsNullOrEmpty(area))
		{
			strColName = $"{area}_SIGN_HASH";
			sign_lock = $"{area}_SIGN_LOCK";
		}
		else
		{
			sign_lock = "SIGN_LOCK";
		}

		string strSql = "update  " + table + " set " + sign_lock + " = " + idPfu + " where " + identity + " = " + CLng(idDoc) + " and " + sign_lock + " = 0 ";
		cdf.Execute(strSql, CStr(ApplicationCommon.Application["ConnectionString"]));

		rs = cdf.GetRSReadFromQuery_("select isnull( " + sign_lock.Replace("'", "''") + " , 0 ) as " + sign_lock + "  from " + table + " with (nolock) where " + identity + " = " + CLng(idDoc), CStr(ApplicationCommon.Application["ConnectionString"]));

		if (CInt(rs[ sign_lock ]!) != CInt(idPfu))
		{
			//'call ShowError( "" , "Operazione non consentita, � gia in corso una firma" )
			return "Operazione non consentita, è gia in corso una firma" ;
		}
		try
		{
			//'--inserisco HASH nella tabella indicata
			string strSQL= " update " + table + " set " + strColName + " = '" + strHASHPDF.Replace("'","''") + "' where " + identity + "=" + CLng(idDoc);
			cdf.Execute(strSQL, CStr(ApplicationCommon.Application["ConnectionString"]));
		}
		catch(Exception ex)
		{
			return CStr(ex.ToString());
		}
	
		//'on error goto 0
	
		return ""; //' tutto ok
	}

	void ShowError(string ErrText)
	{
		throw new ResponseRedirectException("../MessageBoxWin.asp?ML=yes&MSG=" + URLEncode(TruncateMessage(ErrText)) + "&CAPTION=Errore&ICO=2", Response);
	}

	void visualizzaPercentuale(int x)
	{
		//'-- se sto visualizzando l'inizio o la fine dell'operativit� porto in output anche l'head
		if (x <= 0)
		{
			htmlToReturn.Write($@"
				<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
				<html xmlns=""http://www.w3.org/1999/xhtml"">
				<head>
					<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
					<title>Loading</title>

					<style>
						body, html{{ background:#fff; font-family:Arial, Helvetica, sans-serif; color:#333;}}
						.main{{ width:400px; height:200px; /*background:#1B1C1C;*/ margin:0 auto; padding:20px 20px 20px 20px;}}
						.loadingbox{{ width:300px; height:30px; margin:10px 0px 0px 50px; border:5px solid #ccc; /*#323f4f; background:#323f4f*/ background:#333 url(./LoadingBar.png) no-repeat;}}
						.loading{{ width:300px; height:30px; background: url(./bg.png) top left no-repeat; margin:auto;}}
						.end{{ background:#333; height:30px;}}
						.button_center {{margin:0 auto;}}
						p{{ text-align:center; color:#333; font-size:12px;}}
						span{{color:#666; text-align:center; font-size:18px; font-weight:bold;}}
						h1{{ font-size:16px; font-weight:normal; text-align:center;}}
						.completata{{color:#ececec; padding:7px; text-align:center}}
						.riepilogo{{ margin: 0 auto;}}
						ul{{ list-style-type:none;}}
						li{{ padding-left:120px;}}
						.red{{ color:#990000;}}

					</style>
		
					<link rel=""stylesheet"" href=""../Themes/caption.css"" type=""text/css""/>
					<link rel=""stylesheet"" href=""../Themes/buttonbar.css"" type=""text/css""/>

		
					<script type=""text/javascript"">
		
							function OnBeforeUnLoad () 
							{{
								var xmlhttp;
								var dateNoCache;
					
								xmlhttp=new XMLHttpRequest();
								dateNoCache = new Date().getTime();
				
								xmlhttp.open(""GET"",""pulisciSessioneBuste.asp?nocache="" + dateNoCache,false);
								xmlhttp.send(null);
							}}
				
							window.onbeforeunload = OnBeforeUnLoad;

						</script>
		
					<script language=""javascript"">
		
						var intervallo;
			
						function elab()
						{{
							var xmlhttp;
							xmlhttp=new XMLHttpRequest();
			
							var dateNoCache;
							dateNoCache = new Date().getTime();
			
							xmlhttp.open(""GET"",""genera_buste.asp?nocache="" + dateNoCache,false);
							xmlhttp.send(null);
				
							if (xmlhttp.readyState==4 && xmlhttp.status==200)
							{{
								//console.log(xmlhttp.responseText);
								document.getElementById('body').innerHTML=xmlhttp.responseText;
								//document.getElementById('body').innerHTML = 'test';
					
								//refresh
								document.getElementById('main').style.display = 'none';
								document.getElementById('main').style.display = 'block';
					
								//Quando � arrivata la fine dell'elaborazione
								if ( xmlhttp.responseText.indexOf('<input type=""hidden"" id=""esito"" value=""fine""/>') > 0 )
								{{
									//BLocco l'iterazione
									//window.clearInterval(intervallo);
						
									try {{ opener.RefreshDocument('/" + CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"]) + $@"/ctl_library/document/'); }} catch(e) {{}}
						
									//Apro un popup per il download del file zip
									window.open( 'genera_buste.asp' ,'_blank','toolbar=no,location=no,directories=no,status=yes,menubar=no,resizable=yes,copyhistory=yes,scrollbars=yes,width=600,height=600');
								}}
								else
								{{
									intervallo = window.setTimeout( elab ,1);
								}}

							}}
							else
							{{
								//Se � andata in errore la pagina blocco l'iterazione
								//window.clearInterval(intervallo);
								document.getElementById('percentuale').innerHTML = 'Errore server. Rieseguire l\'operazione';
							}}
				
						}}

						function initElab()
						{{
							//intervallo = window.setInterval( function(){{elab()}} ,100);
							intervallo = window.setTimeout( elab ,1);
						}}

							</script>
		
						</head>
						<body onload=""initElab()"" id=""body"">

			");
		
		}

		htmlToReturn.Write($@"

			<table width=""100%"" class=""Caption"" id="""" border=""0"" cellspacing=""0"" cellpadding=""0"">
				<td width=""100%"">
					" + ApplicationCommon.CNV("Generazione pdf buste") + $@"
				</td>
			</tbody>
			</table>

			<img style=""display:none"" src=""LoadingBar.png""/>
			<img style=""display:none"" src=""bg.png""/>
		
			<div class=""main"" id=""main"">
			
		");

		if (x == -100 ){
			//'call pulisci_e_scarica()
			htmlToReturn.Write($@"	
						<p><span>100%</span></p>	
					
						<input type=""hidden"" id=""esito"" value=""fine""/>
					
						<div class=""loading end"">
							<p class=""completata"">
								" + ApplicationCommon.CNV("Elaborazione terminata") + $@"
							</p>
						</div>
						<p style=""color:#333"">
			");
			if (CStr(session["warning_vecchi_pdf"]) == "SI" ){
				htmlToReturn.Write( "<br/><STRONG>");
				htmlToReturn.Write( ApplicationCommon.CNV("Attenzione. Cancellare il vecchi file generati per le buste"));
				htmlToReturn.Write( "</STRONG>");
			}
								
				session["warning_vecchi_pdf"] = "";
								
				htmlToReturn.Write($@"
						</p>
					
				");
		}else{
			htmlToReturn.Write($@"	
			
					<input type=""hidden"" id=""esito"" value=""inCorso""/>
			
				<p>
					<span id=""percentuale"">" + x + $@"%</span>
				</p>
				<p>
					<span>Elaborati " + session["tot_elaborati"] + $@" di " + session["tot_record"] + $@"</span>
				</p>
			
				<div class=""loadingbox"" style=""background-position: " + (300/100)*CLng(x) + $@"px;"">
					<div class=""loading"">
					</div>
				</div>			
			
			");
			htmlToReturn.Write($@"<p>" + ApplicationCommon.CNV("Elaborazione in corso") + "</p>");	

		}
			
		htmlToReturn.Write($@"
				
			</div>

		");
		if (x <= 0) {
			htmlToReturn.Write($@"
		
				</body>
				</html>
			");

		}

		//Response.Flush 
	}

	void viewMessage(string msg)
	{
		htmlToReturn.Write($@"<script language=""javascript"">");
		htmlToReturn.Write($@" //try {{ opener.RefreshContent(); }} catch(e) {{}}");
		htmlToReturn.Write($@"</script>");
		//Response.Flush

		redirectJS("../MessageBoxWin.asp?MSG=" + ApplicationCommon.CNV(msg) + "&CAPTION=ESITO");

		throw new ResponseEndException(htmlToReturn.Out(), Response, "");
	}

	void message(string msg)
	{
		throw new ResponseRedirectException("../MessageBoxWin.asp?ML=yes&MSG=" + URLEncode(TruncateMessage(msg)) + "&CAPTION=Info&ICO=1", Response);
		//Response.end
	}

	void redirectJS(string page)
	{
		htmlToReturn.Write($@"<script language=""javascript"">");
		htmlToReturn.Write($@"window.location.href = '" + CStr(page).Replace(@"'",@"\'") + "';");
		htmlToReturn.Write($@"</script>");
		//Response.flush
	
		throw new ResponseEndException(htmlToReturn.Out(), Response, "");
	}

	//'--attiva l'esecuzione dei processi su un documento nuovo
	bool ExecuteProcess(string strProcessName, string strDocType, string strDocKey)
	{
		//ExecuteProcess = True

		dynamic vRetCode ;
		string strDescrRetCode = "";
	     
		string mp_strConnectionString = CStr(ApplicationCommon.Application["ConnectionString"]);
	
		eProcurementNext.CtlProcess.ClsElab obj = new eProcurementNext.CtlProcess.ClsElab();
		try
		{
			vRetCode = obj.Elaborate(CStr(strProcessName), CStr(strDocType), CStr(strDocKey) , CLng(session["idpfu"]), ref strDescrRetCode, 1, mp_strConnectionString);
			//'Public Function ElaborateWeb(ByVal strProcessName As String, ByVal strDocType As String, ByVal strDocKey As Variant, ByVal lIdPfu As Long, strDescrRetCode As Variant, Optional vIdMp As Variant, Optional vConnectionString As Variant) As Variant
		}
		catch(Exception ex)
		{
			TracciaErrore("genera_buste.asp.ExecuteProcess(" + strProcessName + ")", ex.Message, 0, "ExecuteProcess()");
			return false;
		}

		//'-- se c'� stato un errore gestito
		if (vRetCode != ELAB_RET_CODE.RET_CODE_OK)
		{
			TracciaErrore("genera_buste.asp.ExecuteProcess(" + strProcessName + ")", strDescrRetCode, 0, "ExecuteProcess()");
			//strOutput = strDescrRetCode;
			return false;
		}
		return true;
	}

	void TracciaErrore(string source, string text, int tipo,string oggetto)
	{
		TraceErr(new Exception(), ApplicationCommon.Application.ConnectionString, CStr(text) + CStr(oggetto) + CStr(source) + CLng(1) + CLng(0));
	}

	void finishImport(string codiceOperazione)
	{
		//on error resume next
	
		clearOperation(codiceOperazione);
	
		session["check_warning_lotti"] = "";
		session["tot_record"] = CLng(-1);
		session["id_start"] = CLng(-1);
		session["guid_buste_offerta"] = "";
		//'session("id_offerta") = ""
		//'session("dir_temp_lavoro") = ""
		//'session("percentuale") = clng(0)
		ApplicationCommon.Application["buste-" + idOfferta] = "";
	
		//on error goto 0
	}

	void clearOperation(string guidOperazione)
	{
		sqlParams.Clear();
		sqlParams.Add("@guidOperazione", guidOperazione);
		string strSql = "delete from Genera_Buste_Offerta where CodiceOperazione = @guidOperazione";
		cdf.Execute(strSql,  ApplicationCommon.Application.ConnectionString, parCollection: sqlParams);
	}
}
@Html.Raw(htmlToReturn.Out())
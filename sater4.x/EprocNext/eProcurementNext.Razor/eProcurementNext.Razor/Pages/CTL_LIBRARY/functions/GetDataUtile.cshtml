@page "/CTL_LIBRARY/functions/GetDataUtile.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB;
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.HTML.BasicFunction;
@using Microsoft.VisualBasic;
@using static eProcurementNext.CommonDB.Basic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.verificaBrowserModel;
@model eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.GetDataUtileModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new(GetParamURL(HttpContext.Request.QueryString.ToString(), "XML_ATTACH_TYPE"));
}
@{

	//'-------------------------------------
	//'-- VALIDAZIONE DELL'INPUT UTENTE  ---
	//'-------------------------------------
	string DataIn  = GetParamURL(Request.QueryString.ToString(), "DataIn");
	string IdAzi  = GetParamURL(Request.QueryString.ToString(), "IdAzi");

	//'validate (nomeParametro, valoreDaValidare, tipoDaValidare, sottoTipoDaValidare, regExp, obblig )

	validate("IdAzi", IdAzi, TIPO_PARAMETRO_INT, CInt(""), "", 0, HttpContext, session);
	validate("DataIn", (DataIn.Replace("-", "").Replace("/", "").Replace(@"\", @"")), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0, HttpContext, session);

	if (string.IsNullOrEmpty(IdAzi))
	{
		IdAzi = "-1";
	}
	//'--recupero data utile
	var sqlParams = new Dictionary<string, object?>();
	sqlParams.Add("@dataIn",  DataIn);
	sqlParams.Add("@idAzi", CInt(IdAzi));
	string strSQL = " set datefirst 1 select convert( varchar(10),dbo.DateShiftLavorativo (@dataIn,@idAzi),121) as DataUtile ";
	//on error resume next
	TSRecordSet? rs = null;
	try
	{
		CommonDbFunctions cdb = new();
		rs = cdb.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString, sqlParams);
	}
	catch(Exception ex)
	{
		//'-- gestione errore
		//traceInLogUtente( 0, "GetDataUtile.asp", "Descrizione:" & d & " --- QueryString:" & request.QueryString)

		//'-- Se è attiva la modalità debug visualizziamo più informazioni riguardo l'errore, query sql comprese

		if(string.Equals(CStr(ApplicationCommon.Application["debug-mode"]).ToLower(),"yes") || string.Equals(CStr(ApplicationCommon.Application["debug-mode"]).ToLower(),"si") || string.Equals(CStr(ApplicationCommon.Application["debug-mode"]),"true"))
		{
			htmlToReturn.Write("Desc:" + ex.Message + " <br> ");
		}
		else
		{
			//'-- Se è disattivato il debug-mode ma è attiva ma la SYS di visione degli errori tecnici 
			if(string.Equals(CStr(ApplicationCommon.Application["dettaglio-errori"]).ToLoower(),"yes") || string.Equals(CStr(ApplicationCommon.Application["dettaglio-errori"]).ToLower(),"si"))
			{
				htmlToReturn.Write( "Desc:"+ex.Message);
			}
			else
			{
				//'-- Scriviamo l'errore nell'event viewer
				
				//TraceErr s, d, n, ProgID
				TraceErr(ex, ApplicationCommon.Application.ConnectionString);
				htmlToReturn.Write( " Errore in data : " + DateTime.Now + "<br/> Desc:" + ex.Message);
			}
		}
		throw new ResponseEndException(htmlToReturn.Out(), Response, "");
	}
	if (rs.RecordCount >0)
	{
		rs.MoveFirst();
		htmlToReturn.Write(CStr(GetValueFromRS(rs.Fields["DataUtile"])));
	}
	else
	{
		htmlToReturn.Write("");
	}

	//Response.end;
	throw new ResponseEndException(htmlToReturn.Out(), Response, "");
}@Html.Raw(htmlToReturn.Out())
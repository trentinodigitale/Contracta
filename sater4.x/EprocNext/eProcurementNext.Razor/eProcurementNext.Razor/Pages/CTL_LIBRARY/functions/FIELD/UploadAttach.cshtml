@page "/CTL_LIBRARY/functions/FIELD/UploadAttach.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.Application;
@using Microsoft.VisualBasic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel
@using static eProcurementNext.Session.SessionMiddleware
@{
    CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);

    validate( "TABLE", CStr(GetParamURL(Request.QueryString.ToString(), "TABLE")) , TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0,HttpContext, session);
    validate( "IDDOC", CStr(GetParamURL(Request.QueryString.ToString(), "IDDOC")) , TIPO_PARAMETRO_NUMERO, SOTTO_TIPO_VUOTO, "", 0,HttpContext, session);

    //SE ARRIVA IN QS TECHBUFFER=YES METTIAMO NEL DB IL VALORE CHE VERRA' RECUPERATO DAL SERVIZIO ALLEGATI
    if (GetParamURL(Request.QueryString.ToString(), "TECHBUFFER") == "YES")
    {
        int user = session["IdPfu"];
        //'-- riporto il valore del buffer nella CTL_IMPORT
        var buffer = GetValueFromForm(Request, "value");
        const string strSql = "DELETE FROM ctl_import where idpfu = @User;INSERT INTO CTL_IMPORT (idpfu,A) VALUES (@User, @buffer)";

        var sqlP = new Dictionary<string, object?>
        {
            { "@buffer", buffer },
            { "@User", user }
        };

        cdf.Execute(strSql, ApplicationCommon.Application.ConnectionString, parCollection: sqlP);
    }

    var newQuerystring = GetQueryStringFromContext(Request.QueryString);

    //'--recupero estensioni ammesse
    var ext = "";
    string[] aInfo;
    string strDescExt;

    var format = GetParamURL(Request.QueryString.ToString(), "FORMAT");

    if ( format.Contains("EXT:", StringComparison.Ordinal) ) {

        var ix = Strings.InStr(1, format, "EXT:");
        var ix2 = Strings.InStr(ix + 1, format, "-");
        ext = Strings.Mid(format, ix+4, ix2 - (ix +4) ).Trim();

        if (!string.IsNullOrEmpty(ext)) {
            ext = Strings.Replace(ext, ",", "@@@");
        }
    }

    var idDoc = GetParamURL(Request.QueryString.ToString(), "IDDOC");
    var tableSign = GetParamURL(Request.QueryString.ToString(), "TABLE");
    var paramCif = GetParamURL(Request.QueryString.ToString(), "CIF");

    var idDocX = idDoc;

    if (!string.IsNullOrEmpty(paramCif)) {

        var vetCif = Strings.Split(paramCif, "~");

        if ((vetCif.Length - 1) > 0 ) {

            validate("CIF_TABLE", CStr(vetCif[1]), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);

            var strSql = "select idDoc from " + vetCif[1] + " with(nolock) where id = @idDoc";
            
            var sqlP = new Dictionary<string, object?> { { "@idDoc", CInt(idDoc) } };

            var rsSign1 = GetRS( strSql, sqlP );

            if (rsSign1.RecordCount > 0 ) {

                rsSign1.MoveFirst();

                idDocX = CStr(rsSign1.Fields["idDoc"]);

            }

        }

    }

    if (!string.IsNullOrEmpty(idDoc) && ( string.IsNullOrEmpty(tableSign) || tableSign.ToUpper() == "CTL_DOC" || tableSign.ToUpper() == "CTL_DOC_SIGN" || tableSign.ToUpper() == "DOCUMENT_MICROLOTTO_FIRME" ) )
    {
        const string strSql = "select tipodoc from ctl_doc with(nolock) where id = @idDocX";

        var sqlP = new Dictionary<string, object?> { { "@idDocX", CInt(idDocX) } };

        var rsSign = GetRS(strSql, sqlP);

        if (rsSign.RecordCount > 0 ) {

            rsSign.MoveFirst();

            var tipoDocSign = CStr(rsSign.Fields["tipodoc"]);

            var paramJumpSign = Get_Func_Property(tipoDocSign, "jumpsign", "DefaultValue", "NO", -1);

            if (paramJumpSign.ToUpper() == "YES" ) {

                var newFormat = format;

                //'--tolgo dalla format la V
                if (format.Contains("EXT:", StringComparison.Ordinal) ) {

                    var newExt = Strings.Replace(ext, "@@@", ",");

                    newFormat = Strings.Replace(format, "EXT:" + newExt + "-", "");

                    newFormat = Strings.Replace (newFormat , "V", "");

                    newFormat = newFormat + "EXT:" + newExt + "-";

                } else {
                    newFormat = Strings.Replace (newFormat , "V", "");
                }

                newQuerystring = Strings.Replace( "&" + newQuerystring ,"&FORMAT=","&OLDFORMAT=");
                newQuerystring = Strings.Right(newQuerystring, newQuerystring.Length - 1);
                newQuerystring = newQuerystring + "&FORMAT=" + newFormat + "&";

            }

        }

    }

    //'-- se è attiva la sys di jumpsign togliamo la verifica di firma dalla format
    if (CStr(ApplicationCommon.Application["JUMP_SIGN"]).ToUpper() == "YES" ){

        string NEW_FORMAT = format;

        //'--tolgo dalla format la V
        if (format.Contains("EXT:", StringComparison.Ordinal) ){

            string NEW_EXT = Strings.Replace(ext, "@@@", ",");

            NEW_FORMAT = Strings.Replace (format, "EXT:" + NEW_EXT + "-","");

            NEW_FORMAT = Strings.Replace (NEW_FORMAT , "V", "");

            NEW_FORMAT = NEW_FORMAT + "EXT:" + NEW_EXT + "-";

        }else{
            NEW_FORMAT = Strings.Replace (NEW_FORMAT , "V", "");
        }

        newQuerystring = Strings.Replace( "&" + newQuerystring ,"&FORMAT=","&OLDFORMAT=");
        newQuerystring = Strings.Right(newQuerystring, newQuerystring.Length - 1);
        newQuerystring = newQuerystring + "&FORMAT=" + NEW_FORMAT + "&";


    }

    var rsSys = GetRS("select id from LIB_Dictionary with(nolock) where dzt_name = 'SYS_ATTIVA_ATTACH_64' and DZT_ValueDef = 'YES'");

    if (rsSys.RecordCount > 0 || GetParamURL(Request.QueryString.ToString(), "TEST_ATTACH") == "1" ){

        var accessGuid = insertAccessBarrier(session, HttpContext);

        string strNomeDirectory = ApplicationCommon.Application["NOMEAPPLICAZIONE_ALLEGATI"];

        if (string.IsNullOrEmpty(strNomeDirectory)) 
        {
            strNomeDirectory = "AF_WebFileManager";
        }
        throw new ResponseRedirectException("/" + strNomeDirectory + "/proxy/1.0/uploadattach?acckey=" + URLEncode(accessGuid) + "&" + newQuerystring + "&idPfu=" + CStr(session["idPfu"]), Response);
    }

}
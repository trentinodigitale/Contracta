@page "/CTL_LIBRARY/functions/FIELD/sbustaRedirect.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.HTML.BasicFunction;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@model eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.FIELD.sbustaRedirectModel
@using static eProcurementNext.Session.SessionMiddleware
@{
    CommonDbFunctions cdb = new();
    LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new(GetParamURL(HttpContext.Request.QueryString.ToString(), "XML_ATTACH_TYPE"));
}
@{
    string ATT_HASH = GetParamURL(Request.QueryString.ToString(), "ATT_HASH");

    validate( "ATT_HASH", ATT_HASH , TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 1,HttpContext,session);// '-- parametro table like obbligatorio

    string urlRedirect = string.Empty;
    TSRecordSet? rsAtt = null;
    try
    {
        var sqlParams = new Dictionary<string, object?>();
        sqlParams.Add("@ATT_HASH", ATT_HASH);
        rsAtt = cdb.GetRSReadFromQuery_("select ATT_IdRow from CTL_Attach with(nolock) where ATT_Hash = @ATT_HASH and ATT_CIFRATO = 0", ApplicationCommon.Application.ConnectionString, sqlParams);
    }
    catch
    {
        htmlToReturn.Write("Errore nel recupero delle informazioni del file, scaricare il file originale cliccando sul nome file");
    }
    //'-- se l'allegato richiesto è in corso di decifratura
    if (rsAtt is not null && rsAtt.RecordCount > 0)
    {
        urlRedirect = $"../../../pdf.aspx?{GetQueryStringFromContext(Request.QueryString)}";
    }
    else
    {
        urlRedirect = $"DisplayAttach.ASP?{GetQueryStringFromContext(Request.QueryString)}";
    }
    Response.Redirect(urlRedirect);
}@Html.Raw(htmlToReturn.Out())
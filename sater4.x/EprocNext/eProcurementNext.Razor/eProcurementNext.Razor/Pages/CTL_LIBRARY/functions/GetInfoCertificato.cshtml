@page "/CTL_LIBRARY/functions/GetInfoCertificato.asp" 
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.HTML.BasicFunction;
@using static eProcurementNext.CommonDB.Basic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.verificaBrowserModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.trace_in_log_utenteModel;
@using Microsoft.VisualBasic;
@model eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.GetInfoCertificatoModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new(GetParamURL(HttpContext.Request.QueryString.ToString(), "XML_ATTACH_TYPE"));
}
@{

	//'*******************************************
	//'*****  VALIDAZIONE DELL'INPUT UTENTE  *****
	//'*******************************************

	//'call validate( "VALUE", cstr(Request.QueryString("VALUE")) , TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0)
	string strTechValue = "";

	string[] aInfoAttachMulti ;
	string guid = "";
	string strOutput = "";
	string strValueTechAttach = "";

	strOutput = "";
	strTechValue = GetParamURL(Request.QueryString.ToString(), "VALUE");
	aInfoAttachMulti = strTechValue.Split("***");

	//'response.write ubound(aInfoAttachMulti)
	for(int i = 0; i <= aInfoAttachMulti.Length - 1 ; i++)
	{
		string signStatus = "";
		strValueTechAttach = aInfoAttachMulti[i];
		string[] aInfoAttach= strValueTechAttach.Split("*");
		signStatus = "SIGN_WAIT";
		//Codice refactoring per simulare on error resume next, testato e funzionante
		if(aInfoAttach.Length >= 4)
		{
			guid = aInfoAttach[3];
			var sqlParams = new Dictionary<string, object?>();
			sqlParams.Add("@guid", guid);      
			string strSql = "select statoFirma from CTL_SIGN_ATTACH_INFO with(nolock) where ATT_Hash = @guid order by statoFirma asc";
		
			CommonDbFunctions cdb = new();
			TSRecordSet rs  = cdb.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString, sqlParams);
			if (rs is not null)
			{
				if (rs.RecordCount > 0)
				{
					while (!rs.EOF)
					{
						signStatus = CStr(rs["statoFirma"]);
						//'-- Se trovo uno stato diverso da sign_ok posso fermarmi
						if (!IsNull(signStatus) && !string.Equals(signStatus.ToUpper(),"SIGN_OK"))
						{
							rs.MoveLast();//' forzo l'uscita dal while (con la successiva invocazione di moveNext)
						}

						rs.MoveNext();
					}
				}
			}
		}
		if (!string.IsNullOrEmpty(strOutput))
		{
			strOutput = $"{strOutput}***";
		}

		strOutput = $"{strOutput}{signStatus}";
	}
	//on error resume next
	try
	{
		htmlToReturn.Write(strOutput);
	}
	catch (Exception ex)
	{
		//'-- gestione errore
		//n = err.number
		//s = err.source
		//d = err.description
		
		traceInLogUtente( 0, "GetInfoCertificato.asp", $"Descrizione:{ex.Message} --- QueryString:{GetQueryStringFromContext(Request.QueryString)}", HttpContext, session);

		//'-- Se è attiva la modalità debug visualizziamo più informazioni riguardo l'errore, query sql comprese

		if (string.Equals(CStr(ApplicationCommon.Application["debug-mode"]).ToLower(),"yes") || string.Equals(CStr(ApplicationCommon.Application["debug-mode"]),"si")|| string.Equals(CStr(ApplicationCommon.Application["debug-mode"]),"true"))
		{
			htmlToReturn.Write("Desc:" + ex.Message);
		}
		else
		{
			//'-- Se è disattivato il debug-mode ma è attiva ma la SYS di visione degli errori tecnici 

			if (string.Equals(CStr(ApplicationCommon.Application["dettaglio-errori"]).ToLower(),"yes") ||string.Equals(CStr(ApplicationCommon.Application["dettaglio-errori"]).ToLower(),"si"))
			{
				htmlToReturn.Write("Desc:" +ex.Message);
			}
			else
			{
				//'-- Scriviamo l'errore nell'event viewer
				TraceErr(ex, ApplicationCommon.Application.ConnectionString);
				//TraceErr s, d, n, ProgID
				htmlToReturn.Write($" Errore in data : {DateTime.Now}");
			}
		}
	}
}@Html.Raw(htmlToReturn.Out())
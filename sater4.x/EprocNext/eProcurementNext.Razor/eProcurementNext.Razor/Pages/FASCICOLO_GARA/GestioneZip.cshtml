@page "/FASCICOLO_GARA/GestioneZip.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.Core.Storage
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.Application;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.net_utilsModel
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel
@model eProcurementNext.Razor.Pages.FASCICOLO_GARA.GeneraZipModel
@using static eProcurementNext.Session.SessionMiddleware
@{
    CommonDbFunctions cdf = new();
    LoadSession(HttpContext, session);
    EprocResponse htmlToReturn = new();

    //'--per non fare andare in errore insertAccessBarrier che utilizza l'utente in sessione
    if (GetParamURL(Request.QueryString.ToString(), "backoffice").ToLower() == "yes")
    {
        if (string.IsNullOrEmpty(CStr(session["IdPfu"])))
        {
            session["IdPfu"] = -20;
        }
    }
    var sqlParams = new Dictionary<string, object?>();
    string strSQL;

    //'--recupero parametro input
    string iddoc = GetParamURL(Request.QueryString.ToString(), "iddoc");

    //'--recupero parametro MODE
    string MODE = GetParamURL(Request.QueryString.ToString(), "MODE");

    validate("iddoc", iddoc, TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 1, HttpContext, session);
    validate("MODE", MODE, TIPO_PARAMETRO_STRING, SOTTO_TIPO_VUOTO, "", 0, HttpContext, session);

    string PercorsoDiRete = string.Empty;

    //'--recupero path di rete dove è salvato lo zip
    strSQL = @"select PercorsoDiRete from CTL_DOC with (nolock)
					inner join Document_Config_FascicoloGara with(nolock) on IdHeader = Id
					where tipodoc='parametri_fascicolo_gara' and statofunzionale='confermato' ";

    TSRecordSet? rs;
    try
    {
        rs = cdf.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString);
    }
    catch
    {
        htmlToReturn.Write("0#KO - errore statement: " + strSQL);
        throw new ResponseEndException(htmlToReturn.Out(), Response, "0#KO - errore statement: " + strSQL);
    }

    if (rs is not null && rs.RecordCount > 0)
    {
        rs.MoveFirst();

        PercorsoDiRete = CStr(rs["PercorsoDiRete"]);
    }

    //'--recupero protocollo della gara ed il fascicolo per determinare il nome dello zip

    //'--recupero info dell'allegato da aggiungere allo ZIP del fascicolo di gara
    sqlParams.Clear();
    sqlParams.Add("@iddoc", CInt(iddoc));
    strSQL = @"select ProtocolloRiferimento, NumeroDocumento
						from CTL_DOC with (nolock)
						where Id =  @iddoc";

    try
    {
        rs = cdf.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString, sqlParams);
    }
    catch
    {
        htmlToReturn.Write($@"0#KO - errore statement: {strSQL}");
        throw new ResponseEndException(htmlToReturn.Out(), Response, $@"0#KO - errore statement: {strSQL}");
    }

    string NomeZip = string.Empty;
    if (rs is not null && rs.RecordCount > 0)
    {
        rs.MoveFirst();

        //'--nome dello zip
        NomeZip = $"{CStr(rs["ProtocolloRiferimento"])}_{CStr(rs["NumeroDocumento"])}.zip";
    }

    string PercorsoDiReteOrigin = PercorsoDiRete;

    string directoryMap = MAP_SHARE_WITH_DRIVE(PercorsoDiRete);

    //'--controllo esistenza dello zip
    if (CommonStorage.ExistsFile(directoryMap + NomeZip))
    {
        //'--se MODE DELETE cancello lo ZIP altrimenti faccio il download

        if (MODE == "DELETE")
        {
            CommonStorage.DeleteFile(CStr(directoryMap + NomeZip));
            htmlToReturn.Write($@"1#OK");
        }
        else
        {
            //'--anche se abbiamo la shared qui lasciamo sempre il percorso orginale
            //'--sarà poi la pagina download.aspx che ripeterà il map in quanto è un apagina VB NET e non vede il mappaggio fatto in ASP

            var strFilePath = PercorsoDiReteOrigin + NomeZip;

            //'--FACCIO LA CHIAMATA PER IL DOWNLOAD DEL FILE ZIP
            Redirect_2_DownLoadFile(strFilePath, NomeZip, "", session, HttpContext, htmlToReturn);
        }
    }
    else
    {
        //'--file ZIP non esistente
        if (MODE == "DELETE")
        {
            //'--torno lo stesso OK per far cambiare stato al documento di fascicolo gara collegato
            htmlToReturn.Write($@"1#OK");
        }
        else
        {
            //'--visualizzo messaggio di errore funzionale
            throw new ResponseRedirectException("../ctl_library/MessageBoxWin.asp?ML=yes&MSG=Il file del fascicolo non disponibile&CAPTION=Errore&ICO=2", Response);
        }
    }
}
@Html.Raw(htmlToReturn.Out())
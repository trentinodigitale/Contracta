@page "/CustomDoc/OperationPrincipaleCarrello.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB;
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.CustomDoc.OperationPrincipaleCarrelloModel;
@using Microsoft.VisualBasic;
@model eProcurementNext.Razor.Pages.CustomDoc.OperationPrincipaleCarrelloModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();
}
@{

	string OPERATION = GetParamURL(Request.QueryString.ToString(), "OPERATION");
	string IDHEADER = GetParamURL(Request.QueryString.ToString(), "IDHEADER");
	string IDROWPRINCIPALE= GetParamURL(Request.QueryString.ToString(), "IDROWPRINCIPALE");
	string IDROW = GetParamURL(Request.QueryString.ToString(), "IDROW");
	var SqlParameters = new Dictionary<string, object?>();
	//'Response.Write OPERATION
	//'Response.end
	string strSql = string.Empty;
	TSRecordSet? rs = null;
	string strvalue = string.Empty;
	if(OPERATION == "ADDROW")
	{
		//'--recupero i richiesti associati al principale
		SqlParameters.Add("@idHeader", CInt(IDHEADER));
		SqlParameters.Add("@idRowPrincipale", CInt(IDROWPRINCIPALE));
		SqlParameters.Add("@richiesto", "richiesto");
		strSql = "select IdRowProdotto from Document_Convenzione_Prodotti_Principale ,Document_Convenzione_Product where IdConvenzione=@idHeader and IdRowPrincipale=@idRowPrincipale and IdRowProdotto=idRow and TipoProdotto= @richiesto ";
		rs = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString, SqlParameters);
		if(rs.RecordCount >0)
		{
			strvalue = string.Empty;
			rs.MoveFirst();
			while(!rs.EOF)
			{
				if(string.IsNullOrEmpty(strvalue))
				{
					strvalue = CStr(rs["idrowprodotto"]);
				}
				else
				{
					strvalue = $"{strvalue}~~~{CStr(rs["idrowprodotto"])}";
				}
				rs.MoveNext();
			}

		}
		else
		{
			strvalue = string.Empty;
		}
		htmlToReturn.Write(strvalue);
		throw new ResponseEndException(htmlToReturn.Out(), Response, "");
	}
	if(OPERATION == "GETPRINCIPALI")
	{
		//'--recupero i principali associati al prodotto
		SqlParameters.Clear();
		SqlParameters.Add("@id", CInt(IDROW));
		string strSQL = "select IdRowPrincipale from Document_Convenzione_Prodotti_Principale,Document_Convenzione_Product where idHeader=IdConvenzione and IdRowPrincipale=idRow and IdRowProdotto=@id";
		rs = cdf.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString, SqlParameters);
		if(rs.RecordCount >0)
		{
			strvalue = string.Empty;
			rs.MoveFirst();
			while(!rs.EOF)
			{
				if(string.IsNullOrEmpty(strvalue))
				{
					strvalue = CStr(rs["idrowprincipale"]);
				}
				else
				{
					strvalue = $"{strvalue}~~~{CStr(rs["idrowprincipale"])}";
				}
				rs.MoveNext();
			}
		}
		else
		{
			strvalue = string.Empty;
		}
		htmlToReturn.Write(strvalue);
		throw new ResponseEndException(htmlToReturn.Out(), Response, "");
	}
}
@Html.Raw(htmlToReturn.Out())
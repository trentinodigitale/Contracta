@page "/CustomDoc/Esito_PDA.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB;
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@* <!-- #Include File="../ctl_library/Functions/AccessSQL.asp" --> *@
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.CustomDoc.Esito_PDAModel;
@using Microsoft.VisualBasic;
@model eProcurementNext.Razor.Pages.CustomDoc.Esito_PDAModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();
}
@{

	int IdPDA = 0;
	int IdOff = 0;
	string StatoPDA = string.Empty;
	string statoEscludi_Lotti = string.Empty;
	string offerta_ft = string.Empty;

	validate("IDROW", GetParamURL(Request.QueryString.ToString(), "IDROW"), TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 1, HttpContext, session);
	validate("ESITO", GetParamURL(Request.QueryString.ToString(), "ESITO"), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0, HttpContext, session);
	//'-- controllo che non esiste un documento escludi lotti
	//'-- se esiste in lavorazione blocco con messaggio "Operazione non consentita:presente documento escludi lotti inlavorazione"
	//'-- se esiste confermato allora devo fare makedocfrom per avere nelle motivazioni l'elenco dei lotti esclusi
	var SqlParameters = new Dictionary<string, object?>();
	SqlParameters.Add("@id", CInt(GetParamURL(Request.QueryString.ToString(), "IDROW")));
	string sql = "select IdHeader, IdMsg, StatoPDA from Document_PDA_OFFERTE with(nolock) where IdRow = @id";
	TSRecordSet rs = cdf.GetRSReadFromQuery_(sql, ApplicationCommon.Application.ConnectionString, SqlParameters);
	if (rs.RecordCount >0)
	{
		rs.MoveFirst();
		IdPDA = CInt(rs["IdHeader"]!);
		IdOff = CInt(rs["IdMsg"]!);
		StatoPDA = CStr(rs["StatoPDA"]);

		statoEscludi_Lotti = string.Empty;
		SqlParameters.Clear();
		SqlParameters.Add("@idDoc", IdPDA);
		SqlParameters.Add("@doc", IdOff);
		SqlParameters.Add("@type", "ESCLUDI_LOTTI");
		sql = "select StatoFunzionale from CTL_DOC with(nolock) where TipoDoc=@type and IdDoc=@idDoc and LinkedDoc= @doc and Deleted=0";
		rs = cdf.GetRSReadFromQuery_(sql, ApplicationCommon.Application.ConnectionString, SqlParameters);
		if(rs.RecordCount > 0)
		{
			rs.MoveFirst();
			statoEscludi_Lotti = CStr(rs["StatoFunzionale"]);
		}
		//'-- CONTROLLO SE PER IL DOCUMENTO OFFERTA CHE STO PER AMMETTERE NEL CASO LA PDA NON E' IN FASE AMMINISTRATIVA ED E' UN OFFERTA FUORI TERMINE
		//'-- PASSO PER IL DOCUMENTO

		if (CStr(GetParamURL(Request.QueryString.ToString(), "ESITO")) == "AMMESSA")
		{
			SqlParameters.Clear();
			SqlParameters.Add("@idDoc", IdPDA);
			sql = "select StatoFunzionale from CTL_DOC with(NOLOCK) where Id=@idDoc";
			rs = cdf.GetRSReadFromQuery_(sql, ApplicationCommon.Application.ConnectionString, SqlParameters);
			if (rs.RecordCount > 0)
			{
				rs.MoveFirst();
				//'-- SUPERATA LA VERIFICA_AMMINISTRATIVA
				if (CStr(rs["StatoFunzionale"]) == "VERIFICA_AMMINISTRATIVA")
				{
					//'-- NEL CASO SIA OFFERTA FT
					SqlParameters.Clear();
					SqlParameters.Add("@id", IdOff);
					SqlParameters.Add("@DSE_id","OFFERTA");
					SqlParameters.Add("@name","FUORI_TERMINI");
					sql = "select * from CTL_DOC_Value with(NOLOCK) where IdHeader= @id and DSE_ID=@DSE_id and DZT_Name=@name and Value='1' and Row=0 ";
					rs = cdf.GetRSReadFromQuery_(sql, ApplicationCommon.Application.ConnectionString, SqlParameters);
					if (rs.RecordCount >0)
					{
						rs.MoveFirst();
						offerta_ft = "1";
					}
				}
			}
		}
		if (statoEscludi_Lotti.ToLower() != "inlavorazione" && statoEscludi_Lotti.ToLower() != "confermato" && CStr(GetParamURL(Request.QueryString.ToString(), "ESITO")) != "ESITO_ANNULLA" && (offerta_ft !="1" || StatoPDA =="222"))
		{
			SqlParameters.Clear();
			SqlParameters.Add("@id", CInt(session["IdPfu"]));
			SqlParameters.Add("@idrow", CInt(GetParamURL(Request.QueryString.ToString(), "IDROW")));
			sql = "exec ESITO_PDA_AMMESSA @idrow, @id";
			cdf.Execute(sql, ApplicationCommon.Application.ConnectionString, parCollection: SqlParameters);
		}
		else
		{
			if (CStr(GetParamURL(Request.QueryString.ToString(), "ESITO")) == "ESITO_ANNULLA")
			{
				if (statoEscludi_Lotti.ToLower() == "inlavorazione" || statoEscludi_Lotti.ToLower() == "confermato")
				{
					htmlToReturn.Write("blocco");
				}
			}
			else
			{
				if (statoEscludi_Lotti.ToLower() == "inlavorazione")
				{
					htmlToReturn.Write("inlavorazione");
				}
				if (statoEscludi_Lotti.ToLower() == "confermato" ||  offerta_ft == "1")
				{
					htmlToReturn.Write("makedocfrom");
				}
			}
		}
	}
}
@Html.Raw(htmlToReturn.Out())
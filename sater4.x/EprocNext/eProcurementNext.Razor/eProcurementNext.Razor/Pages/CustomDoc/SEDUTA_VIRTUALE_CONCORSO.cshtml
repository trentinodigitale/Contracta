@page "/CustomDoc/SEDUTA_VIRTUALE_CONCORSO.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB;
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel;
@using static eProcurementNext.Razor.Pages.CustomDoc.SEDUTA_VIRTUALE_CONCORSOModel;
@using Microsoft.VisualBasic;
@model eProcurementNext.Razor.Pages.CustomDoc.SEDUTA_VIRTUALE_CONCORSOModel
@using static eProcurementNext.Session.SessionMiddleware
@{
    CommonDbFunctions cdf = new();
    LoadSession(HttpContext, session);
    EprocResponse htmlToReturn = new();
}
@{
    //' Questo idDoc è la id della seduta virtuale.
    string idDoc = string.Empty;
    string comando = string.Empty;
    string lotto = string.Empty;

    idDoc = GetParamURL(Request.QueryString.ToString(), "IDDOC");
    comando = GetParamURL(Request.QueryString.ToString(), "COMMAND");
    lotto = GetParamURL(Request.QueryString.ToString(), "LOTTO");

    //On error GoTo 0
    validate("IDDOC", idDoc, TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 1, HttpContext, session);
    validate("COMMAND", comando, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 1, HttpContext, session);
    validate("LOTTO", lotto, TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 0, HttpContext, session);

    if (!string.IsNullOrEmpty(lotto))
    {
        if (ControlloAccessoPaginaLotto(idDoc) == 0)
        {
            htmlToReturn.Write(ApplicationCommon.CNV("La seduta non è aperta."));
            throw new ResponseEndException(htmlToReturn.Out(), Response, "La seduta non è aperta.");
        }
        // 'if ControlloAccessoPaginaPartecipantiLotto(idDoc) = 0 then
        if (ControlloAccesso(idDoc, comando) == 0)
        {
            htmlToReturn.Write(ApplicationCommon.CNV("l’accesso a tali informazioni è condizionato alla chiusura della fase tecnica"));
            throw new ResponseEndException(htmlToReturn.Out(), Response, "l’accesso a tali informazioni è condizionato alla chiusura della fase tecnica");
        }
    }
    else
    {
        if (ControlloAccessoPagina(idDoc) == 0)
        {
            htmlToReturn.Write(ApplicationCommon.CNV("La seduta non è aperta."));
            throw new ResponseEndException(htmlToReturn.Out(), Response, "La seduta non è aperta.");
        }
        if (ControlloAccesso(idDoc, comando) == 0)
        {
            htmlToReturn.Write(ApplicationCommon.CNV("Accesso non consentito all'utente."));
            throw new ResponseEndException(htmlToReturn.Out(), Response, "Accesso non consentito all'utente.");
        }
    }
    //'response.write comando
    //'response.end
    switch (comando)
    {
        case "INFO_AMM":
            OttenereInformazioniAmministrazione(idDoc);
            break;
        case "INFO_LOTTO":

            OttenereInformazioniTecnicoEconomico(idDoc);
            break;
            //case "INFO_LOTTI":
            //    OttenereInformazioniTecnicoEconomicoLotti(idDoc);
            //    break;
    }
    //' <summary>
    //' Il metodo recupera le informazioni del tab amministrazione.
    //' </summary>
    //' <param name="idDoc">Identificativo della seduta virtuale.</param>
    //' <returns>Oggetto di tipo griglia.</returns>
    //void OttenereInformazioniTecnicoEconomicoLotti(string idDoc)
    //{
    //    string strModelloOfferta = "";
    //    strModelloOfferta = "INFO_LOTTI_GRIGLIA";
    //    Dictionary<string, eProcurementNext.HTML.Field> modello = new Dictionary<string, eProcurementNext.HTML.Field>();
    //    Dictionary<string, Grid_ColumnsProperty> proprietaCampi = new Dictionary<string, Grid_ColumnsProperty>();

    //    var SqlParameters = new Dictionary<string, object?>();
    //    SqlParameters.Add("@idDoc", CInt(idDoc));
    //    SqlParameters.Add("@idpfu", CInt(session["IdPfu"]));
    //    SqlParameters.Add("@comando", comando);
    //    //'response.write cstr("Exec SEDUTA_VIRTUALE_DATI " & idDoc & "," & session("Session")(2) & ",'" & comando & "'")
    //    //'response.end
    //    TSRecordSet? rs = cdf.GetRSReadFromQuery_("Exec SEDUTA_VIRTUALE_DATI @idDoc, @idpfu, @comando", ApplicationCommon.Application.ConnectionString, SqlParameters);
    //    if (rs is not null && rs.RecordCount > 0)
    //    {
    //        rs.MoveFirst();
    //        //'--recupero modello griglia
    //        OttieniProprietaModello(strModelloOfferta, ref modello, ref proprietaCampi);

    //        string lista_Lotti = CStr(rs["Lista_Lotti"]);

    //        if (lista_Lotti == "nonvisualizza")
    //        {
    //            modello.Remove("StatoRiga");
    //            modello.Remove("idAziPartecipante");
    //        }
    //        DisegnaGriglia(rs, ref modello, ref proprietaCampi);
    //    }
    //    else
    //    {
    //        SqlParameters.Clear();
    //        SqlParameters.Add("@idDoc", CInt(idDoc));
    //        rs = cdf.GetRSReadFromQuery_("select PDA.StatoFunzionale from CTL_DOC SV with(nolock) inner join CTL_DOC PDA with(nolock) on PDA.LinkedDoc=SV.linkeddoc and PDA.TipoDoc='PDA_MICROLOTTI' and PDA.Deleted=0 where sv.Id=@idDoc", ApplicationCommon.Application.ConnectionString, SqlParameters);
    //        if (rs is not null && rs.RecordCount > 0)
    //        {
    //            rs.MoveFirst();
    //            string StatoFunzionale = CStr(rs["StatoFunzionale"]);
    //            if (StatoFunzionale != "VERIFICA_AMMINISTRATIVA")
    //            {
    //                htmlToReturn.Write(ApplicationCommon.CNV("Informazioni non disponibili in quanto l'offerta è stata esclusa in fase amministrativa"));
    //                throw new ResponseEndException(htmlToReturn.Out(), Response, "");
    //            }
    //            else
    //            {
    //                htmlToReturn.Write(ApplicationCommon.CNV("Le informazioni saranno disponibili alla chiusura della valutazione amministrativa"));
    //                throw new ResponseEndException(htmlToReturn.Out(), Response, "");
    //            }
    //        }

    //    }

    //}
    //' <summary>
    //' Il metodo recupera le informazioni del tab Informazioni tecnico /economico del lotto.
    //' </summary>
    //' <param name="idLotto">Identificativo del lotto.</param>
    //' <returns>Oggetto di tipo griglia.</returns>
    void OttenereInformazioniTecnicoEconomico(string idLotto)
    {
        string strModelloOfferta = "";
        string DatiInChiaro = string.Empty;
        strModelloOfferta = "INFO_LOTTO_GRIGLIA";

        //Condiziono il modello in base alla presenza del flag sull'anonimato
        var SqlParameters2 = new Dictionary<string, object?>();
        TSRecordSet? rs2 = null;
        SqlParameters2.Add("@IdDoc", idDoc);
        rs2 = cdf.GetRSReadFromQuery_("select isnull(Value,'0') as DatiInChiaro from ctl_doc SED with(nolock) left join ctl_doc_value AN with(nolock) on AN.idheader = SED.LinkedDoc and DSE_ID = 'ANONIMATO' and DZT_NAME = 'DATI_IN_CHIARO' where SED.id = @idDoc", ApplicationCommon.Application.ConnectionString, SqlParameters2);

        if (rs2 is not null && rs2.RecordCount > 0)
        {
            rs2.MoveFirst();

            DatiInChiaro = CStr(rs2["DatiInChiaro"]);

            if (DatiInChiaro == "1")
                strModelloOfferta = "INFO_LOTTO_CONCORSO_GRIGLIA";

            else
                strModelloOfferta = "INFO_LOTTO_CONCORSO_ANONIMO_GRIGLIA";
        }


        Dictionary<string, eProcurementNext.HTML.Field> modello = new Dictionary<string, eProcurementNext.HTML.Field>();
        Dictionary<string, Grid_ColumnsProperty> proprietaCampi = new Dictionary<string, Grid_ColumnsProperty>();
        //'select 1 as Id,1256223 as IdAziPartecipante

        var SqlParameters = new Dictionary<string, object?>();

        TSRecordSet? rs = null;
        //'response.write cstr("Exec SEDUTA_VIRTUALE_DATI " & idDoc & "," & session("Session")(2) & ",'" & comando & "'")
        //'response.end
        if (!string.IsNullOrEmpty(lotto))
        {
            comando = $"{comando}_DETTAGLIO";
        }
        //'response.write cstr("Exec SEDUTA_VIRTUALE_DATI " & idDoc & "," & session("Session")(2) & ",'" & comando & "'")
        //'response.end
        SqlParameters.Add("@idDoc", CInt(idDoc));
        SqlParameters.Add("@idpfu", CInt(session["IdPfu"]));
        SqlParameters.Add("@comando", comando);
        rs = cdf.GetRSReadFromQuery_("Exec SEDUTA_VIRTUALE_DATI @idDoc, @idpfu, @comando", ApplicationCommon.Application.ConnectionString, SqlParameters);

        if (rs is not null && rs.RecordCount > 0)
        {
            rs.MoveFirst();
            //'if rs("OE_Escluso").value = "1" then
            //'	Response.write CNV("Informazioni non disponibili in quanto l'offerta è stata esclusa in fase amministrativa")
            //'	response.end
            //'end if

            //'--recupero modello griglia
            OttieniProprietaModello(strModelloOfferta, ref modello, ref proprietaCampi);

            //'--rimuovo colonna Busta_Tecnica
            string BustaTecnica_VIS = CStr(rs["BustaTecnica_VIS"]);
            string colonne_allegati_tecn = CStr(rs["Name_COl_TEC"]);
            string colonne_allegati_econ = CStr(rs["Name_COl_ECO"]);

            if (BustaTecnica_VIS == "HIDE")
            {
                modello.Remove("BustaTecnica");
            }
            else
            {
                //'--NEL CASO SIA RICHIESTA LA BUSTA TECNICA PROVA AD AGGIUNGERE EVENTUALI COLONNE PER GLI ALLEGATI
                //On error GoTo 0
                if (!string.IsNullOrEmpty(colonne_allegati_tecn))
                {
                    AggiungiColonneAllegati(colonne_allegati_tecn, ref modello, "BustaTecnica", ref proprietaCampi);
                }
            }
            string punteggioTecnico = CStr(rs["PunteggioTecnico"]);
            if (punteggioTecnico != "HIDE")
            {
                AggiungiColonnaModello(ref modello, "PunteggioTecnico", "Punteggio Tecnico");
            }
            ////'--VIENE INSERITA LA COLONNA BUSTA ECONOMICA, I dati economici non vengono mostrati all'OE se è stato escluso nella fase tecnica
            //LibDbDictionary Objects = new();
            //Field campo = Objects.GetFilteredFieldExt("BustaEconomica", CStr(session["strSuffLing"]), CLng(session["IdPfu"]), session, CStr(""), ApplicationCommon.Application.ConnectionString, CInt(0));
            ////'modello.Remove "BustaEconomica"
            //campo.PathImage = "../images/Domain/";
            //campo.MaxLen = CInt(5);
            //campo.Caption = "Eco";
            //modello.Add("Busta Economica", campo);

            //AggiornaProprietaLenghtCampo("BustaEconomica", ref proprietaCampi, 5);
            ////'--VENGONO INSERITE LE COLONNE DEGLI ALLEGATI ECONOMICI SE PRESENTI
            //if (!string.IsNullOrEmpty(colonne_allegati_econ))
            //{
            //    AggiungiColonneAllegati(colonne_allegati_econ, ref modello, "BustaEconomica", ref proprietaCampi);
            //}

            //if (CStr(rs["CriterioFormulazioneOfferte"]) == "15536")//'QUANDO AL PREZZO
            //{
            //    AggiungiColonnaModello(ref modello, "ValoreImportoLotto", "Valore Offerta");
            //}
            //else
            //{
            //    AggiungiColonnaModello(ref modello, "ValoreSconto", "Valore Offerta %");
            //}
            //string punteggioEconomico = CStr(rs["PunteggioEconomico"]);
            //if (CStr(punteggioEconomico) != "HIDE")
            //{
            //    AggiungiColonnaModello(ref modello, "PunteggioEconomico", "Punteggio Economico");
            //}
            ////'--AGGIUNGO LA LENTINA PER APRIRE IL DETTAGLIO DEL LOTTO OFFERTO SE LETTA BUSTA ECONOMICA\
            //if (CStr(rs["letta_busta_economica"]) == "1")
            //{
            //    AggiungiColonnaApriModello(ref modello, "FNZ_OPEN", "Offerta Economica", "Apri_dettaglio_OffertaEconomica", ref proprietaCampi);
            //}
            //string punteggioComplessivo = CStr(rs["ValoreOfferta"]);
            //if (CStr(punteggioComplessivo) != "HIDE")
            //{
            //    AggiungiColonnaModello(ref modello, "ValoreOfferta", "Punteggio Complessivo");
            //}
            //int anomalia = CInt(rs["CalcoloAnomalia"]!);
            //if (anomalia == 1)
            //{
            //    AggiungiColonnaModello(ref modello, "StatoAnomalia", "Anomalia");
            //}
            AggiungiColonnaModello(ref modello, "ValoreOfferta", "Punteggio tecnico");
            AggiungiColonnaModello(ref modello, "graduatoria", "Graduatoria");
            AggiungiColonnaModello(ref modello, "sorteggio", "Sorteggio");
            AggiungiColonnaModello(ref modello, "StatoRiga", "Stato Offerta");
            AggiungiColonnaModello(ref modello, "posizione", "Esito");
            DisegnaGriglia(rs, ref modello, ref proprietaCampi);
        }
        else
        {
            htmlToReturn.Write(ApplicationCommon.CNV("Informazioni non disponibili in quanto l'offerta è stata esclusa in fase amministrativa"));
            throw new ResponseEndException(htmlToReturn.Out(), Response, "");
        }
    }
    //' <summary>
    //' Il metodo aggiunge una nuova colonna colonne al modello..
    //' </summary>
    //' <param name="modello">Modello originale.</param>
    //' <param name="nomeCampo">Nome della colonna che contiene la spunta.</param>
    //' <param name="captionCampo">Caption della colonna che contiene la spunta.</param>
    //' <returns>IL modello aggiornato con le nuove colonne..</returns>
    void AggiungiColonnaModello(ref Dictionary<string, eProcurementNext.HTML.Field> modello, string nomeCampo, string captionCampo)
    {
        LibDbDictionary Objects = new();
        Field campo = Objects.GetFilteredFieldExt(nomeCampo, CStr(session["strSuffLing"]), CLng(session["IdPfu"]), session, CStr(""), ApplicationCommon.Application.ConnectionString, CInt(0));
        campo.MaxLen = CInt(5);
        campo.Caption = captionCampo;
        modello.Add(captionCampo, campo);
    }
    void AggiungiColonnaApriModello(ref Dictionary<string, eProcurementNext.HTML.Field> modello, string nomeCampo, string captionCampo, string funzioneonclick, ref Dictionary<string, Grid_ColumnsProperty> proprietaCampi)
    {
        LibDbDictionary Objects = new();
        Field campo = Objects.GetFilteredFieldExt(nomeCampo, CStr(session["strSuffLing"]), CLng(session["IdPfu"]), session, CStr(""), ApplicationCommon.Application.ConnectionString, CInt(0));
        campo.MaxLen = CInt(5);
        campo.Caption = captionCampo;
        campo.PathImage = "../images/Domain/";
        modello.Add(captionCampo, campo);
        //on error resume next
        try
        {
            Grid_ColumnsProperty prop = proprietaCampi[nomeCampo];
            prop.Style = "GridCol_Link";
            //'prop.Width=5
            prop.OnClickCell = funzioneonclick;
            proprietaCampi.Add(nomeCampo, prop);
        }
        catch
        {
            //err.Clear
            //on error goto 0
            //'-- creo la property per nascondere la colonna
            Grid_ColumnsProperty prop = new();
            prop.Style = "GridCol_Link";
            //'prop.Width=5
            prop.OnClickCell = funzioneonclick;
            proprietaCampi.Add(nomeCampo, prop);
        }
    }
    //' <summary>
    //' Il metodo aggiorna la proprietà length del campo.
    //' </summary>
    //' <param name="nomeCampo">Nome della colonna che contiene la spunta.</param>
    //' <param name="proprietaCampi">Proprità del campo originale.</param>
    //' <param name="lunghezzq">Lunghezza del campo.</param>
    void AggiornaProprietaLenghtCampo(string nomeCampo, ref Dictionary<string, Grid_ColumnsProperty> proprietaCampi, int lunghezza)
    {
        //on error resume next
        try
        {
            Grid_ColumnsProperty prop = proprietaCampi[nomeCampo];
            prop.Length = CInt(lunghezza);
            proprietaCampi.Add(nomeCampo, prop);
        }
        catch
        {
            //err.Clear
            //on error goto 0
            //'-- creo la property per nascondere la colonna
            Grid_ColumnsProperty prop = new();
            prop.Length = CInt(lunghezza);
            //'prop.Hide=true
            proprietaCampi.Add(nomeCampo, prop);
        }
    }
    //' <summary>
    //' Il metodo aggiunge nuove colonne al modello..
    //' </summary>
    //' <param name="colonne_allegati">Nomi delle colonne separate da @@@.</param>
    //' <param name="modello">Modello originale.</param>
    //' <param name="nomeCampo">Nome della colonna che contiene la spunta.</param>
    //' <returns>IL modello aggiornato con le nuove colonne..</returns>
    void AggiungiColonneAllegati(string colonne_allegati, ref Dictionary<string, eProcurementNext.HTML.Field> modello, string nomeCampo, ref Dictionary<string, Grid_ColumnsProperty> proprietaCampi)
    {
        Field? campo = null;

        string[] arr = colonne_allegati.Split("@@@");
        LibDbDictionary Objects = new();
        //'set objGRid=CreateObject("ctlhtml.grid")
        for (int i = 0; i < arr.Length - 1; i++)
        {
            if (!string.IsNullOrEmpty(CStr(arr[i]).Trim()))
            {
                campo = Objects.GetFilteredFieldExt(nomeCampo, CStr(session["strSuffLing"]), CLng(session["IdPfu"]), session, CStr(""), ApplicationCommon.Application.ConnectionString, CInt(0));
                string[] valoriColonna;
                valoriColonna = CStr(arr[i]).Split("###");
                string titoloCampo = valoriColonna[0];
                campo.Name = titoloCampo;
                int lenValori = valoriColonna.Length - 1;
                campo.Caption = valoriColonna[0];
                if (lenValori > 0)
                {
                    campo.Caption = valoriColonna[1];
                }

                campo.Position = CInt(200 + i);
                campo.PathImage = "../images/Domain/";
                campo.MaxLen = CInt(5);
                //'campo.DefaultValue="ko"

                //'--aggiunto on error per evitare errore in caso provo ad aggiungere stesso attriobuto più volte
                //on error resume next
                try
                {
                    modello.Add(titoloCampo, campo);
                }
                catch
                {
                    //err.clear
                    //on error goto 0
                }
                AggiornaProprietaLenghtCampo(CStr(titoloCampo), ref proprietaCampi, 5);
            }
        }
    }
    //' <summary>
    //' Il metodo recupera le informazioni del tab amministrazione.
    //' </summary>
    //' <param name="idDoc">Identificativo della seduta virtuale.</param>
    //' <returns>Oggetto di tipo griglia.</returns>
    //
    void OttenereInformazioniAmministrazione(string idDoc)
    {
        string strModelloOfferta = "";
        strModelloOfferta = "INFO_AMMIN_GRIGLIA";
        Dictionary<string, eProcurementNext.HTML.Field> modello = new Dictionary<string, eProcurementNext.HTML.Field>();
        Dictionary<string, Grid_ColumnsProperty> proprietaCampi = new Dictionary<string, Grid_ColumnsProperty>();

        //'response.write cstr("Exec SEDUTA_VIRTUALE_DATI " & idDoc & "," & session("Session")(2) & ",'" & comando & "'")
        //'response.end
        var sqlParams = new Dictionary<string, object?>();
        sqlParams.Clear();
        sqlParams.Add("@idDoc", CInt(idDoc));
        sqlParams.Add("@idpfu", CInt(session["IdPfu"]));
        sqlParams.Add("@comando", comando);
        TSRecordSet? rs = cdf.GetRSReadFromQuery_("Exec SEDUTA_VIRTUALE_DATI @idDoc, @idpfu, @comando", ApplicationCommon.Application.ConnectionString, sqlParams);
        if (rs is not null && rs.RecordCount > 0)
        {
            rs.MoveFirst();
            int esisteDGUE = CInt(rs["EsisteDGUE"]!);
            int divisioneLotti = CInt(rs["Divisione_lotti"]!);
            string name_allegati_busta_amm = CStr(rs["NAME_ALLEGATI_BUSTA_AMM"]);

            // '--recupero modello griglia
            OttieniProprietaModello(strModelloOfferta, ref modello, ref proprietaCampi);

            //'--rimuovo colonna PresenzaDGUE
            if (esisteDGUE == 0)
            {
                modello.Remove("DGUE");
            }
            //'--rimuovo colonna NumeroLotti
            if (divisioneLotti == 0)
            {
                modello.Remove("NumeroLotti");
            }
            if (!string.IsNullOrEmpty(name_allegati_busta_amm))
            {
                AggiungiColonneAllegati(name_allegati_busta_amm, ref modello, "BustaEconomica", ref proprietaCampi);
            }
            string StatoPDA_VIS_COLONNA = CStr(rs["StatoPDA_VIS_COLONNA"]);
            if (StatoPDA_VIS_COLONNA != "HIDE")
            {
                AggiungiColonnaModello(ref modello, "StatoPDA", "Esito");
            }
            DisegnaGriglia(rs, ref modello, ref proprietaCampi);
        }
    }
    //' <summary>
    //' Il metodo disegna una griglia.
    //' </summary>
    //' <param name="rs">Insieme di record.</param>
    //' <param name="modello">Collezione di campi del modello.</param>
    //' <param name="proprietaCampi">Proprità dei campi del modello.</param>
    //' <returns>Disegna la griglia.</returns>
    void DisegnaGriglia(TSRecordSet rs, ref Dictionary<string, eProcurementNext.HTML.Field> modello, ref Dictionary<string, Grid_ColumnsProperty> proprietaCampi)
    {
        Grid mp_objGrid = new();
        mp_objGrid.Columns = modello;
        mp_objGrid.ColumnsProperty = proprietaCampi;
        string strColId = "";
        bool bAutocol;
        strColId = "Id";
        bAutocol = false;
        mp_objGrid.RecordSetWeb(rs, strColId, bAutocol);
        mp_objGrid.id = "GridViewer";
        mp_objGrid.width = "100%";
        mp_objGrid.Editable = false;

        //' mp_objGrid.ShowTotal cnvmp(lIdMp,"totale") , "8"
        htmlToReturn.Write($@"<table border=""1""><tr><td><label class=""FldCaption"">" + ApplicationCommon.CNV("Data ultimo aggiornamento") + "</label> : " + PrintDataORA(CStr(DateAndTime.Now)) + $@"</td><td style=""width:250px""></td><td>" + DisegnaBottone() + $@"</td></tr></table>");
        htmlToReturn.Write("<br>");
        mp_objGrid.Html(htmlToReturn);
    }
    //' <summary>
    //' Il metodo recupera le proprietà del modello.
    //' </summary>
    //' <param name="nomeModello">Nome del modello.</param>
    //' <param name="modello">Collezione di campi del modello.</param>
    //' <param name="proprietaCampi">Proprità dei campi del modello.</param>
    //' <returns>Collezione di campi del modello e le proprietà dei campi.</returns>
    void OttieniProprietaModello(string nomeModello, ref Dictionary<string, eProcurementNext.HTML.Field> modello, ref Dictionary<string, Grid_ColumnsProperty> proprietaCampi)
    {
        LibDbModelExt mp_objDB = new();
        mp_objDB.GetFilteredFieldsWeb(nomeModello, ref modello, ref proprietaCampi, CStr(session["strSuffLing"]), 0, 0, ApplicationCommon.Application.ConnectionString, session, true);
    }
    //' <summary>
    //' Il metodo controlla l'accesso a la pagina.
    //' </summary>
    //' <param name="idDoc">Identificativo della seduta virtuale.</param>
    //' <returns>0 se accesso non consentito 1 accesso consentito.</returns>
    int ControlloAccessoPagina(string idDoc)
    {
        int bControlloAccessoPagina;
        bControlloAccessoPagina = 0;

        //'-- verifica accesso pagina
        var SqlParameters = new Dictionary<string, object?>();
        SqlParameters.Add("@seduta", "aperta");
        SqlParameters.Add("@id", CInt(idDoc));
        // obj = server.CreateObject("ctldb.clsTabManage")
        TSRecordSet? rsControllo = cdf.GetRSReadFromQuery_("select * from CTL_DOC sv with (nolock) inner join ctl_doc b with(NOLOCK) on b.id = sv.LinkedDoc inner join Document_Bando db with(NOLOCK) on db.idheader= b.id  where db.StatoSeduta=@seduta and sv.id = @id", ApplicationCommon.Application.ConnectionString, SqlParameters);
        if (rsControllo is not null && rsControllo.RecordCount > 0)
        {
            bControlloAccessoPagina = 1;
        }

        return bControlloAccessoPagina;
    }
    //' <summary>
    //' Il metodo controlla l'accesso a la pagina.
    //' </summary>
    //' <param name="idLotto">Identificativo del lotto.</param>
    //' <param name="comando">Contesto esecuzione.</param>
    //' <returns>0 se accesso non consentito 1 accesso consentito.</returns>
    int ControlloAccesso(string idDoc, string comando)
    {
        int bControlloAccessoPagina;
        bControlloAccessoPagina = 0;
        int user = CInt(session["IdPfu"]);
        // '-- verifica accesso pagina
        //'response.write idDoc &" " & user & " " & comando
        //'response.end
        var SqlParameters = new Dictionary<string, object?>();
        SqlParameters.Add("@idDoc", CInt(idDoc));
        SqlParameters.Add("@user", user);
        SqlParameters.Add("@comando", comando);
        TSRecordSet? rsControllo = cdf.GetRSReadFromQuery_("EXEC SEDUTA_VIRTUALE_VERIFICA_ACCESSO_PAGINA @idDoc, @user, @comando", ApplicationCommon.Application.ConnectionString, SqlParameters);
        if (rsControllo is not null && rsControllo.RecordCount > 0)
        {
            bControlloAccessoPagina = 1;
        }
        return bControlloAccessoPagina;
    }
    //' <summary>
    //' Il metodo controlla l'accesso a la pagina.
    //' </summary>
    //' <param name="idLotto">Identificativo del lotto.</param>
    //' <returns>0 se accesso non consentito 1 accesso consentito.</returns>
    int ControlloAccessoPaginaLotto(string idDoc)
    {
        int bControlloAccessoPagina;
        bControlloAccessoPagina = 0;
        // '-- verifica accesso pagina
        TSRecordSet? rsControllo = null;
        //set obj = server.CreateObject("ctldb.clsTabManage")
        //'response.write "select b.* from Ctl_Doc b with(NOLOCK)  inner join Document_Bando db with(NOLOCK)  on db.idHeader=b.LinkedDoc inner join document_microlotti_dettagli d with(NOLOCK) on d.tipodoc='PDA_MICROLOTTI' and d.IdHeader = b.id where db.StatoSeduta='aperta' and not b.StatoFunzionale='chiusa' and  d.id =" & idDoc
        //'response.end
        var SqlParameters = new Dictionary<string, object?>();
        SqlParameters.Add("@seduta", "aperta");
        SqlParameters.Add("@funzionale", "chiusa");
        SqlParameters.Add("@idDoc", CInt(idDoc));

        rsControllo = cdf.GetRSReadFromQuery_("select b.* from Ctl_Doc b with(NOLOCK) inner join Document_Bando db with(NOLOCK) on db.idHeader=b.LinkedDoc inner join document_microlotti_dettagli d with(NOLOCK) on d.tipodoc='PDA_MICROLOTTI' and d.IdHeader = b.id where db.StatoSeduta=@seduta and not b.StatoFunzionale=@funzionale and  d.id =@idDoc", ApplicationCommon.Application.ConnectionString, SqlParameters);
        if (rsControllo is not null && rsControllo.RecordCount > 0)
        {
            bControlloAccessoPagina = 1;
        }
        return bControlloAccessoPagina;
    }
    //' <summary>
    //' Il metodo Ritorna una data nel formato con ore minuti secondi.
    //' </summary>
    //' <param name="strDataOda">Data nel formato iniziale.</param>
    //' <returns>data nel formato con ore minuti secondi.</returns>
    string PrintDataORA(string strDataOda)
    {
        //'aggiunge i secondi se non presenti
        if (strDataOda.Length == 16)
        {
            strDataOda = $"{strDataOda}:00";
        }
        return AggiungiZero(CStr(DateAndTime.Day(DateTime.Now))) + "/" + AggiungiZero(CStr(DateAndTime.Month(DateTime.Now))) + "/" + AggiungiZero(CStr(DateAndTime.Year(DateTime.Now))) + ":" + AggiungiZero(CStr(DateAndTime.Hour(DateTime.Now))) + ":" + AggiungiZero(CStr(DateAndTime.Minute(DateTime.Now))) + ":" + AggiungiZero(CStr(DateAndTime.Second(DateTime.Now)));

    }
    //' <summary>
    //' Il metodo aggiunge uno zero all'inizio di una stringa di un carattere.
    //' </summary>
    //' <param name="strDataOda">Stringa originale</param>
    //' <returns>Stringa originale o stringa originale con uno zero all'inizio.</returns>
    string AggiungiZero(string carattere)
    {
        string ritorno = "";
        ritorno = carattere;
        if (carattere.Length == 1)
        {
            ritorno = $"0{carattere}";
        }
        return ritorno;
    }
    //   ' <summary>
    //' Il metodo disegna un bottone con una azione javascript.
    //' </summary>
    //' <returns>Bottone con una azione javascript.</returns>
    string DisegnaBottone()
    {
        string ritorno = "";
        ritorno = @"<a href=""#""  class=""button_link"" onClick=""javascript:AggiornaAreeSedutaVirtuale();return false;"" >" + ApplicationCommon.CNV("Aggiorna") + "</a>";
        return ritorno;
    }
}
@Html.Raw(htmlToReturn.Out())

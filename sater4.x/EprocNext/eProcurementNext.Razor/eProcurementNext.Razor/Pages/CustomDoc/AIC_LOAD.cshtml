@page "/CustomDoc/AIC_LOAD.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB;
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using Microsoft.VisualBasic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.print_documentModel
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.masterPageToolsModel
@using static eProcurementNext.Session.SessionMiddleware
@{
    CommonDbFunctions cdf = new();
    LoadSession(HttpContext, session);
    EprocResponse htmlToReturn = new();
}
@{

    objDoc = PrintDocument(session, htmlToReturn, HttpContext, Response, Request);//PrintDocument ok
    var sqlParams = new Dictionary<string, object?>();
    string idDoc = objDoc.mp_IDDoc;

    string ID_DOC_POPOLAMENTO;
    string IDOFF;
    string TYPEDOC;
    string sectionName;

    ;

    ID_DOC_POPOLAMENTO = GetParamURL(Request.QueryString.ToString(), "ID_DOC_POPOLAMENTO");
    IDOFF = GetParamURL(Request.QueryString.ToString(), "IDDOC");
    TYPEDOC = GetParamURL(Request.QueryString.ToString(), "TYPEDOC");

    if (string.IsNullOrEmpty(CStr(ID_DOC_POPOLAMENTO)))
    {
        OPEN_DOCUMENT_POPOLAMENTO();
    }
    else
    {
        NEXT_STEP();
    }

    void OPEN_DOCUMENT_POPOLAMENTO()
    {
        string sql;
        dynamic idPopolamento;

        validate("IDDOC", GetParamURL(Request.QueryString.ToString(), "IDDOC"), TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 1, HttpContext, session);
        validate("TYPEDOC", GetParamURL(Request.QueryString.ToString(), "TYPEDOC"), CInt(TYPEDOC), SOTTO_TIPO_PARAMETRO_TABLE, "", 1, HttpContext, session);

        //'-- verifica la presenza di un documento non ancora completato per l'ente/Anno richiesto in quel caso lo apre
        sqlParams.Clear();
        sqlParams.Add("@tipoDoc", "AIC_POPOLAMENTO");
        sqlParams.Add("@doc", GetParamURL(Request.QueryString.ToString(), "IDDOC"));
        sql = " select id from CTL_DOC with(nolock) where TipoDoc = @tipoDoc and statofunzionale not in ( 'Completato' , 'Pubblicato' )  and linkeddoc = @doc";
        TSRecordSet? rs = GetRS(sql, sqlParams);

        //'-- se esiste prendo l'id Per riaprirlo
        if (rs is not null && rs.RecordCount > 0)
        {
            rs.MoveFirst();
            idPopolamento = CInt(rs["id"]!);
        }
        else
        {
            //'-- creiamo un nuovo documento
            sqlParams.Clear();
            sqlParams.Add("@tipoDoc", "AIC_POPOLAMENTO");
            sqlParams.Add("@idpfu", CStr(session["IdPfu"]));
            sqlParams.Add("@idOFF", IDOFF);
            sqlParams.Add("@stato", "InLavorazione");
            sqlParams.Add("@typeDoc", TYPEDOC);
            sql = "set nocount on " + Environment.NewLine;
            sql = sql + "insert into CTL_DOC ( tipoDoc , idPfu , linkeddoc  , statofunzionale, jumpcheck ) values ( @tipoDoc , @idpfu  ,@idOFF , @stato,@typeDoc  )" + Environment.NewLine;
            sql = sql + "select scope_identity() as id ";

            //'--ExecSQL sql
            rs = GetRS(sql, sqlParams);
            if (rs.RecordCount > 0)
            {
                rs.MoveFirst();
                idPopolamento = CInt(rs["id"]!);
            }
            else
            {
                string ErrText = "Errore nella generazione del processo di popolamento, si prega di ripetere l'operazione";
                string ICON_MSG = "3";
                string CAPTION_MSG = "ERRORE";

                string MakeML = "";

                throw new ResponseRedirectException("../ctl_library/MessageBoxWin.asp?ML=" + MakeML + "&MSG=" + URLEncode(TruncateMessage(ErrText)) + "&CAPTION=" + CAPTION_MSG + "&ICO=" + ICON_MSG, Response);
            }
        }

        //'-- reidirizzo la pagina sull'apertura del documento
        throw new ResponseRedirectException("../ctl_library/document/document.asp?MODE=SHOW&COMMAND=RELOAD&JScript=AIC_POPOLAMENTO&DOCUMENT=AIC_POPOLAMENTO&IDDOC=" + idPopolamento + "&CUR_FLD_SELECTED_ON_DOC=&lo=" + GetParamURL(Request.QueryString.ToString(), "lo") + "&SHOWCAPTION=" + GetParamURL(Request.QueryString.ToString(), "SHOWCAPTION") + "&NEW_WIN=" + GetParamURL(Request.QueryString.ToString(), "NEW_WIN"), Response);
    }

    void NEXT_STEP()
    {
        string sql;
        string ID_DOC_POPOLAMENTO;
        int idStep;
        string outJSON;
        string idRow;
        string CodiceAIC;
        int NumAIC = 0;
        int TotRow = 0;
        string invokeWS;
        string sectionName;

        validate("IDDOC", GetParamURL(Request.QueryString.ToString(), "IDDOC"), TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 1, HttpContext, session);
        validate("ID_DOC_POPOLAMENTO", GetParamURL(Request.QueryString.ToString(), "ID_DOC_POPOLAMENTO"), TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 1, HttpContext, session);
        validate("STEP", GetParamURL(Request.QueryString.ToString(), "STEP"), TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 1, HttpContext, session);
        validate("TYPEDOC", TYPEDOC, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 1, HttpContext, session);

        ID_DOC_POPOLAMENTO = GetParamURL(Request.QueryString.ToString(), "ID_DOC_POPOLAMENTO");
        idStep = CInt(GetParamURL(Request.QueryString.ToString(), "STEP"));
        IDOFF = GetParamURL(Request.QueryString.ToString(), "IDDOC");

        sectionName = "PRODOTTI";
        if (CStr(TYPEDOC).ToUpper() == "CONTRATTO_GARA" || CStr(TYPEDOC).ToUpper() == "CONTRATTO_GARA_FORN")
        {
            sectionName = "BENI";
        }

        int nr = CInt(DOC_NumRow(sectionName, ""));

        //' step iniziale
        if (idStep == -1)
        {
            //' in caso di step iniziale conta le righe totali e i codici aic valorizzati
            NumAIC = 0;
            TotRow = CInt(nr);

            for (int i = 0; i <= nr - 1; i++)
            {
                idRow = DOC_FieldIdRowTab(sectionName, i);
                CodiceAIC = CStr(DOC_FieldRow(sectionName, "CodiceAIC", i)).Trim();

                if (!string.IsNullOrEmpty(CStr(CodiceAIC)))
                {
                    NumAIC = NumAIC + 1;
                }
            }
        }

        //' step successivi
        if (idStep > -1)
        {
            TotRow = CInt(GetParamURL(Request.QueryString.ToString(), "TotRow"));
            NumAIC = CInt(GetParamURL(Request.QueryString.ToString(), "NumAIC"));

            validate("TotRow", GetParamURL(Request.QueryString.ToString(), "tOTrOW"), TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 1, HttpContext, session);
            validate("NumAIC", GetParamURL(Request.QueryString.ToString(), "NumAIC"), TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 1, HttpContext, session);

            //' se l'indice corrente � minore del numero di righe
            if (idStep < TotRow)
            {
                //' cerca il primo codice AIC valorizzato successivo all'indice corrente ovvero con indice >=  idStep
                for (int i = idStep; i <= nr - 1; i++)
                {
                    idRow = DOC_FieldIdRowTab(sectionName, i);
                    CodiceAIC = DOC_FieldRow(sectionName, "CodiceAIC", i).Trim();

                    if (!string.IsNullOrEmpty(CStr(CodiceAIC)))
                    {
                        //''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                        //' chiama il web service per ottenere i dati a partire dal codice AIC
                        //' ottimizzazione: prima di chiamare il WS va a vedere se ha gi� elaborato quel codice prima
                        //' in quel caso non richiama il WS ma si riprende i dati output dalla chiamata precedente
                        //''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                        int ChiamaWS;
                        string idRowSource = "-1";
                        invokeWS = "";

                        if (i > 0)
                        {
                            //' vede se ha gi� elaborato quel codice AIC nelle righe precedenti
                            idRowSource = CStr(CercaElabPrev(CodiceAIC, i, sectionName));
                        }

                        if (CInt(idRowSource) < 0)
                        {
                            //' codice non elaborato in precedenza
                            ChiamaWS = 1;
                            idRowSource = idRow;
                        }
                        else
                        {
                            //' codice gi� elaborato prima, non chiama il WS ma si riprende i dati
                            //' dalla chiamata precedente
                            ChiamaWS = 0;
                            invokeWS = "1#OK";
                        }

                        if (ChiamaWS == 1)
                        {
                            //string urlToInvoke = ApplicationCommon.Application["WEBSERVERAPPLICAZIONE_INTERNO"] + CStr(ApplicationCommon.Application["strVirtualDirectory"]) + "/" + CStr(ApplicationCommon.Application["AIC_URL_PAGE"]) + "?IdDoc=" + idRow + "&Operation=get&CodiceAIC=" + CodiceAIC;
                            string urlToInvoke = ApplicationCommon.Application["WEBSERVERAPPLICAZIONE_INTERNO"] + CStr(ApplicationCommon.Application["strVirtualDirectory_WS_AIC"]) + "/" + CStr(ApplicationCommon.Application["AIC_URL_PAGE"]) + "?IdDoc=" + idRow + "&Operation=get&CodiceAIC=" + CodiceAIC;

                            try
                            {
                                invokeWS = invokeUrl(urlToInvoke);
                            }
                            catch (Exception ex)
                            {
                                invokeWS = "0#" + ex.ToString();
                            }
                        }

                        //' aggiorna i dati del documento offerta in base a quelli restituiti dal WS
                        AggiornaDati(invokeWS, IDOFF, idRow, CodiceAIC, idRowSource, sectionName);

                    }//'''if CodiceAIC <> "" then
                }
            }
        }           //'''if idStep > -1  then

        idStep = idStep + 1;

        //' se entro qui ho finito e aggiorno stato del documento
        if (idStep >= TotRow)
        {
            sqlParams.Clear();
            sqlParams.Add("@id", ID_DOC_POPOLAMENTO);
            sql = "set nocount on " + Environment.NewLine;
            sql = sql + "update CTL_DOC set statofunzionale = 'Completato' , datainvio=getdate() where id = @id";


            //'--ExecSQL sql
            TSRecordSet? rs = GetRS(sql, sqlParams);
        }

        //' output JSON della pagina
        outJSON = @"{""TotRow"":""" + TotRow + @""",""NumAIC"":""" + NumAIC + @""",""Step"":""" + idStep + @"""}";

        //'outJSON="{""TotRow"":"""& TotRow & """,""NumAIC"":""" & NumAIC & """,""Step"":""" & idStep & """,""invokeWS"":""" & invokeWS & """}"
        //'outJSON="{""TotRow"":""1"",""NumAIC"":""1"",""Step"":""" & idStep & """,""urlToInvoke"":""" & urlToInvoke & """}"

        htmlToReturn.Write(outJSON);
        throw new ResponseEndException(htmlToReturn.Out(), Response, "");
    }

    void AggiornaDati(string invokeWS, string IDOFF, string idRow, string CodiceAIC, string idRowSource, string sectionName)
    {
        string esito;
        string esitoRiga;
        string condition_warning;
        string condition_error;
        TSRecordSet rsAttr;
        int IsEditable;
        string valore;
        dynamic valoreOld;
        int indice_riga;
        int id_prodotto;
        int modificato_prodotto;
        TSRecordSet? rsModelloProd = null;
        int presente_nel_modello;

        condition_warning = $@"<br><img src=""../images/Domain/State_Warning.gif""><br>";
        condition_error = $@"<br><img src=""../images/Domain/State_ERR.gif""><br>";

        esito = "";
        esitoRiga = "";

        modificato_prodotto = 0;

        //' chiamata al WS OK
        if (CStr(invokeWS) == "1#OK")
        {
            //' chiamata al WS OK

            //' controlla esito esistenza codice AIC
            sqlParams.Clear();
            sqlParams.Add("@id", idRowSource);
            sqlParams.Add("@dse_ID", "AIC_GET");
            sqlParams.Add("@name", "Esito");
            string sql = " select top 1 value from Document_Microlotti_DOC_Value with (nolock)  where IdHeader=@id and DSE_ID=@dse_ID and dzt_name=@name order by idrow desc";
            TSRecordSet? rs = GetRS(sql, sqlParams);

            //'-- legge esito
            if (rs is not null && rs.RecordCount > 0)
            {
                rs.MoveFirst();
                esito = CStr(rs["value"]);
            }

            //'' leggo esito riga sulla microlotti dettagli
            //' se esito not ok aggiorna esito riga in warning (codice AIC non valido)
            sqlParams.Clear();
            sqlParams.Add("@id", CInt(idRowSource));
            sql = " select isnull(esitoRiga,'') as esitoRiga from Document_MicroLotti_Dettagli with (nolock) where id = @id";

            rs = GetRS(sql, sqlParams);

            //'-- se esiste aggiorno il dato
            if (rs.RecordCount > 0)
            {
                rs.MoveFirst();
                esitoRiga = CStr(rs["esitoRiga"]);
            }

            //' chiamata al WS not OK
            if (CStr(esito) != "OK")
            {
                string sql1;
                sqlParams.Clear();
                sqlParams.Add("@id", CInt(idRow));
                if (CStr(esitoRiga) == $@"<img src=""../images/Domain/State_OK.gif"">" || !string.IsNullOrEmpty(CStr(esitoRiga)))
                {
                    sql1 = "update Document_MicroLotti_Dettagli set EsitoRiga =  '" + condition_warning + Strings.Replace(esito, "'", "''") + "' where id = @id";
                }
                else
                {
                    sql1 = "update Document_MicroLotti_Dettagli set EsitoRiga =  EsitoRiga + '" + condition_warning + Strings.Replace(esito, "'", "''") + "' where id = @id";
                }

                cdf.Execute(sql1, ApplicationCommon.Application.ConnectionString, parCollection: sqlParams);
            }
            else
            { //' in caso di esito Ok aggiorna i dati del doc sorgente
                sqlParams.Clear();
                sqlParams.Add("@idRow", CInt(idRow));
                //'--svuoto esitoriga
                string sql1 = "update Document_MicroLotti_Dettagli set EsitoRiga = '' where id = @idRow";
                cdf.Execute(sql1, ApplicationCommon.Application.ConnectionString, parCollection: sqlParams);

                sqlParams.Clear();
                sqlParams.Add("@id", CInt(IDOFF));
                sqlParams.Add("@dse_id", sectionName);
                //' leggge il recordset degli attributi che sono editabili per il documento e la sezione interessati
                sql = @"select MA_DZT_Name,isnull( MAP_Value, 1 ) as MAP_Value,replace(replace(case when ML_Description is null then MA_DescML else cast(ML_Description as varchar(500)) end,'<div class=""Grid_CaptionObblig"">',''),'</div>','') as ML_Description from ctl_doc_section_model x with (nolock) inner join CTL_ModelAttributes  WITH(INDEX(IX_CTL_ModelAttributes_MA_MOD_ID_MA_DZT_Name_MA_DescML_MA_Pos) nolock) on MA_MOD_ID = x.MOD_Name left join CTL_ModelAttributeProperties with (nolock) on [MAP_MA_MOD_ID]=MA_MOD_ID and [MAP_MA_DZT_Name]=MA_DZT_Name and [MAP_Propety]='Editable' left outer join LIB_Multilinguismo with (nolock) on ML_KEY = MA_DescML and ML_LNG = 'I' where x.IdHeader = @id and x.DSE_ID =@dse_id";
                rsAttr = GetRS(sql, sqlParams);

                //' cerca nel vettore in memoria l'indice riga che corrisponde a quella chiave idRow
                indice_riga = GetIndiceRiga(idRow, sectionName);

                string Segnalazioni = "";
                string Segnalazioni2 = "";

                //' vede se esiste il prodotto in ambito farmaci
                id_prodotto = -1;
                sqlParams.Clear();
                sqlParams.Add("@tipoDoc", "prodotto");
                sqlParams.Add("@codice", CodiceAIC);
                sql = " select id from Document_MicroLotti_Dettagli WITH(NOLOCK) where tipodoc = @tipoDoc and Posizione = '1' and CODICE_REGIONALE = @codice";
                rs = GetRS(sql, sqlParams);

                if (rs.RecordCount > 0)
                {
                    rs.MoveFirst();
                    id_prodotto = CInt(rs["id"]!);

                    //' se esiste preleva il modello prodotto farmaci per conoscere gli attributi
                    sqlParams.Clear();
                    sqlParams.Add("@tipoDoc", "config_modelli");
                    sqlParams.Add("@stato", "Pubblicato");
                    sqlParams.Add("@cod", "CODIFICA_PRODOTTI");
                    sql = "select b.value as DZT_Name from ctl_doc WITH(NOLOCK) inner join CTL_DOC_Value a WITH(NOLOCK) on a.IdHeader = id and a.DSE_ID = 'AMBITO' and a.DZT_Name = 'MacroAreaMerc' inner join CTL_DOC_Value b WITH(NOLOCK) on b.IdHeader = id and b.DSE_ID = 'MODELLI' and b.DZT_Name = 'DZT_Name' where tipodoc=@tipoDoc and Deleted = 0 and StatoFunzionale = @stato and JumpCheck = @cod and a.value='1'";
                    rsModelloProd = GetRS(sql, sqlParams);
                }

                //'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                //' aggiorno i dati offerta
                //'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                //' se il dato � editabile lo sovrascrivo altrimenti no
                //' in ogni caso traccia la cosa nell'esito riga (solo se il valore � cambiato)

                //' matrice dei campi da aggiornare (la prima colonna � il nome del campo tornato dal ws, la seconda � il nome
                //' dell'attributo nel documento, la terza dice se il campo � alfanumerico attraverso il char '
                //' la quarta colonna dice se deve aggiornare il prodotto per quell'attributo
                //' la quinta colonna contiene il valore ritornato dal WS

                dynamic vMatrix;
                string descrAttr = "";
                int bValoreOldVuoto;
                int bValoreNewVuoto;

                int cnt1 = 0;
                int cnt2 = 0;

                vMatrix = new dynamic[5, 17];

                int nSizeMatrix = 16;

                vMatrix[0, 0] = "prezzoNazionale1";
                vMatrix[1, 0] = "PrezzoVenditaConfezioneIvaInclusa";
                vMatrix[2, 0] = "";
                vMatrix[3, 0] = "";
                vMatrix[4, 0] = "";

                vMatrix[0, 1] = "flgSoggettoScontoPayBack";
                vMatrix[1, 1] = "ADESIONE_PAYBACK";
                vMatrix[2, 1] = "'";
                vMatrix[3, 1] = "";
                vMatrix[4, 1] = "";

                vMatrix[0, 2] = "codiceAliquotaIva";
                vMatrix[1, 2] = "AliquotaIva";
                vMatrix[2, 2] = "";
                vMatrix[3, 2] = "";
                vMatrix[4, 2] = "";

                vMatrix[0, 3] = "numeroUmr";
                vMatrix[1, 3] = "PEZZI_PER_CONFEZIONE";
                vMatrix[2, 3] = "";
                vMatrix[3, 3] = "";
                vMatrix[4, 3] = "";

                vMatrix[0, 4] = "descrizione";
                vMatrix[1, 4] = "DENOMINAZIONE_ARTICOLO_FORNITORE";
                vMatrix[2, 4] = "'";
                vMatrix[3, 4] = "";
                vMatrix[4, 4] = "";

                vMatrix[0, 5] = "denominazioneregionale";
                vMatrix[1, 5] = "DESCRIZIONE_CODICE_REGIONALE";
                vMatrix[2, 5] = "'";
                vMatrix[3, 5] = "";
                vMatrix[4, 5] = "";

                vMatrix[0, 6] = "codiceatc";
                vMatrix[1, 6] = "CodiceATC";
                vMatrix[2, 6] = "'";
                vMatrix[3, 6] = "";
                vMatrix[4, 6] = "";

                vMatrix[0, 7] = "codiceprincipioattivo";
                vMatrix[1, 7] = "PrincipioAttivo";
                vMatrix[2, 7] = "'";
                vMatrix[3, 7] = "";
                vMatrix[4, 7] = "";

                vMatrix[0, 8] = "codiceformafarmaceutica";
                vMatrix[1, 8] = "FormaFarmaceutica";
                vMatrix[2, 8] = "'";
                vMatrix[3, 8] = "";
                vMatrix[4, 8] = "";

                vMatrix[0, 9] = "codiceregionale";
                vMatrix[1, 9] = "CODICE_BDR";
                vMatrix[2, 9] = "'";
                vMatrix[3, 9] = "";
                vMatrix[4, 9] = "";

                vMatrix[0, 10] = "dosaggio";
                vMatrix[1, 10] = "Dosaggio";
                vMatrix[2, 10] = "'";
                vMatrix[3, 10] = "";
                vMatrix[4, 10] = "";

                vMatrix[0, 11] = "conservazione";
                vMatrix[1, 11] = "MODALITA_DI_CONSERVAZIONE_DOM";
                vMatrix[2, 11] = "'";
                vMatrix[3, 11] = "";
                vMatrix[4, 11] = "";

                vMatrix[0, 12] = "PrezzoExFactory";
                vMatrix[1, 12] = "PrezzoExfactoryConfezione";
                vMatrix[2, 12] = "";
                vMatrix[3, 12] = "";
                vMatrix[4, 12] = "";

                vMatrix[0, 13] = "CONFEZIONAMENTO_PRIMARIO";
                vMatrix[1, 13] = "CONFEZIONAMENTO_PRIMARIO";
                vMatrix[2, 13] = "";
                vMatrix[3, 13] = "";
                vMatrix[4, 13] = "";

                vMatrix[0, 14] = "PrezzoPubblicoConfezione";
                vMatrix[1, 14] = "PrezzoPubblicoConfezione";
                vMatrix[2, 14] = "";
                vMatrix[3, 14] = "";
                vMatrix[4, 14] = "";

                vMatrix[0, 15] = "IVA_PERC";
                vMatrix[1, 15] = "IVA_PERC";
                vMatrix[2, 15] = "";
                vMatrix[3, 15] = "";
                vMatrix[4, 15] = "";

                vMatrix[0, 16] = "ATCDiDettaglio";
                vMatrix[1, 16] = "ATCDiDettaglio";
                vMatrix[2, 16] = "'";
                vMatrix[3, 16] = "";
                vMatrix[4, 16] = "";



                string ValoreDefault = ""; //Get_Func_Property("contesto","oggetto","prop","");

                //' ciclo di aggiornamento
                for (int ind = 0; ind <= nSizeMatrix; ind++)
                {
                    //' vede se il campo è editabile
                    IsEditable = IsEdit(rsAttr, vMatrix[1, ind], ref descrAttr);

                    bValoreOldVuoto = 0;
                    bValoreNewVuoto = 0;
                    sqlParams.Clear();
                    sqlParams.Add("@id", idRowSource);
                    sqlParams.Add("@dse_id", "AIC_GET");
                    sqlParams.Add("@name", vMatrix[0, ind]);
                    //' legge il valore restituito dal ws
                    sql = " select top 1 Value from Document_Microlotti_DOC_Value with (nolock)  where IdHeader=@id and DSE_ID=@dse_id and DZT_Name=@name order by IdRow desc";
                    rs = GetRS(sql, sqlParams);

                    //'-- se esiste il valore vedo se devo aggiornare
                    if (rs.RecordCount > 0)
                    {
                        rs.MoveFirst();
                        valore = CStr(rs["Value"]);

                        //' legge il valore sul documento (lo prende dalla memoria)
                        //'valoreOld = DOC_FieldRow( sectionName, vMatrix(1,ind), indice_riga )
                        valoreOld = DOC_FieldRowTecnical(sectionName, vMatrix[1, ind], indice_riga);

                        //' caso dei campi numerici con valore vuoto
                        if (vMatrix[1, ind] == "PrezzoVenditaConfezioneIvaInclusa" || vMatrix[1, ind] == "AliquotaIva" || vMatrix[1, ind] == "PEZZI_PER_CONFEZIONE" || vMatrix[0, ind] == "PrezzoExFactory" || vMatrix[1, ind] == "PrezzoPubblicoConfezione" || vMatrix[1, ind] == "CONFEZIONAMENTO_PRIMARIO" || vMatrix[1, ind] == "IVA_PERC" )
                        {
                            if (string.IsNullOrEmpty(valoreOld) || !IsNumeric(valoreOld))
                            {
                                //valoreOld = 0;
                                valoreOld = "NULL";
                                bValoreOldVuoto = 1;
                            }
                            if (string.IsNullOrEmpty(valore) || !IsNumeric(valore))
                            {
                                bValoreNewVuoto = 1;
                            }
                            if (valore == "0")
                            {
                                bValoreNewVuoto = 1;
                            }
                        }
                        else
                        {
                            valoreOld = CStr(valoreOld).Trim();
                            if (string.IsNullOrEmpty(valoreOld))
                            {
                                bValoreOldVuoto = 1;
                            }
                            if (CStr(valore).Trim() == "")
                            {
                                bValoreNewVuoto = 1;
                            }
                            //19/06/2023
                            if (CStr(valore).Trim() == "0")
                            {
                                bValoreNewVuoto = 1;
                            }
                        }

                        //' se il dato � alfanumerico
                        if (CStr(vMatrix[2, ind]) == "'")
                        {
                            valore = Replace(CStr(valore), "'", "''");
                            if (CStr(valore).Trim() == "")
                            {
                                bValoreNewVuoto = 1;
                            }
                            //19/06/2023
                            if (CStr(valore).Trim() == "0")
                            {
                                bValoreNewVuoto = 1;
                            }
                        }
                        else
                        {
                            //'--campi numerici
                            if (IsNumeric(valoreOld))
                            {
                                valoreOld = Replace(valoreOld, ",", ".");
                                //valoreOld = CDbl(valoreOld);
                            }
                            if (IsNumeric(valore))
                            {
                                valore = Replace(valore, ",", ".");
                                if (CDbl(valore) == 0)
                                {
                                    bValoreNewVuoto = 1;
                                }
                            }
                        }

                        //' odiros 16/06/2021
                        if (vMatrix[1, ind] == "PrezzoVenditaConfezioneIvaInclusa" || vMatrix[1, ind] == "AliquotaIva" || vMatrix[1, ind] == "PEZZI_PER_CONFEZIONE" || vMatrix[0, ind] == "PrezzoExFactory" || vMatrix[1, ind] == "PrezzoPubblicoConfezione" || vMatrix[1, ind] == "CONFEZIONAMENTO_PRIMARIO" || vMatrix[1, ind] == "IVA_PERC")
                        {
                            if (string.IsNullOrEmpty(CStr(valore)))
                            {
                                //valore = 0;
                                valore = "NULL";
                            }
                        }

                        // 23/01/2024 in caso di valore vuoto vede se deve applicare una scritta custom per il cliente
                        ValoreDefault = "";
                        if (IsEditable == 1 && (valore == "" || bValoreNewVuoto == 1) && CStr(vMatrix[2, ind]) == "'")
                        {
                            ValoreDefault = Get_Func_Property("AIC_LOAD", vMatrix[1, ind], "ValoreDefault", "");
                            if (ValoreDefault != "")
                                valore = ValoreDefault;
                        }
                        
                        
                        //' salva il valore in 4� colonna
                        vMatrix[4, ind] = valore;

                        //' aggiorniamo solo se l'attributo � editabile e il valore � differente
                        if (CStr(valoreOld) != CStr(valore))
                        {
                            // odiros 13/06/2023 -- aggiunto and bValoreNewVuoto = 0
                            //if (IsEditable == 1 && bValoreNewVuoto == 0)
                            //19/06/2023
                            if (IsEditable == 1 && !(bValoreNewVuoto == 1 && bValoreOldVuoto == 0))                            
                            {                               
                                //' aggiornamento del dato sul documento sorgente
                                sql1 = "update Document_MicroLotti_Dettagli set " + vMatrix[1, ind] + "=" + vMatrix[2, ind] + valore + vMatrix[2, ind] + " where id=" + idRow;
                                cdf.Execute(sql1, ApplicationCommon.Application.ConnectionString, parCollection: sqlParams);

                                //' d� la segnalazione di aggiornamento solo se il valore non era vuoto
                                if (bValoreOldVuoto == 0)
                                {
                                    if (string.IsNullOrEmpty(Segnalazioni2))
                                    {
                                        Segnalazioni2 = descrAttr;
                                        cnt2 = cnt2 + 1;
                                    }
                                    else
                                    {
                                        cnt2 = cnt2 + 1;
                                        if (CInt(cnt2) % 2 != 0)
                                        {
                                            Segnalazioni2 = Segnalazioni2 + "<br>" + descrAttr;
                                        }
                                        else
                                        {
                                            Segnalazioni2 = Segnalazioni2 + " , " + descrAttr;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                //' se il dato non � editabile non lo aggiorno e segnalo un warning in esito riga
                                if (IsEditable == 0)
                                {
                                    if (string.IsNullOrEmpty(Segnalazioni))
                                    {
                                        //'Segnalazioni = condition_warning & "Il campo " & vMatrix(1,ind) & " non viene aggiornato perch� non editabile"
                                        //'Segnalazioni = condition_warning & "Il campo " & descrAttr & " non viene aggiornato perch� non editabile"
                                        Segnalazioni = descrAttr;
                                        cnt1 = cnt1 + 1;
                                    }
                                    else
                                    {
                                        //'Segnalazioni = Segnalazioni & "<br>" &  "Il campo " & vMatrix(1,ind) & " non viene aggiornato perch� non editabile"
                                        //'Segnalazioni = Segnalazioni & "<br>" &  "Il campo " & descrAttr & " non viene aggiornato perch� non editabile"
                                        cnt1 = cnt1 + 1;
                                        if (CInt(cnt1) % 2 != 0)
                                        {
                                            Segnalazioni = Segnalazioni + "<br>" + descrAttr;
                                        }
                                        else
                                        {
                                            Segnalazioni = Segnalazioni + " , " + descrAttr;
                                        }
                                    }
                                }
                            }     //'' if IsEditable = 1 then
                        }  //'' if valoreOld <> valore then

                        //' se esiste il prodotto codificato vede se deve aggiornare il dato anche
                        //' sul prodotto (solo se il valore � differente ed esiste nel modello)
                        if (id_prodotto > 0)
                        {
                            presente_nel_modello = IsInModel(rsModelloProd, vMatrix[1, ind]);

                            if (presente_nel_modello == 1)
                            {
                                //' questa select serve a capire se il valore sul prodotto � diverso

                                sqlParams.Clear();
                                sqlParams.Add("@id", id_prodotto);
                                sqlParams.Add("@matrix", vMatrix[1, ind]);
                                sqlParams.Add("@matrix2", vMatrix[2, ind] + valore + vMatrix[2, ind]);
                                string sql2 = "select id from Document_MicroLotti_Dettagli WITH(NOLOCK) where id = @id and @matrix <> @matrix2";
                                TSRecordSet rs2 = GetRS(sql2, sqlParams);

                                if (rs2.RecordCount > 0)
                                {
                                    //' aggiorna il prodotto se il valore � differente
                                    //'sql1 = "update Document_MicroLotti_Dettagli set " & vMatrix(1,ind) &  "=" & vMatrix(2,ind) & valore & vMatrix(2,ind) & " where id=" & id_prodotto
                                    //'set rs1 = GetRS(sql1)
                                    vMatrix[3, ind] = "1";
                                    modificato_prodotto = 1;
                                }
                            }    //''''if presente_nel_modello = 1 then
                        }  //'''if id_prodotto > 0 then
                    }     //'''if rs.recordcount > 0 then  (se esiste valore tornato dal WS)
                }

                //'response.write instr(cstr(esitoRiga) , "../images/Domain/State_OK.gif")
                //'response.end

                //' vede se deve aggiornare esito riga per segnalare campi non editabili non aggiornati
                if (!string.IsNullOrEmpty(Segnalazioni) || !string.IsNullOrEmpty(Segnalazioni2))
                {
                    //'if cstr(esitoRiga) = "<img src=""../images/Domain/State_OK.gif"">" or cstr(esitoRiga) = "" then
                    //'if instr(cstr(esitoRiga) , "../images/Domain/State_OK.gif") > 0 or cstr(esitoRiga) = "" then
                    dynamic SegnalazioniAll;

                    SegnalazioniAll = condition_warning;

                    if (!string.IsNullOrEmpty(Segnalazioni))
                    {
                        if (cnt1 == 1)
                        {
                            SegnalazioniAll = SegnalazioniAll + "Il campo " + Segnalazioni + "<br>non viene modificato in quanto non editabile ma il valore ritornato dall'Integrazione AIC è differente";
                        }
                        else
                        {
                            SegnalazioniAll = SegnalazioniAll + "I campi " + Segnalazioni + "<br>non vengono modificati in quanto non editabili ma il valore ritornato dall'Integrazione AIC è differente";
                        }
                    }
                    if (!string.IsNullOrEmpty(Segnalazioni2))
                    {
                        if (cnt2 == 1)
                        {
                            SegnalazioniAll = SegnalazioniAll + "<br>Il campo " + Segnalazioni2 + "<br>è stato aggiornato dall'Integrazione AIC ma il valore precedente era differente";
                        }
                        else
                        {
                            SegnalazioniAll = SegnalazioniAll + "<br>I campi " + Segnalazioni2 + "<br>sono stati aggiornati dall'Integrazione AIC ma il valore precedente era differente";
                        }
                    }
                    sqlParams.Clear();
                    sqlParams.Add("@id", idRow);
                    sqlParams.Add("@esito", Replace(SegnalazioniAll, "'", "''"));
                    sql1 = "update Document_MicroLotti_Dettagli set EsitoRiga =  @esito where id = @id";

                    //'else
                    //'	sql1 = "update Document_MicroLotti_Dettagli set EsitoRiga =  EsitoRiga + '"  &  replace(Segnalazioni,"'","''") & "' where id = " & idRow
                    //'end if

                    cdf.Execute(sql1, ApplicationCommon.Application.ConnectionString, parCollection: sqlParams);
                } //''''if Segnalazioni <> "" or Segnalazioni2 <> "" then

                //' se � stato modificato qualcosa sul prodotto crea documento di variazione
                //' ed effettua la variazione
                if (modificato_prodotto == 1)
                {
                    dynamic newId;

                    //' chiama la stored per creare eventuale documento storico di default
                    sqlParams.Clear();
                    sqlParams.Add("@id", id_prodotto);
                    sql1 = "exec CREATE_STORICO_PROD @id,-20";
                    TSRecordSet rs1 = GetRS(sql1, sqlParams);

                    //' MODIFICA LA RIGA DI PRODOTTO
                    for (int ind = 0; ind <= nSizeMatrix; ind++)
                    {
                        if (vMatrix[3, ind] == "1")
                        {
                            valore = vMatrix[4, ind];
                            sql1 = "update Document_MicroLotti_Dettagli set " + vMatrix[1, ind] + "=" + vMatrix[2, ind] + valore + vMatrix[2, ind] + " where id=" + id_prodotto;
                            cdf.Execute(sql1, ApplicationCommon.Application.ConnectionString, parCollection: sqlParams);
                        }
                    }

                    //' CREA IL DOCUMENTO DI VARIAZIONE
                    sqlParams.Clear();
                    sqlParams.Add("@id", id_prodotto);
                    sql1 = "exec CODIFICA_PROD_DOC_CREATE_FROM_MODIFICA @id ,-20";
                    rs1 = GetRS(sql1, sqlParams);

                    if (rs1.RecordCount > 0)
                    {
                        rs1.MoveFirst();
                        newId = rs1.Fields["id"];
                        //' se la chiamata alla stored � andata a buon fine
                        if (IsNumeric(newId))
                        {
                            //' aggiorna stato
                            sqlParams.Clear();
                            sqlParams.Add("@id", newId);
                            sqlParams.Add("@caption", "Modifica Prodotto da Integrazione BDR-AIC");
                            sqlParams.Add("@statoFunzionale", "Inviato");
                            sqlParams.Add("@statoDoc", "Sended");
                            string sql2 = "Update CTL_DOC set caption=@caption,StatoFunzionale=@statoFunzionale,Statodoc=@statoDoc,datainvio=getdate() where id=@id";
                            TSRecordSet rs2 = GetRS(sql2, sqlParams);

                            //' schedula processo per calcolo del protocollo
                            sqlParams.Clear();
                            sqlParams.Add("@id", newId);
                            sqlParams.Add("@codifica", "CODIFICA_PROD_DOC");
                            sqlParams.Add("@state", "PROTOCOLLA");
                            sql2 = "INSERT INTO CTL_Schedule_Process (IdDoc ,IdUser ,DPR_DOC_ID ,DPR_ID ,State ,dateIn ) values (@id,-20,@codifica,@state,0,getdate() ) ";
                            rs2 = GetRS(sql2, sqlParams);
                        }
                    }
                }   //'''if modificato_prodotto = 1 then
            }       //'''else di if cstr(esito) <> "OK" then
        }
        else
        {
            //'' se entro qui la chiamata al WS ha dato errore
            string[] sss;
            string strErr;

            sss = Strings.Split(CStr(invokeWS), "#");

            if (CStr(sss[0]) == "0")
            {
                //' aggiorna stato esito riga con errore

                strErr = "Errore chiamata al web service BDR_AIC - " + sss[1];
                esitoRiga = "";

                //' se esito not ok aggiorna esito riga in errore (codice AIC non valido)
                //' legge esito riga attuale
                sqlParams.Clear();
                sqlParams.Add("@id", idRowSource);
                string sql = " select isnull(esitoRiga,'') as esitoRiga from Document_MicroLotti_Dettagli with (nolock) where id = @id";

                TSRecordSet rs = GetRS(sql, sqlParams);

                //'-- se esiste aggiorno il dato
                if (rs.RecordCount > 0)
                {
                    rs.MoveFirst();
                    esitoRiga = CStr(rs["esitoRiga"]);
                }
                string sql1;
                sqlParams.Clear();
                sqlParams.Add("@id", CInt(idRow));
                sqlParams.Add("@condizione", condition_error + strErr);
                if ((CStr(esitoRiga) == @$"<img src=""../images/Domain/State_OK.gif"">") || string.IsNullOrEmpty(esitoRiga))
                {
                    sql1 = "update Document_MicroLotti_Dettagli set EsitoRiga =  @condizione where id = @id";
                }
                else
                {
                    sql1 = "update Document_MicroLotti_Dettagli set EsitoRiga =  EsitoRiga + @condizione where id = @id";
                }

                cdf.Execute(sql1, ApplicationCommon.Application.ConnectionString, parCollection: sqlParams);
            }
        }
    }

    int CercaElabPrev(string CodiceAIC, int i, string nome_sezione)
    {
        string idRowOut;
        string CodiceAIC_2;

        int intToReturn = -1;

        //' cerca nelle righe precedenti gi� elaborato se gi� c'era quel codice AIC
        //' se lo trova ritorna l'id della microlotti da cui prendere i valori
        for (int j = 0; j <= i - 1; j++)
        {
            idRowOut = DOC_FieldIdRowTab(nome_sezione, j);
            CodiceAIC_2 = (DOC_FieldRow(nome_sezione, "CodiceAIC", j).Trim());

            if (!string.IsNullOrEmpty(CStr(CodiceAIC_2)) && CStr(CodiceAIC_2) == CStr(CodiceAIC))
            {
                intToReturn = CInt(idRowOut);
                return intToReturn;
            }
        }

        return intToReturn;
    }

    int IsEdit(TSRecordSet rsAttr, string attribName, ref string descrAttr)
    {
        int intToReturn = -1;
        descrAttr = "";

        if (rsAttr.RecordCount > 0)
        {
            rsAttr.MoveFirst();

            rsAttr.Find("MA_DZT_Name = '" + attribName + "'");
            if (!rsAttr.EOF)
            {
                intToReturn = 0;

                if (CInt(rsAttr["MAP_Value"]!) == 1)
                {
                    intToReturn = 1;
                }

                descrAttr = CStr(rsAttr.Fields["ML_Description"]);
            }
        }

        return intToReturn;
    }

    int IsInModel(TSRecordSet rsAttr, string attribName)
    {
        int intToReturn = 0;

        if (rsAttr.RecordCount > 0)
        {
            rsAttr.MoveFirst();

            rsAttr.Find("DZT_Name = '" + attribName + "'");
            if (!rsAttr.EOF)
            {
                intToReturn = 1;
            }
        }

        return intToReturn;
    }

    int GetIndiceRiga(string idRow, string sectionName)
    {
        int intToReturn = -1;

        int nr = CInt(DOC_NumRow(sectionName, ""));
        for (int i = 0; i <= nr - 1; i++)
        {
            string idRiga = DOC_FieldIdRowTab(sectionName, i);

            if (CLng(idRiga) == CLng(idRow))
            {
                intToReturn = i;
                return intToReturn;
            }
        }

        return intToReturn;
    }

    //'-- ritorna un rs passata la query
    //void GetRS( strSql ){

    //	//'on error resume next

    //	obj = server.CreateObject("ctldb.clsTabManage");
    //	TSRecordSet rs = obj.GetRSReadFromQuery(CStr(strSql), CStr(session("Session")(8)));

    //	obj = null;

    //	GetRS = rs;
            //	//'err.clear

    //}


    //'-- ritorna un rs passata la query
    //void ExecSQL(string strSql ){

    //	//on error resume next

    //	//dim obj
    //	TSRecordSet rs;

    //	obj = server.CreateObject("ctldb.clsTabManage");
    //	//'set rs = obj.ExecSql( cstr(strSql ) , cstr(session("Session")(8)) )

    //	obj.ExecSql(CStr(strSql), CStr(session("Session")(8)));

    //	obj = null;

    ////'set GetRS = rs
            ////'err.clear

            //}

}
@Html.Raw(htmlToReturn.Out())
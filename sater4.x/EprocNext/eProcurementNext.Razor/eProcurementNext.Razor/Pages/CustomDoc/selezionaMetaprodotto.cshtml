@page "/CustomDoc/selezionaMetaprodotto.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB;
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.CustomDoc.selezionaMetaprodottoModel;
@using Microsoft.VisualBasic;
@model eProcurementNext.Razor.Pages.CustomDoc.selezionaMetaprodottoModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();
}
@{
	string doc_to_upd =GetParamURL(Request.QueryString.ToString(), "doc_to_upd");
	string row_to_upd = GetParamURL(Request.QueryString.ToString(), "row_to_upd");
	string row_copy = GetParamURL(Request.QueryString.ToString(), "row_copy");
	//'controllo sicurezza deve essere un numerico ed avvalorato
	validate("doc_to_upd", CStr(doc_to_upd), TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 1, HttpContext, session);
	validate("row_to_upd", CStr(row_to_upd), TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 1, HttpContext, session);
	validate("row_copy", CStr(row_copy), TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 1, HttpContext, session);
	//'controllo che il documento da aggiornare sia inlavorazione
	//set objDB = createobject( "ctldb.clsTabManage" )
	
	var SqlParameters = new Dictionary<string, object?>();
	SqlParameters.Add("@statoFunzionale", "InLavorazione");
	SqlParameters.Add("@id", CInt(doc_to_upd));
	TSRecordSet rs = cdf.GetRSReadFromQuery_("Select * from CTL_DOC with (nolock) where StatoFunzionale <> @statoFunzionale and Id=@id", ApplicationCommon.Application.ConnectionString, SqlParameters);
	if(rs.RecordCount >0)
	{
		htmlToReturn.Write("ERRORE_DOCUMENTO_DA_AGGIORNARE");
		throw new ResponseEndException(htmlToReturn.Out(), Response, "ERRORE_DOCUMENTO_DA_AGGIORNARE");
	}

	//'rimpiazza sul documento di partenza il contenuto della riga selezionato
	SqlParameters.Clear();
	SqlParameters.Add("@copy", row_copy);
	SqlParameters.Add("@upd", row_copy);
	string strSql = "COPY_RECORD  'Document_MicroLotti_Dettagli', @copy, @upd, ' ,Id,IdHeader,TipoDoc,StatoRiga,idHeaderLotto, '";
	cdf.Execute(strSql, ApplicationCommon.Application.ConnectionString, parCollection: SqlParameters);
	htmlToReturn.Write("OK");
}
@Html.Raw(htmlToReturn.Out())
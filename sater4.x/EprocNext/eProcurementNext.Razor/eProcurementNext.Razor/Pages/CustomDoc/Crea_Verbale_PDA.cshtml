@page "/CustomDoc/Crea_Verbale_PDA.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB;
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.print_documentModel;
@using static eProcurementNext.Razor.Pages.CustomDoc.Crea_Verbale_PDAModel;
@using Microsoft.VisualBasic;
@model eProcurementNext.Razor.Pages.CustomDoc.Crea_Verbale_PDAModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();

	//on error goto 0
	//'on error resume next
	//'--RECUPERO PARAMETRI
	string ProceduraGara = "";
	string CriterioAggiudicazioneGara = "";
	string CriterioFormulazioneOfferte = "";
	string IdPDA = "";
	string TYPEDOC = "";
	string ID_GARA = "";
	string ListaLotti = "";

	string contesto = GetParamURL(Request.QueryString.ToString(), "CONTESTO");
	string IDDOC = GetParamURL(Request.QueryString.ToString(), "IDDOC");
	string INNESCO = GetParamURL(Request.QueryString.ToString(), "INNESCO");
	string TipoDoc = GetParamURL(Request.QueryString.ToString(), "TipoDoc");
	var sqlParams = new Dictionary<string, object?>();

	validate("IDDOC", IDDOC, TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 1,HttpContext,session);
	validate("contesto", contesto, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 1,HttpContext,session);
	validate("INNESCO", INNESCO, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 1,HttpContext,session);
	validate("TipoDoc", TipoDoc, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 1,HttpContext,session);

	TSRecordSet? RsVerbale = null;
	try
	{
		if (INNESCO == "CONTRATTO_GARA")
		{
			sqlParams.Add("@tipoDoc", "VERBALEGARA");
			sqlParams.Add("@statoFunzionale","Annullato");
			sqlParams.Add("@check", contesto);
			sqlParams.Add("@id", CInt(IDDOC));
			RsVerbale = cdf.GetRSReadFromQuery_("select top 1 Id from CTL_DOC with(nolock) where TipoDoc=@tipoDoc and StatoFunzionale<>@statoFunzionale and Deleted=0 and JumpCheck=@check and LinkedDoc=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
		}
		else
		{
			if (INNESCO == "PDA")
			{
				sqlParams.Clear();
				sqlParams.Add("@tipoDoc", "VERBALEGARA");
				sqlParams.Add("@statofunzionale", "InLavorazione");
				sqlParams.Add("@check", contesto);
				sqlParams.Add("@doc", CInt(IDDOC));
				RsVerbale = cdf.GetRSReadFromQuery_("select top 1 Id from CTL_DOC with(nolock) where TipoDoc=@tipoDoc and StatoFunzionale=@statofunzionale and Deleted=0 and JumpCheck=@check and LinkedDoc=@doc", ApplicationCommon.Application.ConnectionString, sqlParams);
			}
			else
			{
				sqlParams.Clear();
				sqlParams.Add("@tipoDoc", "VERBALEGARA");
				sqlParams.Add("@statofunzionale", "InLavorazione");
				sqlParams.Add("@check", contesto);
				sqlParams.Add("@doc", CInt(IDDOC));
				RsVerbale = cdf.GetRSReadFromQuery_("select top 1 Id from CTL_DOC with(nolock) where TipoDoc=@tipoDoc and StatoFunzionale=@statofunzionale and Deleted=0 and JumpCheck=@check and IdDoc=@doc", ApplicationCommon.Application.ConnectionString, sqlParams);
			}
		}
	}
	catch
	{
		ShowError("Errore durante controllo esistenza verbale, ripetere l'operazione");
	}
	TSRecordSet? RS_TEMPLATE = null;
	if (RsVerbale is not null)
	{
		if (RsVerbale.RecordCount == 0)
		{
			//'--RECUPERO INFO DOCUMENTO ORIGNE (PDA,BANDO_SDA,.....)
			GetInfoDocOrigine();

			//'--RECUPERO IL TEMPLATE PER PARAMETRI INDIVIDUATI
			if(INNESCO != "CONTRATTO_GARA")
			{
				sqlParams.Clear();
				sqlParams.Add("@tipoDoc","VERBALETEMPLATE");
				sqlParams.Add("@statoFunzionale", "Pubblicato");
				RS_TEMPLATE = cdf.GetRSReadFromQuery_(" select * " + Environment.NewLine +
															" from CTL_DOC with(nolock) " + Environment.NewLine +
															" inner join Document_VerbaleGara with(nolock) on IdHeader=Id and  tipoverbale='" + contesto + "' and  (  ProceduraGara  like '%###" + ProceduraGara + "###%' ) and (  CriterioAggiudicazioneGara  like '%###" + CriterioAggiudicazioneGara + "###%' )	and (  CriterioFormulazioneOfferte  like '%###" + CriterioFormulazioneOfferte + "###%' ) " + Environment.NewLine +
															" where TipoDoc=@tipoDoc and Deleted=0 and StatoFunzionale=@statoFunzionale ", ApplicationCommon.Application.ConnectionString,sqlParams);
			}
			else
			{
				//'--fare una funzione sql 
				//'--Intersezione_Insiemi(param1,param2,sep)
				//'--restituisce la parte di intersezione
				//'--nel nostro caso se diversa vuota ok
				sqlParams.Clear();
				sqlParams.Add("@tipoDoc","VERBALETEMPLATE");
				sqlParams.Add("@statoFunzionale", "Pubblicato");
				string strSql_Template = " select * " + Environment.NewLine +
										" from ctl_doc with(nolock) " + Environment.NewLine +
										" inner join Document_VerbaleGara with(nolock) on IdHeader=id and tiposorgente=120 and tipoverbale='" + contesto + "' and  dbo.Intersezione_Insiemi (  ProceduraGara,'%###" + ProceduraGara + "###%','###') <>'' and  dbo.Intersezione_Insiemi (  CriterioAggiudicazioneGara, '%###" + CriterioAggiudicazioneGara + "###%','###' ) <>'' and dbo.Intersezione_Insiemi (  CriterioFormulazioneOfferte  , '%###" + CriterioFormulazioneOfferte + "###%','###' )  <>'' " + Environment.NewLine +
										" where tipodoc=@tipoDoc and deleted=0 and statofunzionale=@statoFunzionale ";
				//'response.write strSql_Template
				//'response.end
				RS_TEMPLATE = cdf.GetRSReadFromQuery_(strSql_Template, ApplicationCommon.Application.ConnectionString,sqlParams);				
			}
			//'--SE NON TROVA NESSUN TEMPLATE BLOCCO		
			if (RS_TEMPLATE is not null && RS_TEMPLATE.RecordCount == 0)
			{
				ShowError("Template non presente per i criteri della gara.");
			}
			if (INNESCO != "CONTRATTO_GARA")
			{
				if(TipoDoc == "MONOLOTTO")
				{
					TYPEDOC = "PDA";
				}
				else
				{
					TYPEDOC = "LOTTO";
				}
			}
			else
			{
				TYPEDOC = TipoDoc;
			}
			//'--SE TROVA 1 TEMPLATE CHIAMA LA STORED
			if (RS_TEMPLATE.RecordCount == 1)
			{
				htmlToReturn.Write($@"
					<script language=javascript>	
						param='ctl_library/Document/MakeDocFrom.asp?TYPE_TO=VERBALEGARA&IDDOC="+IDDOC+"&TYPEDOC="+TYPEDOC+"&BUFFER="+CStr(RS_TEMPLATE["Id"])+$@"';	
						opener.location= '../ctl_library/path.asp?KEY=document&url=' + encodeURIComponent(param  + '&lo=base' );
						self.close();
					</script>
				");
			}
			//'--SE TROVA PIU' di 1 TEMPLATE MOSTRA LA SCELTA
			if(RS_TEMPLATE.RecordCount >1)
			{
				//'strfilter = " tipoverbale = '" & contesto & "' and  (  ProceduraGara  like '%###" & ProceduraGara & "###%' ) and (  CriterioAggiudicazioneGara  like '%###" & CriterioAggiudicazioneGara & "###%' )	and (  CriterioFormulazioneOfferte  like '%###" & CriterioFormulazioneOfferte & "###%' )"
				string strfilter = " tipoverbale = '" + contesto + "' and dbo.Intersezione_Insiemi (  ProceduraGara  , '%###" + ProceduraGara + "###%','###' ) <> '' and dbo.Intersezione_Insiemi(  CriterioAggiudicazioneGara  , '%###" + CriterioAggiudicazioneGara + "###%','###' )	<> ''  and dbo.Intersezione_Insiemi(  CriterioFormulazioneOfferte  , '%###" + CriterioFormulazioneOfferte + "###%', '###' ) <> '' ";
				throw new ResponseRedirectException("../DASHBOARD/Viewer.asp?Table=SELEZIONA_VERBALE_PDA&IDENTITY=id&Jscript=VERBALETEMPLATE&TYPEDOC_START=" + TYPEDOC + "&DOC_START=" + IDDOC + "&DOCUMENT=VERBALETEMPLATE&PATHTOOLBAR=../customdoc/&AreaAdd=no&Caption=Seleziona Verbale&Height=0,100*,210&numRowForPag=20&Sort=&SortOrder=&Exit=si&Filter=" + URLEncode(strfilter), Response);
			}
		}
		else
		{
			//'--VERBALE GIA' ESISTENTE PER CONTESTO E IDDOC
			int idNewDoc = CInt(RsVerbale["Id"]!);
			//'--APRO IL NUOVO DOCUMENTO VERBALE DI GARA CREATO
			htmlToReturn.Write($@"
			<script language=javascript>
				param='ctl_library/Document/document.asp?UpdateParent=yes&MODE=SHOW&JScript=VERBALEGARA&DOCUMENT=VERBALEGARA&IDDOC={idNewDoc}';
				opener.location= '../ctl_library/path.asp?KEY=document&url=' + encodeURIComponent(param  + '&lo=base' ) ;
				self.close();
			</script>
			");
		}
	}
	//'--RECUPERO INFO DOCUMENTO ORIGNE
	void GetInfoDocOrigine()
	{
		TSRecordSet? Rs = null;
		switch (contesto.ToUpper())
		{
			case "AMMINISTRATIVO":
				IdPDA = IDDOC;
				break;
			case "TECNICO":
				//'set Rs = getRS( "select top 1 * from ctl_doc with(nolock) where tipodoc='PDA_MICROLOTTI' and ID=" & IDDOC )
				//'if Rs.recordcount > 0 then 
				if (TipoDoc == "MONOLOTTO")
				{
					IdPDA = IDDOC;
				}
				else
				{
					sqlParams.Clear();
					sqlParams.Add("@id", CInt(IDDOC));
					Rs = cdf.GetRSReadFromQuery_("select top 1 IdHeader from Document_MicroLotti_Dettagli with(nolock) where Id=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
					IdPDA = CStr(Rs["IdHeader"]);
				}
				break;
			case "ECONOMICO":
				//'set Rs = getRS( "select top 1 * from ctl_doc with(nolock) where tipodoc='PDA_MICROLOTTI' and ID=" & IDDOC )
				//'if Rs.recordcount > 0 then 	
				if (TipoDoc == "MONOLOTTO")
				{
					IdPDA = IDDOC;
				}
				else
				{
					sqlParams.Clear();
					sqlParams.Add("@id",IDDOC);
					Rs = cdf.GetRSReadFromQuery_("select top 1 IdHeader from Document_MicroLotti_Dettagli with(nolock) where Id=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
					IdPDA = CStr(Rs["IdHeader"]);
				}
				break;
		}

		if (INNESCO != "CONTRATTO_GARA")
		{
			//'--RECUPERO INFO BANDO DALLA PDA
			if (IdPDA == IDDOC || contesto.ToUpper() != "ECONOMICO")
			{
				try
				{
					sqlParams.Clear();
					sqlParams.Add("@id", IdPDA);
					Rs = cdf.GetRSReadFromQuery_("select top 1 CriterioAggiudicazioneGara,CriterioFormulazioneOfferte,ProceduraGara from CTL_DOC with(nolock) , document_pda_testata with(nolock) where ID=IDHEADER and  ID=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
				}
				catch
				{
					throw new Exception("Errore durante recupero PDA, ripetere l'operazione");

				}
				if (Rs.RecordCount == 0)
				{
					throw new Exception("PDA inesistente, ripetere l'operazione");
				}
				else
				{
					ProceduraGara = CStr(Rs["ProceduraGara"]);
					CriterioAggiudicazioneGara = CStr(Rs["CriterioAggiudicazioneGara"]);
					CriterioFormulazioneOfferte = CStr(Rs["CriterioFormulazioneOfferte"]);
				}
			}
			else
			{
				//'--RECUPERO LE INFO PER IL LOTTO
				try
				{
					sqlParams.Clear();
					sqlParams.Add("@id", IDDOC);
					Rs = cdf.GetRSReadFromQuery_("select W.CriterioAggiudicazioneGara,W.CriterioFormulazioneOfferte ,ProceduraGara from PDA_DRILL_MICROLOTTO_TESTATA_RIEPILOGO_VIEW W	inner join document_pda_testata PDA on W.idHeader = PDA.idHeader where id=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
				}
				catch
				{
					ShowError("Errore durante recupero info lotto, ripetere l'operazione");
				}
				if (Rs is not null)
				{
					if (Rs.RecordCount == 0)
					{
						ShowError("lotto inesistente, ripetere l'operazione");
					}
					else
					{
						ProceduraGara = CStr(Rs["ProceduraGara"]);
						CriterioAggiudicazioneGara = CStr(Rs["CriterioAggiudicazioneGara"]);
						CriterioFormulazioneOfferte = CStr(Rs["CriterioFormulazioneOfferte"]);
					}
				}
			}
		}
		else
		{
			sqlParams.Clear();
			sqlParams.Add("@id", IDDOC);
			string strSql = $"select GARA.id, DETT_GARA.ProceduraGara, DETT_GARA.CriterioFormulazioneOfferte {Environment.NewLine}from {Environment.NewLine}ctl_doc CONTR with (nolock) {Environment.NewLine}inner join ctl_doc COM with (nolock)  on COM.id=CONTR.LinkedDoc {Environment.NewLine}inner join ctl_doc PDA with (nolock)  on PDA.id=COM.LinkedDoc {Environment.NewLine}inner join ctl_doc GARA with (nolock)  on GARA.id=PDA.LinkedDoc {Environment.NewLine}inner join document_bando DETT_GARA with (nolock)  on DETT_GARA.idHeader = GARA.id {Environment.NewLine}where CONTR.id = @id";
			//'response.write strSql
			//'response.end
			Rs = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString, sqlParams);
			if (Rs is not null && Rs.RecordCount == 0)
			{
				ShowError("gara inesistente,impossibile creare il documento,ripetere l'operazione");
			}
			else
			{
				ProceduraGara = CStr(Rs["ProceduraGara"]);
				CriterioFormulazioneOfferte = CStr(Rs["CriterioFormulazioneOfferte"]);
				ID_GARA = CStr(Rs["id"]);
			}
			//'--recupero i lotti dal contratto
			sqlParams.Clear();
			sqlParams.Add("@id", IDDOC);
			sqlParams.Add("@tipoDoc", "CONTRATTO_GARA");
			strSql = "select  numerolotto from document_microlotti_dettagli  with (nolock) where idheader = @id and tipodoc=@tipoDoc";
			Rs = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString, sqlParams);
			if (Rs is not null && Rs.RecordCount == 0)
			{
				ShowError("lotti non presenti sul contratto, ripetere l'operazione");
			}
			else
			{
				Rs.MoveFirst();
				while (!Rs.EOF)
				{
					if (!string.IsNullOrEmpty(ListaLotti))
					{
						ListaLotti = ListaLotti + ",";
					}
					ListaLotti = ListaLotti + CStr(Rs["numerolotto"]);
					Rs.MoveNext();
				}
			}
			//'response.write ListaLotti
			//'response.end
			//
			//'--recupero CriterioAggiudicazioneGara dei lotti presenti sul contratto
			sqlParams.Clear();
			sqlParams.Add("@id", ID_GARA);
			strSql = "select distinct CriterioAggiudicazioneGara from BANDO_GARA_CRITERI_VALUTAZIONE_PER_LOTTO where idBando = @id and N_Lotto in (" + ListaLotti + ")";
			Rs = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString, sqlParams);
			if (Rs is not null && Rs.RecordCount == 0)
			{
				ShowError("lotti non presenti sulla gara, ripetere l'operazione");
			}
			else
			{
				CriterioAggiudicazioneGara = string.Empty;
				Rs.MoveFirst();
				while (!Rs.EOF)
				{
					if (!string.IsNullOrEmpty(CriterioAggiudicazioneGara))
					{
						CriterioAggiudicazioneGara = $"{CriterioAggiudicazioneGara}###";
					}
					CriterioAggiudicazioneGara = $"{CriterioAggiudicazioneGara}{CStr(Rs["CriterioAggiudicazioneGara"])}";
					Rs.MoveNext();
				}
			}
		}
	}

	//'--MOSTRA ERRORE
	void ShowError(string  ErrText)
	{
		string strErroreCompleto = "" + " - " + "";
		string strSqlLog = "INSERT INTO CTL_LOG_PROC " +
							"(DOC_NAME, PROC_NAME, id_Doc, idPfu, Parametri, data) VALUES " +
							"('VERBALE_GARA','Crea_Verbale_seduta.asp'," + IDDOC + "," + session["idpfu"] + ",'" + Replace(strErroreCompleto, ",", "") + "',getdate())";

		CommonDbFunctions cdf = new();
		cdf.Execute(strSqlLog, ApplicationCommon.Application.ConnectionString);

		throw new ResponseRedirectException("../ctl_library/MessageBoxWin.asp?ML=yes&MSG=" + ErrText + "&CAPTION=Errore&ICO=2", Response);
	}	
}
@Html.Raw(htmlToReturn.Out())
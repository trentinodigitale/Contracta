@page "/test/download.asp"
@using eProcurementNext.Application
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using static eProcurementNext.CommonDB.Basic
@inject eProcurementNext.Authentication.IEprocNextAuthentication _JWTauth;
@model eProcurementNext.Razor.Pages.test_downloadModel
@{
    eProcurementNext.CommonModule.EprocResponse htmlToReturn = new eProcurementNext.CommonModule.EprocResponse();

    //LETTURA FILE in "chunk" e scrittura sul body della response
    //string strFilePath = @"C:\Users\samuele.cipriani\temp.zip";
    //Response.Headers.TryAdd("Content-Disposition", "attachment; filename=download.zip");
    //FileStream fs = new FileStream(strFilePath, FileMode.Open, FileAccess.Read);
    //byte[] b = new byte[1024];
    //int len;
    //int counter = 0;
    //while (true)
    //{
    //    len = fs.Read(b, 0, b.Length);
    //    byte[] c = new byte[len];
    //    b.Take(len).ToArray().CopyTo(c,0);
    //    htmlToReturn.BinaryWrite(HttpContext, c);
    //    if(len == 0 || len < 1024){
    //        break;
    //    }
    //    counter++;
    //}
    //
    //fs.Close();

    //per file < 2GB può essere usato anche:
    //htmlToReturn.BinaryWrite(HttpContext, System.IO.File.ReadAllBytes(strFilePath));




    //LETTURA file blob da db e download
    Response.Headers.TryAdd("Content-Disposition", "attachment; filename=download.pdf");
    CommonDbFunctions cdb = new CommonDbFunctions();
    //TSRecordSet rs = cdb.GetRSReadFromQuery_("select * from ctl_attach with(nolock)  where att_hash = '19786AB31F5D40BFB49000AF2E7547BF' ", ApplicationCommon.Application["ConnectionString"]);

    //saveFileFromRecordSet("ImageBLOB", "_Test", "Id", "3", HttpContext.Response.Body);


    //htmlToReturn.BinaryWrite(HttpContext, rs.Fields["Att_Obj"]);


}
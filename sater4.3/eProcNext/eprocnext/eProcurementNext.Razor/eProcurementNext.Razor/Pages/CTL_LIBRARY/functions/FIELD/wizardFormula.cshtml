@page "/CTL_LIBRARY/functions/FIELD/wizardFormula.asp"
@inject eProcurementNext.Session.ISession session;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.intestModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.cnvModel;
@* <!-- #Include File="../../../CTL_Library/Functions/intest.inc" --> *@
@* <!-- #Include File="../../../CTL_Library/Functions/CNV.inc" --> *@
@using eProcurementNext.Session
@using Microsoft.VisualBasic;
@using System.Web
@model eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.FIELD.wizardFormulaModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new(GetParamURL(HttpContext.Request.QueryString.ToString(), "XML_ATTACH_TYPE"));
}
@{

	if (GetParamURL(Request.QueryString.ToString(), "test").ToUpper() == "YES")
	{
		htmlToReturn.Write($@"<link rel=""stylesheet"" href=""../../Themes/main.css"" type=""text/css"" media=""screen,projection""/>");
	}
	string riga = GetParamURL(Request.QueryString.ToString(), "riga");
	string CONTESTO = GetParamURL(Request.QueryString.ToString(), "CONTESTO");
	if(string.IsNullOrEmpty(riga))
	{
		htmlToReturn.Write("parametro riga obbligatorio");
		throw new ResponseEndException(htmlToReturn.Out(), Response, "parametro riga obbligatorio");
	}

	htmlToReturn.Write($@"<input type=""hidden"" id=""riga_wizard_formula"" value=""" + riga + $@"""/>");
	htmlToReturn.Write($@"<script type=""text/javascript"">");

	htmlToReturn.Write($@"var rowCalcolo = '" + riga + $@"';");

	if(CONTESTO == "VINCOLI")
	{
		htmlToReturn.Write($@"


			var descrizioneVincolo = getCampoVincoli('Descrizione').value;

			getCampiNumericiVINCOLI()

			getObj('Descrizione').value = descrizioneVincolo;
			getObj('Formula').value = getCampoVincoli('Espressione' ).value;");
	}
	else
	{
		htmlToReturn.Write($@"
				var descrizioneCalcolo = getCampoCalcoli('Descrizione').value;
				var calcCalcolo = getCampoCalcoli('DZT_Name').value;

				getCampiNumerici()

				getObj('Descrizione').value = descrizioneCalcolo;
				getObj('Formula').value = getCampoCalcoli('Formula' ).value;
				getObj('DZT_Name').value = getCampoCalcoli('DZT_Name' ).value;");
	}
	htmlToReturn.Write($@"
		completaVisualizzazione();

		function getCampoCalcoli(field)
		{{
			return getObj( 'RCALCOLIGrid_' + rowCalcolo + '_' + field );
		}}

		function getCampoVincoli(field)
		{{
			return getObj( 'RVINCOLIGrid_' + rowCalcolo + '_' + field );
		}}

		function addCampo()
		{{

			var campo = getObj('Operatore1');

			var indexSel = campo.selectedIndex;

			if ( indexSel == '' )
			{{
				alert('Selezionare un operando');
			}}
			else
			{{
				var lista = campo.options;
				var valueCampo = campo.value;
				var testoSelezionato = lista[indexSel].text;

				getObj('Formula').value = getObj('Formula').value + '[' + testoSelezionato + ']';
			}}

		}}

		function addOperatore()
		{{
		");

	if(CONTESTO == "VINCOLI")
	{
		htmlToReturn.Write($@"var op = getObj('OperatoreVincoli').value") ;
	}

	else
	{
		htmlToReturn.Write($@"var op = getObj('OperatoreFormule').value");
	}
	htmlToReturn.Write($@"



			if ( op == '' )
			{{
				alert('Selezionare un operatore');
			}}
			else
			{{
				getObj('Formula').value = getObj('Formula').value + op ;
			}}

		}}

		function completaVisualizzazione()
		{{
			getObj('div_loading').style.display = 'none';
			getObj('main-table').style.display = '';
		}}

		function getCampiNumerici()
		{{
			try 
			{{
				var destinazione1 = getObj('Operatore1');
				var destinazione2 = getObj('DZT_Name');
				var numrow = GetProperty( getObj('MODELLIGrid') , 'numrow');

			 	for( k = 0 ; k <= numrow ; k++ )
			 	{{

					var campo = getObj('RMODELLIGrid_' + k +'_DZT_Name');

					var indexSel = campo.selectedIndex;
					var lista = campo.options;
					var valueCampo = campo.value;
					var testoSelezionato = lista[indexSel].text;

					if (testoSelezionato.substring(0, 8) == 'Number -')
					{{
						var descSelezionato = getObj('RMODELLIGrid_' + k + '_Descrizione').value;

						var option = document.createElement(""option"");
						var option2 = document.createElement(""option"");

						option.text = descSelezionato;
						option.value = valueCampo;

						option2.text = descSelezionato;
						option2.value = valueCampo;

						destinazione1.add(option);

						destinazione2.add(option2);

					}}



			 	}}

			}}
			catch( e )
			{{
			}}
		}}

		function getCampiNumericiVINCOLI()
		{{
			try 
			{{
				var destinazione1 = getObj('Operatore1');

				var numrow = GetProperty( getObj('MODELLIGrid') , 'numrow');

			 	for( k = 0 ; k <= numrow ; k++ )
			 	{{			 	
					var campo = getObj('RMODELLIGrid_' + k +'_DZT_Name');

					var indexSel = campo.selectedIndex;
					var lista = campo.options;
					var valueCampo = campo.value;
					var testoSelezionato = lista[indexSel].text;

					if (testoSelezionato.substring(0, 8) != 'Attach -' )
					{{
						var descSelezionato = getObj('RMODELLIGrid_' + k + '_Descrizione').value;

						var option = document.createElement(""option"");				

						option.text = descSelezionato;
						option.value = valueCampo;			

						destinazione1.add(option);		

					}}

			 	}}

			}}
			catch( e )
			{{
			}}
		}}

	</script>");
	htmlToReturn.Write($@"
	<style>
		.loading
		{{
			background: white url(../images/ajax-loading_big.gif) no-repeat center center;
			height: 100%;
			width: 100%;
			left: 0px;
			top: 0px;
			margin: 0 0 0 0;
			z-index: 1000;
		}}
	</style>");
	htmlToReturn.Write($@"<div id=""div_loading"" class=""loading"">");
	htmlToReturn.Write("</div>");
	htmlToReturn.Write($@"<table id=""main-table"" style=""display:none"" border=""0"" width=""100%"" height=""97%"">");
	htmlToReturn.Write("<tr>");
	htmlToReturn.Write("<td>");
	//on error goto 0
	//session
	//dynamic ObjSession = session["Session"];
	string strTitle = "";
	Caption objCaption;
	objCaption = new Caption();
	if(CONTESTO == "VINCOLI" )
	{
		strTitle = ApplicationCommon.CNV("Definizione Vincoli");
	}
	else
	{
		strTitle = ApplicationCommon.CNV("Formula - Calcolatrice");
	}
	objCaption.Init(session);
	objCaption.strPath = "../images/Caption/";
	objCaption.OnExit = "";
	objCaption.Text = strTitle;
	//Response
	objCaption.Html(htmlToReturn);
	htmlToReturn.Write("</td>");
	htmlToReturn.Write("</tr>");
	htmlToReturn.Write("<tr>");
	htmlToReturn.Write($@"<td style=""padding:5px"">");

	htmlToReturn.Write("<br/>");
	//'--recupero modello testata
	LibDbModelExt objDB;

	//Dictionary<string, Field> mp_ColumnsC;
	//Dictionary<string, Grid_ColumnsProperty> mp_ColumnsPropertyC;

	Model objMod = null;
	objDB = new LibDbModelExt();

	if(CONTESTO == "VINCOLI")
	{
		objMod = objDB.GetFilteredModelCTL("WIZARD_VINCOLI_TESTATA",session["strSuffLing"],0,session,0, ApplicationCommon.Application.ConnectionString, true);
	}
	else
	{
		objMod = objDB.GetFilteredModelCTL("WIZARD_FORMULA_TESTATA", session["strSuffLing"], 0, session, 0, ApplicationCommon.Application.ConnectionString, true);
	}

	objMod.Html(htmlToReturn);
	htmlToReturn.Write("<br/><br/>");

	htmlToReturn.Write($@"
			</td>
		</tr>
	
		<tr>
	
			<td>
		
				<ul class=""Toolbar"">
					<li class=""Toolbar_button"">
						<a id=""WIZARD_FORMULA_TESTATA_TOOLBAR_AGGIUNGI_CAMPO"" class=""button_link"" onclick=""Javascript:addCampo();return false;"" href=""#"" title=""Aggiungi operando"">Aggiungi operando</a>
					</li>
					<li class=""Toolbar_button"">
						<a id=""WIZARD_FORMULA_TESTATA_TOOLBAR_AGGIUNGI_OPERANDO"" class=""button_link"" onclick=""Javascript:addOperatore();return false;"" href=""#"" title=""Aggiungi operatore"">Aggiungi operatore</a>
					</li>
				</ul>
	
			</td>
	
	
		</tr>
	
		<tr>
	
			<td>
		
				<textarea width=""97%"" cols=""20"" rows=""9"" name=""Formula"" id=""Formula"" class=""TextArea"" style=""font-size:1em;width:97%;margin:5px""></textarea>
		
			</td>
	
		</tr>
	
		<tr>
	
			<td height=""100%"">
			</td>
	
		</tr>

	</table>
	");

}@Html.Raw(htmlToReturn.Out())
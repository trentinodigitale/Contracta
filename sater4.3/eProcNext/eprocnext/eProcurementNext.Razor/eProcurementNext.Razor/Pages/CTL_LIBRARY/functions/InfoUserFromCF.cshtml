@page "/CTL_LIBRARY/functions/InfoUserFromCF.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.HTML.BasicFunction;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.verificaBrowserModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@model eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.InfoUserFromCFModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new(GetParamURL(HttpContext.Request.QueryString.ToString(), "XML_ATTACH_TYPE"));
	CommonDbFunctions cdb = new CommonDbFunctions();

}
@{
	string strSQL = string.Empty;

	string strCodiceFiscale = GetParamURL(Request.QueryString.ToString(), "CodiceFiscale");
	string utenteidpfu = GetParamURL(Request.QueryString.ToString(), "utenteidpfu");
	//'-------------------------------------
	//'-- VALIDAZIONE DELL'INPUT UTENTE  ---
	//'-------------------------------------

	validate( "CodiceFiscale", strCodiceFiscale , TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0,HttpContext,session);
	validate( "utenteidpfu", utenteidpfu , TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 0,HttpContext,session);

	//--RICERCA PER CODICE FISCALE
	var sqlParams = new Dictionary<string, object?>();
	if (!string.IsNullOrEmpty(strCodiceFiscale))
	{
		//'--cerco prima tra gli utenti dell'azienda collegata

		sqlParams.Add("@idazi",  CInt(session["IDAZI"]));
		sqlParams.Add("@CodiceFiscale",   strCodiceFiscale);
		strSQL = "select * from DASHBOARD_VIEW_UTENTI where pfuIdAzi=@idazi and pfuCodiceFiscale=@CodiceFiscale";
		TSRecordSet rs = cdb.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString, sqlParams);
		if (rs.RecordCount > 0)
		{
			rs.MoveFirst();
			htmlToReturn.Write($"{CStr(rs["aziragionesociale"])}#{CStr(rs["pfunomeutente"])}#{CStr(rs["pfucognome"])}#{CStr(rs["pfuRuoloAziendale"])}#{CStr(rs["idpfu"])}#{CStr(rs["pfuE_Mail"])}#{CStr(rs["pfucodicefiscale"])}#");
		}
		else
		{
			sqlParams.Clear();
			sqlParams.Add("@codicefiscale", strCodiceFiscale);
			//'--cerco in tutti gli utenti
			strSQL = "select top 1 * from DASHBOARD_VIEW_UTENTI where pfuCodiceFiscale=@codicefiscale";
			rs = cdb.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString, sqlParams);
			if (rs.RecordCount > 0)
			{
				rs.MoveFirst();
				htmlToReturn.Write($"{CStr(rs["ragionesociale"])}#{CStr(rs["nome"])}#{CStr(rs["cognome"])}#{CStr(rs["RuoloUtente"])}##{CStr(rs["EMAIL"])}#{CStr(rs["codicefiscale"])}#");
			}
			else
			{
				sqlParams.Clear();
				sqlParams.Add("@codicefiscale", strCodiceFiscale);
				//--vado a controllare se esiste tra gli utenti non registrati inseriti nelle commissioni
				strSQL = "select top 1 * from DASHBOARD_VIEW_UTENTI_COMMISSIONI_NONCENSITI where CodiceFiscale=@codicefiscale";
				rs = cdb.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString, sqlParams);
				if (rs.RecordCount >0)
				{
					rs.MoveFirst();
					htmlToReturn.Write($"{CStr(rs["ragionesociale"])}#{CStr(rs["nome"])}#{CStr(rs["cognome"])}#{CStr(rs["RuoloUtente"])}##{CStr(rs["EMAIL"])}#{CStr(rs["codicefiscale"])}#");
				}
				else
				{
					htmlToReturn.Write("");
				}

			}
		}
	}

	//--FINE RICERCA PER CODICE FISCALE

	//'--INIZIO RICERCA PER IDPFU

	if (!string.IsNullOrEmpty(utenteidpfu))
	{
		//'--cerco prima tra gli utenti dell'azienda collegata
		sqlParams.Clear();
		sqlParams.Add("@idazi", CInt(session["IDAZI"]));
		sqlParams.Add("@idutente", CInt(utenteidpfu));
		strSQL = "select * from DASHBOARD_VIEW_UTENTI where pfuIdAzi=@idazi and IdPfu = @idutente";
		TSRecordSet rs  = cdb.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString, sqlParams);

		if (rs.RecordCount >0)
		{
			rs.MoveFirst();
			htmlToReturn.Write($"{CStr(rs["aziragionesociale"])}#{CStr(rs["pfunomeutente"])}#{CStr(rs["pfucognome"])}#{CStr(rs["pfuRuoloAziendale"])}#{CStr(rs["idpfu"])}#{CStr(rs["pfuE_Mail"])}#{CStr(rs["pfucodicefiscale"])}#");
		}
		else
		{
			//--cerco in tutti gli utenti
			//'strSQL = "select * from DASHBOARD_VIEW_UTENTI where idpfu=" & cstr(clng(utenteidpfu))
			//'set rs = objDB.GetRSReadFromQuery( cstr(strSQL)  , cstr(session("Session")(8)))
			//'if rs.recordcount > 0 then
			//
			//'	rs.movefirst
			//'	Response.write  rs("aziragionesociale").value & "#" & rs("pfunomeutente").value & "#" & rs("pfucognome").value & "#" & rs("pfuRuoloAziendale").value  & "#" & rs("idpfu").value & "#" & rs("pfuE_Mail").value & "#" & rs("pfucodicefiscale").value
			//	
			//'else			
			//	'--vado a controllare se esiste tra gli utenti non registrati inseriti nelle commissioni
			//'	strSQL = "select * from DASHBOARD_VIEW_UTENTI_COMMISSIONI_NONCENSITI where codicefiscale='" & replace(strCodiceFiscale,"'","''") & "'"
			//'	set rs = objDB.GetRSReadFromQuery( cstr(strSQL)  , cstr(session("Session")(8)))		
			//'	if rs.recordcount > 0 then		
			//'		rs.movefirst
			//'		Response.write  rs("ragionesociale").value & "#" & rs("nome").value & "#" & rs("cognome").value & "#" & rs("RuoloUtente").value  & "#" & "#" & rs("EMAIL").value & "#" & rs("codicefiscale").value
			//
			//'	else
			//
			//'		Response.write  ""
			//'	end if
			//
			//'end if
			htmlToReturn.Write("");
		}
	}
	//'--FINE RICERCA PER IDPFU
	//Response.end
	throw new ResponseEndException(htmlToReturn.Out(), Response, "");

}@Html.Raw(htmlToReturn.Out())
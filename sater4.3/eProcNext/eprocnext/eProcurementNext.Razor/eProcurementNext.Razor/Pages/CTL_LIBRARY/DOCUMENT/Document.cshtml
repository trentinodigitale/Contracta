@page "/CTL_LIBRARY/DOCUMENT/Document.asp"
@inject eProcurementNext.Session.ISession session;
@inject ITabManage _tabManage;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using Microsoft.VisualBasic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.DocumentPermissionModel
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.masterPageToolsModel
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.ctl_profiler
@using static eProcurementNext.Session.SessionMiddleware
@inject IConfiguration configuration;
@inject eProcurementNext.Application.IEprocNextApplication _application;
@model eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.DocumentModel
@{
    //MongoLog mongoLog = new MongoLog();
    //mongoLog.DropCollection();
    CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();
}
@{
    //'*******************************************
    //'*****  VALIDAZIONE DELL'INPUT UTENTE  *****
    //'*******************************************
    validate( "DOCUMENT", Strings.Replace(GetParamURL(Request.QueryString.ToString(), "DOCUMENT"),".","_") , TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);
    validate( "NEW_WIN", Strings.Replace(GetParamURL(Request.QueryString.ToString(), "NEW_WIN"),".","_") , TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0, HttpContext, session);
    validate( "MODE", GetParamURL(Request.QueryString.ToString(), "MODE") , TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);
    validate("IDROW", Strings.Replace(Strings.Replace(Strings.Replace(Strings.Replace(GetParamURL(Request.QueryString.ToString(), "IDROW"), "~~~", ","), "_", ","), "#", ","), @"\", ","), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_LISTANUMERI, "", 0, HttpContext, session);

    //'--se dovesse arrivare -1 per qualche motivo, lo facciamo diventare 1 solo per fare il test, non utilizzo il tipo numerico perch� iddoc potrebbe anche essere "new" o simile
    validate( "IDDOC", Strings.Replace(GetParamURL(Request.QueryString.ToString(), "IDDOC"),"-","") , TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);

    //'-- Parametro della sezione dettagli
    validate( "TABLEFROMADD", GetParamURL(Request.QueryString.ToString(), "TABLEFROMADD") , TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);
}
@{
    Layout = ConfigurationServices.GetKey("LayoutVersion", "_masterPage");
}
@{
    dynamic TimeStartPage = DateTime.Now.Ticks;
}
@{
    //'-- se ACCESS_GUID IN SESSIONE VALORIZZATO CONTROLLO CHE POSSO APRIRE SOLO IL DOCUMENTO CON I GUID (POSSONO ESSERE N) PRESENTE IN ACCESS_GUID
    if (!string.IsNullOrEmpty(CStr(session["ACCESS_GUID"])))
    {

        //set objDBCheck = createobject( "ctldb.clsTabManage" )
        string strSqlCheck;
        strSqlCheck = "select id from CTL_DOC with (nolock) where  id = " + GetParamURL(Request.QueryString.ToString(), "IDDOC") + " AND '" + session["ACCESS_GUID"].Replace("'", "''") + "' like '%' + cast(guid as varchar(max)) + '%' ";

        TSRecordSet rsCheck = cdf.GetRSReadFromQuery_(CStr(strSqlCheck), ApplicationCommon.Application["ConnectionString"]);

        if (rsCheck.RecordCount == 0)
        {
            throw new ResponseRedirectException($"/{ApplicationCommon.Application["NOMEAPPLICAZIONE"]}/blocked.asp", Response);//Response.redirect "/" & application("NOMEAPPLICAZIONE") & "/blocked.asp"	
        }
    }

    //'-------------------------------------------
    //'--CONTROLLO PERMESSO APERTURA DOCUMENTO ---
    //'-------------------------------------------
    string extraParam = CStr(GetParamURL(Request.QueryString.ToString(), "PARAM"));
    string strCommand = CStr(GetParamURL(Request.QueryString.ToString(), "COMMAND"));

    //'response.write "QS:" & request.form
    //'response.end

    //'--se � un salvataggio oppure un processo e il form � vuoto traccio come utilizzo fraudolento
    if (strCommand == "SAVE" ||  strCommand == "PROCESS" ) {
        if(!Request.HasFormContentType/*request.form.count = 0 */) {

            traceAttack("Operazione di " + strCommand + " sul documento non consentita con form vuoto.",session,HttpContext);
        }

        //'-- se � attivo il meccanismo di prevenzione degli attacchi "CROSS SITE REQUEST FORGERY"
        if (!string.IsNullOrEmpty(CStr(session["TS_NomeCampoToken"]))) {
            if( Request.HasFormContentType && (GetValueFromForm(Request, CStr(session["TS_NomeCampoToken"])) != CStr(session["TS_ValoreCampoToken"])) )  {

                traceAttack("Tentativo di CROSS SITE REQUEST FORGERY", session, HttpContext);
            }
        }
    }

    if (string.IsNullOrEmpty(extraParam) && !string.IsNullOrEmpty(strCommand)) {
        extraParam = $"{extraParam}@@@{strCommand}";
    }

    DocPermission(HttpContext, GetParamURL(Request.QueryString.ToString(), "IDDOC"), GetParamURL(Request.QueryString.ToString(), "DOCUMENT"), extraParam, session, htmlToReturn, Request, Response);

    if(GetParamURL(Request.QueryString.ToString(), "MODE" ) == "OPEN" ) {

        //on error resume next

        //' validate (nomeParametro, valoreDaValidare, tipoDaValidare, sottoTipoDaValidare, regExp, obblig )
        validate("IDDOC", GetParamURL(Request.QueryString.ToString(), "IDDOC"), TIPO_PARAMETRO_NUMERO, CInt(""), "", 0, HttpContext, session);

        TSRecordSet rs;

        rs = cdf.GetRSReadFromQuery_("select * from CTL_DOC_READ with(nolock) where DOC_NAME = '" + GetParamURL(Request.QueryString.ToString(), "DOCUMENT").Replace("'", "''") + "' AND id_Doc = " + GetParamURL(Request.QueryString.ToString(), "IDDOC") + " AND  idPfu = " + session[eProcurementNext.Session.SessionProperty.IdPfu], ApplicationCommon.Application["ConnectionString"]); 
        if (rs.RecordCount == 0){

            _tabManage.ExecSql("if not exists (  select * from CTL_DOC_READ with(nolock) where " +
                 " DOC_NAME = '" + GetParamURL(Request.QueryString.ToString(), "DOCUMENT").Replace("'", @"''") + "' AND id_Doc = " + GetParamURL(Request.QueryString.ToString(), "IDDOC") + " AND  idPfu = " + session[eProcurementNext.Session.SessionProperty.IdPfu] +
                 "	) insert into CTL_DOC_READ ( DOC_NAME , id_Doc , idPfu ) values ('" + GetParamURL(Request.QueryString.ToString(), "DOCUMENT").Replace("'", "''") + "', " + GetParamURL(Request.QueryString.ToString(), "IDDOC") + " , " + session[eProcurementNext.Session.SessionProperty.IdPfu] + " )", ApplicationCommon.Application["ConnectionString"]);

            //'response.write ucase(cstr(Request.QueryString("UpdateParent")))
            //'response.end

        }

        //set objDBRead =nothing
        //on error goto 0
    }

    string titoloDocumento = string.Empty;

    //set obDB = createobject( "ctldb.clsTabManage" )
    //'--Recupero dalla configurazione del Documento eventuale Colonna che contiene il titolo del documento
    TSRecordSet rsTmp = cdf.GetRSReadFromQuery_("Select dbo.GetValue('Custom_caption',DOC_Param) as nome_colonna_caption,DOC_Table,doc_descml,doc_fieldID , DOC_PARAM  from Lib_Documents where DOC_ID='" + GetParamURL(Request.QueryString.ToString(), "DOCUMENT").Replace("'", "''") + "'", ApplicationCommon.Application["ConnectionString"]);
    if (rsTmp.RecordCount > 0 ){

        rsTmp.MoveFirst();
        if (!string.IsNullOrEmpty(CStr(rsTmp["nome_colonna_caption"])) && UCase(Strings.Left(GetParamURL(Request.QueryString.ToString(), "IDDOC"), 3)) != "NEW" ){
            TSRecordSet rsTmp2 = cdf.GetRSReadFromQuery_( "Select ISNULL(" + CStr(rsTmp["nome_colonna_caption"]) + ",'')  as titolodoc from " + CStr(rsTmp["DOC_Table"]) + " where " + CStr(rsTmp["doc_fieldID"]) + " ='" + GetParamURL(Request.QueryString.ToString(), "IDDOC").Replace("'","''") + "'", ApplicationCommon.Application["ConnectionString"]);
            if (rsTmp2.RecordCount > 0){// then 

                rsTmp2.MoveFirst();
                titoloDocumento = CStr(rsTmp2["titolodoc"]);
            }
        }

        //setParamJS(GetParam(CStr(rsTmp.Fields["DOC_PARAM"]), "JSCRIPT"));
        ViewData["mp_DocumentParamJS"] = GetParam(CStr(rsTmp["DOC_PARAM"]), "JSCRIPT");

        if (string.IsNullOrEmpty(titoloDocumento)){
            titoloDocumento = CStr(rsTmp["doc_descml"]);
        }
    }

    //set rsTmp = nothing
    //set rsTmp2 = nothing
    ViewData["Title"] = titoloDocumento;//Passare titolo della pagina al Layout (_masterPage.cshtml)
    ViewData["pathRoot"] = "../../";//Passare la pathRoot al Layout (_masterPage.cshtml)


    //call drawMasterPage("../../",titoloDocumento)

    string idDoc = "";
    eProcurementNext.Document.CTLDOC.Document document = new eProcurementNext.Document.CTLDOC.Document(HttpContext, session, htmlToReturn);

    idDoc = document.run(session, htmlToReturn);

    if(GetParamURL(Request.QueryString.ToString(), "OUTPUT") != "NO" ){

        string mp_idDoc = GetParamURL(Request.QueryString.ToString(), "IDDOC");
        string mp_queryString = GetQueryStringFromContext(Request.QueryString);

        if(!string.IsNullOrEmpty(CStr(idDoc) )){
            mp_queryString = Strings.Replace(mp_queryString, "&IDDOC=" + mp_idDoc, "", 1, -1, Microsoft.VisualBasic.CompareMethod.Text);
            mp_queryString = Strings.Replace(mp_queryString, "IDDOC=" + mp_idDoc, "", 1, -1, Microsoft.VisualBasic.CompareMethod.Text);
            mp_queryString = mp_queryString + "&IDDOC=" + idDoc;
        }

        if (CStr(GetParamURL(Request.QueryString.ToString(), "UPD_STACK")) != "NO" ){
            stackUpdateCurrentPosition("document", "ctl_library/document/document.asp?" + mp_queryString, titoloDocumento, session, HttpContext);
        }
    }	

    //'---- DISABILITO IL SUBMIT DEL FORM
    htmlToReturn.Write($@"
	<script> try{{getObj('FORMDOCUMENT').onsubmit = function() {{ return false }} ;}}catch(e){{}}; 
    </script>
	");

    if (GetParamURL(Request.QueryString.ToString(), "NEW_WIN" ) == "YES" ){
        htmlToReturn.Write($@"<script language=""javascript"">");
        htmlToReturn.Write($@"BrowseInPage = 0;");
        htmlToReturn.Write($@"</script>");
    }
    //'-- TRACCIAMO IL TEMPO DI ESECUZIONE DELA PAGINA
    Write_CTL_Profiler("Document.ASP", "", "", Request, TimeStartPage, configuration, _application);
    //mongoLog.Insert("Caricamento totale document", TimeStartPage, DateTime.Now.Ticks);
}
@Html.Raw(htmlToReturn.Out())
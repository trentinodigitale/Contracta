@page "/CTL_LIBRARY/DOCUMENT/ToPrintDocument.asp"
@inject eProcurementNext.Session.ISession session;
@inject ITabManage _tabManage;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using Microsoft.VisualBasic;
@using eProcurementNext.Razor;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.DocumentPermissionModel
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	Layout = ConfigurationServices.GetKey("LayoutVersion", "_masterPage");
}
@{
    CommonDbFunctions cdf = new CommonDbFunctions();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new EprocResponse();
}
@{

    validate("TYPEDOC", GetParamURL(Request.QueryString.ToString(), "TYPEDOC"), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);
    validate("IDDOC", Strings.Replace(GetParamURL(Request.QueryString.ToString(), "IDDOC"), "-", ""), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);
    validate( "IDROW", GetParamURL(Request.QueryString.ToString(), "IDROW") , TIPO_PARAMETRO_NUMERO, SOTTO_TIPO_VUOTO, "", 0,HttpContext, session);

    string docToValidate = CStr(GetParamURL(Request.QueryString.ToString(), "TYPEDOC"));

    if (string.IsNullOrEmpty(docToValidate)) {
        docToValidate = CStr(GetParamURL(Request.QueryString.ToString(), "DOCUMENT"));
    }

    //'-------------------------------------------
    //'--CONTROLLO PERMESSO APERTURA DOCUMENTO ---
    //'-------------------------------------------
    string extraParam = CStr(GetParamURL(Request.QueryString.ToString(), "PARAM"));
    string strCommand = CStr(GetParamURL(Request.QueryString.ToString(), "COMMAND"));

    //'Response.Write extraParam
    //'Response.end

    if (string.IsNullOrEmpty(extraParam) && !string.IsNullOrEmpty(strCommand)){
        extraParam = extraParam + "@@@" + strCommand;
    }

    //'--controllo permesso apertura documento
    DocPermission(HttpContext, GetParamURL(Request.QueryString.ToString(), "IDDOC"), CStr(docToValidate), extraParam, session, htmlToReturn, Request, Response);

    CheckCanSign(htmlToReturn, session, HttpContext,Request);

    htmlToReturn.Write($@"
        <script type=""text/javascript"">

	        var InToPrintDocument = 1;

        </script>
    ");

    string titoloDocumento = "";


    //set obDB = createobject( "ctldb.clsTabManage" )
    CommonDbFunctions cdb = new CommonDbFunctions();
    TSRecordSet rsTmp = cdb.GetRSReadFromQuery_("Select * from Lib_Documents where DOC_ID='" + Strings.Replace(GetParamURL(Request.QueryString.ToString(), "DOCUMENT"), "'", "''") + "'", ApplicationCommon.Application["ConnectionString"]);

    if (rsTmp.RecordCount > 0) {

        rsTmp.MoveFirst();

        titoloDocumento = CStr(rsTmp.Fields["doc_descml"]);

    }
    ViewData["Title"] = titoloDocumento;//Passare titolo della pagina al Layout (_masterPage.cshtml)
    ViewData["pathRoot"] = "../../";//Passare la pathRoot al Layout (_masterPage.cshtml)

    //set rsTmp = nothing


    //call drawMasterPage("../../",titoloDocumento)



    //public sub drawContent()

    //'call stackUpdateCurrentPosition("document","ctl_library/document/toPrintDocument.asp?" & request.querystring ,titoloDocumento)

    //'-- Funzione specifica per ogni pagina di template
    //ServerPageAccess "ctldoc.document"

    eProcurementNext.Document.CTLDOC.Document temp = new eProcurementNext.Document.CTLDOC.Document(HttpContext, session, htmlToReturn);
    temp.run(session, htmlToReturn);
    //'--faccio abandon se sessione utente vuota o -20
    if (CStr(session["IdPfu"]) == "" || CStr(session["IdPfu"]) == "-20" || CStr(session["IdPfu"]) == "-10") {
        
        MainGlobalAsa.SessionAbandon(session);
        //session.abandon();
    }

//end sub


}
@Html.Raw(htmlToReturn.Out())		
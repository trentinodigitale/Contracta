@page "/AVCP/AVCP_ProduciXML.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.CommonDB.Basic;
@using Microsoft.VisualBasic;
@using System.Diagnostics
@using eProcurementNext.Core.Storage
@using eProcurementNext.Razor;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.intestModel;
@model eProcurementNext.Razor.Pages.AVCP.AVCP_ProduciXMLModel
@using static eProcurementNext.Session.SessionMiddleware
@inject IWebHostEnvironment env;
@{
    CommonDbFunctions cdf = new();
    LoadSession(HttpContext, session);
    EprocResponse htmlToReturn = new(GetParamURL(HttpContext.Request.QueryString.ToString(), "XML_ATTACH_TYPE"));


}
@{
    //TODO:DA TRADURRE SERVER.SCRIPTTIMEOUT
    //oldScriptTimeout = Server.ScriptTimeout;

    //Server.ScriptTimeout = oldScriptTimeout * 50;
    //'on error resume next
    //stop
    TSRecordSet? rsLotti = null;
    TSRecordSet? rsDocPartecipanti = null;
    TSRecordSet? rsInfoOE = null;
    string WebRootPath = ApplicationCommon.Application["PathFolderAllegati"];
    int annoDiConfronto = 0;
    int annoCorrente = 0;
    int dimensioneCorrenteFile = 0;
    int valoreSogliaFile = 0;
    StreamWriter fileIndice;
    StreamWriter fileLotti = null;
    int contatore = 0;
    string nomeFile = "";
    string resValidate;
    string strTemp = "";
    dynamic stream;

    string nomeDirectoryTemporanea = "";
    dynamic fTemp;
    string nomeFileTemporaneo = "";
    string idAziEnte = "";
    TSRecordSet? rsConf = null;
    string fileNameIndice = "";
    string percorsoDiRete = "";
    string operazione = "";
    //'-- dati da prendere dalla configurazione
    string urlFile = "";
    idAziEnte = CStr(GetParamURL(Request.QueryString.ToString(), "ente"));     //'-- ID azi dell'ente che si vuole estrarre
    operazione = CStr(GetParamURL(Request.QueryString.ToString(), "operazione"));//'-- XML-TO-ZIP / XML-TO-PATH

    string gare_anno = CStr(GetParamURL(Request.QueryString.ToString(), "gare_anno"));  //'-- se passato ad 1 vuol dire che si sta richiedendo l'estrazione delle gare pubblicate o aggiudicate nell'anno corrente
    string gare_anno_prev = CStr(GetParamURL(Request.QueryString.ToString(), "gare_anno_prev"));   //'-- se passato ad 1 vuol dire che si sta richiedendo l'estrazione delle gare pubblicate o aggiudicate nell'anno precedente al corrente
    string annoEstrazione = "";
    Zip objZip;


    string xmlValidateError = string.Empty;
    string wrootPath = env.WebRootPath;
    string avcpDir = System.IO.Path.Combine(wrootPath, "avcp");

    if (gare_anno == "1")
    {
        annoEstrazione = CStr(DateAndTime.Year(DateTime.Now));
    }
    if (gare_anno_prev == "1")
    {
        annoEstrazione = CStr(DateAndTime.Year(DateTime.Now) - 1);
    }
    if (string.IsNullOrEmpty(operazione))
    {
        operazione = "XML-TO-ZIP";
    }
    rsConf = getConfiguration(idAziEnte);
    if (rsConf == null || rsConf.RecordCount == 0)
    {
        htmlToReturn.Write("Errore. Configurazione per l'ente non presente");
        throw new ResponseEndException(htmlToReturn.Out(), Response, "");

    }
    //'if checkWarning ( idAziEnte, "" ) = false then
    //'	Response.Write "Errore. Correggere i warning"
    //'	Response.end
    //'end if
    rsConf.MoveFirst();
    urlFile = GetValueFromRS(rsConf.Fields["url_client"]);
    if (Strings.Right(urlFile, 1) != "/")
    {
        urlFile = urlFile + "/";
    }
    fileNameIndice = GetValueFromRS(rsConf.Fields["FileNameIndice"]);
    percorsoDiRete = GetValueFromRS(rsConf.Fields["percorsoDiRete"]);
    if (Strings.Right(fileNameIndice, 4) != ".xml")
    {
        fileNameIndice = fileNameIndice + ".xml";
    }
    //string path = Server.MapPath(".");//Da Capire

    string path = WebRootPath;
    string mypath = System.IO.Directory.GetCurrentDirectory();

    valoreSogliaFile = 4500000;//'-- poco meno di  5 mb

    dimensioneCorrenteFile = 0;
    annoDiConfronto = 0;
    contatore = 0;
    //set fs=Server.CreateObject("Scripting.FileSystemObject")
    using FileStream fs = new FileStream(System.IO.Path.Combine(avcpDir,fileNameIndice), FileMode.OpenOrCreate, FileAccess.ReadWrite);

    //'        .WriteText sText

    nomeFileTemporaneo = CommonStorage.GetTempName();

    nomeDirectoryTemporanea = CStr(session["idPfu"]) + nomeFileTemporaneo;

    try
    {
        //fs.CreateFolder(path & "\" & nomeDirectoryTemporanea)

        string dirToCreate = System.IO.Path.Combine(path, nomeDirectoryTemporanea);

        //Directory.CreateDirectory(path + @"\" + nomeDirectoryTemporanea);

        Directory.CreateDirectory(dirToCreate);

        //path = path + @"\" + nomeDirectoryTemporanea;

        path = System.IO.Path.Combine(path, nomeDirectoryTemporanea);
    }
    catch (Exception ex)
    {
        TracciaErrore("avcp_producixml.asp", ex.Message, 0, null);

    }
    //'set fileIndice = fs.CreateTextFile(path & "\" & fileNameIndice,true,true)
    // //CreateObject("ADODB.Stream")

    //using (fileIndice = new StreamWriter(fs,System.Text.Encoding.UTF8))
    //{
    //fileIndice = new StreamWriter(fs, System.Text.Encoding.UTF8);
    fileIndice = new StreamWriter(fs);

    //fileIndice.Encoding = "utf-8";


    //'-- nome file lotti : Ente - Anno - progressivo

    //'-- Recupero tutti i lotti dell'ente ordinati per data
    //'-- ** Elenco Lotti da filtrare sul periodo di 5 anni **

    rsLotti = getLotti(idAziEnte, "");// '--( ente , anno)

    if (rsLotti == null)
    {
        //'-- se c'è stato un errore nel recupero dei lotti
        writeCodaFileIndice(fileIndice);

        fileIndice.Write(path + @"\" + fileNameIndice, 2);

        fileIndice.Close();
        htmlToReturn.Write("Errore nel recupero dei lotti");
        throw new ResponseEndException(htmlToReturn.Out(), Response, "");

    }
    else
    {
        if (rsLotti.RecordCount > 0)
        {
            rsLotti.MoveFirst();
            //'-- creo indice
            writeTestataFileIndice(fileIndice, System.IO.Path.Combine(avcpDir, fileNameIndice), GetValueFromRS(rsLotti.Fields["denominazione"]));
        }
        else
        {
            htmlToReturn.Write("Non sono presenti lotti da esportare");
            throw new ResponseEndException(htmlToReturn.Out(), Response, "");
        }
    }
    //}
    while (!rsLotti.EOF)//'-- itero sui lotti
    {
        //'-- Inizializzo le variabili del lotto
        annoCorrente = CInt(rsLotti.Fields["Anno"]);
        if (dimensioneCorrenteFile > valoreSogliaFile || annoDiConfronto != annoCorrente)
        {
            contatore = contatore + 1;
            //'-- se siamo passati all'anno successivo
            if (annoDiConfronto != 0)
            {
                //'-- Se non è il primo file dei lotti chiudo prima il precedente
                writeCodaFileLotti(fileLotti);

                fileLotti.Write(path + @"\" + nomeFile, 2);
                fileLotti.Close();
            }
            //'-- Se ho creato un altro file perchè sono passato all'anno successivo azzero il progressivo di quell'anno
            if (annoDiConfronto != annoCorrente)
            {
                contatore = 0;

            }
            //'-- non metto il nome dell'ente nel nome del file per evitare caratteri che potrebbero dare fastidio al nomeFile
            nomeFile = "Lotti_" + CStr(rsLotti.Fields["CFProp"]) + "_" + CStr(annoCorrente) + "_" + CStr(contatore) + ".xml";
            //'-- Creo il file dei lotti, lo aggiungo all'indice e resetto le variabili di controllo
            //'set fileLotti = fs.CreateTextFile(path & "\" & nomeFile,true,true)

            //fileLotti = CreateObject("ADODB.Stream")
            FileStream fsLotti = new FileStream(System.IO.Path.Combine(path, nomeFile), FileMode.Create, FileAccess.ReadWrite);
            //fileLotti = new StreamWriter(fsLotti, System.Text.Encoding.UTF8);

            try
            {

                //fileLotti = new StreamWriter(urlFile + nomeFile);



                //fileLotti = new StreamWriter(fs, System.Text.Encoding.UTF8);

                //fileLotti = new StreamWriter(fsLotti, System.Text.Encoding.UTF8);
                fileLotti = new StreamWriter(fsLotti);

            }
            catch (Exception ex)
            {
                string errore = ex.Message;
            }

            //fileLotti.Open();

            //fileLotti.Encoding = "utf-8";

            // System.IO.Path.Combine(avcpDir, fileNameIndice)

            //addLottoAlFileIndice(fileIndice, contatore, urlFile + nomeFile, annoCorrente);
            addLottoAlFileIndice(fileIndice, contatore, System.IO.Path.Combine(avcpDir, fileNameIndice), annoCorrente);
            //writeTestataLotti(fileLotti, "Pubblicazione lotti dell'anno " + annoCorrente, "Pubblicazione lotti dell'anno " + annoCorrente, GetValueFromRS(rsLotti.Fields["denominazione"]), annoCorrente, urlFile + nomeFile);
            writeTestataLotti(fileLotti, "Pubblicazione lotti dell'anno " + annoCorrente, "Pubblicazione lotti dell'anno " + annoCorrente, GetValueFromRS(rsLotti.Fields["denominazione"]), annoCorrente, System.IO.Path.Combine(avcpDir, fileNameIndice));
            dimensioneCorrenteFile = 0;
            annoDiConfronto = annoCorrente;

        }
        //'-- Aggiungo il lotto corrente al file
        apriStrutturaXmlLotto(fileLotti, GetValueFromRS(rsLotti.Fields["cig"]), GetValueFromRS(rsLotti.Fields["CFProp"]), GetValueFromRS(rsLotti.Fields["Denominazione"]), GetValueFromRS(rsLotti.Fields["Oggetto"]), GetValueFromRS(rsLotti.Fields["SceltaContr"]));

        apriPartecipanti(fileLotti);
        //'-- Recupero i partecipanti

        //rsDocPartecipanti = getDocPartecipanti(GetValueFromRS(rsLotti.Fields["id"]));
        rsDocPartecipanti = getDocPartecipanti(CStr(GetValueFromRS(rsLotti.Fields["id"])));
        if (rsDocPartecipanti != null && rsDocPartecipanti.RecordCount > 0)
        {
            //'-- Itero sui partecipanti
            rsDocPartecipanti.MoveFirst();
            while (!rsDocPartecipanti.EOF)
            {
                //rsInfoOE = getInfoPartecipanti(GetValueFromRS(rsDocPartecipanti.Fields["id"]));
                rsInfoOE = getInfoPartecipanti(CStr(GetValueFromRS(rsDocPartecipanti.Fields["id"])));
                if (rsInfoOE.RecordCount > 0)
                {
                    if (GetValueFromRS(rsDocPartecipanti.Fields["TipoDoc"]) == "AVCP_GRUPPO")
                    {
                        apriRagruppamento(fileLotti);
                    }
                    else
                    {
                        apriPartecipante(fileLotti);
                    }
                    rsInfoOE.MoveFirst();
                    while (!rsInfoOE.EOF)
                    {
                        //'-- aggiungo partecipante al lotto
                        if (GetValueFromRS(rsDocPartecipanti.Fields["TipoDoc"]) == "AVCP_GRUPPO")
                        {
                            aggiungiMembroRaggruppamento(fileLotti, GetValueFromRS(rsInfoOE.Fields["CodiceFiscale"]), GetValueFromRS(rsInfoOE.Fields["RagioneSociale"]), GetValueFromRS(rsInfoOE.Fields["Ruolo"]), GetValueFromRS(rsInfoOE.Fields["estero"]));
                        }
                        else
                        {
                            aggiungiPartecipanti(fileLotti, GetValueFromRS(rsInfoOE.Fields["CodiceFiscale"]), GetValueFromRS(rsInfoOE.Fields["RagioneSociale"]), GetValueFromRS(rsInfoOE.Fields["estero"]));
                        }
                        rsInfoOE.MoveNext();
                    }
                    if (GetValueFromRS(rsDocPartecipanti.Fields["TipoDoc"]) == "AVCP_GRUPPO")
                    {
                        chiudiRagruppamento(fileLotti);
                    }
                    else
                    {
                        chiudiPartecipante(fileLotti);
                    }
                }

                rsDocPartecipanti.MoveNext();//	'passo al partecipante successivo

            }
        }
        chiudiPartecipanti(fileLotti);

        apriAggiudicatari(fileLotti);

        //'-- se c'erano partecipanti vado a vedere chi tra questi è/sono aggiudicatari
        if (rsDocPartecipanti != null && rsDocPartecipanti.RecordCount > 0)
        {
            //rsDocPartecipanti = getAggiudicatario(GetValueFromRS(rsLotti.Fields["id"]));
            rsDocPartecipanti = getAggiudicatario(CStr(GetValueFromRS(rsLotti.Fields["id"])));
            //'-- Se ci sono aggiudicatari
            if (rsDocPartecipanti.RecordCount > 0)
            {
                rsDocPartecipanti.MoveFirst();
                while (!rsDocPartecipanti.EOF)
                {
                    if (GetValueFromRS(rsDocPartecipanti.Fields["TipoDoc"]) == "AVCP_GRUPPO")
                    {
                        apriAggiudicatarioRagruppamento(fileLotti);
                    }
                    //rsInfoOE = getInfoPartecipanti(GetValueFromRS(rsDocPartecipanti.Fields["id"]));
                    rsInfoOE = getInfoPartecipanti(CStr(GetValueFromRS(rsDocPartecipanti.Fields["id"])));
                    rsInfoOE.MoveFirst();
                    while (!rsInfoOE.EOF)
                    {
                        if (GetValueFromRS(rsDocPartecipanti.Fields["TipoDoc"]) == "AVCP_GRUPPO")
                        {
                            aggiungiMembroRaggruppamento(fileLotti, GetValueFromRS(rsInfoOE.Fields["CodiceFiscale"]), GetValueFromRS(rsInfoOE.Fields["RagioneSociale"]), GetValueFromRS(rsInfoOE.Fields["Ruolo"]), GetValueFromRS(rsInfoOE.Fields["estero"]));
                        }
                        else
                        {
                            aggiungiAggiudicatario(fileLotti, GetValueFromRS(rsInfoOE.Fields["CodiceFiscale"]), GetValueFromRS(rsInfoOE.Fields["RagioneSociale"]), GetValueFromRS(rsInfoOE.Fields["estero"]));
                        }
                        rsInfoOE.MoveNext();
                    }
                    if (GetValueFromRS(rsDocPartecipanti.Fields["TipoDoc"]) == "AVCP_GRUPPO")
                    {
                        chiudiAggiudicatarioRagruppamento(fileLotti);

                    }
                    rsDocPartecipanti.MoveNext();

                }
            }
        }
        chiudiAggiudicatari(fileLotti);

        //'-- aggiungo importoAggiudicazione
        //aggiungiImportoAggiudicazione(fileLotti, GetValueFromRS(rsLotti.Fields["ImportoAggiudicazione"]));
        aggiungiImportoAggiudicazione(fileLotti, CStr(GetValueFromRS(rsLotti.Fields["ImportoAggiudicazione"])));
        //'-- aggiungo tempiCompletamento

        //aggiungiTempiCompletamento(fileLotti, GetValueFromRS(rsLotti.Fields["InizioPubblicazione"]), GetValueFromRS(rsLotti.Fields["FinePubblicazione"]));
        aggiungiTempiCompletamento(fileLotti, CStr(GetValueFromRS(rsLotti.Fields["InizioPubblicazione"])), CStr(GetValueFromRS(rsLotti.Fields["FinePubblicazione"])));

        //'-- aggiungo importoSommeLiquidate


        //aggiungiImportoSommeLiquidate(fileLotti, GetValueFromRS(rsLotti.Fields["ImportoSommeLiquidate"]));
        aggiungiImportoSommeLiquidate(fileLotti, CStr(GetValueFromRS(rsLotti.Fields["ImportoSommeLiquidate"])));

        chiudiStrutturaXmlLotto(fileLotti);

        //'set fTemp = fs.GetFile(path & "\" & nomeFile)
        //'dimensioneCorrenteFile = fTemp.Size

        dimensioneCorrenteFile = CInt(fileLotti.BaseStream.Length);
        rsLotti.MoveNext();//	'passo al lotto successivo
    }
    //'-- Se siamo usciti dal ciclo perchè sono finiti i lotti chiudiamo l'ultimo file aperto
    writeCodaFileLotti(fileLotti);
    //fileLotti.Write(path + @"\" + nomeFile, 2);
    fileLotti.Flush();
    fileLotti.Close();

    writeCodaFileIndice(fileIndice);
    //fileIndice.Write(path + @"\" + fileNameIndice, 2);
    fileIndice.Flush();
    fileIndice.Close();

    //'-- file completati. passo alla produzione dello zip e alla gestione del flusso
    dynamic objFolder = null;
    try
    {
        objFolder = Directory.GetDirectories(path);
    }
    catch (Exception ex)
    {
        TracciaErrore("CREAZIONE objFolder", "CREAZIONE objFolde" + ex.Message, 0, null);

        htmlToReturn.Write("Libreria ZIP non presente");

        CommonStorage.DeleteDirectory(path);

        throw new ResponseEndException(htmlToReturn.Out(), Response, "");
    }
    //' Creo l'oggetto

    try
    {

        objZip = new Zip();
    }
    catch (Exception ex)
    {
        TracciaErrore("Libreria ZIP non presente", "Libreria ZIP non presente" + ex.Message, 0, null);

        htmlToReturn.Write("Libreria ZIP non presente");

        CommonStorage.DeleteDirectory(path);

        throw new ResponseEndException(htmlToReturn.Out(), Response, "");
    }
    string strCfEnte = getCfEnte(idAziEnte);

    if (!string.IsNullOrEmpty(CStr(strCfEnte)))
    {
        strTemp = CStr(strCfEnte) + "_" + nomeFileTemporaneo + ".zip";
    }
    else
    {
        strTemp = CStr(session["idPfu"]) + "_" + nomeFileTemporaneo + ".zip";
    }

    //' Creo il file zip della directory contenente gli xml
    //objZip.Pack (path , server.MapPath(".") & "\" & strTemp);
    try
    {
        objZip.Pack(path, WebRootPath + @"\" + strTemp);
    }
    catch (Exception ex)
    {


        //'-- se il file zip non è stato creato con successo
        if (CommonStorage.FileExists(WebRootPath + @"\" + strTemp) == false)
        {
            TracciaErrore("avcp_producixml.asp. errore generazione file zip ", "errore generazione file zip " + ex.Message, 0, null);


            htmlToReturn.Write($@"Errore nella generazione del file zip " + ex.Message);

            CommonStorage.DeleteDirectory(path);

            //TODO:Server.ScriptTimeout = oldScriptTimeout
            throw new ResponseEndException(htmlToReturn.Out(), Response, "");
        }
    }

    LibDbAttach objAttach;
    string formaTecnicaFile;
    string erroreXML;

    //err.Clear

    //'-- Carico il file zip appena creato nella tabella degli allegati
    objAttach = new LibDbAttach();

    try
    {
        formaTecnicaFile = objAttach.InsertCTL_Attach_FromFile(WebRootPath + @"\" + strTemp, ApplicationCommon.Application.ConnectionString);
    }
    catch (Exception ex)
    {
        TracciaErrore("avcp_producixml.asp. errore caricamento zip in tabella", "errore caricamento zip in tabella " + ex.Message, 0, null);

        htmlToReturn.Write("Errore nell'inserimento dell'allegato in tabella " + ex.Message);

        CommonStorage.DeleteDirectory(path);

        //TODO:ServerScriptTimeOut
        //Server.ScriptTimeout = oldScriptTimeout
        throw new ResponseEndException(htmlToReturn.Out(), Response, "");

    }

    //err.Clear
    //dynamic cartella = Directory.GetDirectories(path);

    string[] files = Directory.GetFiles(path);

    erroreXML = "";
    //foreach (dynamic item in cartella.Files())
    //foreach (string item in files)
    for (int i = 0; i < files.Length; i++)
    {
        //'-- Invoco la pagina .net per la validazione degli N xml tramite l'xsd

        // resValidate = invokePage("xmlutil.aspx?operation=VALIDATE&file_xml=" + URLEncode(path + @"\" + item.Name) + "&file_xsd=" + UrlDecode(WebRootPath + @"\" + "datasetAppaltiL190.xsd"));

        //resValidate = invokePage("xmlutil.aspx?operation=VALIDATE&file_xml=" + URLEncode(path + @"\" + files[i]) + "&file_xsd=" + UrlDecode(WebRootPath + @"\" + "datasetAppaltiL190.xsd"));


        //string avcpDir = System.IO.Path.Combine(wrootPath, "avcp");


        string fileXml = System.IO.Path.Combine(path, files[i]);
        string fileXsd = System.IO.Path.Combine(avcpDir, "datasetAppaltiL190.xsd");

        bool testValidazioneXml = XmlUtil.Validate(fileXml, fileXsd);




        resValidate = string.Empty;

        //'resValidate = ""
        //'resValidate = ""

        //'-- Se la validazione è andata a buon fine
        if (resValidate.Split("#")[0] == "1")
        {
            erroreXML = erroreXML + "";
        }
        else
        {
            erroreXML = erroreXML + CStr(resValidate.Split("#")[1]);
        }
    }
    //------ creo il documento di log del flusso con il relativo esito
    if (!string.IsNullOrEmpty(erroreXML))
    {

        if (operazione.ToUpper() == "XML-TO-PATH")
        {
            tracciaFlussoAVCP(erroreXML, formaTecnicaFile, "Errore generazione del flusso XML per pubblicazione XML");
        }
        else
        {
            tracciaFlussoAVCP(erroreXML, formaTecnicaFile, "Errore generazione del flusso XML per Download zip");

        }
        htmlToReturn.Write("Errore.Validazione del file XML fallita con errore : " + erroreXML);
        //TODO:SERVER SCRIPTIMEOUT
        //Server.ScriptTimeout = oldScriptTimeout
        throw new ResponseEndException(htmlToReturn.Out(), Response, "");

    }
    else
    {
        if (operazione.ToUpper() == "XML-TO-PATH")
        {
            tracciaFlussoAVCP("", formaTecnicaFile, "Esito positivo per pubblicazione XML");
        }
        else
        {
            tracciaFlussoAVCP("", formaTecnicaFile, "Esito positivo per Download zip");
        }
    }
    //'-- Se è stata richiesta la copia dei file nel percorso di rete
    if (operazione.ToUpper() == "XML-TO-PATH")
    {
        try
        {
            copyFilesFromDirectoryToRemotePath(fs, path, percorsoDiRete);
        }
        catch
        {
            //err.Clear
            inviaFileZipAlCliente();
        }
    }
    else
    {
        inviaFileZipAlCliente();
    }

    //'-- cancello la directory temporanea con i relativi file xml
    CommonStorage.DeleteDirectory(path);
    //' cancello file zip
    CommonStorage.DeleteObject(WebRootPath + @"\" + strTemp);
    //TODO:TIMEOUT
    //Server.ScriptTimeout = oldScriptTimeout
    //'-- Fine pagina
    throw new ResponseEndException(htmlToReturn.Out(), Response, "");
    //'--------------------------------
    //'-------- BLOCCO FUNZIONI
    //'--------------------------------
    void writeTestataFileIndice(StreamWriter fileIndice, string urlFileIndice, string ente)
    {


        writeLineXml(ref fileIndice, @"<?xml version=""1.0"" encoding=""UTF-8""?>");
        writeLineXml(ref fileIndice, @"<indici xsi:noNamespaceSchemaLocation=""datasetIndiceAppaltiL190.xsd"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">");
        writeLineXml(ref fileIndice, getTabulazioni(1) + "<metadata>");
        writeLineXml(ref fileIndice, getTabulazioni(2) + "<titolo>Pubblicazione Indice AVCP</titolo>");
        writeLineXml(ref fileIndice, getTabulazioni(2) + "<abstract>Pubblicazione Indice AVCP</abstract>");
        writeLineXml(ref fileIndice, getTabulazioni(2) + "<dataPubblicazioneIndice>" + CStr(DateAndTime.Year(DateAndTime.Now)) + "-" + normalizza(CStr(DateAndTime.Month(DateAndTime.Now))) + "-" + normalizza(CStr(DateAndTime.Day(DateAndTime.Now))) + "</dataPubblicazioneIndice>");
        writeLineXml(ref fileIndice, getTabulazioni(2) + "<entePubblicatore>" + XmlEncode(ente) + "</entePubblicatore>");
        writeLineXml(ref fileIndice, getTabulazioni(2) + "<dataUltimoAggiornamentoIndice>" + CStr(DateAndTime.Year(DateAndTime.Now)) + "-" + normalizza(CStr(DateAndTime.Month(DateAndTime.Now))) + "-" + normalizza(CStr(DateAndTime.Day(DateAndTime.Now))) + "</dataUltimoAggiornamentoIndice>");
        writeLineXml(ref fileIndice, getTabulazioni(2) + "<annoRiferimento>" + CStr(DateAndTime.Year(DateAndTime.Now)) + "</annoRiferimento>");
        writeLineXml(ref fileIndice, getTabulazioni(2) + "<urlFile>" + XmlEncode($"File:///{urlFileIndice}") + "</urlFile>");
        writeLineXml(ref fileIndice, getTabulazioni(2) + "<licenza>IODL</licenza>");
        writeLineXml(ref fileIndice, getTabulazioni(1) + "</metadata>");
        writeLineXml(ref fileIndice, getTabulazioni(1) + "<indice>");

    }

    void inviaFileZipAlCliente()
    {


        const int adTypeBinary = 1;
        string strFilePath = "";

        strFilePath = WebRootPath + @"\" + strTemp;

        string file = "AVCP_FlussoXML.zip";
        LoadFromFile(strFilePath, htmlToReturn, HttpContext);
        //
        //Set objStream = Server.CreateObject("ADODB.Stream")
        //
        //objStream.Open
        //objStream.Type = adTypeBinary
        //objStream.LoadFromFile strFilePath
        //

        Response.ContentType = "application/zip";
        Response.Headers.Add("Content-Disposition", "attachment; filename=" + file);



        using (FileStream fs = new FileStream(strFilePath, FileMode.Open, FileAccess.Read))
        {
            byte[] b = new byte[1024];
            int len;
            int counter = 0;
            while (true)
            {
                len = fs.Read(b, 0, b.Length);
                byte[] c = new byte[len];
                b.Take(len).ToArray().CopyTo(c, 0);
                htmlToReturn.BinaryWrite(HttpContext, c);
                if (len == 0 || len < 1024)
                {
                    break;
                }
                counter++;
            }
        }



        //Response.BinaryWrite( objStream.Read)
        //
        //objStream.Close
        //
        //Set objStream = Nothing
        //
        //end sub
    }
    void copyFilesFromDirectoryToRemotePath(dynamic fileSystem, string DirectoryOrigin, string directoryDest)
    {
        dynamic cartella;
        //dynamic item = null;


        if (Strings.Right(DirectoryOrigin, 1) != @"\")
        {
            DirectoryOrigin = DirectoryOrigin + @"\";
        }

        if (Strings.Right(directoryDest, 1) != @"\")
        {
            directoryDest = directoryDest + @"\";
        }

        cartella = fileSystem.GetFolder(DirectoryOrigin);

        foreach (dynamic item in cartella.Files)
        {
            fileSystem.CopyFile(DirectoryOrigin + item.Name, directoryDest + item.Name);
        }

    }
    void writeCodaFileIndice(StreamWriter fileIndice)
    {
        writeLineXml(ref fileIndice, getTabulazioni(1) + "</indice>");
        writeLineXml(ref fileIndice, "</indici>");
    }
    void writeTestataLotti(StreamWriter fileLotti, string titolo, dynamic _abstract, string DenominazioneEnte, int anno, string urlFile)
    {

        writeLineXml(ref fileLotti, @"<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes"" ?>");
        writeLineXml(ref fileLotti, @"<legge190:pubblicazione xsi:schemaLocation=""legge190_1_0 datasetAppaltiL190.xsd"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:legge190=""legge190_1_0"">");
        writeLineXml(ref fileLotti, getTabulazioni(1) + "<metadata>");
        writeLineXml(ref fileLotti, getTabulazioni(2) + "<titolo>" + XmlEncode(titolo) + "</titolo>");
        writeLineXml(ref fileLotti, getTabulazioni(2) + "<abstract>" + XmlEncode(_abstract) + "</abstract>");
        writeLineXml(ref fileLotti, getTabulazioni(2) + "<dataPubblicazioneDataset>" + CStr(DateAndTime.Year(DateAndTime.Now)) + "-" + normalizza(CStr(DateAndTime.Month(DateAndTime.Now))) + "-" + normalizza(CStr(DateAndTime.Day(DateAndTime.Now))) + "</dataPubblicazioneDataset>");
        writeLineXml(ref fileLotti, getTabulazioni(2) + "<entePubblicatore>" + XmlEncode(DenominazioneEnte) + "</entePubblicatore>");
        writeLineXml(ref fileLotti, getTabulazioni(2) + "<dataUltimoAggiornamentoDataset>" + CStr(DateAndTime.Year(DateAndTime.Now)) + "-" + normalizza(CStr(DateAndTime.Month(DateAndTime.Now))) + "-" + normalizza(CStr(DateAndTime.Day(DateAndTime.Now))) + "</dataUltimoAggiornamentoDataset>");
        writeLineXml(ref fileLotti, getTabulazioni(2) + "<annoRiferimento>" + CStr(anno) + "</annoRiferimento>");
        writeLineXml(ref fileLotti, getTabulazioni(2) + "<urlFile>" + XmlEncode($"File:///{urlFile}") + "</urlFile>");
        writeLineXml(ref fileLotti, getTabulazioni(2) + "<licenza>IODL 2.0</licenza>");
        writeLineXml(ref fileLotti, getTabulazioni(1) + "</metadata>");
        writeLineXml(ref fileLotti, getTabulazioni(1) + "<data>");
    }
    string normalizza(string value)
    {
        string _normalizza = "";
        if (CStr(value).Length < 2)
        {
            _normalizza = "0" + value;
        }
        else
        {
            _normalizza = value;
        }
        return _normalizza;

    }
    string troncaStringaA(string str, int maxLen)
    {
        string _troncaStringaA = "";
        if (str.Length > CInt(maxLen))
        {
            _troncaStringaA = Strings.Left(CStr(str), CInt(maxLen));
        }
        else
        {
            _troncaStringaA = str;
        }
        return _troncaStringaA;
    }
    void writeCodaFileLotti(StreamWriter fileLotti)
    {
        writeLineXml(ref fileLotti, getTabulazioni(1) + "</data>");
        writeLineXml(ref fileLotti, "</legge190:pubblicazione>");
    }
    void addLottoAlFileIndice(StreamWriter fileIndice, int idLotto, string linkXmlLotto, int anno)
    {

        writeLineXml(ref fileIndice, getTabulazioni(2) + $@"<dataset id=""ID_" + CStr(anno) + "_" + CStr(idLotto) + $@""">");
        writeLineXml(ref fileIndice, getTabulazioni(3) + "<linkDataset>" + XmlEncode(linkXmlLotto) + "</linkDataset>");
        writeLineXml(ref fileIndice, getTabulazioni(3) + "<dataUltimoAggiornamento>" + CStr(DateAndTime.Year(DateAndTime.Now)) + "-" + normalizza(CStr(DateAndTime.Month(DateAndTime.Now))) + "-" + normalizza(CStr(DateAndTime.Day(DateAndTime.Now))) + "</dataUltimoAggiornamento>");
        writeLineXml(ref fileIndice, getTabulazioni(2) + "</dataset>");

    }
    //da capire tipo
    void apriStrutturaXmlLotto(StreamWriter fileLotti, string cig, string CfEnte, string DenomEnte, string oggettoLotto, string sceltaContraente)
    {
        cig = cig.Trim();
        if (cig == null && string.IsNullOrEmpty(cig))
        {
            cig = "0000000000";     //'FAQ C1
        }
        if (CfEnte == null && string.IsNullOrEmpty(CfEnte))
        {
            CfEnte = "00000000000";
        }
        if (cig.Length > 4 && (Strings.Left(CStr(cig), 4)).ToUpper() == "INT-" || (Strings.Left(CStr(cig), 4)).ToUpper() == "EXT-")
        {
            cig = "0000000000";
        }
        //'-- in teoria questo controllo è superfluo, perchè non dovrei avere lotti con duplicato- essendo un warning
        if (cig.Length > 10 && (Strings.Left(CStr(cig), 10).ToUpper()) == "DUPLICATO-")
        {
            cig = "0000000000";
        }
        oggettoLotto = troncaStringaA(oggettoLotto, 240);
        DenomEnte = troncaStringaA(DenomEnte, 240);
        writeLineXml(ref fileLotti, getTabulazioni(2) + "<lotto>");
        writeLineXml(ref fileLotti, getTabulazioni(3) + "<cig>" + XmlEncode(cig) + "</cig>");
        writeLineXml(ref fileLotti, getTabulazioni(3) + "<strutturaProponente>");
        writeLineXml(ref fileLotti, getTabulazioni(4) + "<codiceFiscaleProp>" + XmlEncode(CfEnte) + "</codiceFiscaleProp>");
        writeLineXml(ref fileLotti, getTabulazioni(4) + "<denominazione>" + XmlEncode(DenomEnte) + "</denominazione>");
        writeLineXml(ref fileLotti, getTabulazioni(3) + "</strutturaProponente>");
        writeLineXml(ref fileLotti, getTabulazioni(3) + "<oggetto><![CDATA[" + oggettoLotto + "]]></oggetto>");
        //'call writeLineXml( fileLotti, getTabulazioni(3) & "<oggetto>" & XmlEncode(oggettoLotto) & "</oggetto>")
        writeLineXml(ref fileLotti, getTabulazioni(3) + "<sceltaContraente>" + XmlEncode(sceltaContraente) + "</sceltaContraente>");
    }
    void apriRagruppamento(StreamWriter fileLotti)
    {
        writeLineXml(ref fileLotti, getTabulazioni(4) + "<raggruppamento>");
    }

    void apriPartecipante(StreamWriter fileLotti)
    {
        writeLineXml(ref fileLotti, getTabulazioni(4) + "<partecipante>");
    }

    void apriAggiudicatari(StreamWriter fileLotti)
    {
        writeLineXml(ref fileLotti, getTabulazioni(3) + "<aggiudicatari>");
    }

    void apriAggiudicatarioRagruppamento(StreamWriter fileLotti)
    {
        writeLineXml(ref fileLotti, getTabulazioni(4) + "<aggiudicatarioRaggruppamento>");
    }

    void chiudiAggiudicatarioRagruppamento(StreamWriter fileLotti)
    {
        writeLineXml(ref fileLotti, getTabulazioni(4) + "</aggiudicatarioRaggruppamento>");
    }

    void apriPartecipanti(StreamWriter fileLotti)
    {
        writeLineXml(ref fileLotti, getTabulazioni(3) + "<partecipanti>");
    }

    void chiudiPartecipanti(StreamWriter fileLotti)
    {
        writeLineXml(ref fileLotti, getTabulazioni(3) + "</partecipanti>");
    }
    void aggiungiMembroRaggruppamento(StreamWriter fileLotti, string cf, string ragSoc, string ruolo, string estero)
    {
        ragSoc = troncaStringaA(ragSoc, 240);
        cf = troncaStringaA(cf, 16);

        writeLineXml(ref fileLotti, getTabulazioni(5) + "<membro>");
        if (estero == "0")
        {
            writeLineXml(ref fileLotti, getTabulazioni(6) + "<codiceFiscale>" + XmlEncode(cf) + "</codiceFiscale>");
        }
        else
        {
            writeLineXml(ref fileLotti, getTabulazioni(6) + "<identificativoFiscaleEstero>" + XmlEncode(cf) + "</identificativoFiscaleEstero>");
        }
        writeLineXml(ref fileLotti, getTabulazioni(6) + "<ragioneSociale>" + XmlEncode(ragSoc) + "</ragioneSociale>");
        writeLineXml(ref fileLotti, getTabulazioni(6) + "<ruolo>" + XmlEncode(ruolo) + "</ruolo>");
        writeLineXml(ref fileLotti, getTabulazioni(5) + "</membro>");
    }
    void aggiungiPartecipanti(StreamWriter fileLotti, string cf, string ragSoc, string estero)
    {
        ragSoc = troncaStringaA(ragSoc, 240);
        cf = troncaStringaA(cf, 16);
        if (estero == "0")
        {
            writeLineXml(ref fileLotti, getTabulazioni(5) + "<codiceFiscale>" + XmlEncode(cf) + "</codiceFiscale>");
        }
        else
        {
            writeLineXml(ref fileLotti, getTabulazioni(5) + "<identificativoFiscaleEstero>" + XmlEncode(cf) + "</identificativoFiscaleEstero>");
        }
        writeLineXml(ref fileLotti, getTabulazioni(5) + "<ragioneSociale>" + XmlEncode(ragSoc) + "</ragioneSociale>");
    }
    void aggiungiImportoAggiudicazione(StreamWriter fileLotti, string importo)
    {
        if (importo == null)
        {
            importo = "0.00";
        }
        else
        {
            if (string.IsNullOrEmpty(importo))
            {
                importo = "0.00";
            }
        }
        writeLineXml(ref fileLotti, getTabulazioni(3) + "<importoAggiudicazione>" + XmlEncode(importo).Replace(",", ".") + "</importoAggiudicazione>");
    }
    void aggiungiImportoSommeLiquidate(StreamWriter fileLotti, string importo)
    {
        if (importo == null)
        {
            importo = "0.00";
        }
        else
        {
            if (string.IsNullOrEmpty(importo))
            {
                importo = "0.00";
            }
        }
        writeLineXml(ref fileLotti, getTabulazioni(3) + "<importoSommeLiquidate>" + XmlEncode(importo).Replace(",", ".") + "</importoSommeLiquidate>");
    }
    void aggiungiTempiCompletamento(StreamWriter fileLotti, string dataInizio, string dataFine)
    {
        writeLineXml(ref fileLotti, getTabulazioni(3) + "<tempiCompletamento>");

        if (!IsNull(dataInizio) && !string.IsNullOrEmpty(CStr(dataInizio)) && CStr(dataInizio) != "1900-01-01")
        {
            writeLineXml(ref fileLotti, getTabulazioni(4) + "<dataInizio>" + XmlEncode(dataInizio) + "</dataInizio>");
        }
        if (!IsNull(dataInizio) && !string.IsNullOrEmpty(CStr(dataFine)) && CStr(dataFine) != "1900-01-01")
        {
            writeLineXml(ref fileLotti, getTabulazioni(4) + "<dataUltimazione>" + XmlEncode(dataFine) + "</dataUltimazione>");
        }
        writeLineXml(ref fileLotti, getTabulazioni(3) + "</tempiCompletamento>");
    }
    void aggiungiAggiudicatario(StreamWriter fileLotti, string cf, string ragSoc, string estero)
    {
        ragSoc = troncaStringaA(ragSoc, 240);
        cf = troncaStringaA(cf, 16);
        writeLineXml(ref fileLotti, getTabulazioni(5) + "<aggiudicatario>");
        if (estero == "0")
        {
            writeLineXml(ref fileLotti, getTabulazioni(6) + "<codiceFiscale>" + XmlEncode(cf) + "</codiceFiscale>");
        }
        else
        {
            writeLineXml(ref fileLotti, getTabulazioni(6) + "<identificativoFiscaleEstero>" + XmlEncode(cf) + "</identificativoFiscaleEstero>");
        }
        writeLineXml(ref fileLotti, getTabulazioni(6) + "<ragioneSociale>" + XmlEncode(ragSoc) + "</ragioneSociale>");
        writeLineXml(ref fileLotti, getTabulazioni(5) + "</aggiudicatario>");
    }
    void chiudiRagruppamento(StreamWriter fileLotti)
    {
        writeLineXml(ref fileLotti, getTabulazioni(4) + "</raggruppamento>");
    }
    void chiudiPartecipante(StreamWriter fileLotti)
    {
        writeLineXml(ref fileLotti, getTabulazioni(4) + "</partecipante>");
    }

    void chiudiAggiudicatari(StreamWriter fileLotti)
    {
        writeLineXml(ref fileLotti, getTabulazioni(3) + "</aggiudicatari>");
    }

    void chiudiStrutturaXmlLotto(StreamWriter fileLotti)
    {
        writeLineXml(ref fileLotti, getTabulazioni(2) + "</lotto>");
    }

    void writeLineXml(ref StreamWriter file, string riga)
    {
        //file.Write(riga + Environment.NewLine);
        file.WriteLine(riga);
        //'file.WriteLine riga
    }
    void writeXml(StreamWriter file, string riga)
    {
        file.WriteLine(riga);
        //'file.Write riga
    }
    string getTabulazioni(int n)
    {
        string ret = "";
        for (int i = 1; i <= n; i++)
        {
            ret = ret + "\t";
        }

        return ret;
    }

    void TracciaErrore(string source, string text, int tipo, string oggetto)
    {
        Exception e = new Exception(text);
        e.Source = source;
        StackTrace st = new StackTrace(true);
        e = eProcurementNext.CommonDB.Basic.SetStackTrace(e, st);
        // oltre allo StackTrace nel contesto aggiungere eventuali altre
        // informazioni che possano essere d'aiuto a chi dovrà valutare l'errore
        string contesto = st.ToString();
        TraceErr(e, ApplicationCommon.Application.ConnectionString, contesto);

        //TraceErr();
        //Dim l
        //set l = CreateObject("AFLLogSrvc.logSrvc")
        //
        //If Not (l Is Nothing) Then
        //	l.LogNTEvent CStr(text), CStr(oggetto), CStr(source), CInt(1), CLng(0)
        //end if
        //
        //Set l = Nothing
    }

    bool checkWarning(string ente, string anno)
    {
        bool _checkWarning = false;
        string strSql = "";
        TSRecordSet? rs = null;
        CommonDbFunctions cdf = new CommonDbFunctions();


        if (!string.IsNullOrEmpty(ente))
        {
            strSql = " declare @codiceFiscale varchar(250) ";
            strSql = strSql + " select @codiceFiscale = vatValore_FT from  Dm_Attributi dm with(nolock) where dm.lnk = " + CLng(ente) + " and dm.dztnome = 'codicefiscale' ";
            strSql = strSql + " declare @listaAzi varchar(8000) ";
            strSql = strSql + " set @listaAzi  = dbo.GetIdAzi_from_CodiceFiscale( @codiceFiscale )  ";
        }
        strSql = strSql + " select l.id, o.*, ";
        strSql = strSql + " val.dmv_cod + '-' + val.dmv_descMl as SceltaContr, ";
        strSql = strSql + " left( convert( varchar, isnull(dataInizio,''), 126 ), 10) as InizioPubblicazione, left(convert( varchar, isnull(dataFine,''), 126 ), 10) as FinePubblicazione ";
        strSql = strSql + " from ctl_doc l with(nolock) ";
        strSql = strSql + " 	left outer join ctl_doc g with(nolock) on l.Linkeddoc = g.versione and g.statofunzionale = 'Pubblicato' and g.tipodoc = 'AVCP_GARA' ";
        strSql = strSql + " 	inner join document_avcp_lotti o with(nolock) on l.id = o.idheader ";
        strSql = strSql + " 		left join lib_domainvalues val with(nolock) ON val.dmv_dm_id = 'Scelta_contraente' and val.dmv_cod = o.Scelta_Contraente ";
        strSql = strSql + "  where l.tipodoc = 'AVCP_LOTTO'  ";
        strSql = strSql + "        and l.deleted = 0 ";
        strSql = strSql + "        and l.statofunzionale = 'Pubblicato' ";
        strSql = strSql + "        and ( isnull(l.Linkeddoc,0) = 0 or  g.id is not null ) ";
        strSql = strSql + " 	   and convert( varchar(7) , o.DataPubblicazione , 121)  >= '2012-12' ";

        if (CStr(GetParamURL(Request.QueryString.ToString(), "con_anno_corrente")) != "1")
        {
            strSql = strSql + "		   and o.anno < year(getdate()) ";
        }
        if (!string.IsNullOrEmpty(ente))
        {
            //'strSql = strSql & " 			and l.azienda in ( select dbo.GetIdAzi_from_CodiceFiscale( @codiceFiscale ) ) "
            strSql = strSql + " 			and l.azienda in ( select * from dbo.split( @listaAzi,',' ) ) ";
        }
        strSql = strSql + " and isnull(cast(o.warning as varchar),'') <> '' ";
        strSql = strSql + "  order by o.DataPubblicazione ";
        try
        {
            rs = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString);

        }
        catch (Exception ex)
        {
            TracciaErrore("avcp_producixml.asp.checkWarning()", ex.Message, 0, null);

        }
        if (rs.RecordCount > 0)
        {
            _checkWarning = false;
        }
        else
        {
            _checkWarning = true;
        }
        return _checkWarning;
    }
    TSRecordSet getLotti(string ente, string anno)
    {
        CommonDbFunctions cdf = new CommonDbFunctions();
        string strSql;
        string operatoreAnno;
        operatoreAnno = " = ";
        strSql = "";
        TSRecordSet _getLotti = null;
        //'-- se non è stato richiesto un anno specifico vuol dire che stiamo facendo la pubblicazione complessiva dell'xml. cioè dall'anno precedente fino a 5 anni indietro
        if (string.IsNullOrEmpty(annoEstrazione))
        {
            annoEstrazione = "( ";
            operatoreAnno = " IN ";

            //'-- creiamo la condizione IN con i 5 anni indietro
            int nStop = DateAndTime.Year(DateAndTime.Now) - 1;
            int nStart = DateAndTime.Year(DateAndTime.Now) - 5;
            //-- se è richiesta l'estrazione a partire dall'anno corrente ( download xml provvisorio ) slittiamo la finestra temporale avanti di 1 anno
            if (CStr(GetParamURL(Request.QueryString.ToString(), "con_anno_corrente")) == "1")
            {
                nStop = nStop + 1;
                nStart = nStart + 1;
            }
            for (int i = nStart; i < nStop; i++)
            {
                annoEstrazione = annoEstrazione + CStr(i);
                if (i != nStop)
                {
                    annoEstrazione = annoEstrazione + ",";
                }
            }
            annoEstrazione = annoEstrazione.Substring(0, annoEstrazione.Length - 1) + " ) ";

        }
        if (!String.IsNullOrEmpty(CStr(ente)))
        {
            strSql = "SET NOCOUNT ON declare @codiceFiscale varchar(250) ";
            strSql = strSql + " select @codiceFiscale = vatValore_FT from  Dm_Attributi dm with(nolock) where dm.lnk = " + CLng(ente) + " and dm.dztnome = 'codicefiscale' ";
            strSql = strSql + " declare @listaAzi varchar(8000) ";
            strSql = strSql + " set @listaAzi  = dbo.GetIdAzi_from_CodiceFiscale( @codiceFiscale )  " + Environment.NewLine;
        }
        if (!String.IsNullOrEmpty(annoEstrazione))
        {
            strSql = strSql + "select lp.CIG into #cig_anno ";
            strSql = strSql + " from ctl_doc c with(nolock) ";
            strSql = strSql + "		inner join Document_comunicazione_StatoLotti d with(nolock) on d.IdHeader = c.Id and d.Deleted = 0 ";
            strSql = strSql + "		inner join document_microlotti_dettagli LP with(nolock) on LP.idheader = C.Linkeddoc and LP.tipodoc = 'PDA_MICROLOTTI' and LP.voce = 0 and LP.numeroLotto =  d.numerolotto  ";
            strSql = strSql + " where C.TipoDoc = 'PDA_COMUNICAZIONE_GENERICA' and C.JumpCheck in (  '0-ESITO_DEFINITIVO' , '0-ESITO_DEFINITIVO_MICROLOTTI' ) and c.statofunzionale = 'Inviato' and c.Deleted = 0 and year(datainvio) " + operatoreAnno + annoEstrazione;
            if (!string.IsNullOrEmpty(CStr(ente)))
            {
                strSql = strSql + " 			and c.azienda in ( select * from dbo.split( @listaAzi,',' ) ) ";
            }
        }
        strSql = strSql + " select l.id, o.Anno, o.Cig,o.CFprop, o.Denominazione, o.Scelta_contraente, o.DataInizio, o.Datafine,o.Oggetto, o.DataPubblicazione, o.Warning, round(ImportoSommeLiquidate,2) as ImportoSommeLiquidate,round(ImportoAggiudicazione,2) as ImportoAggiudicazione, ";
        strSql = strSql + " val.dmv_cod + '-' + val.dmv_descMl as SceltaContr, ";
        strSql = strSql + " left( convert( varchar, isnull(dataInizio,''), 126 ), 10) as InizioPubblicazione, left(convert( varchar, isnull(dataFine,''), 126 ), 10) as FinePubblicazione ";
        strSql = strSql + " from ctl_doc l with(nolock) ";
        strSql = strSql + " 	left outer join ctl_doc g with(nolock) on l.Linkeddoc = g.versione and g.statofunzionale = 'Pubblicato' and g.tipodoc = 'AVCP_GARA' ";
        strSql = strSql + " 	inner join document_avcp_lotti o with(nolock) on l.id = o.idheader and o.Anno is not null";
        strSql = strSql + " 		left join lib_domainvalues val with(nolock) ON val.dmv_dm_id = 'Scelta_contraente' and val.dmv_cod = o.Scelta_Contraente ";

        //'-- esclusi i CIG presenti nella relazione
        strSql = strSql + "			left join CTL_RELATIONS NC with(nolock) on nc.REL_Type = 'AVCP_XML' and nc.REL_ValueInput = 'CIG_TO_REMOVE' and o.Cig = nc.rel_valueoutput ";


        strSql = strSql + "  where l.tipodoc = 'AVCP_LOTTO'  ";
        strSql = strSql + "  	   and l.deleted = 0 ";
        strSql = strSql + "  	   and nc.rel_valueoutput is null ";
        strSql = strSql + "        and l.statofunzionale = 'Pubblicato' ";
        strSql = strSql + "        and ( isnull(l.Linkeddoc,0) = 0 or  g.id is not null ) ";
        strSql = strSql + " 	   and convert( varchar(7) , o.DataPubblicazione , 121)  >= '2012-12' ";


        //'if cstr(request.querystring("con_anno_corrente")) <> "1" then
        //'	strSql = strSql & "		   and o.anno < year(getdate()) "
        //'end if
        if (!string.IsNullOrEmpty(annoEstrazione))
        {
            strSql = strSql + "		   and ( year(DataPubblicazione) " + operatoreAnno + annoEstrazione;
            strSql = strSql + "		     		or o.cig in ( select CIG from #cig_anno ) ) ";
        }
        //'-- decommentare per scaricare solo i lotti senza warning
        //'strSql = strSql & "		   and isnull(cast(o.warning as varchar),'') = '' "
        if (!string.IsNullOrEmpty(CStr(ente)))
        {
            //'strSql = strSql & " 			and l.azienda in ( select dbo.GetIdAzi_from_CodiceFiscale( @codiceFiscale ) ) "
            strSql = strSql + " 			and l.azienda in ( select * from dbo.split( @listaAzi,',' ) ) ";
        }
        strSql = strSql + "  order by o.DataPubblicazione ";

        //'response.write strSql
        //'response.end
        TSRecordSet getLotti = null;
        try
        {
            _getLotti = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString);
        }
        catch (Exception ex)
        {
            TracciaErrore("avcp_producixml.asp.get recordSet dei lotti ", ex.Message, 0, null);

        }
        return _getLotti;

    }
    void tracciaFlussoAVCP(string note, string allegato, string titolo)
    {
        string strSql = "";
        CommonDbFunctions cdf = new CommonDbFunctions();

        strSql = "insert into ctl_doc (TipoDoc,StatoFunzionale,Deleted,StatoDoc,Data,DataInvio, PrevDoc, Titolo, Note, sign_attach, idpfu, azienda ) ";
        strSql = strSql + " values ('AVCP_LOG_FLUSSI','Pubblicato',0,'Saved',getdate(),getdate(),0, '" + titolo.Replace("'", "''") + "', '" + note.Replace("'", "''") + "','" + allegato.Replace("'", "''") + "'," + CStr(session["idPfu"]) + "," + CStr(idAziEnte) + " ) ";
        strSql = strSql + " declare @idGenerato int ";
        strSql = strSql + " declare @protocollo varchar(400) ";
        strSql = strSql + " set @idGenerato = @@identity ";
        strSql = strSql + " EXEC ctl_GetNewProtocol 'ANAC' , '', @Protocollo output ";
        strSql = strSql + " update ctl_doc ";
        strSql = strSql + "		set protocollo = @Protocollo ";
        strSql = strSql + " where id = @idGenerato ";
        try
        {
            cdf.Execute(strSql, ApplicationCommon.Application.ConnectionString);
        }
        catch (Exception ex)
        {
            TracciaErrore("avcp_producixml.asp.tracciaFlussoAVCP()", ex.Message, 0, null);

        }

    }
    string getCfEnte(string idAzi)
    {
        CommonDbFunctions cdf = new CommonDbFunctions();
        string strSql = "";
        string val = "";

        strSql = "select vatValore_ft as val from Dm_Attributi dm where dm.lnk = " + CLng(idAzi) + " and dm.dztnome = 'codicefiscale' ";
        TSRecordSet rs = null;
        try
        {
            rs = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString);
        }
        catch (Exception ex)
        {
            TracciaErrore("avcp_producixml.asp.getCfEnte ", ex.Message, 0, null);

        }
        if (rs.RecordCount > 0)
        {
            rs.MoveFirst();
            val = GetValueFromRS(rs.Fields["val"]);
        }
        return CStr(val);

    }
    //'-- Recupero i partecipanti (singoli e/o gruppi)
    TSRecordSet getDocPartecipanti(string lotto)
    {
        CommonDbFunctions cdf = new CommonDbFunctions();
        string strSql = "";
        TSRecordSet _getDocPartecipanti = null;
        //'stop

        //'-- mi faccio ritornare prima i gruppi perchè così l'xsd li vuole
        strSql = $@"select p.* from CTL_DOC L with(nolock) ";
        strSql = strSql + " 	inner join CTL_DOC p with(nolock) on p.Deleted = 0 and p.tipoDoc in ('AVCP_OE','AVCP_GRUPPO') and p.statofunzionale = 'Pubblicato' and p.linkedDoc = l.versione";
        strSql = strSql + " where L.tipodoc ='AVCP_LOTTO' and  L.id = " + CLng(lotto);
        strSql = strSql + " order by p.TipoDoc ";
        try
        {
            _getDocPartecipanti = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString);
        }
        catch (Exception ex)
        {
            TracciaErrore("avcp_producixml.asp.getDocPartecipanti ", ex.Message, 0, null);

        }
        return _getDocPartecipanti;
    }
    TSRecordSet getAggiudicatario(string lotto)
    {
        CommonDbFunctions cdf = new CommonDbFunctions();
        string strSql = "";
        TSRecordSet _getAggiudicatario = null;
        strSql = "select p.* ";
        strSql = strSql + " from CTL_DOC L with(nolock)";
        strSql = strSql + "     inner join CTL_DOC p with(nolock) on p.tipoDoc in ('AVCP_OE','AVCP_GRUPPO') and p.statofunzionale = 'Pubblicato' and l.versione = p.linkeddoc and p.Deleted = 0 ";
        strSql = strSql + "     inner join Document_avcp_partecipanti part with(nolock) ON part.idHeader = p.id and part.aggiudicatario = 1 ";
        strSql = strSql + " where L.tipodoc ='AVCP_LOTTO' and  L.id = " + CLng(lotto);
        strSql = strSql + " order by ( case when p.TipoDoc = 'AVCP_GRUPPO' then 0 else 1 end ) ASC";// '-- facciamo uscire prima i raggruppamenti e poi i singoli

        try
        {
            _getAggiudicatario = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString);
        }
        catch (Exception ex)
        {
            TracciaErrore("avcp_producixml.asp.getAggiudicatario ", ex.Message, 0, null);

        }

        return _getAggiudicatario;
    }

    //'-- Funzione non + usata. era sbagliata
    TSRecordSet getAggiudicatari(string lotto)
    {
        string strSql = "";
        CommonDbFunctions cdf = new CommonDbFunctions();
        strSql = "select partecipanti.* from ctl_doc lotto with(nolock) ";
        strSql = strSql + "  inner join ctl_doc partecipanti with(nolock) ON lotto.versione = partecipanti.linkedDoc ";
        strSql = strSql + "	 inner join document_AVCP_partecipanti part with(nolock) ON part.idHeader = partecipanti.id ";
        strSql = strSql + " where part.aggiudicatario = 1 and lotto.versione = " + CLng(lotto);
        TSRecordSet _getAggiudicatari = null;

        try
        {
            _getAggiudicatari = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString);
        }
        catch (Exception ex)
        {
            TracciaErrore("avcp_producixml.asp.getAggiudicatari ", ex.Message, 0, null);

        }
        return _getAggiudicatari;
    }

    //'-- Recupero le informazioni del partecipanti o dei partecipanti se è un gruppo
    TSRecordSet getInfoPartecipanti(string idPartecipante)
    {
        CommonDbFunctions cdf = new CommonDbFunctions();
        string strSql = "";
        //'--  select a.*, val.dmv_codExt as Ruolo  from  CTL_DOC p
        //'inner join dbo.document_AVCP_partecipanti a on p.id = a.idheader
        //'left join lib_domainvalues val ON val.dmv_dm_id = 'Ruolopartecipante' and val.dmv_cod = RuoloPartecipante

        //'---- per ogni partecipante prendo i dati degli OE
        strSql = " select a.*, val.dmv_codExt as Ruolo  from  CTL_DOC p with(nolock) ";
        strSql = strSql + "		 inner join dbo.document_AVCP_partecipanti a with(nolock) on p.id = a.idheader ";
        strSql = strSql + " 	 left join lib_domainvalues val with(nolock) ON val.dmv_dm_id = 'Ruolopartecipante' and val.dmv_cod = a.RuoloPartecipante ";
        strSql = strSql + " where  p.tipoDoc in ('AVCP_OE','AVCP_GRUPPO') and p.statofunzionale = 'Pubblicato' and p.id = " + CLng(idPartecipante);
        TSRecordSet _getInfoPartecipanti = null;
        try
        {
            _getInfoPartecipanti = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString);
        }
        catch (Exception ex)
        {
            TracciaErrore("avcp_producixml.asp.getInfoPartecipanti ", ex.Message, 0, null);

        }
        return _getInfoPartecipanti;
    }
    void validaCampo(string campo, int maxLenght)
    {

    }

    string XmlEncode(string str)
    {
        //string s = "";
        //string caratteriAmmessi = "";
        //int i = 0;
        //if(IsNull(str))
        //{
        //	str = "";
        //}
        //caratteriAmmessi = @"QWERTYUIOPASDFGHJKLZXCVBNMòàùè%$£€~@ +1234567890'ì:\/!$%()=^{[]}_-?&;.,*+#";
        //s = str.Replace("&", "&amp;");
        //s = s.Replace("<", "&lt;");
        //s = s.Replace(">", "&gt;");
        //s = s.Replace(@"""", @"&quot;");
        //s = s.Replace("'", "&apos;");
        //string tmp = "";
        //string c = "";
        //int l =0;
        //l = s.Length;
        //for(i = 1;i<=l;i++)
        //{
        //	c = Strings.Mid(s, i, 1);
        //	if(Strings.AscW(c) <10)
        //	{
        //		c = " ";
        //	}
        //	if((caratteriAmmessi.ToUpper()).Contains(c.ToUpper(), StringComparison.Ordinal))
        //	{
        //		c = c;

        //	}
        //	else
        //	{
        //		c = "&#" + Strings.AscW(c) + ";";
        //	}

        //	tmp = tmp + c;

        //}
        return CommonModule.XmlUtil.XmlEncode(str);

    }

    string invokePage(string pageWithParams)
    {
        //dim obj
        string protocol = "";
        string nomeApp = "";
        string urlToInvoke = "";

        string _invokePage = "";


        if (IsEmpty(ApplicationCommon.Application["NOMEAPPLICAZIONE"]) || string.IsNullOrEmpty(ApplicationCommon.Application["NOMEAPPLICAZIONE"]!.Trim()))
        {
            nomeApp = CStr(ApplicationCommon.Application["ApplicationName"]);
        }
        else
        {
            nomeApp = CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"]);
        }
        if (IsEmpty(ApplicationCommon.Application["WEBSERVERAPPLICAZIONE_INTERNO"]) || string.IsNullOrEmpty(ApplicationCommon.Application["WEBSERVERAPPLICAZIONE_INTERNO"]))
        {
            protocol = "http://";
            if (CInt(HttpContext.GetServerVariable("SERVER_PORT_SECURE")) == 1)
            {
                protocol = "https://";
            }
            urlToInvoke = protocol + HttpContext.GetServerVariable("LOCAL_ADDR") + "/" + nomeApp + "/" + pageWithParams;

        }
        else
        {
            urlToInvoke = ApplicationCommon.Application["WEBSERVERAPPLICAZIONE_INTERNO"] + "/" + nomeApp + "/" + pageWithParams;
        }
        try
        {

            _invokePage = invokePage(urlToInvoke);

        }
        catch (Exception ex)
        {
            _invokePage = "0#" + ex.Message;
        }


        return _invokePage;

    }



    TSRecordSet getConfiguration(string idAziEnte)
    {
        CommonDbFunctions cdf = new CommonDbFunctions();
        string strSql = "";
        TSRecordSet _getConfiguration = null;

        strSql = " select conf.url_client, conf.FileNameIndice, conf.PercorsoDiRete ";
        strSql += "	from ctl_doc doc with(nolock) ";
        strSql += "		INNER JOIN Document_AVCP_CONFIG conf with(nolock) ON doc.id = conf.idHeader ";
        strSql += $" where doc.deleted = 0 and doc.statoFunzionale = 'Pubblicato' and doc.TipoDoc = 'AVCP_CONFIG' and doc.azienda =  {CLng(idAziEnte)}";

        try
        {
            _getConfiguration = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString);
        }
        catch (Exception ex)
        {
            TracciaErrore("avcp_producixml.asp.getConfiguration()", ex.Message, 0, null);
        }
        return _getConfiguration;
    }
}@Html.Raw(htmlToReturn.Out())	
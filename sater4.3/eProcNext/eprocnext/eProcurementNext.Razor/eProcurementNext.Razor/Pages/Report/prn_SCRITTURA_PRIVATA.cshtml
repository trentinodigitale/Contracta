@page "/Report/prn_SCRITTURA_PRIVATA.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using Microsoft.VisualBasic
@using System.Globalization
@using static eProcurementNext.CommonDB.Basic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.print_documentModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.Report.prn_SCRITTURA_PRIVATAModel;
@using static eProcurementNext.Session.SessionMiddleware;
@model eProcurementNext.Razor.Pages.Report.prn_SCRITTURA_PRIVATAModel
@{
    CommonDbFunctions cdf = new();
    LoadSession(HttpContext, session);
    EprocResponse htmlToReturn = new();

    objDoc = PrintDocument(session, htmlToReturn, HttpContext, Response, Request);//PrintDocument ok
    var sqlParams = new Dictionary<string, object?>();
}
@{

    htmlToReturn.Write($@"
		<html>
	<head>");

    addMetaTag(htmlToReturn);

    string GetEmailAzi(string cod)
    {
        string strRet = string.Empty;
        sqlParams.Clear();
        sqlParams.Add("@cod", CInt(cod));
        TSRecordSet? rs = cdf.GetRSReadFromQuery_("SELECT aziE_Mail from Aziende with(nolock) where IdAzi=@cod", ApplicationCommon.Application.ConnectionString, sqlParams);
        if (rs is not null && rs.RecordCount > 0)
        {
            strRet = CStr(rs["aziE_Mail"]);
        }
        return strRet;
    }

    int IdPfuPO = 0;
    string GetPuntoOrdinante(string cod)
    {
        string strRet = string.Empty;
        sqlParams.Clear();
        sqlParams.Add("@cod", CInt(cod));
        TSRecordSet? rs = cdf.GetRSReadFromQuery_("SELECT p.pfunomeutente + ' ' + p.pfuCognome as Punto, p.IdPfu from CTL_DOC c with(nolock) inner join CTL_DOC c1 with(nolock) on c1.Id=c.linkedDoc inner join CTL_DOC c2 with(nolock) on c1.LinkedDoc=c2.Id  inner join CTL_DOC_Value c3 on c2.Id=c3.IdHeader and DZT_Name='UserRUP' inner join ProfiliUtente p on c3.Value=p.IdPfu where c.Id=@cod", ApplicationCommon.Application.ConnectionString, sqlParams);
        if (rs is not null && rs.RecordCount > 0)
        {
            strRet = CStr(rs["Punto"]);
            IdPfuPO = CInt(rs["IdPfu"]!);
        }
        return strRet;
    }

    string GetLEGALRAP()
    {
        string strRet = string.Empty;
        string id = GetParamURL(Request.QueryString.ToString(), "IDDOC");
        sqlParams.Clear();
        sqlParams.Add("@id", CInt(id));
        sqlParams.Add("@dse_id", "DOCUMENT");
        sqlParams.Add("@name", "UtenteOfferta");
        TSRecordSet? rs = cdf.GetRSReadFromQuery_("select pfunomeutente + ' ' + pfuCognome as RAPLEG from CTL_DOC_Value inner join ProfiliUtente p on p.IdPfu=Value where IdHeader=@id and DSE_ID=@dse_id and DZT_Name=@name ", ApplicationCommon.Application.ConnectionString, sqlParams);
        if (rs is not null && rs.RecordCount > 0)
        {
            strRet = CStr(rs["RAPLEG"]);
        }
        return strRet;
    }

    //string GetMailRapLeg(string cod)
    //{
    //    TSRecordSet rs = null;
    //    try
    //    {
    //        sqlParams.Clear();
    //        sqlParams.Add("@email", "EmailRapLeg");
    //        sqlParams.Add("@cod", cod);
    //        rs = cdf.GetRSReadFromQuery_("select vatValore_FT from dm_attributi with(nolock) where  dztnome = @email and lnk=@cod", ApplicationCommon.Application.ConnectionString, sqlParams);
    //        rs.MoveFirst();
    //    }
    //    catch
    //    {

    //    }
    //    return GetValueFromRS(rs.Fields["vatValore_FT"]);
    //}

    string GetDatiRegistroImprese(string idAzi)
    {
        string sede = string.Empty;
        sqlParams.Clear();
        sqlParams.Add("@id", CInt(idAzi));
        TSRecordSet? rs = cdf.GetRSReadFromQuery_("select isnull(vatValore_FT,'') as val from DM_Attributi with(nolock) where dztNome = 'SedeCCIAA' and lnk=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
        if (rs is not null && rs.RecordCount > 0)
        {
            rs.MoveFirst();
            sede = CStr(rs["val"]);
        }
        rs = cdf.GetRSReadFromQuery_("select isnull(vatValore_FT,'') as val from DM_Attributi with(nolock) where dztNome = 'IscrCCIAA' and lnk=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
        if (rs is not null && rs.RecordCount > 0)
        {
            rs.MoveFirst();
            sede = $"{sede} - {CStr(rs["val"])}";
        }
        return sede;
    }

    string GetTelefoniRapLeg(string idAzi)
    {
        string ret = string.Empty;
        string id = GetParamURL(Request.QueryString.ToString(), "IDDOC");

        sqlParams.Clear();
        sqlParams.Add("@id", CInt(id));
        sqlParams.Add("@dse_id", "DOCUMENT");
        sqlParams.Add("@name", "UtenteOfferta");
        TSRecordSet? rs = cdf.GetRSReadFromQuery_("select  isnull(pfuTel,'') as tel1, isnull(pfuCell,'') as tel2 from CTL_DOC_Value inner join ProfiliUtente p on p.IdPfu=value where IdHeader=@id and DSE_ID=@dse_id and DZT_Name=@name ", ApplicationCommon.Application.ConnectionString, sqlParams);
        if (rs is not null && rs.RecordCount > 0)
        {
            rs.MoveFirst();

            if (!string.IsNullOrEmpty(CStr(rs["tel1"])))
            {
                ret = $"Tel 1 : {CStr(rs["tel1"])}";
            }
            if (!string.IsNullOrEmpty(ret))
            {
                ret = $"{ret} - ";
            }
            if (!string.IsNullOrEmpty(CStr(rs["tel2"])))
            {
                ret = $"{ret}Tel 2 : {CStr(rs["tel2"])}";
            }
        }
        return ret;
    }

    //'--recupera la tipologia iva settata sulla gara
    //'--cod = id della comunicazione generica a cui è legato il contratto
    string GetTipoIva_Gara(string cod)
    {
        string ret = string.Empty;
        sqlParams.Clear();
        sqlParams.Add("@cod", CInt(cod));
        string strSQL = @"SELECT TipoIVA from CTL_DOC c with (nolock)
																inner join CTL_DOC c1 with (nolock) on c1.Id=c.LinkedDoc
																inner join CTL_DOC c2 with (nolock) on c1.LinkedDoc=c2.Id
																inner join Document_Bando c3 with (nolock) on c2.Id=c3.idHeader
																where  c.Id= @cod";

        TSRecordSet? rs = cdf.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString, sqlParams);
        if (rs is not null && rs.RecordCount > 0)
        {
            rs.MoveFirst();
            string TipoIva = CStr(rs["TipoIVA"]);

            //'--recupero la descrizione
            sqlParams.Clear();
            sqlParams.Add("@nome", "IVA");
            sqlParams.Add("@cod", TipoIva);
            strSQL = @"select 
                     isnull(ml_description, dscTesto) as DMV_DescML 
                     from 
                     	DizionarioAttributi with (nolock)
                     	inner join TipiDatiRange with (nolock) on dztIdTid=tdrIdTid and tdrDeleted=0 
                     	inner join descsI with (nolock) on IdDsc =  tdrIdTid 
                     	inner join LIB_Multilinguismo with (nolock) on ML_KEY = dscTesto 
                     where dztnome=@nome and tdrCodice=@cod";

            TSRecordSet? rs1 = cdf.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString, sqlParams);
            if (rs1 is not null && rs1.RecordCount > 0)
            {
                rs1.MoveFirst();
                ret = CStr(rs1["DMV_DescML"]);
            }
        }

        return ret;
    }

    //'--recupero AOO e AreaDiAppartenenza dal documento CAMBIO_RUOLO_UTENTE inviato
    string Aoo = string.Empty;
    sqlParams.Clear();
    sqlParams.Add("@nome", "aoo");
    sqlParams.Add("@idpfu", IdPfuPO);
    TSRecordSet? rsAooUtente = cdf.GetRSReadFromQuery_("select dbo.GetCodDom2DescML('aoo',attvalue,'I') as Aoo from ProfiliUtenteAttrib with(nolock) where dztNome=@nome and IdPfu=@idpfu", ApplicationCommon.Application.ConnectionString, sqlParams);
    if (rsAooUtente is not null && rsAooUtente.RecordCount > 0)
    {
        rsAooUtente.MoveFirst();
        Aoo = CStr(rsAooUtente["Aoo"]);
    }
    string AreaDiAppartenenza = string.Empty;
    sqlParams.Clear();
    sqlParams.Add("@nome", "AreaDiAppartenenza");
    sqlParams.Add("@idpfu", IdPfuPO);
    TSRecordSet? rsAreaUtente = cdf.GetRSReadFromQuery_("select isnull(attvalue,'') as AreaDiAppartenenza from ProfiliUtenteAttrib with(nolock) where dztnome=@nome and idpfu=@idpfu", ApplicationCommon.Application.ConnectionString, sqlParams);
    if (rsAreaUtente is not null && rsAreaUtente.RecordCount > 0)
    {
        rsAreaUtente.MoveFirst();
        AreaDiAppartenenza = CStr(rsAreaUtente["AreaDiAppartenenza"]).Trim();
    }

    int NumPag = 0;

    htmlToReturn.Write($@"<style>

		.GridPrintProducts{{ font-size:10px;}}

	</style>
	</head>
	<body >


			<center>
				<table  style=""width: 100%; height: 1400px;"">");
    Header();
    htmlToReturn.Write($@"<tr>
						<td height=""100%"" valign=""top"" >
							<div style=""text-align: center; width: 100%; align: center;"">

								<h2>CONTRATTO RELATIVO ALLA RDO " + DOC_Field("DOCUMENT", "ProtocolloRiferimento") + $@" - " + DOC_Field("DOCUMENT", "Body") + $@" </h2>


										 <table>
												<tr><td><b>AMMINISTRAZIONE AGGIUDICATRICE</b></td></tr>
												<br/>
												<tr>
													<td>
														<font class=""Input"">"
                                            );
    PubLegaleAZI(DOC_Field("DOCUMENT", "Azienda"), "1111", htmlToReturn);
    htmlToReturn.Write($@"</font>
													</td>
												</tr>");

    if (!string.IsNullOrEmpty(Aoo))
    {

        htmlToReturn.Write($@"<tr><td nowrap=""nowrap"" colspan=""2"">AOO:" + Aoo + $@"</td></tr>");
    }
    if (!string.IsNullOrEmpty(AreaDiAppartenenza))
    {
        htmlToReturn.Write($@"<tr><td nowrap=""nowrap"" colspan=""2"">" + ApplicationCommon.CNV("Ufficio di Appartenenza") + $@":" + AreaDiAppartenenza + $@"</td></tr>");
    }

    htmlToReturn.Write($@"<tr><td nowrap=""nowrap"" colspan=""2"">Codice Ufficio Fatturazione Elettronica IPA:&nbsp;"
        + DOC_Field("DOCUMENT", "CodiceIPA") + $@"</td></tr>

												<tr><td nowrap=""nowrap"" colspan=""2"">E-Mail:" + GetEmailAzi(DOC_Field("DOCUMENT", "Azienda")) + $@"</td></tr>
												<tr><td nowrap=""nowrap"" colspan=""2"">Rup RDO:" + GetPuntoOrdinante(DOC_Field("DOCUMENT", "LinkedDoc")) + $@"</td></tr>
												<tr><td nowrap=""nowrap"" colspan=""2"">RDO aperta il: &nbsp;" + DOC_Field("DOCUMENT", "DataRiferimentoInizio") + $@"</td></tr>
												<tr><td nowrap=""nowrap"" colspan=""2"">RDO chiusa il: &nbsp;" + DOC_Field("DOCUMENT", "DataScadenzaOfferta") + $@"</td></tr>

										</table>

										<table>
													<tr><td><b>AGGIUDICATARIO</b></td></tr>
													<br/>
													<tr>
														<td>
															<font class=""Input"">"
                    );
    PubLegaleAZI(DOC_Field("DOCUMENT", "Destinatario_Azi"), "1111", htmlToReturn);
    htmlToReturn.Write($@"</font>
														</td>
													</tr>
													<br/>
													<tr><td nowrap=""nowrap"" colspan=""2"">E-Mail:" + GetEmailAzi(DOC_Field("DOCUMENT", "Destinatario_Azi")) + $@"</td></tr>

													<tr><td nowrap=""nowrap"" colspan=""2"">Iscrizione registro delle imprese :" + GetDatiRegistroImprese(DOC_Field("DOCUMENT", "Destinatario_Azi")) + $@"</td></tr>

													<!--tr><td nowrap=""nowrap"" colspan=""2"">Legale Rappresentante:" + GetLEGALRAP() + $@"</td></tr-->

													<tr><td nowrap=""nowrap"" colspan=""2"">" + GetTelefoniRapLeg(DOC_Field("DOCUMENT", "Destinatario_Azi")) + $@"</td></tr>

													<br/>
													<br />
													<tr><td nowrap=""nowrap"" colspan=""2""><b>OFFERTA N." + DOC_Field("DOCUMENT", "ProtocolloOfferta") + $@"&nbsp; DEL" + DOC_Field("DOCUMENT", "DataRisposta") + $@"</b></td></tr>

										</table>
									<br />
									<table><tr><td><b>Beni/Servizi</b></td></tr></table>"
        + GetHtmlData_Dettagli_TABLE("BENI", "", "", "", "", "", "20", "", "", "") +
                                                                $@"<br />
									<table><tr><td><b>PREZZO TOTALE DELL'OFFERTA (" + GetTipoIva_Gara(DOC_Field("DOCUMENT", "LinkedDoc")) + $@"): EURO &nbsp;" + DOC_Field("CONTRATTO", "NewTotal") + $@"</b></td></tr></table>
						<br/>

							</div>

						</td>
					</tr>");
    footer();
    htmlToReturn.Write($@"
				</table>
				<!-- fine pagina 1-->"
    );
    PrintPagina(); htmlToReturn.Write($@"
		<table style=""width: 95 %; height: 1400px; "">"
    ); Header(); htmlToReturn.Write(
                                                    $@"<tr>
						<td height=""100%"" valign=""top"" >
							<table>
												<tr>
													<td><font class=""Input"">"
                                                        + DOC_Field("CONTRATTO", "Template") +
                                                                                                            $@"</font>
													</td>
												</tr>");


    int row6;
    row6 = DOC_NumRow("DOCUMENTAZIONE", "");

    //'-- Se sono state inserite righe di documentazione
    if (row6 > 0)
    {

        htmlToReturn.Write($@"<tr>
						<td>

							<hr/>

							<h3 style=""text-align:left"">Allegati</h3>	<br/>

							Gli allegati al presente contratto, richiamati di seguito, sono parte integrante dello stesso e si intendono accettati e sottoscritti con la sottoscrizione del contratto medesimo. <br/>

						   <table style=""border: 0px solid black; border-collapse: collapse; width: 80%"" align=""center"" cellpadding=""5"">
								<tr style=""height: 18px"">
									<td style=""border: 0px solid black;"" width=""40%"">Descrizione</td>
									<td style=""border: 0px solid black;"" width=""40%"">Allegato</td>
								</tr>");

        for (int i = 0; i <= row6 - 1; i++)
        {


            htmlToReturn.Write($@"<tr style=""height: 20px"">
								<td style=""border: 0px solid black;"" width=""20%""><font class=""Input"">" + DOC_FieldRow("DOCUMENTAZIONE", "Descrizione", i) + $@"</font></td>
								<td style=""border: 0px solid black;"" width=""20%""><font class=""Input"">" + DOC_FieldRow("DOCUMENTAZIONE", "Allegato", i) + $@"</font></td>
							 </tr>");
        }
        htmlToReturn.Write($@"</table>

						<!-- <hr/> -->

						</td>
					</tr>");
    }

    htmlToReturn.Write($@"</table>
					</tr>

					<tr>

						<td>

						<div style=""text-align:right"">"
        + DOC_Field("DOCUMENT", "firmatario") + $@"<br/>
							(Firmato digitalmente)
						</div>"

    );
    footer(); htmlToReturn.Write(

                                            $@"</td>

					</tr>
				</table>
		   </center>

	</body>
	</html>");

    void PrintPagina()
    {
        htmlToReturn.Write($@"<div style=""page-break-after: always""></div>");
    }

  //  void footerold()
  //  {
  //      NumPag = NumPag + 1;

  //      htmlToReturn.Write($@"
		//<br />
		//Scrittura Privata
		//<hr />
		//<table width=""100%"" style=""vertical-align: bottom; bottom: 0px"">
		//	<tr>
		//		<td valign=""bottom"" align=""right"">
		//			 <br>
		//			" + NumPag + $@"
		//		</td>
		//	</tr>
		//</table>");

  //  }

    void Header()
    {
        htmlToReturn.Write($@"<tr><td height=""50px"" align=""center"" valign=""top"">");
        string imgHeader = ApplicationCommon.CNV("HEADER_STAMPE");
        if (imgHeader.Contains("???", StringComparison.Ordinal))
        {
            htmlToReturn.Write($@"<img height=""50px"" src=""logo_new.gif"" border=""0"" alt=""" + ApplicationCommon.CNV("ALT LOGO") + $@"""/>");
        }
        else
        {
            htmlToReturn.Write(imgHeader);
        }
        htmlToReturn.Write("</td></tr>");
        htmlToReturn.Write($@"<tr><td align=""center"" valign=""top"">" + ApplicationCommon.CNV("HEADER_STAMPA_BUSTA_OFFERTA") + $@"

	</td>

	</tr>
	");
    }


    //'------------------------------------------------------------------------------
    //'-- funzione per disegnare il pie pagina
    //'------------------------------------------------------------------------------
    void footer()
    {

        NumPag = NumPag + 1;

        htmlToReturn.Write($@"<tr><td valign=""bottom"" height=""10px"" >");
        htmlToReturn.Write($@"<table width=""100%"" height=""10px"" style=""vertical-align: bottom; bottom: 0px""> ");
        htmlToReturn.Write($@"        <tr><td align=""center"" style=""border-bottom: 1px solid black;"" ><b>" + ApplicationCommon.CNV("") + $@"</b></td></tr><tr>");
        htmlToReturn.Write($@"            <td valign=""bottom"" align=""right"" >");
        htmlToReturn.Write($@"                ");
        htmlToReturn.Write($@"                  <br>Pagina");
        htmlToReturn.Write($@"                " + NumPag);
        htmlToReturn.Write($@"            </td>");
        htmlToReturn.Write($@"        </tr>");
        htmlToReturn.Write($@"    </table>");
        htmlToReturn.Write($@"    </td></tr>");

    }

    try
    {
        FreeMemDocument(session);
    }
    catch
    {

    }
}
@Html.Raw(htmlToReturn.Out())
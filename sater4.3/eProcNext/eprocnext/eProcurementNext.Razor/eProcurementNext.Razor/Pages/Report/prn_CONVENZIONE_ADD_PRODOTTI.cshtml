@page "/Report/prn_CONVENZIONE_ADD_PRODOTTI.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using Microsoft.VisualBasic
@using System.Globalization
@using static eProcurementNext.CommonDB.Basic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.print_documentModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.Report.prn_CONVENZIONE_ADD_PRODOTTIModel;
@model eProcurementNext.Razor.Pages.Report.prn_CONVENZIONE_ADD_PRODOTTIModel
@using static eProcurementNext.Session.SessionMiddleware
@{

	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();

	objDoc = PrintDocument(session, htmlToReturn, HttpContext, Response, Request);//PrintDocument ok
	string IDDOC = objDoc.mp_IDDoc;
}
@{
	var sqlParams = new Dictionary<string, object?>();
	htmlToReturn.Write($@"
	<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"">
	<html>
	<head>");
	addMetaTag(htmlToReturn);
	int NumPagCorrente;
	NumPagCorrente = 0;
	dynamic iif(dynamic a ,dynamic b ,dynamic c )
	{
		if(a)
		{
			return b;
		}
		else
		{
			return c;
		}
	}
	//'--recupero info fornitore
	TSRecordSet rsForn = null;
	sqlParams.Add("@id", DOC_FieldTecnical("DOCUMENT", "Destinatario_Azi"));
	rsForn = cdf.GetRSReadFromQuery_("select * from  aziende where idazi=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
	rsForn.MoveFirst();

	//'--recupero info ente
	TSRecordSet rsEnte = null;
	sqlParams.Clear();
	sqlParams.Add("@id", DOC_FieldTecnical("DOCUMENT", "Azienda"));
	rsEnte = cdf.GetRSReadFromQuery_("select * from  aziende where idazi=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
	rsEnte.MoveFirst();

	//'--determino le info per le pagine da stampare
	int nNumProduct ;
	int NumCol ;
	double nLineeForPage;
	int nLineeSpazioProdotti ;
	int nNumLineeFirstPage ;
	int nLineeTotali ;
	int NumLineeStampate;
	int NumLineeStampatePagina = 0;
	int LastRowDiplayed ;
	int LastColDisplayed;

	LastRowDiplayed = 0;
	LastColDisplayed = 0;

	NumLineeStampate = 0;

	NumCol = objDoc.Sections["PRODOTTI"].mp_Columns.Count;
	//'--numero di linee per pagina
	nLineeForPage = 50;
	//'--numero di linee della prima pagina	
	//'nNumLineeFirstPage = 70

	//'--numero di linee vuote tra un prodotto ed il successivo
	nLineeSpazioProdotti = 2;

	//'--numero di linee per i totali
	int nLineeForTotali = 0;

	//'Response.Write nNumPag

	//'--determino le colonne da nascondere per i dettagli prodotti
	//'--recupero codice dalla convenzione
	string CodiceModelloConvenzione = "";
	string CodiceModelloStampaListino = "" ;
	string strSQL = "";

	TSRecordSet rsModelloStampa = null;
	sqlParams.Clear();
	sqlParams.Add("@id", DOC_FieldTecnical("DOCUMENT", "LinkedDoc"));
	sqlParams.Add("@dse_id", "TESTATA_PRODOTTI");
	sqlParams.Add("@name", "Tipo_Modello_Convenzione");
	strSQL = "select value from ctl_doc_value where idheader=@id and dse_id=@dse_id and dzt_name=@name";

	rsModelloStampa = cdf.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString, sqlParams);
	if(rsModelloStampa.RecordCount >0)
	{
		rsModelloStampa.MoveFirst();
		CodiceModelloConvenzione = GetValueFromRS(rsModelloStampa.Fields["value"]);
	}

	CodiceModelloStampaListino = "MODELLO_BASE_CONVENZIONI_" + CodiceModelloConvenzione + "_MOD_StampaListino";
	//'--recupero colonne del modello di stampa
	TSRecordSet rsColModelloStampa = null;
	strSQL = "";
	sqlParams.Clear();
	sqlParams.Add("@name",CodiceModelloStampaListino);
	strSQL = "select MA_DZT_Name from CTL_models ,CTL_modelattributes where MOD_Name = @name  and MOD_ID = MA_MOD_ID order by ma_order";

	rsColModelloStampa = cdf.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString, sqlParams);
	string strListColumn = ",";
	if(rsColModelloStampa.RecordCount >0)
	{
		rsColModelloStampa.MoveFirst();
		for(int i = 0;i<rsColModelloStampa.RecordCount-1;i++)
		{
			strListColumn = strListColumn + (GetValueFromRS(rsColModelloStampa.Fields["MA_DZT_Name"])).ToUpper() + ",";
			rsColModelloStampa.MoveNext();
		}
	}
	//'--recupero colonne del modello dei prodotti
	Dictionary<string, Field> ColumnProdotti = objDoc.Sections["PRODOTTI"].mp_Columns;
	//'Response.Write CodiceModelloStampaListino
	//'response.end

	string strHideCol = ",";
	for(int i = 1;i<ColumnProdotti.Count;i++)
	{
		if(Strings.InStr( 1, strListColumn, "," + (CStr(ColumnProdotti.ElementAt(i).Value.Name)).ToUpper() + ",")== 0 )
		{
			strHideCol = strHideCol + CStr(ColumnProdotti.ElementAt(i).Value.Name) + ",";
			NumCol = NumCol - 1;
		}
	}
	//'response.write "NumCol:" & NumCol & "<br/>"
	//'response.end

	//set objDB = nothing
	nNumProduct = DOC_NumRow("PRODOTTI", "");
	double nNumLineeTotali = (NumCol + nLineeSpazioProdotti) * nNumProduct; //'+ (nLineeForPage-nNumLineeFirstPage)
																			//'nResiduoLinee =  nLineeForPage - (nNumLineeTotali mod nLineeForPage)
	double nNumPag = Fix(nNumLineeTotali / nLineeForPage);

	if(nNumLineeTotali % nLineeForPage != 0)
	{
		nNumPag = nNumPag + 1;
	}
	//'Response.Write "NumCol=" & NumCol & "<br>"
	//'Response.Write "nNumProduct=" & nNumProduct & "<br>"
	//'Response.Write "nNumLineeTotali=" & nNumLineeTotali & "<br>"
	//'Response.Write "nNumLineeFirstPage=" & nNumLineeFirstPage & "<br>"
	//'Response.Write "nLineeForPage=" & nLineeForPage & "<br>"
	//'Response.Write "nResiduoLinee=" & nResiduoLinee & "<br>"
	//'Response.Write "nNumPag=" & nNumPag & "<br>"
	//'Response.end
	htmlToReturn.Write($@"
	</head>
	<body>

		<style type=""text/css"">



	BODY,DIV ,TABLE, TD {{
	 font-family:'Arial','Times New Roman',serif;
	 font-size:9pt;
	 font-style:normal;
	 font-weight:normal


	}}
	.Input
	{{
	 font-family:'Arial','Times New Roman',serif;
	 font-size:10pt;
	 font-style:normal;
	 font-weight:bold

	}}

	.TITLE{{
	 font-family:'Arial','Times New Roman',serif;
	 font-size:12pt;
	 font-style: bold;
	 font-weight:bold



	}}

	.CellIntestGrid {{
	background:#ffffff;
	--text-transform:uppercase;
	font-weight:bold;
	font-size:9pt;
	width:500px;
	}}

	.CellGridPrintProducts {{ 
	background:#ffffff;
	font-size:9pt;
	}}

	.CellRow{{
		padding-top:5px;
	}}

	@media print
	  {{
	  #Ricevuta {{}}
	  }}

	  @media screen
	  {{
	  #Ricevuta {{}}
	  }}

	 ul li, table ul li {{ list-style-type:none; }}

	</style>
	<div style=""text-align: center; "">

			<center>");
	Header();
	htmlToReturn.Write($@"
		<br/>
		<h2 style =""font-size:16px; text-align: left; width: 800px; "">" + ApplicationCommon.CNV("Dati del documento") + $@"</h2>
		<div style=""font-size:16px; text-align: left; width: 800px; "">
			<b>" + ApplicationCommon.CNV("Registro") + $@":</b>" + DOC_Field("DOCUMENT", "Protocollo") + $@"&nbsp;&nbsp;<b>" + ApplicationCommon.CNV("Data") + $@":</b>" + DOC_Field("DOCUMENT", "DataInvio") + $@"											
		</div>
		<br/>");
	htmlToReturn.Write($@"
	<h2 style =""font-size:16px; text-align: left; width: 800px; "">" + ApplicationCommon.CNV("Dati Convenzione") + $@"</h2>
	<div style=""font-size:16px; text-align: left; width: 800px; "">
		<b>" + ApplicationCommon.CNV("Numero Convenzione") + $@":</b>" + DOC_Field("DOCUMENT", "NumOrd") + $@"<br/><br/>
		<b>" + ApplicationCommon.CNV("Oggetto Convenzione") + $@":</b>" + DOC_Field("DOCUMENT", "Body") + $@"										
	</div>
	<br/>
	<h2 style =""font-size:16px; text-align: left; width: 800px; "">" + ApplicationCommon.CNV("Motivazione") + $@"</h2>
	<div style=""font-size:16px; text-align: left; width: 800px; "">
	" + DOC_Field("MOTIVAZIONE", "Motivazione") + $@"						
	</div>");
	//'--STAMPO DALLA PAGINA 2 alla fine
	for(int k = 1;k<nNumPag;k++)
	{
		htmlToReturn.Write($@"<table border=0 style=""width: 800px; height:100%;"">");
		if(k >1)
		{
			Header();
		}
		htmlToReturn.Write($@"
		<tr>

				" + GetHtmlData_Dettagli_TABLE_PERPAGINA(k, "PRODOTTI", "", "", "", strHideCol, "", CInt(nLineeForPage), "", "", "VERTICALE", ref NumLineeStampate, ref NumLineeStampatePagina, NumCol, ref LastRowDiplayed, ref LastColDisplayed) + $@"


				</div>
			</td>
		</tr>");
		//'--PIE DI PAGINA
		footer();
		htmlToReturn.Write($@"</table>");
		//'--SALTO PAGINA
		if(k != nNumPag)
		{
			PrintPagina();
		}
	}
	htmlToReturn.Write($@"
		</center>
		</div>
	</body>
	</html>");
	void PrintPagina()
	{
		htmlToReturn.Write($@"<div style=""page-break-after: always""></div>");
	}

	void Header()
	{
		htmlToReturn.Write($@"<tr><td height=""50px"" align=""center"" valign=""top"" >");

		string imgHeader = ApplicationCommon.CNV("HEADER_STAMPE");
		if(imgHeader.Contains("???", StringComparison.Ordinal))
		{
			htmlToReturn.Write($@"<img height=""50px"" src=""logo_new.gif"" border=""0"" alt=""" + ApplicationCommon.CNV("ALT LOGO") + $@"""/>");
		}
		else
		{
			htmlToReturn.Write(imgHeader);
		}
		htmlToReturn.Write("</td></tr>");
		htmlToReturn.Write($@"
			<tr><td align=center>
		<center>
			<div style=""font-size:16px; text-align: center; width: 800px; align: center;font-weight:bold;"">
				Elenco inserimento prodotti relativi alla Convenzione: "+DOC_Field("DOCUMENT", "ProtocolloRiferimento")+$@"							
			</div>
		</center>
		</td>
		</tr>");
	}
	//'------------------------------------------------------------------------------
	//'-- funzione per disegnare il pie pagina
	//'------------------------------------------------------------------------------
	void footer()
	{
		NumPagCorrente = NumPagCorrente + 1;
		htmlToReturn.Write($@"<tr><td valign=""bottom"" height=""5px"" >");
		htmlToReturn.Write($@"<table width=""800px"" height=""5px"" style=""vertical-align: bottom; bottom: 0px""> ");
		htmlToReturn.Write($@"        <tr><td align=""left"" ><b></b></td></tr><tr>");
		htmlToReturn.Write($@"            <td style=""border-bottom: 1px solid black;border-top: 1px solid black;""  valign=""bottom"" align=""right"" >");
		htmlToReturn.Write($@"                ");
		htmlToReturn.Write($@"                Pagina: " + NumPagCorrente);
		htmlToReturn.Write($@"            </td>");
		htmlToReturn.Write($@"        </tr>");
		htmlToReturn.Write($@"    </table>");
		htmlToReturn.Write($@"    </td></tr>");
	}
	try
	{
		FreeMemDocument(session);
	}
	catch
	{
		
	}
}@Html.Raw(htmlToReturn.Out())
@page "/Report/NoTIER_DDT_2_1.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using Microsoft.VisualBasic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.print_documentModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel
@using static eProcurementNext.Razor.Pages.Report.NoTIER_DDT_2_1Model
@model eProcurementNext.Razor.Pages.Report.NoTIER_DDT_2_1Model
@using static eProcurementNext.Session.SessionMiddleware
@{
	CommonDbFunctions cdf = new CommonDbFunctions();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new EprocResponse();
}
@{

	htmlToReturn.Write($@"<?xml version=""1.0"" encoding=""UTF-8""?>");
	objDoc = PrintDocument(session, htmlToReturn, HttpContext, Response, Request);//PrintDocument ok
	//'http://afsvm043/application/report/NoTIER_DDT.asp?typedoc=NOTIER_DDT&iddoc=75120
	Response.ContentType = "TEXT/XML";
	//'DOC_Field("DSE_ID","DZT_NOME")
	//'DOC_FieldTecnical("DSE_ID","DZT_NOME")
	//'CNV("KEY_MLG")
	//'nr = DOC_NumRow( "DOCUMENTAZIONE", "" )
	//'for i = 0 to nr-1
	//'	objattach.Init "Allegato", DOC_FieldRowTecnical( "DOCUMENTAZIONE", "Allegato", i ) , nothing, "IN", true
	//'	response.Write "<tr class=""""><td valign="""" class=""CellGridPrintProducts""><font class=""PrintValues"">" & DOC_FieldRow( "DOCUMENTAZIONE", "Descrizione", i )& "</font></td><td class=""linkAttachment""><font class=""PrintValues"">" 
	//'	objattach.Html response,false
	//'	response.Write  "</font></td></tr>"
	//'next 
	htmlToReturn.Write($@"
	<DespatchAdvice xmlns=""urn:oasis:names:specification:ubl:schema:xsd:DespatchAdvice-2"" xmlns:cac=""urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2"" xmlns:cbc=""urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2"">
	<cbc:UBLVersionID>2.1</cbc:UBLVersionID>
	<cbc:CustomizationID>urn:www.cenbii.eu:transaction:biitrns016:ver1.0:extended:urn:www.peppol.eu:bis:peppol30a:ver1.0:extended:urn:www.ubl-italia.org:spec:ddt:ver2.1</cbc:CustomizationID>
	<cbc:ProfileID>urn:www.cenbii.eu:profile:bii30:ver2.0</cbc:ProfileID>
	<cbc:ID>" + DOC_XML_FIELD("DESPATCHADVICE", "DespatchAdvice_ID") + $@"</cbc:ID>
	<cbc:IssueDate>" + Strings.Left(DOC_XML_FIELD("DESPATCHADVICE", "DespatchAdvice_IssueDate"), 10) + $@"</cbc:IssueDate>");

	dynamic DespatchAdvice_Note = DOC_XML_FIELD("DESPATCHADVICE", "DespatchAdvice_Note");
	if(!string.IsNullOrEmpty(CStr(DespatchAdvice_Note)))
	{
		htmlToReturn.Write("<cbc:Note>" + DespatchAdvice_Note + "</cbc:Note>");
	}

	string OrderReference_ID = DOC_XML_FIELD("DESPATCHADVICE", "OrderReference_ID");
	string OrderTypeCode = DOC_XML_FIELD("DESPATCHADVICE", "OrderTypeCode");

	if(!string.IsNullOrEmpty(CStr(OrderReference_ID)))
	{
		htmlToReturn.Write($@"
			<cac:OrderReference>
			<cbc:ID>" + OrderReference_ID + $@"</cbc:ID>
			<cbc:IssueDate>" + Strings.Left(DOC_XML_FIELD("DESPATCHADVICE", "OrderReference_IssueDate"), 10) + $@"</cbc:IssueDate>");

		if(!string.IsNullOrEmpty(CStr(OrderTypeCode)))
		{
			htmlToReturn.Write($@"<cbc:OrderTypeCode listID=""UNCL1001"">" + OrderTypeCode + $@"</cbc:OrderTypeCode>");
		}
		htmlToReturn.Write("</cac:OrderReference>");
	}
	else
	{
		//'-- Commento questo blocco perchè hanno cambiato la gestione degli errori introducendi i WARNING. prima invece era bloccante
		//'	<cac:OrderReference>
		//'		<cbc:ID>NA</cbc:ID>
		//'	</cac:OrderReference>
	}
	dynamic AdditionalDocumentReference_CIG = DOC_XML_FIELD("DESPATCHADVICE", "AdditionalDocumentReference_CIG");
	dynamic AdditionalDocumentReference_CIG_IssueDate = DOC_XML_FIELD("DESPATCHADVICE", "AdditionalDocumentReference_CIG_IssueDate");//  '-- fare una left a 10 se il campo è presente

	if(!string.IsNullOrEmpty( CStr(AdditionalDocumentReference_CIG)))
	{
		htmlToReturn.Write($@"
		<cac:AdditionalDocumentReference>
			<cbc:ID>" + AdditionalDocumentReference_CIG + $@"</cbc:ID>");

		if(!string.IsNullOrEmpty(AdditionalDocumentReference_CIG_IssueDate))
		{
			htmlToReturn.Write("<cbc:IssueDate>" + Strings.Left(AdditionalDocumentReference_CIG_IssueDate, 10) + $@"</cbc:IssueDate>");
		}

		htmlToReturn.Write($@"<cbc:DocumentType>CIG</cbc:DocumentType>
		</cac:AdditionalDocumentReference>");
	}

	dynamic AdditionalDocumentReference_CUP = DOC_XML_FIELD("DESPATCHADVICE", "AdditionalDocumentReference_CUP");
	dynamic AdditionalDocumentReference_CUP_IssueDate = DOC_XML_FIELD("DESPATCHADVICE", "AdditionalDocumentReference_CUP_IssueDate");//  '-- fare una left a 10 se il campo è presente

	if(!String.IsNullOrEmpty(AdditionalDocumentReference_CUP))
	{
		htmlToReturn.Write($@"
		<cac:AdditionalDocumentReference>
			<cbc:ID>" + AdditionalDocumentReference_CUP + $@"</cbc:ID>");

		if(!string.IsNullOrEmpty(AdditionalDocumentReference_CUP_IssueDate))
		{
			htmlToReturn.Write($@"<cbc:IssueDate>" + Strings.Left(AdditionalDocumentReference_CUP_IssueDate, 10) + $@"</cbc:IssueDate>");
		}
		htmlToReturn.Write($@"<cbc:DocumentType>CUP</cbc:DocumentType>
		</cac:AdditionalDocumentReference>");
	}

	dynamic AdditionalDocumentReference_CONV = DOC_XML_FIELD("DESPATCHADVICE", "AdditionalDocumentReference_CONV");
	dynamic AdditionalDocumentReference_CONV_IssueDate = DOC_XML_FIELD("DESPATCHADVICE", "AdditionalDocumentReference_CONV_IssueDate");//  '-- fare una left a 10 se il campo è presente

	if(!string.IsNullOrEmpty(CStr(AdditionalDocumentReference_CONV)))
	{
		htmlToReturn.Write($@"
		<cac:AdditionalDocumentReference>
			<cbc:ID>" + AdditionalDocumentReference_CONV + $@"</cbc:ID>");

		if(!string.IsNullOrEmpty(AdditionalDocumentReference_CONV_IssueDate))
		{
			htmlToReturn.Write($@"<cbc:IssueDate>" + Strings.Left(AdditionalDocumentReference_CONV_IssueDate, 10) + $@"</cbc:IssueDate>");
		}
		htmlToReturn.Write($@"
			<cbc:DocumentType>CONVENZIONE</cbc:DocumentType>
		</cac:AdditionalDocumentReference>");

	}
	dynamic AdditionalDocumentReference_ID = DOC_XML_FIELD("DESPATCHADVICE", "AdditionalDocumentReference_ID");
	dynamic AdditionalDocumentReference_DocType = DOC_XML_FIELD("DESPATCHADVICE", "AdditionalDocumentReference_DocType");
	dynamic AdditionalDocumentReference_IssueDate = DOC_XML_FIELD("DESPATCHADVICE", "AdditionalDocumentReference_IssueDate");//  '-- fare una left a 10 se il campo è presente

	if(!string.IsNullOrEmpty(CStr(AdditionalDocumentReference_ID)) && !string.IsNullOrEmpty(AdditionalDocumentReference_DocType))
	{
		htmlToReturn.Write($@"<cac:AdditionalDocumentReference>
			<cbc:ID>" + AdditionalDocumentReference_ID + $@"</cbc:ID>");

		if(!string.IsNullOrEmpty(AdditionalDocumentReference_IssueDate))
		{
			htmlToReturn.Write($@"<cbc:IssueDate>" + Strings.Left(AdditionalDocumentReference_IssueDate, 10) + $@"</cbc:IssueDate>");
		}
		htmlToReturn.Write($@"<cbc:DocumentType>" + AdditionalDocumentReference_DocType + $@"</cbc:DocumentType>
		</cac:AdditionalDocumentReference>");
	}
	//'idAziMittente = DOC_FieldTecnical("DOCUMENT","Azienda")
	//'dim rsAzi
	//'set rsAzi = getrs("select aziRagioneSociale, vatValore_FT as cf from aziende,dm_attributi where idazi = lnk and dztnome = 'codicefiscale' and idazi = " & cstr(idAziMittente))
	//'rsAzi.movefirst
	//'ragioneSocialeMitt = rsAzi("aziRagioneSociale")
	//'cfMitt = rsAzi("cf")
	//'set rsAzi = nothing

	string ragioneSocialeMitt = DOC_XML_FIELD("DESPATCHSUPPLIERPARTY", "PartyName");
	string cfMitt = DOC_XML_FIELD("DESPATCHSUPPLIERPARTY", "PartyIdentification_ID");
	string schemeID = DOC_XML_FIELD("DESPATCHSUPPLIERPARTY", "schemeID");

	htmlToReturn.Write($@"
	<cac:DespatchSupplierParty>
		<cac:Party>

			<cac:PartyIdentification>
				<cbc:ID schemeID=""" + schemeID + $@""">" + cfMitt + $@"</cbc:ID>
			</cac:PartyIdentification>
			<cac:PartyName>
				<cbc:Name>" + ragioneSocialeMitt + $@"</cbc:Name>
			</cac:PartyName>");
	string postalAddressID = DOC_XML_FIELD("DESPATCHSUPPLIERPARTY", "PostalAddress_ID");
	if(string.IsNullOrEmpty(CStr(postalAddressID)))
	{
		postalAddressID = "NA";
	}
	//'<!-- AGGIUNTO BLOCCO OBBLIGATORIO PER ART. 21, COMMA 4 DEL DPR N. 633/1972  -->
	htmlToReturn.Write($@"
	<cac:PostalAddress>
				<cbc:ID>" + postalAddressID + $@"</cbc:ID>
				<cbc:StreetName>" + DOC_XML_FIELD("DESPATCHSUPPLIERPARTY", "PostalAddress_StreetName") + $@"</cbc:StreetName>");
	addOptionalTag(DOC_XML_FIELD("DESPATCHSUPPLIERPARTY","PostalAddress_AdditionalStreetName"), "cbc:AdditionalStreetName");
	htmlToReturn.Write($@"<cbc:CityName>" + DOC_XML_FIELD("DESPATCHSUPPLIERPARTY", "PostalAddress_CityName") + $@"</cbc:CityName>");
	addOptionalTag(DOC_XML_FIELD("DESPATCHSUPPLIERPARTY", "PostalAddress_PostalZone"), "cbc:PostalZone");
	htmlToReturn.Write($@"<cbc:CountrySubentity>" + DOC_XML_FIELD("DESPATCHSUPPLIERPARTY", "PostalAddress_CountrySubentity") + $@"</cbc:CountrySubentity>
				<cac:Country>
					<cbc:IdentificationCode listID=""ISO3166-1:Alpha2"">" + DOC_XML_FIELD("DESPATCHSUPPLIERPARTY", "PostalAddress_Country") + $@"</cbc:IdentificationCode>
				</cac:Country>
			</cac:PostalAddress>");
	string Contact_Name = DOC_XML_FIELD("DESPATCHSUPPLIERPARTY", "Contact_Name");
	string Contact_Telephone = DOC_XML_FIELD("DESPATCHSUPPLIERPARTY", "Contact_Telephone");
	string Contact_Telefax = DOC_XML_FIELD("DESPATCHSUPPLIERPARTY", "Contact_Telefax");
	string Contact_ElectronicMail = DOC_XML_FIELD("DESPATCHSUPPLIERPARTY", "Contact_ElectronicMail");

	if(!string.IsNullOrEmpty(CStr(Contact_Name)) || !string.IsNullOrEmpty(CStr(Contact_Telephone)) || !string.IsNullOrEmpty(CStr(Contact_Telefax)) || !string.IsNullOrEmpty(CStr(Contact_ElectronicMail)))
	{
		htmlToReturn.Write("<cac:Contact>");
		addOptionalTag(DOC_XML_FIELD("DESPATCHSUPPLIERPARTY", "Contact_Name"), "cbc:Name");
		addOptionalTag(DOC_XML_FIELD("DESPATCHSUPPLIERPARTY", "Contact_Telephone"), "cbc:Telephone");
		addOptionalTag(DOC_XML_FIELD("DESPATCHSUPPLIERPARTY", "Contact_Telefax"), "cbc:Telefax");
		addOptionalTag(DOC_XML_FIELD("DESPATCHSUPPLIERPARTY", "Contact_ElectronicMail"), "cbc:ElectronicMail");
		htmlToReturn.Write("</cac:Contact>");

	}
	htmlToReturn.Write($@"
	</cac:Party>
	</cac:DespatchSupplierParty>

	<cac:DeliveryCustomerParty>
		<cac:Party>");
	

	string endPointDestinatario = DOC_XML_FIELD("DELIVERYCUSTOMERPARTY", "EndpointID_Destinatario");
	string idDest = DOC_FieldTecnical("DELIVERYCUSTOMERPARTY", "EndpointID_Destinatario");
	//'-- se il ddt è associato ad un ordine aggiungo l'endpoint del destinatario e prendo in modo puntuale dai dati dell'ordine anche party identification e party name
	//'--		se invece è un ddt senza ordine recupero i dati dalla selezione del dominio del destinatario
	TSRecordSet rsdest = null;
	string ragioneSocialeDest = "";
	string pivaDest = "";
	if(!string.IsNullOrEmpty(CStr(OrderReference_ID)))
	{
		bool idAssenteInOrd = false;
		//'-- se il DDT è agganciato ad un ordine, ma nell'ordine mancava il PartyIdentification_ID. vado a recuperarlo dalla nostra tabella entrando per idDest
		if(string.IsNullOrEmpty(CStr(DOC_XML_FIELD("DELIVERYCUSTOMERPARTY","PartyIdentification_ID"))))
		{
			idAssenteInOrd = true;

			rsdest = cdf.GetRSReadFromQuery_("select denominazione,PIVA_CF FROM Document_NoTIER_Destinatari with(nolock) where id_peppol = '" + idDest.Replace("'", "''") + "'", ApplicationCommon.Application.ConnectionString);

			if(rsdest.RecordCount >0)
			{
				rsdest.MoveFirst();
				ragioneSocialeDest = GetValueFromRS(rsdest.Fields["denominazione"]);
				pivaDest = GetValueFromRS(rsdest.Fields["PIVA_CF"]);
			}
		}

		htmlToReturn.Write($@"<cbc:EndpointID schemeID=""IT:IPA"">" + getParticipantIdUBL(endPointDestinatario) + $@"</cbc:EndpointID>");
		
		if( idAssenteInOrd)
		{
			htmlToReturn.Write($@"
			<cac:PartyIdentification>
				<cbc:ID schemeID=""IT:VAT"">" + pivaDest + $@"</cbc:ID>
			</cac:PartyIdentification>

			<cac:PartyName>
				<cbc:Name>" + ragioneSocialeDest + $@"</cbc:Name>
			</cac:PartyName>");
		}
		else
		{
			string schemaID_pid_dest = getSchemaFromCod(DOC_XML_FIELD("DELIVERYCUSTOMERPARTY", "schemeID"));

			htmlToReturn.Write($@"
			<cac:PartyIdentification>
				<cbc:ID schemeID=""" + schemaID_pid_dest + $@""">" + DOC_XML_FIELD("DELIVERYCUSTOMERPARTY", "PartyIdentification_ID") + $@"</cbc:ID>
			</cac:PartyIdentification>

			<cac:PartyName>
				<cbc:Name>" + DOC_XML_FIELD("DELIVERYCUSTOMERPARTY", "PartyName") + $@"</cbc:Name>	
			</cac:PartyName>");


		}


	}
	else
	{
		rsdest = cdf.GetRSReadFromQuery_("select denominazione,PIVA_CF FROM Document_NoTIER_Destinatari with(nolock) where id_peppol = '" + idDest.Replace("'", "''") + "'", ApplicationCommon.Application.ConnectionString);
		if(rsdest.RecordCount >0)
		{
			rsdest.MoveFirst();
			ragioneSocialeDest = GetValueFromRS(rsdest.Fields["denominazione"]);
			pivaDest = GetValueFromRS(rsdest.Fields["PIVA_CF"]);

		}
		//set rsdest = nothing

		htmlToReturn.Write($@"<cbc:EndpointID schemeID=""IT:IPA"">" + getParticipantIdUBL((CStr(idDest)).ToUpper()) + $@"</cbc:EndpointID>");
		htmlToReturn.Write($@"
			<cac:PartyIdentification>
				<cbc:ID schemeID=""IT:VAT"">" + pivaDest + $@"</cbc:ID>
			</cac:PartyIdentification>

			<cac:PartyName>
				<cbc:Name>" + ragioneSocialeDest + $@"</cbc:Name>
			</cac:PartyName>");
	}
	postalAddressID = DOC_XML_FIELD("DELIVERYCUSTOMERPARTY", "PostalAddress_ID");
	if(string.IsNullOrEmpty(CStr(postalAddressID)))
	{
		postalAddressID = "NA";
	}

	htmlToReturn.Write($@"
		<cac:PostalAddress>
				<cbc:ID>" + postalAddressID + $@"</cbc:ID>
				<cbc:StreetName>" + DOC_XML_FIELD("DELIVERYCUSTOMERPARTY", "PostalAddress_StreetName") + $@"</cbc:StreetName>");
	addOptionalTag(DOC_XML_FIELD("DELIVERYCUSTOMERPARTY", "PostalAddress_AdditionalStreetName"), "cbc:AdditionalStreetName");
	htmlToReturn.Write($@"<cbc:CityName>" + DOC_XML_FIELD("DELIVERYCUSTOMERPARTY", "PostalAddress_CityName") + $@"</cbc:CityName>");
	addOptionalTag(DOC_XML_FIELD("DELIVERYCUSTOMERPARTY", "PostalAddress_PostalZone"), "cbc:PostalZone");
	htmlToReturn.Write($@"<cbc:CountrySubentity>" + DOC_XML_FIELD("DELIVERYCUSTOMERPARTY", "PostalAddress_CountrySubentity") + $@"</cbc:CountrySubentity>
				<cac:Country>
					<cbc:IdentificationCode listID=""ISO3166-1:Alpha2"">" + DOC_XML_FIELD("DELIVERYCUSTOMERPARTY", "PostalAddress_Country") + $@"</cbc:IdentificationCode>
				</cac:Country>
			</cac:PostalAddress>
		</cac:Party>");
	Contact_Name = DOC_XML_FIELD("DELIVERYCUSTOMERPARTY", "Contact_Name");
	Contact_Telephone = DOC_XML_FIELD("DELIVERYCUSTOMERPARTY", "Contact_Telephone");
	Contact_Telefax = DOC_XML_FIELD("DELIVERYCUSTOMERPARTY", "Contact_Telefax");
	Contact_ElectronicMail = DOC_XML_FIELD("DELIVERYCUSTOMERPARTY", "Contact_ElectronicMail");

	if(!string.IsNullOrEmpty(CStr(Contact_Name)) || !string.IsNullOrEmpty(CStr(Contact_Telephone)) || !string.IsNullOrEmpty(CStr(Contact_Telefax)) || !string.IsNullOrEmpty(CStr(Contact_ElectronicMail)))
	{
		htmlToReturn.Write("<cac:DeliveryContact>");
		addOptionalTag(DOC_XML_FIELD("DELIVERYCUSTOMERPARTY", "Contact_Name"), "cbc:Name");
		addOptionalTag(DOC_XML_FIELD("DELIVERYCUSTOMERPARTY", "Contact_Telephone"), "cbc:Telephone");
		addOptionalTag(DOC_XML_FIELD("DELIVERYCUSTOMERPARTY", "Contact_Telefax"), "cbc:Telefax");
		addOptionalTag(DOC_XML_FIELD("DELIVERYCUSTOMERPARTY", "Contact_ElectronicMail"), "cbc:ElectronicMail");
		htmlToReturn.Write("</cac:DeliveryContact>");
	}
	htmlToReturn.Write("</cac:DeliveryCustomerParty>");

	schemeID = DOC_XML_FIELD("BUYERCUSTOMERPARTY", "schemeID");
	dynamic PartyID = DOC_XML_FIELD("BUYERCUSTOMERPARTY", "PartyIdentification_ID");
	string partyName = DOC_XML_FIELD("BUYERCUSTOMERPARTY", "PartyName");

	if(string.IsNullOrEmpty(CStr(schemeID)))
	{
		schemeID = "IT:CF";
	}

	postalAddressID = DOC_XML_FIELD("BUYERCUSTOMERPARTY", "PostalAddress_ID");
	if(string.IsNullOrEmpty(CStr(postalAddressID)))
	{
		postalAddressID = "NA";
	}

	//'<!-- AGGIUNTO BLOCCO OBBLIGATORIO PER ART. 21, COMMA 4 DEL DPR N. 633/1972  -->
	htmlToReturn.Write($@"
	<cac:BuyerCustomerParty>

		<cac:Party>
			<cac:PartyIdentification>
				<cbc:ID schemeID=""" + schemeID + $@""">" + PartyID + $@"""</cbc:ID>
			</cac:PartyIdentification>
			<cac:PartyName>
				<cbc:Name>""" + partyName + $@"""</cbc:Name>
			</cac:PartyName>");
	htmlToReturn.Write($@"
	<cac:PostalAddress>
				<cbc:ID>""" + postalAddressID + $@"""</cbc:ID>
				<cbc:StreetName>" + DOC_XML_FIELD("BUYERCUSTOMERPARTY", "PostalAddress_StreetName") + $@"</cbc:StreetName>");
	addOptionalTag(DOC_XML_FIELD("BUYERCUSTOMERPARTY","PostalAddress_AdditionalStreetName"), "cbc:AdditionalStreetName");
	htmlToReturn.Write($@"<cbc:CityName>" + DOC_XML_FIELD("BUYERCUSTOMERPARTY", "PostalAddress_CityName") + $@"</cbc:CityName>");
	addOptionalTag(DOC_XML_FIELD("BUYERCUSTOMERPARTY", "PostalAddress_PostalZone"), "cbc:PostalZone");
	htmlToReturn.Write($@"<cbc:CountrySubentity>" + DOC_XML_FIELD("BUYERCUSTOMERPARTY", "PostalAddress_CountrySubentity") + $@"</cbc:CountrySubentity>
					<cac:Country>
						<cbc:IdentificationCode listID=""ISO3166-1:Alpha2"">" + DOC_XML_FIELD("BUYERCUSTOMERPARTY", "PostalAddress_Country") + $@"</cbc:IdentificationCode>
					</cac:Country>
				</cac:PostalAddress>");
	htmlToReturn.Write($@"
	</cac:Party>

	</cac:BuyerCustomerParty>");

	schemeID = DOC_XML_FIELD("SELLERSUPPLIERPARTY", "schemeID");
	PartyID = DOC_XML_FIELD("SELLERSUPPLIERPARTY", "PartyIdentification_ID");
	partyName = DOC_XML_FIELD("SELLERSUPPLIERPARTY", "PartyName");

	Contact_Name = DOC_XML_FIELD("SELLERSUPPLIERPARTY", "Contact_Name");
	Contact_Telephone = DOC_XML_FIELD("SELLERSUPPLIERPARTY", "Contact_Telephone");
	Contact_Telefax = DOC_XML_FIELD("SELLERSUPPLIERPARTY", "Contact_Telefax");
	Contact_ElectronicMail = DOC_XML_FIELD("SELLERSUPPLIERPARTY", "Contact_ElectronicMail");


	if(string.IsNullOrEmpty(CStr(schemeID)))
	{
		schemeID = "IT:CF";
	}

	postalAddressID = DOC_XML_FIELD("SELLERSUPPLIERPARTY", "PostalAddress_ID");
	if(string.IsNullOrEmpty(CStr(postalAddressID)))
	{
		postalAddressID = "NA";
	}
	//'<!-- AGGIUNTO BLOCCO OBBLIGATORIO PER ART. 21, COMMA 4 DEL DPR N. 633/1972  -->
	htmlToReturn.Write($@"
	<cac:SellerSupplierParty>
		<cac:Party>

			<cac:PartyIdentification>
				<cbc:ID schemeID=""" + schemeID + $@""">" + PartyID + $@"</cbc:ID>
			</cac:PartyIdentification>
			<cac:PartyName>
				<cbc:Name>""" + partyName + $@"""</cbc:Name>
			</cac:PartyName>");
	htmlToReturn.Write($@"
	<cac:PostalAddress>
		<cbc:ID>" + postalAddressID + $@"</cbc:ID>
		<cbc:StreetName>" + DOC_XML_FIELD("SELLERSUPPLIERPARTY", "PostalAddress_StreetName") + $@"</cbc:StreetName>");
	addOptionalTag(DOC_XML_FIELD("SELLERSUPPLIERPARTY", "PostalAddress_AdditionalStreetName"), "cbc:AdditionalStreetName");
	htmlToReturn.Write($@"<cbc:CityName>" + DOC_XML_FIELD("SELLERSUPPLIERPARTY", "PostalAddress_CityName") + $@"</cbc:CityName>");
	addOptionalTag(DOC_XML_FIELD("SELLERSUPPLIERPARTY", "PostalAddress_PostalZone"), "cbc:PostalZone");
	htmlToReturn.Write($@"<cbc:CountrySubentity>" + DOC_XML_FIELD("SELLERSUPPLIERPARTY", "PostalAddress_CountrySubentity") + $@"</cbc:CountrySubentity>
		<cac:Country>
			<cbc:IdentificationCode listID=""ISO3166-1:Alpha2"">" + DOC_XML_FIELD("SELLERSUPPLIERPARTY", "PostalAddress_Country") + $@"</cbc:IdentificationCode>
		</cac:Country>
	</cac:PostalAddress>");

	if(!string.IsNullOrEmpty(CStr(Contact_Name)) || !string.IsNullOrEmpty(CStr(Contact_Telephone)) || !string.IsNullOrEmpty(CStr(Contact_Telefax)) || !string.IsNullOrEmpty(CStr(Contact_ElectronicMail)))
	{
		htmlToReturn.Write("<cac:Contact>");
		addOptionalTag(DOC_XML_FIELD("SELLERSUPPLIERPARTY", "Contact_Name"), "cbc:Name");
		addOptionalTag(DOC_XML_FIELD("SELLERSUPPLIERPARTY", "Contact_Telephone"), "cbc:Telephone");
		addOptionalTag(DOC_XML_FIELD("SELLERSUPPLIERPARTY", "Contact_Telefax"), "cbc:Telefax");
		addOptionalTag(DOC_XML_FIELD("SELLERSUPPLIERPARTY", "Contact_ElectronicMail"), "cbc:ElectronicMail");
		htmlToReturn.Write("</cac:Contact>");

	}
	htmlToReturn.Write($@"
	</cac:Party>
	</cac:SellerSupplierParty>");

	schemeID = DOC_XML_FIELD("ORIGINATORCUSTOMERPARTY", "schemeID");
	PartyID = DOC_XML_FIELD("ORIGINATORCUSTOMERPARTY", "PartyIdentification_ID");
	partyName = DOC_XML_FIELD("ORIGINATORCUSTOMERPARTY", "PartyName");


	if(string.IsNullOrEmpty(CStr(schemeID)))
	{
		schemeID = "IT:CF";
	}
	//'if trim(cstr(PartyID)) = "" then
	//'	schemeID = "NA"
	//'end if

	if(!string.IsNullOrEmpty(CStr(partyName).Trim()))
	{
		htmlToReturn.Write($@"
		<cac:OriginatorCustomerParty>
			<cac:Party>");
		//'-- Inseriamo il blocco OriginatorCustomerParty contenente solo PartyName privo di PartyIdentification
		//'-- ( questo dopo che hanno corretto il validatore lato notier. all'inizio se mettevamo il blocco originatorcustomerparty privo di partyIdentification ottenevamo il seguente errore : DDTSCHException: [EUGEN-T16-R002] - A party identifier MUST have a scheme identifier attribute. )
		if(!string.IsNullOrEmpty(CStr(PartyID).Trim()))
		{
			htmlToReturn.Write($@"
			<cac:PartyIdentification>
					<cbc:ID schemeID=""" + schemeID + $@""">" + PartyID + $@"</cbc:ID>
				</cac:PartyIdentification>");
		}
		htmlToReturn.Write($@"
		<cac:PartyName>
					<cbc:Name>" + partyName + $@"</cbc:Name>
				</cac:PartyName>
			</cac:Party>
		</cac:OriginatorCustomerParty>");

	}
	string Shipment_ID = DOC_XML_FIELD("SHIPMENT", "Shipment_ID");
	dynamic Shipment_GrossWeightMeasure = DOC_XML_FIELD("SHIPMENT", "Shipment_GrossWeightMeasure");
	dynamic Shipment_GrossVolumeMeasure = DOC_XML_FIELD("SHIPMENT", "Shipment_GrossVolumeMeasure");
	dynamic Shipment_TotalTransportHandlingUnitQuantity = DOC_XML_FIELD("SHIPMENT", "Shipment_TotalTransportHandlingUnitQuantity");
	dynamic Shipment_Information = DOC_XML_FIELD("SHIPMENT", "Shipment_Information");

	//'-- consegna
	dynamic Consignment_ID = DOC_XML_FIELD("SHIPMENT", "Consignment_ID");
	string Consignment_Information = DOC_XML_FIELD("SHIPMENT", "Consignment_Information");

	//'-- vettore
	string PartyName = DOC_XML_FIELD("SHIPMENT", "PartyName");
	dynamic IdentityDocumentReference_ID = DOC_XML_FIELD("SHIPMENT", "IdentityDocumentReference_ID");
	string IdentityDocumentReference_DocumentType = DOC_XML_FIELD("SHIPMENT", "IdentityDocumentReference_DocumentType");

	//'--Spedizione
	dynamic TrackingID = DOC_XML_FIELD("DELIVERY", "TrackingID");
	dynamic EstimatedDeliveryPeriod_StartDate = DOC_XML_FIELD("DELIVERY", "EstimatedDeliveryPeriod_StartDate");
	dynamic EstimatedDeliveryPeriod_EndDate = DOC_XML_FIELD("DELIVERY", "EstimatedDeliveryPeriod_EndDate");

	dynamic ActualDespatchDate = DOC_XML_FIELD("DELIVERY", "ActualDespatchDate");
	dynamic DespatchAddress_ID = DOC_XML_FIELD("DELIVERY", "DespatchAddress_ID");
	dynamic DespatchAddress_Country = DOC_XML_FIELD("DELIVERY", "DespatchAddress_Country");
	dynamic DespatchAddress_CountrySubentity = DOC_XML_FIELD("DELIVERY", "DespatchAddress_CountrySubentity");
	dynamic DespatchAddress_CityName = DOC_XML_FIELD("DELIVERY", "DespatchAddress_CityName");
	dynamic DespatchAddress_PostalZone = DOC_XML_FIELD("DELIVERY", "DespatchAddress_PostalZone");
	dynamic DespatchAddress_StreetName = DOC_XML_FIELD("DELIVERY", "DespatchAddress_StreetName");
	dynamic DespatchAddress_AdditionalStreetName = DOC_XML_FIELD("DELIVERY", "DespatchAddress_AdditionalStreetName");

	string concatenazione = Shipment_ID + Shipment_GrossWeightMeasure + Shipment_GrossVolumeMeasure + Shipment_TotalTransportHandlingUnitQuantity + Shipment_Information;

	string concatenazioneConsignment = Consignment_ID + Consignment_Information;
	concatenazioneConsignment = concatenazioneConsignment + PartyName + IdentityDocumentReference_ID + IdentityDocumentReference_DocumentType;

	string concatenazioneDelivery = TrackingID + EstimatedDeliveryPeriod_StartDate + EstimatedDeliveryPeriod_EndDate;
	string concatenazioneDespatch = ActualDespatchDate;
	string concatenazioneDespatch2 = DespatchAddress_ID + DespatchAddress_Country + DespatchAddress_CountrySubentity + DespatchAddress_CityName + DespatchAddress_PostalZone + DespatchAddress_StreetName + DespatchAddress_AdditionalStreetName;

	concatenazione = concatenazione + concatenazioneConsignment + concatenazioneDelivery + concatenazioneDespatch + concatenazioneDespatch2;


	postalAddressID = DOC_XML_FIELD("SHIPMENT", "PostalAddress_ID");
	if(string.IsNullOrEmpty(CStr(postalAddressID)))
	{
		postalAddressID = "NA";
	}

	if(!string.IsNullOrEmpty(CStr(concatenazione)))
	{
		if(string.IsNullOrEmpty(Shipment_ID))
		{
			Shipment_ID = "NA";
		}
		htmlToReturn.Write($@"
		<cac:Shipment>

			<cbc:ID>" + Shipment_ID + $@"</cbc:ID>");
		addOptionalTag(Shipment_Information, "cbc:Information");

		<!-- Diventato obbligatorio Art. 21, comma 4 del DPR n. 633/1972 -->
		//		'if Shipment_GrossWeightMeasure <> "" then
		htmlToReturn.Write($@"<cbc:GrossWeightMeasure unitCode=""KGM"">" + Shipment_GrossWeightMeasure.Replace(",", ".") + $@"</cbc:GrossWeightMeasure>");
		//'end if

		if(!string.IsNullOrEmpty(Shipment_GrossVolumeMeasure))
		{
			htmlToReturn.Write($@"<cbc:GrossVolumeMeasure unitCode=""MTQ"">" + Shipment_GrossVolumeMeasure.Replace(",", ".") + "</cbc:GrossVolumeMeasure>");
		}
		addOptionalTag(Shipment_TotalTransportHandlingUnitQuantity, "cbc:TotalTransportHandlingUnitQuantity");

		if(!string.IsNullOrEmpty(concatenazioneConsignment))
		{
			if(string.IsNullOrEmpty(Consignment_ID))
			{
				Consignment_ID = "NA";
			}
			htmlToReturn.Write($@"
			<cac:Consignment>
				<cbc:ID>" + Consignment_ID + $@"</cbc:ID>");
			addOptionalTag(Consignment_Information, "cbc:Information");
			if(!string.IsNullOrEmpty(partyName))
			{
				//'<!-- AGGIUNTO BLOCCO OBBLIGATORIO PER ART. 21, COMMA 4 DEL DPR N. 633/1972  -->
				htmlToReturn.Write($@"
				<cac:CarrierParty>

					<cac:PartyName>
						<cbc:Name>" + PartyName + $@"</cbc:Name>
					</cac:PartyName>

					<cac:PostalAddress>
						<cbc:ID>" + postalAddressID + $@"</cbc:ID>
						<cbc:StreetName>" + DOC_XML_FIELD("SHIPMENT", "PostalAddress_StreetName") + $@"</cbc:StreetName>");
				addOptionalTag(DOC_XML_FIELD("SHIPMENT","PostalAddress_AdditionalStreetName"), "cbc:AdditionalStreetName");
				htmlToReturn.Write($@"<cbc:CityName>" + DOC_XML_FIELD("SHIPMENT", "PostalAddress_CityName") + $@"</cbc:CityName>");
				addOptionalTag(DOC_XML_FIELD("SHIPMENT", "PostalAddress_PostalZone"), "cbc:PostalZone");
				htmlToReturn.Write($@"<cbc:CountrySubentity>" + DOC_XML_FIELD("SHIPMENT", "PostalAddress_CountrySubentity") + $@"</cbc:CountrySubentity>
						<cac:Country>
							<cbc:IdentificationCode listID=""ISO3166-1:Alpha2"">" + DOC_XML_FIELD("SHIPMENT", "PostalAddress_Country") + $@"</cbc:IdentificationCode>
						</cac:Country>
					</cac:PostalAddress>");

				if(!string.IsNullOrEmpty(IdentityDocumentReference_ID))
				{
					htmlToReturn.Write($@"
					<cac:Person>
						<cac:IdentityDocumentReference>
							<cbc:ID>""" + IdentityDocumentReference_ID + $@"""</cbc:ID>");
					addOptionalTag(IdentityDocumentReference_DocumentType, "cbc:DocumentType");
					htmlToReturn.Write($@"</cac:IdentityDocumentReference>
					</cac:Person>");
				}
				htmlToReturn.Write("</cac:CarrierParty>");
			}
			htmlToReturn.Write("</cac:Consignment>");
		}
		if(!string.IsNullOrEmpty(concatenazioneDelivery))
		{
			if(string.IsNullOrEmpty(TrackingID))
			{
				TrackingID = "NA";
			}
			htmlToReturn.Write($@"
			<cac:Delivery>

				<cbc:TrackingID>"+TrackingID+$@"</cbc:TrackingID>");
			if(!string.IsNullOrEmpty(EstimatedDeliveryPeriod_StartDate) || !string.IsNullOrEmpty(EstimatedDeliveryPeriod_EndDate))
			{
				string StartDate = Strings.Left(EstimatedDeliveryPeriod_StartDate, 10);
				string StartTime = Strings.Right(EstimatedDeliveryPeriod_StartDate, 8);
				if(StartTime == "00:00:00")
				{
					StartTime = "";
				}
				string EndDate = Strings.Left(EstimatedDeliveryPeriod_EndDate, 10);
				string EndTime = Strings.Right(EstimatedDeliveryPeriod_EndDate, 8);

				if(EndTime == "00:00:00")
				{
					EndTime = "";
				}
				htmlToReturn.Write($@"
				<cac:EstimatedDeliveryPeriod>");
				addOptionalTag(StartDate, "cbc:StartDate");
				addOptionalTag(StartTime, "cbc:StartTime");
				addOptionalTag(EndDate, "cbc:EndDate");
				addOptionalTag(EndTime, "cbc:EndTime");
				htmlToReturn.Write("</cac:EstimatedDeliveryPeriod>");
			}
			if(!string.IsNullOrEmpty(concatenazioneDespatch))
			{
				string DespatchTime = Strings.Right(ActualDespatchDate, 8);
				ActualDespatchDate = Strings.Left(ActualDespatchDate, 10);

				if(DespatchTime == "00:00:00")
				{
					DespatchTime = "";
				}
				htmlToReturn.Write($@"
				<cac:Despatch>");
				addOptionalTag(ActualDespatchDate, "cbc:ActualDespatchDate");
				addOptionalTag(DespatchTime, "cbc:ActualDespatchTime");

				if(!string.IsNullOrEmpty(concatenazioneDespatch2))
				{
					if(string.IsNullOrEmpty(DespatchAddress_ID))
					{
						DespatchAddress_ID = "NA";
					}

					htmlToReturn.Write($@"
					<cac:DespatchAddress>
						<cbc:ID>" + DespatchAddress_ID + $@"</cbc:ID>");
					addOptionalTag(DespatchAddress_StreetName, "cbc:StreetName");
					addOptionalTag(DespatchAddress_AdditionalStreetName, "cbc:AdditionalStreetName");
					addOptionalTag(DespatchAddress_CityName, "cbc:CityName");
					addOptionalTag(DespatchAddress_PostalZone, "cbc:PostalZone");
					addOptionalTag(DespatchAddress_CountrySubentity, "cbc:CountrySubentity");

					if(!string.IsNullOrEmpty(DespatchAddress_Country))
					{
						htmlToReturn.Write($@"
						<cac:Country>
							<cbc:IdentificationCode listID=""ISO3166-1:Alpha2"">" + DespatchAddress_Country + $@"</cbc:IdentificationCode>
						</cac:Country>");

					}
					htmlToReturn.Write("</cac:DespatchAddress>");
				}
				htmlToReturn.Write("</cac:Despatch>");

			}
			htmlToReturn.Write("</cac:Delivery>");
		}
		htmlToReturn.Write("</cac:Shipment>");
	}
	//'--------------------------------------
	//'-- ITERO SULLA GRIGLIA DEI PRODOTTI --
	//'--------------------------------------
	int i = 0;
	int nr = DOC_NumRow("DESPATCHLINE", "");

	for(i= 0;i<= (nr-1);i++)
	{
		dynamic DespatchLine_ID = DOC_XML_FIELD_ROW("DESPATCHLINE", "DespatchLine_ID", i);//							    'Identificativo
		dynamic DespatchLine_Note = DOC_XML_FIELD_ROW("DESPATCHLINE", "DespatchLine_Note", i);//				    'Note Prodotto
		dynamic DespatchLine_DeliveredQuantity = DOC_XML_FIELD_ROW("DESPATCHLINE", "DespatchLine_DeliveredQuantity", i);// 'Quantità Consegnata 
		dynamic DespatchLine_OutstandingQuantity = DOC_XML_FIELD_ROW("DESPATCHLINE", "DespatchLine_OutstandingQuantity", i);//	  'Quantità inevasa
		dynamic DespatchLine_OutstandingReason = DOC_XML_FIELD_ROW("DESPATCHLINE", "DespatchLine_OutstandingReason", i);// 	  'Ragione o motivo per la quantità inevasa

		if(string.IsNullOrEmpty(DespatchLine_OutstandingQuantity) || DespatchLine_OutstandingQuantity == "0")
		{
			DespatchLine_OutstandingQuantity = "";
			DespatchLine_OutstandingReason = "";
		}

		if(string.IsNullOrEmpty(DespatchLine_DeliveredQuantity))
		{
			DespatchLine_DeliveredQuantity = "0";
		}
		dynamic Item_Name = DOC_XML_FIELD_ROW("DESPATCHLINE", "Item_Name", i);										    	//	'Nome Prodotto
		dynamic Item_AdditionalInformation = DOC_XML_FIELD_ROW("DESPATCHLINE", "Item_AdditionalInformation", i);	    	//	'Descrizione Prodotto

		dynamic SellersItemIdentification_ID = DOC_XML_FIELD_ROW("DESPATCHLINE", "SellersItemIdentification_ID", i);   	//	'Cod. Articolo Fornitore
		dynamic StandardItemIdentification_ID = DOC_XML_FIELD_ROW("DESPATCHLINE", "StandardItemIdentification_ID", i); //		'Cod. Articolo Standard ( GTIN )

		dynamic DocumentReference_DocumentType = DOC_XML_FIELD_ROW("DESPATCHLINE", "DocumentReference_DocumentType", i);//		'Rif. Documento di gara / Tipo ( es. CIG o CUP )
		dynamic DocumentReference_ID = DOC_XML_FIELD_ROW("DESPATCHLINE", "DocumentReference_ID", i);// 					  		'Rif. Documento di gara / Identiicativo
		dynamic DocumentReference_IssueDate = DOC_XML_FIELD_ROW("DESPATCHLINE", "DocumentReference_IssueDate", i);//	  		'Rif. Documento di gara /  Data Emissione
		dynamic DocumentReference_DocumentType_2 = DOC_XML_FIELD_ROW("DESPATCHLINE", "DocumentReference_DocumentType_2", i);// 	'2o Rif. Documento di gara / Tipo ( es. CIG o CUP )
		dynamic DocumentReference_IssueDate_2 = DOC_XML_FIELD_ROW("DESPATCHLINE", "DocumentReference_IssueDate_2", i);// 	  	'2o Rif. Documento di gara /  Data Emissione
		dynamic DocumentReference_ID_2 = DOC_XML_FIELD_ROW("DESPATCHLINE", "DocumentReference_ID_2", i);

		//'-- nuovi riferimenti. 
		AdditionalDocumentReference_CIG = DOC_XML_FIELD_ROW("DESPATCHLINE", "AdditionalDocumentReference_CIG", i);
		AdditionalDocumentReference_CIG_IssueDate = DOC_XML_FIELD_ROW("DESPATCHLINE", "AdditionalDocumentReference_CIG_IssueDate", i);

		AdditionalDocumentReference_CUP = DOC_XML_FIELD_ROW("DESPATCHLINE", "AdditionalDocumentReference_CUP", i);
		AdditionalDocumentReference_CUP_IssueDate = DOC_XML_FIELD_ROW("DESPATCHLINE", "AdditionalDocumentReference_CUP_IssueDate", i);

		AdditionalDocumentReference_CONV = DOC_XML_FIELD_ROW("DESPATCHLINE", "AdditionalDocumentReference_CONV", i);
		AdditionalDocumentReference_CONV_IssueDate = DOC_XML_FIELD_ROW("DESPATCHLINE", "AdditionalDocumentReference_CONV_IssueDate", i);

		string concatenazioneRiferimenti = DocumentReference_DocumentType + DocumentReference_ID + AdditionalDocumentReference_CIG + AdditionalDocumentReference_CUP + AdditionalDocumentReference_CONV;

		dynamic ItemInstance_SerialID = DOC_XML_FIELD_ROW("DESPATCHLINE", "ItemInstance_SerialID", i);// 		 			'Informazioni Articolo - ID Seriale
		dynamic LotIdentification_LotNumberID = DOC_XML_FIELD_ROW("DESPATCHLINE", "LotIdentification_LotNumberID", i);// 		'ID lotto
		dynamic LotIdentification_ExpiryDate = DOC_XML_FIELD_ROW("DESPATCHLINE", "LotIdentification_ExpiryDate", i);//			'Data Scadenza Articolo
		dynamic HazardousRiskIndicator = DOC_XML_FIELD_ROW("DESPATCHLINE", "HazardousRiskIndicator", i);//  					'Merce Pericolosa
		dynamic ShippingMarks = DOC_XML_FIELD_ROW("DESPATCHLINE", "ShippingMarks", i);//	  									'ShippingMarks
		dynamic MeasurementDimension_AttributeID = DOC_XML_FIELD_ROW("DESPATCHLINE", "MeasurementDimension_AttributeID", i);// 	'Codice Unità di Misura (UN CL 6313)
		dynamic MeasurementDimension_Measure = DOC_XML_FIELD_ROW("DESPATCHLINE", "MeasurementDimension_Measure", i);//	  		'Spedizione - Peso ( KG )

		string concatenazioneItemInstance = ItemInstance_SerialID + LotIdentification_LotNumberID + LotIdentification_ExpiryDate + HazardousRiskIndicator + ShippingMarks + MeasurementDimension_AttributeID + MeasurementDimension_Measure;

		dynamic HazardousItem_ID = DOC_XML_FIELD_ROW("DESPATCHLINE", "HazardousItem_ID", i);// 	  'Identificativo Articolo Pericoloso
		dynamic HazardousItem_TechnicalName = DOC_XML_FIELD_ROW("DESPATCHLINE", "HazardousItem_TechnicalName", i);// 	  'Nome tecnico merce pericolosa
		dynamic HazardousItem_CategoryName = DOC_XML_FIELD_ROW("DESPATCHLINE", "HazardousItem_CategoryName", i);// 	  'Nome Categoria merce pericolosa
		dynamic HazardousItem_HazardClassID = DOC_XML_FIELD_ROW("DESPATCHLINE", "HazardousItem_HazardClassID", i);//	  'Classe di pericolosità ( ad es. 6.1 )
		dynamic HazardousItem_UNDGCode = DOC_XML_FIELD_ROW("DESPATCHLINE", "HazardousItem_UNDGCode", i);//	  'Codice UNDG

		dynamic DespatchLine_Shipment_ID = DOC_XML_FIELD_ROW("DESPATCHLINE", "DespatchLine_Shipment_ID", i);// 	  'Consegna - ID
		dynamic DespatchLine_Shipment_HandlingCode = DOC_XML_FIELD_ROW("DESPATCHLINE", "DespatchLine_Shipment_HandlingCode", i);// 	  'Spedizione - Codice trattamento ( UNCL4079 )
		dynamic TransportHandlingUnit_ID = DOC_XML_FIELD_ROW("DESPATCHLINE", "TransportHandlingUnit_ID", i);// 	  'ID Unità logistica di trasporto
		dynamic TransportHandlingUnitTypeCode = DOC_XML_FIELD_ROW("DESPATCHLINE", "TransportHandlingUnitTypeCode", i);// 	  'Tipo Unità Logistica (UN/ECE Rec21)

		string concatenazioneShipment = DespatchLine_Shipment_ID + DespatchLine_Shipment_HandlingCode + TransportHandlingUnit_ID + TransportHandlingUnitTypeCode + ShippingMarks + MeasurementDimension_AttributeID + MeasurementDimension_Measure;

		dynamic Temperature_AttributeID = DOC_XML_FIELD_ROW("DESPATCHLINE", "Temperature_AttributeID", i);// 	  'Temperatura per (es. Trasporto, Conservazione)
		dynamic Temperature_Measure = DOC_XML_FIELD_ROW("DESPATCHLINE", "Temperature_Measure", i);// 	  'Temperatura in Gradi
		dynamic Temperature_UM_Measure = DOC_XML_FIELD_ROW("DESPATCHLINE", "Temperature_UM_Measure", i);// 	  'Unità di misura
		dynamic MinimumTemperature_AttributeID = DOC_XML_FIELD_ROW("DESPATCHLINE", "MinimumTemperature_AttributeID", i);// 	  'Temperatura Minima per (es. Trasporto, Conservazione)
		dynamic MinimumTemperature_Measure = DOC_XML_FIELD_ROW("DESPATCHLINE", "MinimumTemperature_Measure", i);//	  'Temperatura Minima in Gradi
		dynamic MinimumTemperature_UM_Measure = DOC_XML_FIELD_ROW("DESPATCHLINE", "MinimumTemperature_UM_Measure", i);// 	  'Unità di misura
		dynamic MaximumTemperature_AttributeID = DOC_XML_FIELD_ROW("DESPATCHLINE", "MaximumTemperature_AttributeID", i);// 	  'Temperatura Massima per (es. Trasporto, Conservazione)
		dynamic MaximumTemperature_Measure = DOC_XML_FIELD_ROW("DESPATCHLINE", "MaximumTemperature_Measure", i);// 	  'Temperatura Massima in Gradi
		dynamic MaximumTemperature_UM_Measure = DOC_XML_FIELD_ROW("DESPATCHLINE", "MaximumTemperature_UM_Measure", i);// 	  'Unità di misura

		string concatenazioneGoodsItemTemp = Temperature_AttributeID + Temperature_Measure + Temperature_UM_Measure;
		string concatenazioneGoodsItemTempMin = MinimumTemperature_AttributeID + MinimumTemperature_Measure + MinimumTemperature_UM_Measure;
		string concatenazioneGoodsItemTempMax = MaximumTemperature_AttributeID + MaximumTemperature_Measure + MaximumTemperature_UM_Measure;

		htmlToReturn.Write($@"
		<cac:DespatchLine>
		<cbc:ID>" + DespatchLine_ID + $@"</cbc:ID>");
		addOptionalTag(DespatchLine_Note, "cbc:Note");


		dynamic DespatchLine_DeliveredQuantity_unitCode = DOC_XML_FIELD_ROW("DESPATCHLINE", "DespatchLine_DeliveredQuantity_unitCode", i);
		dynamic DespatchLine_OutstandingQuantity_unitCode = DOC_XML_FIELD_ROW("DESPATCHLINE", "DespatchLine_OutstandingQuantity_unitCode", i);


		if(string.IsNullOrEmpty(DespatchLine_DeliveredQuantity_unitCode))
		{
			DespatchLine_DeliveredQuantity_unitCode = "NAR";
		}
		if(string.IsNullOrEmpty(DespatchLine_OutstandingQuantity_unitCode))
		{
			DespatchLine_OutstandingQuantity_unitCode = "NAR";
		}
		htmlToReturn.Write($@"<cbc:DeliveredQuantity unitCode=""" + DespatchLine_DeliveredQuantity_unitCode + $@""" unitCodeListID=""UNECERec20"">" + DespatchLine_DeliveredQuantity + $@"</cbc:DeliveredQuantity>");

		if(!string.IsNullOrEmpty(DespatchLine_OutstandingQuantity))
		{
			htmlToReturn.Write($@"<cbc:OutstandingQuantity unitCode=""" + DespatchLine_OutstandingQuantity_unitCode + $@""" unitCodeListID=""UNECERec20"">" + DespatchLine_OutstandingQuantity + $@"</cbc:OutstandingQuantity>");
			addOptionalTag(DespatchLine_OutstandingReason, "cbc:OutstandingReason");
		}

		htmlToReturn.Write($@"
		<cac:OrderLineReference>
			<cbc:LineID>NA</cbc:LineID>
		</cac:OrderLineReference>"); 

		if(!string.IsNullOrEmpty(DocumentReference_ID) && !string.IsNullOrEmpty(DocumentReference_DocumentType))
		{
			if(!string.IsNullOrEmpty(CStr(DocumentReference_IssueDate)))
			{
				DocumentReference_IssueDate = Strings.Left(DocumentReference_IssueDate, 10);
			}
			htmlToReturn.Write($@"
			<cac:DocumentReference>
			<cbc:ID>""" + DocumentReference_ID + $@"""</cbc:ID>");
			addOptionalTag(DocumentReference_IssueDate, "cbc:IssueDate");
			htmlToReturn.Write($@"<cbc:DocumentType>""" + DocumentReference_DocumentType + $@"""</cbc:DocumentType>
			</cac:DocumentReference>");
		}

		if(!string.IsNullOrEmpty(CStr(AdditionalDocumentReference_CIG)))
		{
			if(!string.IsNullOrEmpty(CStr(AdditionalDocumentReference_CIG_IssueDate)))
			{
				AdditionalDocumentReference_CIG_IssueDate = Strings.Left(AdditionalDocumentReference_CIG_IssueDate, 10);
			}
			htmlToReturn.Write($@"
			<cac:DocumentReference>
			<cbc:ID>" + AdditionalDocumentReference_CIG + $@"</cbc:ID>");
			addOptionalTag(AdditionalDocumentReference_CIG_IssueDate, "cbc:IssueDate");
			htmlToReturn.Write($@"<cbc:DocumentType>CIG</cbc:DocumentType>
			</cac:DocumentReference>");	
		}
		
		if(!string.IsNullOrEmpty(AdditionalDocumentReference_CUP))
		{
			if(!string.IsNullOrEmpty(CStr(AdditionalDocumentReference_CUP_IssueDate)))
			{
				AdditionalDocumentReference_CUP_IssueDate = Strings.Left(AdditionalDocumentReference_CUP_IssueDate, 10);
			}
			htmlToReturn.Write($@"
			<cac:DocumentReference>
			<cbc:ID>" + AdditionalDocumentReference_CUP + $@"</cbc:ID>");
			addOptionalTag(AdditionalDocumentReference_CUP_IssueDate, "cbc:IssueDate");
			htmlToReturn.Write($@"<cbc:DocumentType>CUP</cbc:DocumentType>
		</cac:DocumentReference>");


		}
		if(!string.IsNullOrEmpty(AdditionalDocumentReference_CONV))
		{
			if(!string.IsNullOrEmpty(CStr(AdditionalDocumentReference_CONV_IssueDate)))
			{
				AdditionalDocumentReference_CONV_IssueDate = Strings.Left(AdditionalDocumentReference_CONV_IssueDate, 10);
			}
			htmlToReturn.Write($@"
				<cac:DocumentReference>
			<cbc:ID>" + AdditionalDocumentReference_CONV + $@"</cbc:ID>");
			addOptionalTag(AdditionalDocumentReference_CONV_IssueDate, "cbc:IssueDate");
			htmlToReturn.Write($@"<cbc:DocumentType>CONVENZIONE</cbc:DocumentType>
			</cac:DocumentReference>");	
		}
		//'DocumentReference_ID_2 = ""
		//rigo 900
		if(!string.IsNullOrEmpty(DocumentReference_ID_2) && !string.IsNullOrEmpty(DocumentReference_DocumentType_2 ))
		{

			if(!string.IsNullOrEmpty(DocumentReference_IssueDate_2))
			{
				DocumentReference_IssueDate_2 = Strings.Left(DocumentReference_IssueDate_2, 10);
			}
			htmlToReturn.Write($@"
			<cac:DocumentReference>
			<cbc:ID>" + DocumentReference_ID_2 + $@"</cbc:ID>");
			addOptionalTag(DocumentReference_IssueDate_2, "cbc:IssueDate");
			htmlToReturn.Write($@"<cbc:DocumentType>"+DocumentReference_DocumentType_2+$@"</cbc:DocumentType>
			</cac:DocumentReference>");
		}

		//'<!-- L'ITEM NAME E' DIVENTATO OBBLIGATORIO PER ART. 21, COMMA 4 DEL DPR N. 633/1972  -->

		htmlToReturn.Write("<cac:Item>");

		addOptionalTag(Item_Name, "cbc:Name");
		addOptionalTag(Item_AdditionalInformation, "cbc:AdditionalInformation");
		htmlToReturn.Write($@"<cac:SellersItemIdentification>
				<cbc:ID>" + SellersItemIdentification_ID + $@"</cbc:ID>
			</cac:SellersItemIdentification>");

		if(!string.IsNullOrEmpty(StandardItemIdentification_ID.Trim()))
		{
			htmlToReturn.Write($@"
				<cac:StandardItemIdentification>
				<cbc:ID schemeID=""GTIN"" schemeAgencyID=""9"" schemeAgencyName=""GS1"">" + StandardItemIdentification_ID + $@"</cbc:ID>
			</cac:StandardItemIdentification>");
		}

		if(HazardousRiskIndicator == "si")
		{
			if(string.IsNullOrEmpty(HazardousItem_ID))
			{
				HazardousItem_ID = "NA";
			}

			htmlToReturn.Write($@"
				<cac:HazardousItem>
				<cbc:ID>" + HazardousItem_ID + $@"</cbc:ID>
				<cbc:UNDGCode listID=""UNCL8273"">" + HazardousItem_UNDGCode + $@"</cbc:UNDGCode>");
			addOptionalTag(HazardousItem_TechnicalName, "cbc:TechnicalName");
			addOptionalTag(HazardousItem_CategoryName, "cbc:CategoryName");
			htmlToReturn.Write($@"<cbc:HazardClassID>" + HazardousItem_HazardClassID + $@"</cbc:HazardClassID>
			</cac:HazardousItem>");
		}

		if(!string.IsNullOrEmpty(concatenazioneItemInstance))
		{
			htmlToReturn.Write("<cac:ItemInstance>");
			addOptionalTag(ItemInstance_SerialID, "cbc:SerialID");

			if(!string.IsNullOrEmpty(LotIdentification_LotNumberID ) || !string.IsNullOrEmpty(LotIdentification_ExpiryDate))
			{
				if(!string.IsNullOrEmpty(LotIdentification_ExpiryDate))
				{
					LotIdentification_ExpiryDate = Strings.Left(LotIdentification_ExpiryDate, 10);
				}
				htmlToReturn.Write($@"
				<cac:LotIdentification>");
				addOptionalTag(LotIdentification_LotNumberID, "cbc:LotNumberID");
				addOptionalTag(LotIdentification_ExpiryDate, "cbc:ExpiryDate");
				htmlToReturn.Write($@"</cac:LotIdentification>");
			}
			htmlToReturn.Write("</cac:ItemInstance>");
		}
		htmlToReturn.Write("</cac:Item>");

		if(!string.IsNullOrEmpty(concatenazioneShipment ))
		{
			if(!string.IsNullOrEmpty(DespatchLine_Shipment_ID))
			{
				DespatchLine_Shipment_ID = "NA";
			}
			if(!string.IsNullOrEmpty(TransportHandlingUnit_ID))
			{
				TransportHandlingUnit_ID = "NA";
			}
			if( HazardousRiskIndicator == "si")
			{
				HazardousRiskIndicator = "true";
			}
			else
			{
				HazardousRiskIndicator = "false";
			}

			htmlToReturn.Write($@"
			<cac:Shipment>
			<cbc:ID>" + DespatchLine_Shipment_ID + $@"</cbc:ID>");

			if(!string.IsNullOrEmpty(DespatchLine_Shipment_HandlingCode))
			{
				htmlToReturn.Write($@"<cbc:HandlingCode listID=""UNCL4079"">" + DespatchLine_Shipment_HandlingCode + $@"</cbc:HandlingCode>");
			}

			if(!string.IsNullOrEmpty(Temperature_Measure) || !string.IsNullOrEmpty(MinimumTemperature_Measure) || !string.IsNullOrEmpty(MaximumTemperature_Measure))
			{
				htmlToReturn.Write("<cac:GoodsItem>");

				if(!string.IsNullOrEmpty(Temperature_Measure))
				{
					htmlToReturn.Write($@"
					<cac:Temperature>
					<cbc:AttributeID>" + Temperature_AttributeID + $@"</cbc:AttributeID>
					<cbc:Measure unitCode=""" + Temperature_UM_Measure + $@""">" + Temperature_Measure + $@"</cbc:Measure>
					</cac:Temperature>");
				}

				if(!string.IsNullOrEmpty(MinimumTemperature_Measure))
				{
					htmlToReturn.Write($@"
						<cac:MinimumTemperature>
							<cbc:AttributeID>" + MinimumTemperature_AttributeID + $@"</cbc:AttributeID>
							<cbc:Measure unitCode=""" + MinimumTemperature_UM_Measure + $@""">" + MinimumTemperature_Measure + $@"</cbc:Measure>
						</cac:MinimumTemperature>");
				}
				if(!string.IsNullOrEmpty(MaximumTemperature_Measure))
				{
					htmlToReturn.Write($@"
					<cac:MaximumTemperature>
					<cbc:AttributeID>" + MaximumTemperature_AttributeID + $@"</cbc:AttributeID>
					<cbc:Measure unitCode=""" + MaximumTemperature_UM_Measure + $@""">" + MaximumTemperature_Measure + $@"</cbc:Measure>
					</cac:MaximumTemperature>");
				}
				htmlToReturn.Write("</cac:GoodsItem>");
			}
			htmlToReturn.Write($@"
				<cac:TransportHandlingUnit>
				<cbc:ID schemeID=""SSCC"" schemeAgencyName=""GS1"">" + TransportHandlingUnit_ID + $@"</cbc:ID>");

			if(!string.IsNullOrEmpty(TransportHandlingUnitTypeCode))
			{
				htmlToReturn.Write($@"<cbc:TransportHandlingUnitTypeCode listID=""UNECERec21"">" + TransportHandlingUnitTypeCode + $@"</cbc:TransportHandlingUnitTypeCode>");
			}
			htmlToReturn.Write($@"<cbc:HazardousRiskIndicator>" + HazardousRiskIndicator + $@"</cbc:HazardousRiskIndicator>");
			addOptionalTag(ShippingMarks, "cbc:ShippingMarks");

			if(!string.IsNullOrEmpty(MeasurementDimension_AttributeID))
			{
				htmlToReturn.Write($@"
				<cac:MeasurementDimension>
					<cbc:AttributeID schemeID=""UNCL6313"">"+MeasurementDimension_AttributeID + $@"</cbc:AttributeID>");

				if(!string.IsNullOrEmpty(MeasurementDimension_Measure))
				{
					htmlToReturn.Write($@"<cbc:Measure unitCode=""KGM"">" + MeasurementDimension_Measure + $@"</cbc:Measure>");
				}
				htmlToReturn.Write("</cac:MeasurementDimension>	");
			}
			htmlToReturn.Write($@"</cac:TransportHandlingUnit>
		</cac:Shipment>");
		}
		htmlToReturn.Write("</cac:DespatchLine>");

	}
	htmlToReturn.Write("</DespatchAdvice>");

	//'-- Testo aggiunto in automatico per liberare la memoria dei nuovi report
	try
	{
		FreeMemDocument(session);
	}
	catch
	{

	}
	dynamic DOC_XML_FIELD(string dse_id,string dztNome)
	{
		dynamic tmpVal = DOC_FieldTecnical(dse_id, dztNome);

		if(IsNull(tmpVal))
		{
			tmpVal = "";
		}
		else
		{
			tmpVal = CStr(tmpVal);
		}

		if(tmpVal.ToUpper() == "NULL" || tmpVal.ToUpper() == " NULL ")
		{
			tmpVal = "";
		}
		tmpVal = xmlEncode(tmpVal);
		return tmpVal;
	}
	dynamic  DOC_XML_FIELD_ROW(string dse_id,string  dztNome,int riga)
	{
		dynamic tmpVal = DOC_FieldRowTecnical(dse_id, dztNome, riga);

		if(IsNull(tmpVal) == false)
		{
			if(IsDate(tmpVal))
			{
				tmpVal = formatDate(tmpVal);
			}
			else
			{
				tmpVal = CStr(tmpVal);
			}
		}
		else
		{
			tmpVal = "";
		}
		if(tmpVal.ToLower() == "null" ||  tmpVal == "1900-01-01")
		{
			tmpVal = "";
		}
		tmpVal = xmlEncode(tmpVal);
		return tmpVal;
	}
	void addOptionalTag(string encodedValue, string tag)
	{
		if(!string.IsNullOrEmpty(CStr(encodedValue)))
		{
			htmlToReturn.Write("<" + tag + ">" + encodedValue + "</" + tag + ">");
		}
	}
	string formatDate(DateTime myDate)
	{
		string _out = "";
		if(IsNull(myDate) == false)
		{
			_out = DateAndTime.Year(myDate) + "-" + Strings.Right("0" + DateAndTime.Month(myDate), 2) + "-" + Strings.Right("0" + DateAndTime.Day(myDate), 2);
		}
		return _out;
	}
	//'-- il participantID composto come 9907:IT01234567890	deve essere utilizzato nell'UBL nella forma 	priva del prefisso 9907:
	//'--	se si fa riferimento ad un IPA ripulisco ulteriormente l'endpoint andando a togliere non solo il prefisso prima dei due punti ma sostituendo tutto '9921:it' con stringa vuota
	string getParticipantIdUBL(string endPoint)
	{
		string strOut = endPoint;

		if(endPoint.Contains(":", StringComparison.Ordinal))
		{
			string [] vet = endPoint.Split(":");
			//'-- se IPA contenente l'ulteriore prefisso 'IT' ( scorretto )
			if((Strings.Left(endPoint,7)).ToUpper() == "9921:IT" || (Strings.Left(endPoint,7).ToUpper()) == "0201:IT")
			{
				strOut = ((endPoint).ToUpper()).Replace("9921:IT", "");
				strOut = ((endPoint).ToUpper()).Replace("0201:IT", "");
			}
			else
			{
				strOut = vet[1];
			}
		}
		return strOut;

	}
	string getSchemaFromCod(string schemaPID)
	{
		string strOUT = schemaPID;
		if(schemaPID == "9906" )
		{
			strOUT = "IT:VAT";
		}
		else if(schemaPID == "0201" || schemaPID == "9921")
		{
			strOUT = "IT:IPA";
		}
		else if(schemaPID == "9907" )
		{
			strOUT = "IT:CF";
		}
		return strOUT;
	}

}@Html.Raw(htmlToReturn.Out())
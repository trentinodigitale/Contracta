@page "/Report/OFFERTA_AMPIEZZA.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using Microsoft.VisualBasic
@using System.Globalization
@using static eProcurementNext.CommonDB.Basic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.print_documentModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.Report.prn_LISTINO_CONVENZIONEModel;
@model eProcurementNext.Razor.Pages.Report.prn_AMPIEZZA_DI_GAMMAModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();
	var sqlParams = new Dictionary<string, object?>();
	objDoc = PrintDocument(session, htmlToReturn, HttpContext, Response, Request);//PrintDocument ok
	string IDDOC = objDoc.mp_IDDoc;	
}
@{
	htmlToReturn.Write($@"
	<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"">
	<html>
	<head>");

	addMetaTag(htmlToReturn);

	string id = GetParamURL(Request.QueryString.ToString(), "IDDOC");
	validate("IDDOC", id, TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 1, HttpContext, session);

	string Contesto;
	Contesto = GetParamURL(Request.QueryString.ToString(), "CONTESTO");
	validate("CONTESTO", Contesto, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 1, HttpContext, session);

	string idDoc;
	TSRecordSet? rs;
	string strSql;
	string NameSection="PRODOTTI_GAMMA";

	sqlParams.Add("@id", CInt(id));

	string TypeDOC = GetParamURL(Request.QueryString.ToString(), "TYPEDOC");

	if (TypeDOC != "OFFERTA")
	{
		strSql = "select idheader from Document_MicroLotti_Dettagli with (nolock) where idHeaderLotto = @id and TipoDoc='OFFERTA_AMPIEZZA'";
		rs = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString, sqlParams);
		if (rs is not null && rs.RecordCount > 0)
		{
			rs.MoveFirst();
			idDoc = CStr(rs["idheader"]);
		}
		else
		{
			if (TypeDOC == "")
			{
				TypeDOC = "OFFERTA";
				idDoc = id;
				NameSection = "PRODOTTI_AMPIEZZA_GAMMA";
			}
			else
			{
				HttpContext.Response.StatusCode = StatusCodes.Status500InternalServerError;
				throw new ResponseEndException(htmlToReturn.Out(), Response, "500 Errore record non trovato");
			}
		}
	}
	else
	{
		NameSection = "PRODOTTI_AMPIEZZA_GAMMA";
		idDoc = id;
	}
		

	sqlParams.Add("@idDoc", CInt(idDoc));
	
	strSql = "select c.NumeroDocumento as CIG_MADRE, a.aziRagioneSociale as fornitore,a.azipartitaiva,a.aziIndirizzoLeg + ' -- ' + a.aziCAPLeg + ' ' + a.aziLocalitaLeg + ' (' + a.aziProvinciaLeg + ')' as IndirizzoForn,P.pfuRuoloAziendale as QualificaReferente,p.pfunomeutente + ' ' + p.pfuCognome as Referente,pfuCodiceFiscale as CFReferente" + Environment.NewLine;
	strSql = strSql + "from ctl_doc c with(nolock) " + Environment.NewLine;
	strSql = strSql + "inner join aziende a with(nolock) on a.idazi=c.Azienda " + Environment.NewLine;
	strSql = strSql + "inner join ProfiliUtente P with(nolock) on  P.IdPfu=c.IdPfu " + Environment.NewLine;
	strSql = strSql + "where c.Id=@idDoc";

	rs = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString, sqlParams);

	if (rs is not null && rs.RecordCount > 0)
	{
		rs.MoveFirst();
	}
	else
	{
		HttpContext.Response.StatusCode = StatusCodes.Status500InternalServerError;
		throw new ResponseEndException(htmlToReturn.Out(), Response, "500 Errore record non trovato");
	}

	string CigConvenzione = CStr(rs["CIG_MADRE"]);
	string fornitore = HtmlEncode(CStr(rs["fornitore"]));
	string PIVAForn = CStr(rs["azipartitaiva"]);
	string IndirizzoForn = HtmlEncode(CStr(rs["IndirizzoForn"]));
	string QualificaReferente = CStr(rs["QualificaReferente"]);
	string Referente = HtmlEncode(CStr(rs["Referente"]));
	string CFReferente = CStr(rs["CFReferente"]);

	int NumPagCorrente;
	NumPagCorrente = 0;

	//'--recupero info fornitore
	sqlParams.Clear();
	sqlParams.Add("@id", DOC_FieldTecnical("DOCUMENT", "idpfu"));
	TSRecordSet? rsForn = cdf.GetRSReadFromQuery_("select * from  aziende with(nolock) where idazi=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
	rsForn.MoveFirst();

	//'--recupero info ente
	sqlParams.Clear();
	sqlParams.Add("@id", DOC_FieldTecnical("DOCUMENT", "Azienda"));
	TSRecordSet? rsEnte = cdf.GetRSReadFromQuery_("select * from  aziende with(nolock) where idazi=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
	rsEnte.MoveFirst();

	//'--determino le info per le pagine da stampare
	int nNumProduct;
	int NumCol;
	double nLineeForPage;
	int nLineeSpazioProdotti;
	int nNumLineeFirstPage;
	int nLineeTotali;
	int NumLineeStampate;
	int NumLineeStampatePagina = 0;
	int LastRowDiplayed;
	int LastColDisplayed;
	int NumColOrigin;
	int NumLineeParteFissa;
	NumLineeParteFissa = 21;

	LastRowDiplayed = 0;
	LastColDisplayed = 0;

	NumLineeStampate = 0;

	NumCol = objDoc.Sections[NameSection].mp_Columns.Count;
	NumColOrigin = objDoc.Sections[NameSection].mp_Columns.Count;
	// 'response.write "NUMCOL_P:" & NumCol & "<BR>"


	//'--numero di linee per pagina
	nLineeForPage = 60;
	//'--numero di linee della prima pagina
	//'nNumLineeFirstPage = 70

	//'--numero di linee vuote tra un prodotto ed il successivo
	nLineeSpazioProdotti = 2;

	//'--numero di linee per i totali
	int nLineeForTotali = 0;

	//'Response.Write nNumPag

	//'--determino le colonne da nascondere per i dettagli prodotti
	//'--recupero codice dalla convenzione
	string CodiceModello = "";
	string strSQL = "";

	sqlParams.Clear();
	sqlParams.Add("@id", CInt(idDoc));
	strSQL = "select value from ctl_doc_value with(nolock) where idheader=@id and DSE_ID = 'MODELLI' and DZT_Name = 'ModelloAmpiezzaDamma'";

	TSRecordSet? rsModelloStampa = cdf.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString, sqlParams);
	if (rsModelloStampa is not null && rsModelloStampa.RecordCount > 0)
	{
		rsModelloStampa.MoveFirst();
		CodiceModello = CStr(rsModelloStampa["value"]);
	}

	//'--recupero colonne del modello di stampa
	strSQL = "";
	sqlParams.Clear();
	sqlParams.Add("@mod_name", CodiceModello);
	strSQL = "select MA_DZT_Name from CTL_models with(nolock), CTL_modelattributes with(nolock) where MOD_Name = @mod_name  and MOD_ID = MA_MOD_ID order by ma_order";

	TSRecordSet? rsColModelloStampa = cdf.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString, sqlParams);
	string strListColumn = ",";
	if (rsColModelloStampa is not null && rsColModelloStampa.RecordCount > 0)
	{
		rsColModelloStampa.MoveFirst();
		for (int i = 0; i <= rsColModelloStampa.RecordCount - 1; i++)
		{
			strListColumn = strListColumn + (CStr(rsColModelloStampa["MA_DZT_Name"])).ToUpper() + ",";
			rsColModelloStampa.MoveNext();
		}
	}
	//'--recupero colonne del modello dei prodotti
	Dictionary<string, Field> ColumnProdotti = objDoc.Sections[NameSection].mp_Columns;
	//'Response.Write "ColumnProdotti.count:" & ColumnProdotti.count & "<BR>"

	string strHideCol = ",";
	for (int i = 1; i <= ColumnProdotti.Count; i++)
	{
		if (Strings.InStr(1, strListColumn, "," + (CStr(ColumnProdotti.ElementAt(i - 1).Value.Name)).ToUpper() + ",") == 0)
		{
			strHideCol = strHideCol + CStr(ColumnProdotti.ElementAt(i - 1).Value.Name) + ",";
			NumCol = NumCol - 1;
		}
	}
	//'response.write strHideCol
	//'response.write "NumCol:" & NumCol & "<br/>"

	//set objDB = nothing
	nNumProduct = DOC_NumRow(NameSection, "");
	//'response.write nNumProduct
	//'response.end
	double nNumLineeTotali = (NumCol + nLineeSpazioProdotti) * nNumProduct + NumLineeParteFissa; //'+ (nLineeForPage-nNumLineeFirstPage)
																									//'nResiduoLinee =  nLineeForPage - (nNumLineeTotali mod nLineeForPage)
																									//'response.write NumCol & "-" & nLineeSpazioProdotti & "-" & nNumProduct
																									//'response.end

	double nResiduoLinee = nNumLineeTotali % nLineeForPage;

	//'nNumPag = int (nNumLineeTotali / nLineeForPage)

	//'nNumPag = fix (nNumLineeTotali / nLineeForPage)

	//'if  nNumLineeTotali mod nLineeForPage <> 0 then
	//'	nNumPag = nNumPag +1
	//'end if

	double nNumPag;

	if (nNumLineeTotali < nLineeForPage)
	{
		nResiduoLinee = 0;
		nNumPag = 1;
	}
	else
	{
		nResiduoLinee = nNumLineeTotali % nLineeForPage;
		nNumPag = Fix(nNumLineeTotali / nLineeForPage);
	}

	//'response.write nNumLineeTotali & "-" & nLineeForPage

	//'nNumPag = int (nNumLineeTotali / nLineeForPage)

	//'if nResiduoLinee < nLineeForTotali and nResiduoLinee <> 0 then
	if (nResiduoLinee != 0)
	{
		nNumPag = nNumPag + 1;
	}
	//'Response.Write "nNumPag=" & nNumPag & "<br>"
	//'response.end

	//'Response.Write "NumCol=" & NumCol & "<br>"
	//'Response.Write "nNumProduct=" & nNumProduct & "<br>"
	//'Response.Write "nNumLineeTotali=" & nNumLineeTotali & "<br>"
	//'Response.Write "nNumLineeFirstPage=" & nNumLineeFirstPage & "<br>"
	//'Response.Write "nLineeForPage=" & nLineeForPage & "<br>"
	//'Response.Write "nResiduoLinee=" & nResiduoLinee & "<br>"
	//'Response.Write "nNumPag=" & nNumPag & "<br>"
	//'Response.Write "strHideCol=" & strHideCol & "<br>"
	//'Response.end

	htmlToReturn.Write($@"</head>
	<body>

		<style type=""text/css"">



	BODY,DIV ,TABLE, TD {{
	 font-family:'Arial','Times New Roman',serif;
	 font-size:9pt;
	 font-style:normal;
	 font-weight:normal


	}}
	.Input
	{{
	 font-family:'Arial','Times New Roman',serif;
	 font-size:10pt;
	 font-style:normal;
	 font-weight:bold

	}}

	.TITLE{{
	 font-family:'Arial','Times New Roman',serif;
	 font-size:12pt;
	 font-style: bold;
	 font-weight:bold



	}}

	.CellIntestGrid {{
	background:#ffffff;
	--text-transform:uppercase;
	font-weight:bold;
	font-size:9pt;
	width:500px;
	}}

	.CellGridPrintProducts {{
	background:#ffffff;
	font-size:9pt;
	}}

	.CellRow{{
		padding-top:5px;
	}}

	@media print
	  {{
	  #Ricevuta {{}}
	  }}

	  @media screen
	  {{
	  #Ricevuta {{}}
	  }}

	 ul li, table ul li {{ list-style-type:none; }}

	</style>
		 <div style=""text-align: center; "">

			<center>");

	//'-- DISEGNO PRIMA PAGINA

	htmlToReturn.Write($@"<table border=0 style=""height:1400px;"">");

	Header1();

	nLineeForPage = 39;


	htmlToReturn.Write($@"<tr>
						<td valign=""t2op"" >

							<div style=""margin-top: 5px; text-align: left; width:100%; vertical-align:top;"">");
	string tableToWrite =
		GetHtmlData_Dettagli_TABLE_PERPAGINA(1, NameSection , "", "", "", strHideCol, "", CInt(nLineeForPage), "", "", "VERTICALE", ref NumLineeStampate, ref NumLineeStampatePagina, NumCol, ref LastRowDiplayed, ref LastColDisplayed);

	htmlToReturn.Write(tableToWrite);

	htmlToReturn.Write($@"</div>

						</td>
					</tr>");
	//'--PIE DI PAGINA
	footer();
	nLineeForPage = 60;

	htmlToReturn.Write($@"</table>");

	//'call PrintPagina

	//'--STAMPO DALLA PAGINA 2 alla fine
	for (int k = 2; k <= nNumPag; k++)
	{
		PrintPagina();

		htmlToReturn.Write($@"<table border=0 style=""height: 1400px; "">");

		Header();

		htmlToReturn.Write($@"
		<tr>
			<td valign=""top"" >
			 <div style=""margin-top: 15px; text-align: left; width:100%; vertical-align:top;"">"

					+ GetHtmlData_Dettagli_TABLE_PERPAGINA(k, NameSection, "", "", "", strHideCol, "", CInt(nLineeForPage), "", "", "VERTICALE", ref NumLineeStampate, ref NumLineeStampatePagina, NumCol, ref LastRowDiplayed, ref LastColDisplayed) + $@"


				</div>
			</td>
		</tr>");
		//'--PIE DI PAGINA
		footer();
		htmlToReturn.Write($@"</table>");
		//'--SALTO PAGINA
		//'--SE HO RAGGIUNTO ULTIMA RIGA DI PRODOTTO E ULTIMA COLONNA ESCO ANCHE SE NUMERO PAGINA SUPERIORE
		if (NumColOrigin == LastColDisplayed - 1 && LastRowDiplayed == nNumProduct - 1)
		{
			break;
		}
		if (k != nNumPag)
		{
			PrintPagina();
		}
	}

	htmlToReturn.Write($@"</center>
		</div>
	</body>
	</html>");

	void PrintPagina()
	{
		htmlToReturn.Write($@"<div style=""page-break-after: always""></div>");
	}




	void Header1()
	{
		htmlToReturn.Write($@"<tr><td height=""50px"" align=""center"" valign=""top"" >");

		string imgHeader = ApplicationCommon.CNV("HEADER_STAMPE");

		if (imgHeader.Contains("???", StringComparison.Ordinal))
		{
			htmlToReturn.Write($@"<img height=""50px"" src=""logo_new.gif"" border=""0"" alt=""" + ApplicationCommon.CNV("ALT LOGO") + $@"""/>");
		}
		else
		{
			htmlToReturn.Write(imgHeader);
		}
		htmlToReturn.Write("</td></tr>");
		htmlToReturn.Write($@"
			<tr><td align=center>
		<center>
			<div style=""font-size:16px; text-align: left; width: 800px; align: center;"">
				");
		if (string.IsNullOrEmpty(Contesto))
		{
			htmlToReturn.Write($@"
					<strong>Elenco prodotti relativi all'Ampiezza di gamma: </strong>
			");
		}
		else
		{
			htmlToReturn.Write($@"
					<strong>Elenco prodotti relativi all'Ampiezza di gamma: </strong>
			");
		}
		htmlToReturn.Write($@"
			" + DOC_Field("DOCUMENT", "DOC_NAME") + $@" <br/>
		");

		htmlToReturn.Write($@"
				<strong> CIG N.: </strong>" + CigConvenzione + $@"<br/>
				<br/>
				<strong> FORNITORE: </strong>" + fornitore + $@"<br/>
				<strong> PARTITA IVA: </strong>" + PIVAForn + $@"<br/>
				<strong> INDIRIZZO: </strong>" + IndirizzoForn + $@"<br/>
				<br/>
				<strong>" + QualificaReferente + $@": </strong>" + Referente + $@"<br/>
				<strong> CODICE FISCALE: </strong>" + CFReferente +
									$@"</div>
		</center>
		</td>
		</tr>");

	}

	void Header()
	{
		htmlToReturn.Write($@"<tr><td height=""50px"" align=""center"" valign=""top"" >");

		string imgHeader = ApplicationCommon.CNV("HEADER_STAMPE");
		if (imgHeader.Contains("???", StringComparison.Ordinal))
		{
			htmlToReturn.Write($@"<img height=""50px"" src=""logo_new.gif"" border=""0"" alt=""" + ApplicationCommon.CNV("ALT LOGO") + $@"""/>");
		}
		else
		{
			htmlToReturn.Write(imgHeader);
		}
		htmlToReturn.Write("</td></tr>");
		htmlToReturn.Write($@"
			<tr><td align=center>
		<center>
			<div style=""font-size:16px; text-align: center; width: 800px; align: center;font-weight:bold;"">
				Elenco inserimento prodotti relativi all'Ampiezza di gamma: " + DOC_Field("DOCUMENT", "DOC_NAME") + $@"
			</div>
		</center>
		</td>
		</tr>");
	}

	//'------------------------------------------------------------------------------
	//'-- funzione per disegnare il pie pagina
	//'------------------------------------------------------------------------------
	void footer()
	{
		NumPagCorrente = NumPagCorrente + 1;
		htmlToReturn.Write($@"<tr><td valign=""bottom"" height=""5px"" >");
		htmlToReturn.Write($@"<table width=""800px"" height=""5px"" style=""vertical-align: bottom; bottom: 0px""> ");
		htmlToReturn.Write($@"        <tr><td align=""left"" ><b></b></td></tr><tr>");
		htmlToReturn.Write($@"            <td style=""border-bottom: 1px solid black;border-top: 1px solid black;""  valign=""bottom"" align=""right"" >");
		htmlToReturn.Write($@"                ");
		htmlToReturn.Write($@"                Pagina: " + NumPagCorrente);
		htmlToReturn.Write($@"            </td>");
		htmlToReturn.Write($@"        </tr>");
		htmlToReturn.Write($@"    </table>");
		htmlToReturn.Write($@"    </td></tr>");
	}

	try
	{
		FreeMemDocument(session);
	}
	catch
	{

	}

}@Html.Raw(htmlToReturn.Out())
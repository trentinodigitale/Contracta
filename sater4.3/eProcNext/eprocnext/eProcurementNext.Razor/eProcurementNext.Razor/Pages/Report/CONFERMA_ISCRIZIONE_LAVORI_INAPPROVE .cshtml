@page "/Report/CONFERMA_ISCRIZIONE_LAVORI_INAPPROVE.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using Microsoft.VisualBasic
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.print_documentModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.Report.CONFERMA_ISCRIZIONE_LAVORI_INAPPROVEModel;
@model eProcurementNext.Razor.Pages.Report.CONFERMA_ISCRIZIONE_LAVORI_INAPPROVEModel
@using static eProcurementNext.Session.SessionMiddleware
@{
    CommonDbFunctions cdf = new();
    LoadSession(HttpContext, session);
    EprocResponse htmlToReturn = new();
    //objDoc = PrintDocument(session, htmlToReturn, HttpContext,Response,Request);//PrintDocument non ok
    var sqlParams = new Dictionary<string, object?>();
}
@{

    string id = GetParamURL(Request.QueryString.ToString(), "IDDOC");
    string LanguageSuffix = GetParamURL(Request.QueryString.ToString(), "LanguageSuffix");

    validate("IDDOC", id, TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 1, HttpContext, session);
    validate("LanguageSuffix", LanguageSuffix, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0, HttpContext, session);

    htmlToReturn.Write("<html>");
    htmlToReturn.Write("<head>");
    addMetaTag(htmlToReturn);
    htmlToReturn.Write("</head>");

    htmlToReturn.Write($@"<body style=""margin-left:50px; margin-right:50px; margin-top:10px; margin-bottom:10px"">");
    htmlToReturn.Write($@"<table height=""100%"" width=""100%"" border=""0"" style=""height: 1390px;"">");
    htmlToReturn.Write($@"<tr>
			<td align=""center"">

				<table  width=""100%"" style=""margin-top:0px"" align=""center"">
					<tr>
						<td style=""border:0px;"" align=""center"">
							<table style=""font-weight:bold; align:center"">
								<tr>
									<td align=""center"" style=""border:0px; align:center; vertical-align=middle;"">");
    string imgHeader = ApplicationCommon.CNV("HEADER_STAMPE");
    if (imgHeader.Contains("???", StringComparison.Ordinal))
    {
        htmlToReturn.Write($@"<img height=""50px"" src=""logo_new.gif"" border=""0"" alt=""" + ApplicationCommon.CNV("ALT LOGO") + $@""" />");
    }
    else
    {
        htmlToReturn.Write(imgHeader);
    }
    htmlToReturn.Write($@"</td>
								</tr>
								<tr>
									<td style=""font-size:9px"">" +
            ApplicationCommon.CNV("HEADER_DATI_REGISTRAZIONE_FORNITORE") + $@"
									</td>
								</tr>
							</table>
						</td>
					</tr>
				</table>

			</td>
		</tr>");
    htmlToReturn.Write($@"<tr>

			<td height=""100%"" align=""top"" valign=""top"">

				<br/><br/><br/><br/><br/>");
    string tipologia = "Accettazione";

    //'id = request.querystring("IDDOC")
    validate("IDDOC", id, TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 1, HttpContext, session);
    sqlParams.Add("@id", CInt(id));
    //	'strSql = "select pfu.pfuNomeUtente + ' ' + pfu.pfuCognome as Responsabile , bando.Titolo, pfu2.pfuNomeUtente + ' ' + pfu2.pfuCognome as Dest, isnull(pfu2.pfuTitolo,'') as PfuTitolo, azidest.aziRagioneSociale, azidest.aziE_Mail,bando.ResponsabileProcedimento from CTL_DOC  d inner join CTL_DOC i on d.LinkedDoc = i.id left join CTL_DOC_VIEW bando ON bando.id = i.LinkedDoc left join profiliutente pfu ON pfu.idpfu = bando.ResponsabileProcedimento left join profiliutente pfu2 ON pfu2.idpfu = i.idpfu left join aziende aziDest ON aziDest.idazi = i.Azienda where d.id = " & cstr(clng(id))
    string strSql = "select pfu.pfuNomeUtente + ' ' + pfu.pfuCognome as Responsabile , " + Environment.NewLine;
    strSql = strSql + " bando.Titolo, pfu2.pfuNomeUtente + ' ' + pfu2.pfuCognome as Dest,  " + Environment.NewLine;
    strSql = strSql + " isnull(pfu2.pfuTitolo,'') as PfuTitolo,  " + Environment.NewLine;
    strSql = strSql + " azidest.aziRagioneSociale,  " + Environment.NewLine;
    strSql = strSql + " azidest.aziE_Mail, " + Environment.NewLine;
    strSql = strSql + " attr1.attValue as UfficioDiAppartenenza, " + Environment.NewLine;
    strSql = strSql + " isnull(d.body,'') as OggettoComunicazione, " + Environment.NewLine;
    strSql = strSql + " isnull(d.note,'') as Comunicazione, " + Environment.NewLine;
    strSql = strSql + "d.LinkedDoc as Istanza " + Environment.NewLine;
    strSql = strSql + " FROM CTL_DOC  d  " + Environment.NewLine;
    strSql = strSql + " inner join CTL_DOC i on d.LinkedDoc = i.id  " + Environment.NewLine;
    strSql = strSql + " left join CTL_DOC_VIEW bando ON bando.id = i.LinkedDoc  " + Environment.NewLine;
    strSql = strSql + " left join profiliutente pfu ON pfu.idpfu = bando.ResponsabileProcedimento  " + Environment.NewLine;
    strSql = strSql + " left join ProfiliUtenteAttrib attr1 ON pfu.idpfu = attr1.IdPfu and attr1.dztNome = 'AreaDiAppartenenza' and isnull(attr1.attValue,'') <> '' " + Environment.NewLine;
    strSql = strSql + " left join profiliutente pfu2 ON pfu2.idpfu = i.idpfu  " + Environment.NewLine;
    strSql = strSql + " left join aziende aziDest ON aziDest.idazi = i.Azienda  " + Environment.NewLine;
    strSql = strSql + "where d.id = @id";

    //'response.write strSql
    //'response.end
    TSRecordSet? rs = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString, sqlParams);
    if (rs is not null && rs.RecordCount > 0)
    {
        rs.MoveFirst();
    }
    else
    {
        HttpContext.Response.StatusCode = StatusCodes.Status500InternalServerError;
        throw new ResponseEndException(htmlToReturn.Out(), Response, "");
    }
    int istanza = CInt(rs["Istanza"]!);

    string nomeBando = Myhtmlencode(CStr(rs["Titolo"]));
    string nomeResponsabile = Myhtmlencode(CStr(rs["Responsabile"]));// '"Alessia Orsi"
    string UfficioDiAppartenenza = Myhtmlencode(CStr(rs["UfficioDiAppartenenza"]));// 'Area ICT

    string utenteDestinatario = Myhtmlencode(CStr(rs["Dest"]));

    string aziDestRagSoc = Myhtmlencode(CStr(rs["aziRagioneSociale"]));
    string aziDestEmailPec = Myhtmlencode(CStr(rs["aziE_Mail"]));

    //'pfuTitolo = Myhtmlencode(rs("PfuTitolo"))
    string pfuTitolo = string.Empty;

    string oggetto = Myhtmlencode(CStr(rs["OggettoComunicazione"]));
    string comunicazione = Myhtmlencode(CStr(rs["Comunicazione"]));

    string stringa = string.Empty;
    string[] arr = null;
    sqlParams.Clear();
    sqlParams.Add("@dse_id", "CLASSI");
    sqlParams.Add("@name", "ClassificazioneSOA");
    sqlParams.Add("@id", CInt(id));
    TSRecordSet? rsCatMerc = cdf.GetRSReadFromQuery_("select value from CTL_DOC_Value where dse_id = @dse_id and DZT_Name  = @name and isnull(Value,'') <> '' and idHeader = @id", ApplicationCommon.Application.ConnectionString, sqlParams);

    string listaCategorie = string.Empty;

    if (rsCatMerc is not null && rsCatMerc.RecordCount > 0)
    {
        rsCatMerc.MoveFirst();
        stringa = CStr(rsCatMerc["value"]);
        arr = stringa.Split("###");
        for (int i = 1; i <= arr.Length - 1; i++)  //Corretto BUG, errore nel ciclo for, non considerava l'ultimo elemento (inserito <= al posto di <)
        {
            listaCategorie = listaCategorie + "<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + getClassificazioneSOA(arr[i]);
        }
        listaCategorie = listaCategorie + "<br/>";
    }

    //'response.write ":::" & listaCategorie
    comunicazione = comunicazione.Replace(Environment.NewLine, "<br/>");
    comunicazione = comunicazione.Replace("[Categorie SOA]", listaCategorie);
    htmlToReturn.Write($@"<table width=""100%"">

					<tr>

						<td colspan=""2"" align=""left"">");
    htmlToReturn.Write(UfficioDiAppartenenza + "<br/>");
    htmlToReturn.Write("<strong>" + nomeResponsabile + "</strong> <br/>");
    htmlToReturn.Write("<br/>");
    <!--
    Reg.&nbsp;&nbsp;CFR. FILE SEGNATURA.XML<br/>
    Del&nbsp;&nbsp;&nbsp;CFR. FILE SEGNATURA.XML<br/>
    -->
    htmlToReturn.Write("</td>");
    htmlToReturn.Write("</tr>");
    htmlToReturn.Write("<tr>");

    htmlToReturn.Write($@"<td colspan=""2"" align=""right"">");
    htmlToReturn.Write(ApplicationCommon.CNV("PRN_CONFERMA_ISCRIZIONE - Spett.le Ditta") + "<br/>");
    htmlToReturn.Write(aziDestRagSoc + "<br/>");
    htmlToReturn.Write("Indirizzo PEC" + aziDestEmailPec + "<br/>");
    htmlToReturn.Write("<strong>NOTIFICATO TRAMITE PEC</strong><br/>");
    htmlToReturn.Write("</td>");
    htmlToReturn.Write("</tr>");
    htmlToReturn.Write("</table>");
    htmlToReturn.Write("<br/><br/>");

    htmlToReturn.Write($@"<strong>Oggetto:" + oggetto + "</strong> <br/>");

    htmlToReturn.Write("<br/><br/>");

    htmlToReturn.Write("Egr." + pfuTitolo + " " + utenteDestinatario);

    htmlToReturn.Write("<br/><br/>");

    htmlToReturn.Write(comunicazione);

    htmlToReturn.Write("<br/><br/><br/>");

    if (GetParamURL(Request.QueryString.ToString(), "CONFERMA_AUTOMATICA").ToUpper() != "YES")
    {
        htmlToReturn.Write($@"<table width=""100%"">

					<tr>

						<td align=""right"">");
        string param_mostra_nome = CStr(Get_Func_Property("CONFERMA_ISCRIZIONE_INAPPROVE", "nomeResponsabile", "HIDE", "0", CInt("-1")));
        if (param_mostra_nome.ToUpper() == "0")
        {
            htmlToReturn.Write(nomeResponsabile + "<br/>");
        }
        htmlToReturn.Write("Firmato digitalmente");
        htmlToReturn.Write($@"</td>

					</tr>

				</table>");

    }
    htmlToReturn.Write($@"
		</td>
	</tr>
	<tr>
		<td>

			<table border=""0"" height=""50%"" width=""100%"" style=""vertical-align: text-bottom; margin-bottom: 0px"">
				<tr>");
    bool bShowLogo;
    string sLogo = CStr(ApplicationCommon.CNV("footer_stampe_td_custom_logo")).Trim();
    bShowLogo = false;
    if (Strings.InStr(sLogo, "footer_stampe_td_custom_logo") == 0 && !string.IsNullOrEmpty(sLogo))
    {
        bShowLogo = true;

    }
    if (bShowLogo)
    {
        htmlToReturn.Write(sLogo);
    }
    htmlToReturn.Write($@"<td align=""center"" style=""vertical-align: bottom;"">" +
                            ApplicationCommon.CNV("footer_stampe_custom_1") + "<br/>"
                            + ApplicationCommon.CNV("footer_stampe_custom_2") + $@"
						</td>
					</tr>");
    string nascondiFooterTitolario = CStr(Get_Func_Property("PARAMETRI_STAMPE", "Titolario", "HIDE", "0", -1));
    sqlParams.Clear();
    sqlParams.Add("@tipo", "CONFERMA_ISCRIZIONE");
    strSql = "select indiceTitolario, titolario from Document_protocollo_docER where tipoDoc = @tipo";

    rs = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString, sqlParams);

    if (rs is not null && rs.RecordCount > 0 && nascondiFooterTitolario == "0")
    {
        rs.MoveFirst();
        string indice = CStr(rs["indiceTitolario"]);
        string titolario = CStr(rs["titolario"]);

        string lvl1 = titolario;
        string lvl2 = "";
        string lvl3 = "";
        string lvl4 = "";
        string lvl5 = "";

        arr = titolario.Split(".");

        try
        {
            arr = titolario.Split(".");
            lvl1 = arr[0];
            lvl2 = arr[1];
            lvl3 = arr[2];
            lvl4 = arr[3];
            lvl5 = arr[4];
        }
        catch
        {

        }
        htmlToReturn.Write("<tr>");
        htmlToReturn.Write($@"<td align=""center"" style=""vertical-align: bottom;font-size:7");
        if (bShowLogo)
        {
            htmlToReturn.Write($@" colspan=""2"" ");
        }
        htmlToReturn.Write($@"<table width=""30%"" style=""font-size:10; padding: 0px;text-align:center; border-spacing: 0; border-collapse: collapse"" align=""center"">");
        htmlToReturn.Write("<tr>");
        htmlToReturn.Write("<td>");
        htmlToReturn.Write("</td>");

        htmlToReturn.Write("<td>");
        htmlToReturn.Write("LIV.1");
        htmlToReturn.Write("</td>");
        htmlToReturn.Write("<td>");
        htmlToReturn.Write("LIV.2");
        htmlToReturn.Write("</td>");
        htmlToReturn.Write("<td>");
        htmlToReturn.Write("LIV.3");
        htmlToReturn.Write("</td>");

        htmlToReturn.Write("</tr>");
        htmlToReturn.Write("<tr>");
        htmlToReturn.Write("<td>");
        htmlToReturn.Write("Classif.");
        htmlToReturn.Write("</td>");

        htmlToReturn.Write($@"<td style=""border: 1px solid black;"">");
        htmlToReturn.Write(lvl1);
        htmlToReturn.Write("</td>");

        htmlToReturn.Write($@"<td style=""border: 1px solid black;"">");
        htmlToReturn.Write(lvl2);
        htmlToReturn.Write("</td>");

        htmlToReturn.Write($@"<td style=""border: 1px solid black;"">");
        htmlToReturn.Write(lvl3);
        htmlToReturn.Write("</td>");

        htmlToReturn.Write($@"
					</tr>
				</table>
			</td>
		</tr>");

    }
    htmlToReturn.Write($@"
				</table>

			</td>
		</tr>
	</table>

	</body>
	</html>");
    string getClassificazioneSOA(string cod)
    {
        string ret = string.Empty;
        TSRecordSet? rs = null;
        //'set rs = GetRS( "SELECT  v.DMV_DescML  FROM (SELECT 15  AS DMV_DM_ID, dgCodiceInterno AS DMV_Cod , '000.' + dgPath  AS DMV_Father , dgLivello AS DMV_Level , dscTesto AS DMV_DescML , CASE dgFoglia WHEN 1 THEN 'node.gif' ELSE 'folder.gif' END AS DMV_Image, 0 AS DMV_Sort  , CASE CHARINDEX('-', dscTesto) WHEN 0 THEN '0' ELSE LEFT(dscTesto, CHARINDEX('-', dscTesto) -  1) END AS DMV_CodExt FROM DominiGerarchici, DizionarioAttributi , DescsI WHERE dztNome = 'ClassificazioneSOA' AND dztIdTid = dgTipoGerarchia AND dztDeleted = 0 AND IdDsc = dgIdDsc AND dgDeleted = 0) v where DMV_COD='" & cod & "'" )
        //'set rs = GetRS( "SELECT  v.DMV_DescML  FROM (SELECT * from LIB_DomainValues where DMV_DM_ID='GerarchicoSOA') v where DMV_COD='" & cod & "'" )
        try
        {
            sqlParams.Clear();
            sqlParams.Add("@ML_LNG", LanguageSuffix);
            sqlParams.Add("@DMV_COD", cod);
            rs = cdf.GetRSReadFromQuery_("SELECT v.DMV_DescML FROM (SELECT * from GerarchicoSOA_ML_LNG where ML_LNG = @ML_LNG) v where DMV_COD=@DMV_COD", ApplicationCommon.Application.ConnectionString, sqlParams);
            if (rs is not null && rs.RecordCount > 0)
            {
                rs.MoveFirst();
                ret = CStr(rs["DMV_DescML"]);
            }
        }
        catch
        {

        }
        return ret;
    }
    //'-- Testo aggiunto in automatico per liberare la memoria dei nuovi report
    try
    {
        FreeMemDocument(session);
    }
    catch
    {

    }
}@Html.Raw(htmlToReturn.Out())
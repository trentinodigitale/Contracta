@page "/Report/ESPD_REQUEST.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using Microsoft.VisualBasic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel
@using static eProcurementNext.Razor.Pages.Report.ESPD_BASE_FUNCTIONSModel
@model eProcurementNext.Razor.Pages.Report.ESPD_REQUESTModel
@using static eProcurementNext.Session.SessionMiddleware
@{
    EprocResponse htmlToReturn = new();
    CommonDbFunctions cdf = new();
    LoadSession(HttpContext, session);

    htmlToReturn.Write($@"<?xml version=""1.0"" encoding=""UTF-8""?>");

    string validazioneANAC = CStr(GetParamURL(Request.QueryString.ToString(), "anacValid"));

    int bloccaSottoCriteri = 0; //'-- passarlo a 0 quando si vogliono disegnare nuovamente i sottocriteri

    if (CStr(GetParamURL(Request.QueryString.ToString(), "NO_NATIONAL")) == "1")
    {
        bloccaSottoCriteri = 1;
    }

    string g_InCaricoA = "Ente";

    string g_ID_DOC;
    CommonDbFunctions objDB_MTR;

    //'-- collezione di attributi
    Dictionary<object, object> g_col = new Dictionary<object, object>();
    Dictionary<object, object> g_Iterazioni = new Dictionary<object, object>();
    Dictionary<object, object> g_uuid = new Dictionary<object, object>();


    object idTemplate;
    object idProcedura;

    g_ID_DOC = (CStr(GetParamURL(Request.QueryString.ToString(), "IDDOC")));

    if (IsNumeric(g_ID_DOC) == false)
    {
        htmlToReturn.Write("IDDOC PASSATO NON NUMERICO");
        throw new ResponseEndException(htmlToReturn.Out(), Response, "IDDOC PASSATO NON NUMERICO");
    }

    objDB_MTR = new CommonDbFunctions();

    //'-- carica in memoria il contenuto dei campi del documento

    if (!string.IsNullOrEmpty(g_ID_DOC))
    {

        LoadDocument(g_ID_DOC, ref g_col, ref g_uuid, ref g_Iterazioni);
    }

    //'-- CERCO IL TEMPLATE
    TSRecordSet rs = objDB_MTR.GetRSReadFromQuery_("SELECT dbo.GetIdTemplateComtest(  " + g_ID_DOC + " ) AS idTemplate ", ApplicationCommon.Application.ConnectionString);
    idTemplate = rs.Fields["idTemplate"];

    rs = objDB_MTR.GetRSReadFromQuery_("SELECT linkedDoc, GUID from ctl_doc with(nolock) where id = " + idTemplate, ApplicationCommon.Application.ConnectionString);
    idProcedura = rs.Fields["linkedDoc"];

    object guidDocRequest = rs.Fields["GUID"];

    TSRecordSet rsDoc = GetRS("select Fascicolo,ProcedureCode, titoloProcedura, descrizioneProcedura, ProjectType,monoLotto,CigTestata,cpv, numeroGaraSimog, idPfuRup, aziMittente from ESPD_REQUEST_XML_TESTATA with(nolock) where idProcedura = " + CStr(idProcedura));
    rsDoc.MoveFirst();

    object idAziEnteMittente = rsDoc.Fields["aziMittente"];
    object idPfuRup = rsDoc.Fields["idPfuRup"];

    object fascicoloProcedura = rsDoc.Fields["Fascicolo"];

    object cpv = rsDoc.Fields["cpv"];
    object ProcedureCode = rsDoc.Fields["ProcedureCode"];
    object ProjectType = rsDoc.Fields["ProjectType"];
    object titoloProcedura = rsDoc.Fields["titoloProcedura"];
    object descrizioneProcedura = rsDoc.Fields["descrizioneProcedura"];


    string cpv2 = getFieldValueFromPath(CInt(g_ID_DOC), "MainCommodityClassification/ItemClassificationCode", "");
    string ProcedureCode2 = getFieldValueFromPath(CInt(g_ID_DOC), "/ProcedureCode", "");
    string ProjectType2 = getFieldValueFromPath(CInt(g_ID_DOC), "ProcurementProject/ProcurementTypeCode", "");
    string titoloProcedura2 = getFieldValueFromPath(CInt(g_ID_DOC), "ProcurementProject/Name", "");
    string descrizioneProcedura2 = getFieldValueFromPath(CInt(g_ID_DOC), "ProcurementProject/Description", "");

    if (!string.IsNullOrEmpty(cpv2))
    {
        cpv = cpv2;
    }
    if (!string.IsNullOrEmpty(ProcedureCode2))
    {
        ProcedureCode = ProcedureCode2;
    }
    if (!string.IsNullOrEmpty(ProjectType2))
    {
        ProjectType = ProjectType2;
    }
    if (!string.IsNullOrEmpty(titoloProcedura2))
    {
        titoloProcedura = titoloProcedura2;
    }
    if (!string.IsNullOrEmpty(descrizioneProcedura2))
    {
        descrizioneProcedura = descrizioneProcedura2;
    }

    TSRecordSet rsAzi = GetRS("select aziRagioneSociale,aziIndirizzoLeg,aziLocalitaLeg,aziCAPLeg, isnull(aziSitoWeb,'') as aziSitoWeb, vatValore_FT as cf from aziende with(nolock),dm_attributi with(nolock) where idazi = lnk and dztnome = 'codicefiscale' and idazi = " + CStr(idAziEnteMittente));
    rsAzi.MoveFirst();

    object ragSocEnteMitt = rsAzi.Fields["aziRagioneSociale"];

    object cfEnteMitt = rsAzi.Fields["cf"];
    object sitoWebEnteMitt = rsAzi.Fields["aziSitoWeb"];

    object indirizzoEnteMitt = rsAzi.Fields["aziIndirizzoLeg"];
    object comuneEnteMitt = rsAzi.Fields["aziLocalitaLeg"];
    object capEnteMitt = rsAzi.Fields["aziCAPLeg"];

    string ragSocEnteMitt2 = getFieldValueFromPath(CInt(g_ID_DOC), "ContractingParty/Party/PartyName/Name", "");
    string cfEnteMitt2 = getFieldValueFromPath(CInt(g_ID_DOC), "schemeAgencyID/CF_ENTE", "");
    string indirizzoEnteMitt2 = getFieldValueFromPath(CInt(g_ID_DOC), "ContractingParty/Party/PostalAddress/StreetName", "");
    string comuneEnteMitt2 = getFieldValueFromPath(CInt(g_ID_DOC), "ContractingParty/Party/PostalAddress/CityName", "");
    string capEnteMitt2 = getFieldValueFromPath(CInt(g_ID_DOC), "ContractingParty/Party/PostalAddress/PostalZone", "");

    if (!string.IsNullOrEmpty(ragSocEnteMitt2))
    {
        ragSocEnteMitt = ragSocEnteMitt2;
    }
    if (!string.IsNullOrEmpty(cfEnteMitt2))
    {
        cfEnteMitt = cfEnteMitt2;
    }
    if (!string.IsNullOrEmpty(indirizzoEnteMitt2))
    {
        indirizzoEnteMitt = indirizzoEnteMitt2;
    }
    if (!string.IsNullOrEmpty(comuneEnteMitt2))
    {
        comuneEnteMitt = comuneEnteMitt2;
    }
    if (!string.IsNullOrEmpty(capEnteMitt2))
    {
        capEnteMitt = capEnteMitt2;
    }

    //'-- AZI-master. Ente/azienda che mette a disposizione la piattaforma
    int idAziMaster = 35152001; //'-- credo possa rimanere come informazione cablata essendo sempre 35152001 l'azimaster
    TSRecordSet rsAziMaster = GetRS("select aziRagioneSociale,aziIndirizzoLeg,aziLocalitaLeg,aziCAPLeg, isnull(aziSitoWeb,'') as aziSitoWeb, vatValore_FT as cf from aziende with(nolock),dm_attributi with(nolock) where idazi = lnk and dztnome = 'codicefiscale' and idazi = " + CStr(idAziMaster));
    rsAziMaster.MoveFirst();

    object ragSocAziMaster = rsAziMaster.Fields["aziRagioneSociale"];
    object cfAziMaster = rsAziMaster.Fields["cf"];
    object sitoWebAziMaster = rsAziMaster.Fields["aziSitoWeb"];

    string sitoWebAziMaster2 = getFieldValueFromPath(CInt(g_ID_DOC), "ContractingParty/Party/ServiceProviderParty/WebsiteURI", "");
    if (!string.IsNullOrEmpty(sitoWebAziMaster2))
    {
        sitoWebAziMaster = sitoWebAziMaster2;
    }

    string cfAziMaster2 = getFieldValueFromPath(CInt(g_ID_DOC), "ContractingParty/Party/ServiceProviderParty/PartyIdentification/ID", "");
    if (!string.IsNullOrEmpty(cfAziMaster2))
    {
        cfAziMaster = cfAziMaster2;
    }

    string ragSocAziMaster2 = getFieldValueFromPath(CInt(g_ID_DOC), "ContractingParty/Party/ServiceProviderParty/PartyName/name", "");
    if (!string.IsNullOrEmpty(ragSocAziMaster2))
    {
        ragSocAziMaster = ragSocAziMaster2;
    }

    TSRecordSet rsPfu = GetRS("select pfuTel,pfuE_Mail,pfuNome from profiliutente with(nolock) where idpfu = " + CStr(idPfuRup));
    rsPfu.MoveFirst();

    object rupTelefono = rsPfu.Fields["pfuTel"];
    object rupEmail = rsPfu.Fields["pfuE_Mail"];
    object rupNome = rsPfu.Fields["pfuNome"];

    string rupTelefono2 = getFieldValueFromPath(CInt(g_ID_DOC), "ContractingParty/Party/Contact/Telephone", "");
    string rupEmail2 = getFieldValueFromPath(CInt(g_ID_DOC), "ContractingParty/Party/Contact/ElectronicMail", "");
    string rupNome2 = getFieldValueFromPath(CInt(g_ID_DOC), "ContractingParty/Party/Contact/Name", "");

    if (!string.IsNullOrEmpty(rupTelefono2))
    {
        rupTelefono = rupTelefono2;
    }
    if (!string.IsNullOrEmpty(rupEmail2))
    {
        rupEmail = rupEmail2;
    }
    if (!string.IsNullOrEmpty(rupNome2))
    {
        rupNome = rupNome2;
    }

    string sito = getFieldValueFromPath(CInt(g_ID_DOC), "ContractingParty/Party/ServiceProviderParty/WebsiteURI", "");
    string sitoPortale;
    if (string.IsNullOrEmpty(sito))
    {
        sitoPortale = CStr(ApplicationCommon.Application["SITO_2_ISTITUZIONALE_CLIENTE"]);
    }
    else
    {
        sitoPortale = sito;
    }

    if (CStr(GetParamURL(Request.QueryString.ToString(), "TEXT")) != "1")
    {
        Response.ContentType = "TEXT/XML";
    }

    if (CStr(GetParamURL(Request.QueryString.ToString(), "VIDEO")) != "1")
    {
        Response.Headers.TryAdd("Content-Disposition", "attachment; filename=ESPD_REQUEST.XML");
    }

    if (validazioneANAC == "1")
    {
        htmlToReturn.Write($@"<QualificationApplicationRequest xmlns:cac=""urn:X-test:UBL:Pre-award:CommonAggregate"" xmlns=""urn:X-test:UBL:Pre-award:QualificationApplicationRequest"" xmlns:cbc=""urn:X-test:UBL:Pre-award:CommonBasic"" xmlns:ns4=""urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2"">");
    }
    else
    {
        htmlToReturn.Write($@"<QualificationApplicationRequest xmlns=""urn:oasis:names:specification:ubl:schema:xsd:QualificationApplicationRequest-2"" xmlns:ns2=""urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2"" xmlns:cbc=""urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2"" xmlns:cac=""urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2"">");
    }

    htmlToReturn.Write($@"<cbc:UBLVersionID schemeAgencyID=""OASIS-UBL-TC"">2.2</cbc:UBLVersionID>");

    htmlToReturn.Write($@"<cbc:CustomizationID schemeAgencyID=""CEN-BII"" schemeVersionID=""3.0"">urn:www.cenbii.eu:transaction:biitrdm070:ver3.0</cbc:CustomizationID>");

    htmlToReturn.Write($@"<cbc:ProfileID schemeAgencyID=""CEN-BII"" schemeVersionID=""2.0"">4.1</cbc:ProfileID>");

    htmlToReturn.Write($@"<cbc:ID schemeAgencyID=""" + cfEnteMitt + $@""">ESPDREQ-" + IIF(!string.IsNullOrEmpty(g_ID_DOC), g_ID_DOC, idProcedura) + $@"</cbc:ID>");

    htmlToReturn.Write($@"<cbc:CopyIndicator>false</cbc:CopyIndicator>");

    htmlToReturn.Write($@"<cbc:UUID schemeID=""ISO/IEC 9834-8:2008"" schemeAgencyID=""" + cfEnteMitt + $@""" schemeVersionID=""4"">" + normalizeUUID(guidDocRequest) + $@"</cbc:UUID>");

    htmlToReturn.Write($@"<cbc:ContractFolderID schemeAgencyID=""" + cfEnteMitt + $@""">" + xmlEncode(fascicoloProcedura) + $@"</cbc:ContractFolderID>");

    htmlToReturn.Write($@"<cbc:IssueDate>" + formatDate(DateAndTime.Now.Ticks) + $@"</cbc:IssueDate>");

    htmlToReturn.Write($@"<cbc:IssueTime>" + formatTime(DateAndTime.Now.Ticks) + $@"</cbc:IssueTime>");

    htmlToReturn.Write($@"<cbc:VersionID schemeAgencyID=""" + cfEnteMitt + $@""" schemeVersionID=""1.0"">1.0</cbc:VersionID>");

    htmlToReturn.Write($@"<cbc:ProcedureCode listID=""ProcedureType"" listAgencyID=""EU-COM-OP"" listVersionID=""1.0"">" + xmlEncode(ProcedureCode) + $@"</cbc:ProcedureCode>");

    htmlToReturn.Write($@"<cbc:QualificationApplicationTypeCode listID=""QualificationApplicationType"" listAgencyID=""EU-COM-GROW"" listVersionID=""2.1.1"">Extended</cbc:QualificationApplicationTypeCode>");

    //'-- INVOCO I METODO PER PRODURRE LA PARTE DI TESTATA DELLA REQUEST
    aggiungiContractingParty(
        cfEnteMitt,
        ragSocEnteMitt,
        indirizzoEnteMitt,
        comuneEnteMitt,
        capEnteMitt,
        rupNome,
        rupTelefono,
        rupEmail,
        sitoWebAziMaster,
        cfAziMaster,
        ragSocAziMaster,
        htmlToReturn
        );
    aggiungiProcurementProject(
        titoloProcedura,
        descrizioneProcedura,
        ProjectType,
        cpv,
        htmlToReturn
        );
    int bFaseTest = 0;
    string listaResponseEvidence = "";
    addLotti(idProcedura,
        CInt(g_ID_DOC),
        bFaseTest,
        cfEnteMitt,
        htmlToReturn
        );

    //'-- GENERO L'XML PER I CRITERI
    drawModuleTemplate(
        CInt(g_ID_DOC),
        1,
        idTemplate,
        htmlToReturn,
        ref listaResponseEvidence,
        ref g_Iterazioni,
        ref g_col,
        ref g_uuid,
        ref bloccaSottoCriteri,
        ref cfEnteMitt,
        Response
        );

    addAdditionalDocumentReference(CInt(g_ID_DOC), bFaseTest, htmlToReturn);

    htmlToReturn.Write($@"</QualificationApplicationRequest>");

}
@Html.Raw(htmlToReturn.Out())
@page "/Report/ESPD_RESPONSE.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using Microsoft.VisualBasic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel
@using static eProcurementNext.Razor.Pages.Report.ESPD_BASE_FUNCTIONSModel
@model eProcurementNext.Razor.Pages.Report.ESPD_RESPONSEModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();
}
@{
    int bloccaSottoCriteri = 0;  //'-- passarlo a 0 quando si vogliono disegnare nuovamente i sottocriteri

    string g_InCaricoA = "OE";

    string g_ID_DOC;
    CommonDbFunctions objDB_MTR;

    //'-- collezione di attributi
    Dictionary<object, object> g_col = new Dictionary<object, object>();
    Dictionary<object, object> g_Iterazioni = new Dictionary<object, object>();
    Dictionary<object, object> g_uuid = new Dictionary<object, object>();
    object idTemplate;
    object idProcedura;

    g_ID_DOC = (CStr(GetParamURL(Request.QueryString.ToString(), "IDDOC")));

    if (IsNumeric(g_ID_DOC) == false) {
        htmlToReturn.Write("IDDOC PASSATO NON NUMERICO");
        throw new ResponseEndException(htmlToReturn.Out(), Response, "IDDOC PASSATO NON NUMERICO");
    }

    objDB_MTR = new CommonDbFunctions();

    //'idPfuRup = 45094
    //'idProcedura = 258529'258529

    //'-- carica in memoria il contenuto dei campi del documento

    if (!string.IsNullOrEmpty(g_ID_DOC)) {

        LoadDocument(g_ID_DOC, ref g_col, ref g_uuid, ref g_Iterazioni);
    }

    //'-- CERCO IL TEMPLATE
    //'-- CERCO IL TEMPLATE
    TSRecordSet rs = objDB_MTR.GetRSReadFromQuery_( "SELECT dbo.GetIdTemplateComtest(  " + g_ID_DOC + " ) AS idTemplate ", ApplicationCommon.Application.ConnectionString);
    idTemplate = rs.Fields["idTemplate"];

    rs = objDB_MTR.GetRSReadFromQuery_( "SELECT linkedDoc, GUID from ctl_doc with(nolock) where id = " + idTemplate, ApplicationCommon.Application.ConnectionString);
    idProcedura = rs.Fields["linkedDoc"];

    object guidDocResponse = rs.Fields["GUID"];
    rs = objDB_MTR.GetRSReadFromQuery_( "SELECT GUID, linkedDoc from ctl_doc with(nolock) where id = " + g_ID_DOC, ApplicationCommon.Application.ConnectionString);
    object linkedDoc = rs.Fields["linkedDoc"];

    //rs = null;


    rs = objDB_MTR.GetRSReadFromQuery_( "select a.aziPartitaIVA, a.aziSitoWeb, a.aziRagioneSociale, a.aziIndirizzoLeg, a.aziLocalitaLeg, a.aziCAPLeg, a.aziStatoLeg, p.pfuNome, p.pfuTel, p.pfuE_Mail  from ctl_doc c with(nolock) inner join profiliutente p with(nolock) on p.IdPfu = isnull(c.idPfuInCharge, c.IdPfu) inner join aziende a with(nolock) on p.pfuIdAzi = a.IdAzi where id = " + linkedDoc, ApplicationCommon.Application.ConnectionString);

    object oePartitaIVA = rs.Fields["aziPartitaIVA"];
    object oeSitoWEB = rs.Fields["aziSitoWeb"];
    object oeRagSoc = rs.Fields["aziRagioneSociale"];

    object oeIndirizzo = rs.Fields["aziIndirizzoLeg"];
    object oeComune = rs.Fields["aziLocalitaLeg"];
    object oeCAP = rs.Fields["aziCAPLeg"];

    object oeStato	 = rs.Fields["aziStatoLeg"];
    string oeCodStato = Strings.Left(CStr(oeStato), 2);

    object oePfuNome  = rs.Fields["pfuNome"];
    object oePfuTel = rs.Fields["pfuTel"];
    object oePfuEmail = rs.Fields["pfuE_Mail"];

    string oePartitaIVA2 = getFieldValueFromPath(CInt(g_ID_DOC), "EconomicOperatorParty/Party/PartyIdentification/ID", "");
    string oeSitoWEB2 = getFieldValueFromPath(CInt(g_ID_DOC), "EconomicOperatorParty/Party/WebsiteURI", "");
    string oeRagSoc2 = getFieldValueFromPath(CInt(g_ID_DOC), "EconomicOperatorParty/Party/PartyName/Name", "");

    string oeIndirizzo2 = getFieldValueFromPath(CInt(g_ID_DOC), "EconomicOperatorParty/Party/PostalAddress/StreetName", "");
    string oeComune2 = getFieldValueFromPath(CInt(g_ID_DOC), "EconomicOperatorParty/Party/PostalAddress/CityName", "");

    string oePfuNome2  = getFieldValueFromPath(CInt(g_ID_DOC), "EconomicOperatorParty/Party/Contact/Name", "");
    string oePfuTel2   = getFieldValueFromPath(CInt(g_ID_DOC), "EconomicOperatorParty/Party/Contact/Telephone", "");
    string oePfuEmail2 = getFieldValueFromPath(CInt(g_ID_DOC), "EconomicOperatorParty/Party/Contact/ElectronicMail", "");

    if (!string.IsNullOrEmpty(oePartitaIVA2)){
        oePartitaIVA = oePartitaIVA2;
    }
    if (!string.IsNullOrEmpty(oeSitoWEB2)){
        oeSitoWEB = oeSitoWEB2;
    }
    if (!string.IsNullOrEmpty(oeRagSoc2)){
        oeRagSoc = oeRagSoc2;
    }
    if (!string.IsNullOrEmpty(oeIndirizzo2)){
        oeIndirizzo = oeIndirizzo2;
    }
    if (!string.IsNullOrEmpty(oeComune2)){
        oeComune = oeComune2;
    }
    if (!string.IsNullOrEmpty(oePfuNome2)){
        oePfuNome = oePfuNome2;
    }
    if (!string.IsNullOrEmpty(oePfuTel2)){
        oePfuTel = oePfuTel2;
    }
    if (!string.IsNullOrEmpty(oePfuEmail2)){
        oePfuEmail = oePfuEmail2;
    }


    TSRecordSet rsDoc = GetRS("select Fascicolo,ProcedureCode, titoloProcedura, descrizioneProcedura, ProjectType,monoLotto,CigTestata,cpv, numeroGaraSimog, idPfuRup, aziMittente from ESPD_REQUEST_XML_TESTATA with(nolock) where idProcedura = " + CStr(idProcedura));
    rsDoc.MoveFirst();
    object fascicoloProcedura = rsDoc.Fields["Fascicolo"];

    object idPfuRup = rsDoc.Fields["idPfuRup"];
    object cpv = rsDoc.Fields["cpv"];
    object ProcedureCode = rsDoc.Fields["ProcedureCode"];
    object ProjectType = rsDoc.Fields["ProjectType"];
    object titoloProcedura = rsDoc.Fields["titoloProcedura"];
    object descrizioneProcedura = rsDoc.Fields["descrizioneProcedura"];
    object idAziEnteMittente = rsDoc.Fields["aziMittente"];	

    string cpv2 = getFieldValueFromPath(CInt(g_ID_DOC), "MainCommodityClassification/ItemClassificationCode", "");
    string ProcedureCode2 = getFieldValueFromPath(CInt(g_ID_DOC), "/ProcedureCode", "");
    string ProjectType2 = getFieldValueFromPath(CInt(g_ID_DOC), "ProcurementProject/ProcurementTypeCode", "");
    string titoloProcedura2 = getFieldValueFromPath(CInt(g_ID_DOC), "ProcurementProject/Name", "");
    string descrizioneProcedura2 = getFieldValueFromPath(CInt(g_ID_DOC), "ProcurementProject/Description", "");

    if (!string.IsNullOrEmpty(cpv2)){
        cpv = cpv2;
    }
    if (!string.IsNullOrEmpty(ProcedureCode2)){
        ProcedureCode = ProcedureCode2;
    }
    if (!string.IsNullOrEmpty(ProjectType2)){
        ProjectType = ProjectType2;
    }
    if (!string.IsNullOrEmpty(titoloProcedura2)){
        titoloProcedura = titoloProcedura2;
    }
    if (!string.IsNullOrEmpty(descrizioneProcedura2)){
        descrizioneProcedura = descrizioneProcedura2;
    }


    //set rsDoc = null;	

    TSRecordSet rsAzi = GetRS("select aziRagioneSociale,aziIndirizzoLeg,aziLocalitaLeg,aziCAPLeg, isnull(aziSitoWeb,'') as aziSitoWeb, vatValore_FT as cf from aziende with(nolock),dm_attributi with(nolock) where idazi = lnk and dztnome = 'codicefiscale' and idazi = " + CStr(idAziEnteMittente));
    rsAzi.MoveFirst();

    object ragSocEnteMitt = rsAzi.Fields["aziRagioneSociale"];
    object cfEnteMitt = rsAzi.Fields["cf"];
    object sitoWebEnteMitt = rsAzi.Fields["aziSitoWeb"];

    object indirizzoEnteMitt = rsAzi.Fields["aziIndirizzoLeg"];
    object comuneEnteMitt = rsAzi.Fields["aziLocalitaLeg"];
    object capEnteMitt = rsAzi.Fields["aziCAPLeg"];

    string ragSocEnteMitt2 = getFieldValueFromPath(CInt(g_ID_DOC), "ContractingParty/Party/PartyName/Name", "");
    string cfEnteMitt2 = getFieldValueFromPath(CInt(g_ID_DOC), "schemeAgencyID/CF_ENTE", "");
    string indirizzoEnteMitt2 = getFieldValueFromPath(CInt(g_ID_DOC), "ContractingParty/Party/PostalAddress/StreetName", "");
    string comuneEnteMitt2 = getFieldValueFromPath(CInt(g_ID_DOC), "ContractingParty/Party/PostalAddress/CityName", "");
    string capEnteMitt2 = getFieldValueFromPath(CInt(g_ID_DOC), "ContractingParty/Party/PostalAddress/PostalZone", "");

    //'codStatoEnteMitt = getFieldValueFromPath(g_ID_DOC, "ContractingParty/Party/PostalAddress/Country", "")

    if (!string.IsNullOrEmpty(ragSocEnteMitt2)){
        ragSocEnteMitt = ragSocEnteMitt2;
    }
    if (!string.IsNullOrEmpty(cfEnteMitt2)){
        cfEnteMitt = cfEnteMitt2;
    }
    if (!string.IsNullOrEmpty(indirizzoEnteMitt2)){
        indirizzoEnteMitt = indirizzoEnteMitt2;
    }
    if (!string.IsNullOrEmpty(comuneEnteMitt2)){
        comuneEnteMitt = comuneEnteMitt2;
    }
    if (!string.IsNullOrEmpty(capEnteMitt2)){
        capEnteMitt = capEnteMitt2;
    }

    //set rsAzi = null;

    //'-- AZI-master. Ente/azienda che mette a disposizione la piattaforma
    int idAziMaster = 35152001; //'-- credo possa rimanere come informazione cablata essendo sempre 35152001 l'azimaster
    TSRecordSet rsAziMaster = GetRS("select aziRagioneSociale,aziIndirizzoLeg,aziLocalitaLeg,aziCAPLeg, isnull(aziSitoWeb,'') as aziSitoWeb, vatValore_FT as cf from aziende with(nolock),dm_attributi with(nolock) where idazi = lnk and dztnome = 'codicefiscale' and idazi = " + CStr(idAziMaster));
	rsAziMaster.MoveFirst();

	object ragSocAziMaster = rsAziMaster.Fields["aziRagioneSociale"];
	object cfAziMaster = rsAziMaster.Fields["cf"];
	object sitoWebAziMaster = rsAziMaster.Fields["aziSitoWeb"];

	rsAziMaster = null;
	
	TSRecordSet rsPfu = GetRS("select pfuTel,pfuE_Mail,pfuNome from profiliutente with(nolock) where idpfu = " + CStr(idPfuRup));
	rsPfu.MoveFirst();

	object rupTelefono = rsPfu.Fields["pfuTel"];
	object rupEmail = rsPfu.Fields["pfuE_Mail"];
	object rupNome = rsPfu.Fields["pfuNome"];
	
	string rupTelefono2 = getFieldValueFromPath(CInt(g_ID_DOC), "ContractingParty/Party/Contact/Telephone", "");
	string rupEmail2 = getFieldValueFromPath(CInt(g_ID_DOC), "ContractingParty/Party/Contact/Name", "");
	string rupNome2 = getFieldValueFromPath(CInt(g_ID_DOC), "ContractingParty/Party/Contact/Name", "");

	if (!string.IsNullOrEmpty(rupTelefono2)){
		rupTelefono = rupTelefono2;
	}
	if (!string.IsNullOrEmpty(rupEmail2)){
		rupEmail = rupEmail2;
	}
	if (!string.IsNullOrEmpty(rupNome2)){
		rupNome = rupNome2;
	}

	//rsPfu = null;

	string sitoPortale = CStr(ApplicationCommon.Application["SITO_2_ISTITUZIONALE_CLIENTE"]);

	Response.ContentType = "TEXT/XML";
	if (CStr(GetParamURL(Request.QueryString.ToString(), "VIDEO")) != "1"){
		Response.Headers.TryAdd("Content-Disposition", "attachment; filename=ESPD_RESPONSE.XML");
	}

    htmlToReturn.Write($@"
    <ubl-qares:QualificationApplicationResponse 
		xmlns:ext=""urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2"" 
		xmlns:cac=""urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2"" 
		xmlns:cbc=""urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2""
		xmlns:ubl-qares=""urn:oasis:names:specification:ubl:schema:xsd:QualificationApplicationResponse-2""
		xmlns:ubl-qareq=""urn:oasis:names:specification:ubl:schema:xsd:QualificationApplicationRequest-2"">		

		<cbc:UBLVersionID schemeAgencyID=""OASIS-UBL-TC"">2.2</cbc:UBLVersionID>
		<cbc:CustomizationID schemeName=""CustomizationID"" schemeAgencyID=""CEN-BII"" schemeVersionID=""2.0"">urn:www.cenbii.eu:transaction:biitrdm092:ver3.0</cbc:CustomizationID>
		<cbc:ProfileID schemeAgencyID=""CEN-BII"" schemeVersionID=""2.0"">4.1</cbc:ProfileID>
		<cbc:ProfileExecutionID schemeAgencyID=""EU-COM-GROW"" schemeVersionID=""2.1.0"">ESPD-EDMv2.1.0-SELFCONTAINED</cbc:ProfileExecutionID>

		
        <cbc:ID schemeAgencyID=""" + cfEnteMitt + $@">ESPDRESPAFSATER-" + IIF ( !string.IsNullOrEmpty(g_ID_DOC), g_ID_DOC , idProcedura ) + $@"</cbc:ID>
   
		<cbc:CopyIndicator>false</cbc:CopyIndicator>
	
        <cbc:UUID schemeID=""ISO/IEC 9834-8:2008"" schemeAgencyID=""" + cfEnteMitt + $@"schemeVersionID=""4"">""" + normalizeUUID(guidDocResponse) + $@"</cbc:UUID>
        <cbc:ContractFolderID schemeAgencyID=""" + cfEnteMitt + $@">" + xmlEncode(fascicoloProcedura) + $@"</cbc:ContractFolderID> 
		<cbc:IssueDate>" + formatDate(DateAndTime.Now) + $@"</cbc:IssueDate>
		<cbc:IssueTime>" + formatTime(DateAndTime.Now) + $@"</cbc:IssueTime>
        <cbc:VersionID schemeAgencyID=""" + cfEnteMitt + $@" schemeVersionID=""1.0"">1.0</cbc:VersionID>
        <cbc:ProcedureCode listID=""ProcedureType"" listAgencyID=""EU-COM-OP"" listVersionID=""1.0"">" + xmlEncode(ProcedureCode) + $@"</cbc:ProcedureCode>
     	<cbc:QualificationApplicationTypeCode listID=""QualificationApplicationType"" listAgencyID=""EU-COM-GROW"" listVersionID=""2.1.0"">SELFCONTAINED</cbc:QualificationApplicationTypeCode>");

		aggiungiContractingParty(
            cfEnteMitt,
            ragSocEnteMitt, 
            indirizzoEnteMitt,
            comuneEnteMitt,
            capEnteMitt,
            rupNome,
            rupTelefono,
            rupEmail,
            sitoWebAziMaster,
            cfAziMaster,
            ragSocAziMaster,
            htmlToReturn
        );
		
		string numeroDipendenti = getFieldValueFromPath(CInt(g_ID_DOC), "EconomicOperatorParty/QualifyingParty/EmployeeQuantity", "");
		string fatturato = getFieldValueFromPath(CInt(g_ID_DOC), "EconomicOperatorParty/QualifyingParty/FinancialCapability/ValueAmount", "");
		string RoleCode = getFieldValueFromPath(CInt(g_ID_DOC), "EconomicOperatorParty/EconomicOperatorRole/RoleCode", "");

		if (string.IsNullOrEmpty(RoleCode)){
			RoleCode = "SCLE";
		}
		
		string IndustryClassificationCode = getFieldValueFromPath(CInt(g_ID_DOC), "EconomicOperatorParty/Party/IndustryClassificationCode", "");

		if (CStr(IndustryClassificationCode).ToLower() == "si" ) { //'-- lascio quest'if per retrocompatibilità 
			IndustryClassificationCode = "SME";
		}
		//'else
		//'	IndustryClassificationCode = "LARGE"
		//'end if
		
		if (string.IsNullOrEmpty(IndustryClassificationCode)){
			IndustryClassificationCode = "SME";
		}

		htmlToReturn.Write($@"
		<!-- INIZIO BLOCCO INFORMAZIONI OPERATORE ECONOMICO -->
		<cac:EconomicOperatorParty>
			<!-- 1..1 -->
			<cac:QualifyingParty>
			
			'<!-- 0..1 Numero di Dipendenti -->");
			
		addOptionalTag(numeroDipendenti, "cbc:EmployeeQuantity", htmlToReturn);
			
			if (!string.IsNullOrEmpty(fatturato)){
				htmlToReturn.Write($@"<cac:FinancialCapability>
					<cbc:ValueAmount currencyID=""EUR"">" + fatturato + $@"</cbc:ValueAmount>
				</cac:FinancialCapability>");
			}
			
		htmlToReturn.Write($@"
			<cac:Party/>
			</cac:QualifyingParty>
			<!-- 1..1 -->
			<cac:EconomicOperatorRole>");

    //'			<!--
    //'				Identifica il ruolo dell'operatore economico nell'offerta.
    //'				
    //'				SCLE	Sole contractor / Lead entity
    //'				GM		Group member
    //'				OERON	Other entity (relied upon)
    //'				OENRON	Other entity (not relied upon)
    //'				SC		Sole contractor
    //'				LE		Lead Entity
    //'			-->

				htmlToReturn.Write($@"<cbc:RoleCode listID=""EORoleType"" listAgencyID=""EU-COM-GROW"" listAgencyName=""DG GROW (European Commission)"" listVersionID=""2.1.0"">" + RoleCode + $@"</cbc:RoleCode>
			</cac:EconomicOperatorRole>
			
			<!-- 1..1 -->
			<cac:Party>
				<!-- 0..1 -->
				<!-- Il sito web dell’operatore economico -->
				<cbc:WebsiteURI>" + xmlEncode(oeSitoWEB) + $@"</cbc:WebsiteURI>");
		
    //'				<!--
    //'					Utilizzato per indicare se l'azienda è una micro, piccola, media o grande impresa.
    //'					
    //'					MICRO		Micro Enterprise
    //'					SMALL		Small Enterprise
    //'					MEDIUM		Medium Enterprise
    //'					SME			Small or Medium Enterprise
    //'					LARGE		Non SME, Large Company
    //'				-->

				htmlToReturn.Write($@"<cbc:IndustryClassificationCode listID=""EOIndustryClassificationCode"" listAgencyID=""EU-COM-GROW"" listVersionID=""2.1.0""> " + IndustryClassificationCode + $@"</cbc:IndustryClassificationCode>
				
				<!-- 1..1 -->
				<cac:PartyIdentification>
					<cbc:ID schemeID=""IT:VAT"" schemeAgencyID=""AdE"">" + xmlEncode(oePartitaIVA) + $@"</cbc:ID>
				</cac:PartyIdentification>

				<!-- 1..1 -->
				<cac:PartyName>
					<cbc:Name>" + xmlEncode(oeRagSoc) + $@"</cbc:Name>
				</cac:PartyName>
				
				<!-- 1..1 --><!-- sede legale -->
				<cac:PostalAddress>
					<cbc:StreetName>" + xmlEncode(oeIndirizzo) + $@"</cbc:StreetName>
					<cbc:CityName>" + xmlEncode(oeComune) + $@"</cbc:CityName>
					<cbc:PostalZone>" + xmlEncode(oeCAP) + $@"</cbc:PostalZone>
					<cac:Country>
						<cbc:IdentificationCode listID=""CountryCodeIdentifier"" listAgencyID=""ISO"" listName=""CountryCodeIdentifier"" listVersionID=""1.0"">" + oeCodStato + $@"</cbc:IdentificationCode>
						<cbc:Name>" + oeStato + $@"</cbc:Name>
					</cac:Country>
				</cac:PostalAddress>
				
				<!-- 0..1 -->
				<!-- Utilizzato per fornire informazioni di contatto per una oggetto in generale o una persona fisica -->
				<cac:Contact>
					<cbc:Name>" + xmlEncode(oePfuNome) + $@"</cbc:Name>");

					addOptionalTag(oePfuTel, "cbc:Telephone", htmlToReturn);
					addOptionalTag(oePfuEmail, "cbc:ElectronicMail", htmlToReturn);

				htmlToReturn.Write($@"</cac:Contact>");


		//'----------------------------------------------------------
		//'-- AGGIUNGO I RAPPRESENTANTI LEGALI ( Iterabile 0..N )  --
		//'----------------------------------------------------------

		string strTmpSQL = "select DZT_Name from ctl_doc_value with(nolock) where IdHeader = " + CStr(g_ID_DOC) + " and DSE_ID = 'UUID' and [value] like 'EconomicOperatorParty/Party/PowerOfAttorney/AgentParty/Person/FirstName(1,1,1)'";
		TSRecordSet rsTmp = objDB_MTR.GetRSReadFromQuery_(strTmpSQL, ApplicationCommon.Application.ConnectionString);
		
		string dztNomeIterazione = "C_2_1";
		if (rsTmp.RecordCount > 0 ){
		
			rsTmp.MoveFirst();
			
			object tmpDztNome = rsTmp.Fields["DZT_Name"];
			
			int indexStart = Strings.InStr(CStr(tmpDztNome), "MOD_") + 4;
			int indexEnd = Strings.InStr(CStr(tmpDztNome), "_FLD_");

			dztNomeIterazione = Strings.Mid( CStr(tmpDztNome), indexStart, indexEnd - indexStart);

		}
		
		//'--- PRENDERE DINAMICAMENTE IL DZT_NAME PER L'ITERAZIONE
		
		
		strTmpSQL = "select [value] as numIterazioni from ctl_doc_value with(nolock) where IdHeader = " + CStr(g_ID_DOC) + " and dse_id = 'ITERAZIONI' and DZT_Name = '" + Strings.Replace(dztNomeIterazione,"'","''") + "@@@G1'"; //'-- indice ( ad es.C.2.1 ) riferito al nostro criterio interno 'EU210 - B11 - CRITERION.EO.INFORMATION.B11'
		
		rsTmp = objDB_MTR.GetRSReadFromQuery_(strTmpSQL, ApplicationCommon.Application.ConnectionString);
		
		string totIterazioni = "1";
		
		if (rsTmp.RecordCount > 0 ){
		
			rsTmp.MoveFirst();
			
			totIterazioni = CStr(rsTmp.Fields["numIterazioni"]);
		
		}

		//'-- ciclo sulle iterazioni
		for (int ix = 1; ix <= CInt(totIterazioni); ix++){
		
			aggiungiRapLeg(CInt(g_ID_DOC), ix, htmlToReturn);
		
		}
				
				
		htmlToReturn.Write($@"		
		</cac:Party>
		</cac:EconomicOperatorParty>
		
		<!--  FINE BLOCCO INFORMAZIONI O.E. -->
    ");

	aggiungiProcurementProject(titoloProcedura,descrizioneProcedura,ProjectType,cpv, htmlToReturn);
    int bFaseTest = 0;
    string listaResponseEvidence = "";
	addLotti(idProcedura, CInt(g_ID_DOC), bFaseTest, cfEnteMitt, htmlToReturn);
	
	//'-- Genero l'xml della parte di request
	drawModuleTemplate	( CInt(g_ID_DOC), 
        1, 
        idTemplate, 
        htmlToReturn, 
        ref listaResponseEvidence, 
        ref g_Iterazioni, 
        ref g_col, 
        ref g_uuid, 
        ref bloccaSottoCriteri,
        ref cfEnteMitt, 
		Response
    );

	//'-- genero l'xml della parte di response
	drawModuleTemplate	( 
        CInt(g_ID_DOC), 
        0,
        idTemplate,
        htmlToReturn,
        ref listaResponseEvidence, 
        ref g_Iterazioni, 
        ref g_col, 
        ref g_uuid,
        ref bloccaSottoCriteri, 
        ref cfEnteMitt, 
		Response
    );

	addAdditionalDocumentReference(CInt(g_ID_DOC), bFaseTest, htmlToReturn);

	//'-- do in output eventuali evidence response
	htmlToReturn.Write(listaResponseEvidence);
	


    htmlToReturn.Write($@"</ubl-qares:QualificationApplicationResponse>");

}
@Html.Raw(htmlToReturn.Out())
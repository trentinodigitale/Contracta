@page "/Report/OFFERTA_CAUZIONE.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using Microsoft.VisualBasic
@using static eProcurementNext.CommonDB.Basic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.print_documentModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel;
@using static eProcurementNext.Razor.Pages.Report.OFFERTA_CAUZIONEModel;
@model eProcurementNext.Razor.Pages.Report.OFFERTA_CAUZIONEModel
@using static eProcurementNext.Session.SessionMiddleware
@{
    CommonDbFunctions cdf = new();
    LoadSession(HttpContext, session);
    EprocResponse htmlToReturn = new();

    objDoc = PrintDocument(session, htmlToReturn, HttpContext, Response, Request);//PrintDocument ok
    string IDDOC = objDoc.mp_IDDoc;
    var sqlParams = new Dictionary<string, object?>();
}
@{



    htmlToReturn.Write($@"
	<html>
	<head>
	<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">
	<link rel=""stylesheet"" type=""text/css"" href=""../ctl_library/themes/main_base_print.css""  />
	<link rel=""stylesheet"" type=""text/css"" href=""../ctl_library/themes/GridPrint.css""  />
	<style>
	.display_none
	{{
		display: none;

	}}
	</style>");
    htmlToReturn.Write($@"<title>" + ApplicationCommon.CNV("Cauzione Microlotti") + $@"</title>");
    htmlToReturn.Write("</head>");
    void Header()
    {
        htmlToReturn.Write($@"<tr><td height=""50px"" align=""center"" valign=""top"" >");

        string imgHeader = ApplicationCommon.CNV("HEADER_STAMPE");

        if (imgHeader.Contains("???", StringComparison.Ordinal))
        {
            htmlToReturn.Write($@"<img height=""50px"" src=""logo_new.gif"" border=""0"" alt=""" + ApplicationCommon.CNV("ALT LOGO") + $@"""/>");
        }
        else
        {
            htmlToReturn.Write(imgHeader);
        }
        htmlToReturn.Write("</td></tr>");
        htmlToReturn.Write($@"<tr><td align=""center"" valign=""top"">" + ApplicationCommon.CNV("HEADER_STAMPA_BUSTA_OFFERTA") + $@"</td></tr>");
    }
    string stazioneappaltante(dynamic cod)
    {
        //'--recupero info ente
        string ret = string.Empty;
        sqlParams.Clear();
        sqlParams.Add("@cod", CInt(cod));
        TSRecordSet rsEnte = cdf.GetRSReadFromQuery_("select aziRagioneSociale from Aziende with(nolock) where IdAzi=@cod", ApplicationCommon.Application.ConnectionString, sqlParams);
        if (rsEnte is not null && !(rsEnte.EOF && rsEnte.BOF))
        {
            rsEnte.MoveFirst();
            ret = CStr(rsEnte["aziRagioneSociale"]);
        }
        return ret;
    }
    string recuperoTipoProcedura(string cod)
    {
        string _recuperoTipoProcedura = string.Empty;
        sqlParams.Clear();
        sqlParams.Add("@id", cod);
        TSRecordSet rstipoproc = cdf.GetRSReadFromQuery_("select c2.TipoDoc, ISNULL(DB.TipoProceduraCaratteristica,'') as TipoProceduraCaratteristica,dbo.GetCodDom2DescML('Caratteristica',ISNULL(DB.TipoProceduraCaratteristica,''),'I') as desc_carat,db.ProceduraGara, dbo.GetDescDominioFromDztNome('ProceduraGara','I',ISNULL(db.ProceduraGara,'')) as Desc_ProceduraGara from ctl_doc c  with(nolock) inner join ctl_doc C2  with(nolock) on C2.id=C.LinkedDoc inner join Document_Bando DB with(nolock) on DB.idHeader=c2.Id where C.Id=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
        if (rstipoproc is not null && !(rstipoproc.EOF && rstipoproc.BOF))
        {
            rstipoproc.MoveFirst();
            if (CStr(rstipoproc["TipoDoc"]) == "BANDO_SEMPLIFICATO")
            {
                _recuperoTipoProcedura = ApplicationCommon.CNV("Bando Semplificato");
            }

            if (CStr(rstipoproc["TipoDoc"]) == "BANDO_GARA" && !string.IsNullOrEmpty(CStr(rstipoproc["TipoProceduraCaratteristica"])))
            {
                _recuperoTipoProcedura = CStr(rstipoproc["desc_carat"]);
            }
            if (CStr(rstipoproc["TipoDoc"]) == "BANDO_GARA" && string.IsNullOrEmpty(CStr(rstipoproc["TipoProceduraCaratteristica"])))
            {
                _recuperoTipoProcedura = CStr(rstipoproc["Desc_ProceduraGara"]);
            }
        }

        return _recuperoTipoProcedura;
    }
    string infoOfferta(string cod, string param)
    {
        string _infoOfferta = string.Empty;
        sqlParams.Clear();
        sqlParams.Add("@id", CInt(cod));
        TSRecordSet rsofferta = cdf.GetRSReadFromQuery_("select C.IdPfu,p.pfuNomeUtente + ' ' + p.pfuCognome as Responsabile ,C.Body,C.ProtocolloRiferimento from  CTL_DOC C with(nolock) inner join ProfiliUtente P with(nolock) on P.IdPfu=C.IdPfu where C.Id=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
        if (rsofferta is not null && !(rsofferta.EOF && rsofferta.BOF))
        {
            rsofferta.MoveFirst();
            if (param == "Oggetto")
            {
                _infoOfferta = CStr(rsofferta["Body"]);
            }
            if (param == "Registro_Bando")
            {
                _infoOfferta = CStr(rsofferta["ProtocolloRiferimento"]);
            }
            if (param == "Responsabile")
            {
                _infoOfferta = CStr(rsofferta["Responsabile"]);
            }
        }
        return _infoOfferta;
    }
    string DenominazioneATI(string cod)
    {
        string _DenominazioneATI = string.Empty;
        sqlParams.Clear();
        sqlParams.Add("@id", CInt(cod));
        TSRecordSet rsDenominazioneATI = cdf.GetRSReadFromQuery_("select Value from CTL_DOC c with(nolock) inner join CTL_DOC_Value CV  with(nolock) on CV.IdHeader=c.Id and DSE_ID='TESTATA_RTI' and CV.DZT_Name='DenominazioneATI' where c.Id=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
        if (rsDenominazioneATI is not null && rsDenominazioneATI.RecordCount > 0)
        {
            rsDenominazioneATI.MoveFirst();
            _DenominazioneATI = CStr(rsDenominazioneATI["Value"]);
        }
        //'-- se il campo è vuoto recuperiamo la ragione sociale del fornitore
        if (string.IsNullOrEmpty(_DenominazioneATI.Trim()))
        {
            sqlParams.Clear();
            sqlParams.Add("@id", cod);
            rsDenominazioneATI = cdf.GetRSReadFromQuery_("select aziRagioneSociale  from CTL_DOC c with(nolock) inner join Aziende a with(nolock) on a.IdAzi = c.Azienda where C.Id=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
            if (rsDenominazioneATI is not null && !(rsDenominazioneATI.EOF && rsDenominazioneATI.BOF))
            {
                _DenominazioneATI = CStr(rsDenominazioneATI["aziRagioneSociale"]);
            }
        }
        return _DenominazioneATI;
    }
    void info_concorrente(string cod)
    {
        sqlParams.Clear();
        sqlParams.Add("@id", CInt(cod));
        TSRecordSet rsinfo_concorrente = cdf.GetRSReadFromQuery_("select C.Azienda, aziIndirizzoLeg + ' - ' + aziCAPLeg + ' ' + aziLocalitaLeg + ' (' + aziProvinciaLeg +') ' as aziIndirizzoLeg,'C.F. '+ vatValore_FT as cF, 'P.IVA ' + aziPartitaIVA as PIVA  from CTL_DOC c with(nolock) inner join Aziende A with(nolock) on A.IdAzi=C.Azienda inner join DM_Attributi on A.IdAzi=lnk and dztNome='codicefiscale' where C.Id=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
        if (rsinfo_concorrente is not null && !(rsinfo_concorrente.EOF && rsinfo_concorrente.BOF))
        {
            rsinfo_concorrente.MoveFirst();
            htmlToReturn.Write($@"<tr><td>" + CStr(rsinfo_concorrente["aziIndirizzoLeg"]) + "</td></tr>");
            htmlToReturn.Write($@"<tr><td>" + CStr(rsinfo_concorrente["cF"]) + "&nbsp;" + CStr(rsinfo_concorrente["PIVA"]) + "</td></tr>");
        }
    }
    htmlToReturn.Write($@"
	<body style=""min-width:900px; padding-left:20px; padding-right:20px; padding-top:20px; padding-bottom:20px;"">
	<table style=""font-weight:bold; align=center; vertical-align:center;"" width=""100%"" >");
    Header();
    htmlToReturn.Write($@"</table>");
    htmlToReturn.Write($@"
	<table  cellpadding=0 cellspacing=0 >
		<thead>

		<tr><td>&nbsp;</td></tr>
		<tr>
    	  <td nowrap style=""font-size:18px; align=left""><b>Stazione appaltante:</b>");
    stazioneappaltante(DOC_FieldTecnical("COPERTINA", "Destinatario_Azi"));
    htmlToReturn.Write($@"</td>
    	</tr>
		<tr>
    	  <td nowrap style=""font-size:18px; align=left""><b>Tipo Procedura:</b> " + recuperoTipoProcedura(IDDOC) + $@"</td>
    	</tr>
		<tr>
    	  <td  style=""font-size:18px; align=left""><b>Titolo:</b> " + infoOfferta(IDDOC, "Oggetto") + $@"<b>e numero registro di sistema:</b> " + infoOfferta(IDDOC, "Registro_Bando") + $@"</td>
    	</tr>
		<tr><td>&nbsp;</td></tr>");
    htmlToReturn.Write($@"
		<tr >
		  <td >
				<strong>
				DICHIARAZIONE INTEGRATIVA PER LA PARTECIPAZIONE ALLA GARA <br>");
    htmlToReturn.Write($@"<!--" + DOC_Field("COPERTINA", "CIG") + $@" - " + DOC_Field("COPERTINA", "Body") + $@" 	-->");
    htmlToReturn.Write($@"
				</strong>
		  </td>
		</tr>
		<tr height=""30px;"">
		  <td >&nbsp;
		  </td>
		</tr>
		</thead>


    	<tr >
		  <td align=center>
			<strong>DICHIARA</strong>
		  </td>
		</tr>
    	<tr >
		  <td >
			di presentare offerta per i seguenti Lotti :
		  </td>
		</tr>
		<tr height=""10px;"">
		  <td >&nbsp;
		  </td>
		</tr>
    	<tr >
		  <td >");
    //dim ObjSession
    //	ObjSession = session("Session")
    //	set ObjSession(0) = Request.QueryString
    //	set ObjSession(1) = Request.form
    //
    //	'-- Passiamo di nuovo anche la request all'indice 3 per permettere alla classe ctldb.blacklist di recuperare l'ip
    //	set ObjSession(3) = request
    //	set ObjSession(5) = session
    //	set ObjSession(6) = application
    //	ObjSession(9) = application("Server_RDS")
    //	ObjSession(10) = session("Funzionalita")' permessi utenti
    //	set ObjSession(13) = objNewDizMlng("MultiLinguismo")
    //	session("Session") = ObjSession
    //'--stampo la griglia dell'offerta del microlotto

    //'--recupero modello offerta microlotto
    sqlParams.Clear();
    sqlParams.Add("@idDOC", CInt(IDDOC));
    sqlParams.Add("@DSE_ID", "PRODOTTI");
    TSRecordSet rsM = cdf.GetRSReadFromQuery_("select MOD_Name from CTL_DOC_SECTION_MODEL with(nolock) where IdHeader = @idDOC and DSE_ID = @DSE_ID", ApplicationCommon.Application.ConnectionString, sqlParams);
    string strModelloOfferta = CStr(rsM["MOD_Name"]);

    //'--recupero codice modello di microlotto selezionato sul bando
    sqlParams.Clear();
    sqlParams.Add("@idDOC", CInt(IDDOC));
    TSRecordSet rsTB = cdf.GetRSReadFromQuery_("select TipoBando from CTL_DOC with(nolock) inner join Document_Bando with(nolock) on LinkedDoc = idHeader where Id = @idDOC", ApplicationCommon.Application.ConnectionString, sqlParams);

    //'--recupero colonne da visualizzare nella cauzione
    //'--recupero recordset dei dati per la griglia
    string colCauzione = string.Empty;
    sqlParams.Clear();
    sqlParams.Add("@codice", CStr(rsTB["TipoBando"]));
    TSRecordSet rs = cdf.GetRSReadFromQuery_("select ColonneCauzione from Document_Modelli_MicroLotti with(nolock) where Codice=@codice", ApplicationCommon.Application.ConnectionString, sqlParams);
    if (rs.RecordCount > 0)
    {
        colCauzione = CStr(rs["ColonneCauzione"]);
    }
    //'response.write "####" & colCauzione

    //'--se vuota imposto le colonne di default
    if (string.IsNullOrEmpty(colCauzione))
    {
        colCauzione = "NumeroLotto,Descrizione,CauzioneMicrolotto";
    }
    //'response.write "####" & colCauzione

    //'--recupero modello griglia
    LibDbModelExt mp_objDB = new LibDbModelExt();
    Dictionary<string, Field> mp_Columns = new Dictionary<string, Field>();
    Dictionary<string, Grid_ColumnsProperty> mp_ColumnsProperty = new Dictionary<string, Grid_ColumnsProperty>();
    mp_objDB.GetFilteredFieldsWeb(strModelloOfferta, ref mp_Columns, ref mp_ColumnsProperty, CStr(session["strSuffLing"]), 0, 0, ApplicationCommon.Application.ConnectionString, session, true);
    //'--recupero collezione delle colonne dalla memoria
    mp_Columns = objDoc.Sections["PRODOTTI"].mp_Columns;
    //'--setto in ogni caso la colonna CauzioneMicrolotto

    Grid_ColumnsProperty prop = null;
    try
    {
        prop = mp_ColumnsProperty["CauzioneMicrolotto"];
        prop.Hide = false;
    }
    catch
    {
        //Set prop = Nothing
        // err.Clear
    }
    //on error goto 0

    //'Set  mp_ColumnsProperty("CauzioneMicrolotto") = prop


    //'--rimuovo colonna non indicate in colCauzione

    string flagtotal = "";
    int ixCol = 0;
    int iy = 0;
    ixCol = -1;
    iy = 0;
    foreach (var itemcol in mp_Columns)
    {
        string currcol = itemcol.Value.Name;
        //'response.write "####" & currcol
        if (Strings.InStr(1, "," + colCauzione.ToUpper() + ",", "," + currcol.ToUpper() + ",") == 0)
        {
            //'-- Per non sfasare la matrice(essendo posizionale e non nominale) invece di rimuovere le colonne dalla collezione le metto ad hide
            //'mp_Columns.Remove currcol

            try
            {
                prop = mp_ColumnsProperty[currcol];
                prop.Hide = true;
            }
            catch
            {
                prop = new Grid_ColumnsProperty();
                prop.Hide = true;
                prop.Name = currcol;
                mp_ColumnsProperty.Add(currcol, prop);
            }
            //on error goto 0
        }
        if (currcol == "CauzioneMicrolotto")
        {
            ixCol = iy;
            flagtotal = "SI";
            try
            {
                prop = mp_ColumnsProperty[currcol];
            }
            catch
            {

                prop.Total = true;
            }

        }
        iy = iy + 1;
    }
    try
    {
        mp_Columns.Remove("FNZ_UPD");
        mp_Columns.Remove("FNZ_DEL");
        mp_Columns.Remove("FNZ_COPY");
    }
    catch
    {

    }
    //on error goto 0

    //'mp_Columns.Remove "EsitoRiga"

    //'set rs = GetRS( "select * from Document_MicroLotti_Dettagli where idheader='" & replace(idDoc ,"'","''") & "' and TipoDoc = 'OFFERTA' order by cast(numerolotto as int )" )
    Grid mp_objGrid = new Grid();
    mp_objGrid.Columns = mp_Columns;
    mp_objGrid.ColumnsProperty = mp_ColumnsProperty;
    mp_objGrid.SetMatrixDisposition(false);
    //stop
    //'Copia la matrice togliendo le righe con Voce <> 0

    dynamic MatrixSource;
    int nRow = 0;
    int nC = 0;
    MatrixSource = objDoc.Sections["PRODOTTI"].mp_Matrix;

    nRow = MatrixSource.GetLength(1) - 1;
    nC = mp_Columns.Count;

    dynamic MatrixDest = null;
    //redim MatrixDest(nC,0);
    MatrixDest = new dynamic[nC, 1];


    int nPosColVoce = 0;
    nPosColVoce = -1;
    //'--recupero pos colonna voce
    for (int c = 1; c <= nC; c++)
    {

        if (mp_Columns.ElementAt(c - 1).Value.Name == "Voce")
        {
            nPosColVoce = c;
            break;
        }
    }
    if (nPosColVoce != -1)
    {
        int nNewRow = 0;
        nNewRow = -1;
        for (int i = 0; i <= nRow; i++)
        {
            //'--copio solo le righe con voce=0
            if (CStr(MatrixSource[nPosColVoce - 1, i]) == "0")
            {
                nNewRow = nNewRow + 1;


                //redim preserve MatrixDest[nC, nNewRow];
                MatrixDest = ResizeArray(MatrixDest, nC, nNewRow);



                for (int c = 1; c <= nC; c++)
                {
                    if (c == (ixCol + 1))
                    {
                        if (!IsNull(MatrixSource[c - 1, i]))
                        {
                            if (Strings.InStr(1, CStr(0.5), ",") > 0)
                            {
                                MatrixDest[c - 1, nNewRow] = CDbl(MatrixSource[c - 1, i].Replace(".", ","));

                            }
                            else
                            {
                                MatrixDest[c - 1, nNewRow] = CDbl(MatrixSource[c - 1, i]);
                            }
                        }
                    }
                    else
                    {
                        MatrixDest[c - 1, nNewRow] = MatrixSource[c - 1, i];
                    }
                    //'response.write MatrixDest(c-1,nNewRow) & "|"

                }
                //'response.write "<br>"

            }
        }
        //'response.end
    }
    else
    {
        MatrixDest = MatrixSource;
    }
    //'mp_objGrid.SetMatrix  objDoc.Sections("PRODOTTI").mp_Matrix
    mp_objGrid.SetMatrix(MatrixDest);

    mp_objGrid.id = "GridViewer";
    mp_objGrid.width = "100%";
    mp_objGrid.Editable = false;
    //'-- decommentare non appena si porta la versione 4.1.0.5
    if (flagtotal == "SI")
    {
        mp_objGrid.ShowTotal(ApplicationCommon.CNV("Totale Cauzione"), 7);
    }
    mp_objGrid.Html(htmlToReturn);
    htmlToReturn.Write($@"
	</td>
          </tr>
		<tr height=""50px;"">
		  <td >&nbsp;
		  </td>
		</tr>
		<tr >
		  <td >
				Con riferimento all’importo della garanzia provvisoria, per fruire delle riduzioni di cui al comma 7 dell’art. 93 del D.Lgs. 50/2016,
				l’operatore economico segnala il possesso dei relativi requisiti  documentandolo nei modi prescritti dalle norme vigenti.

		  </td>
		</tr>
        <tr height=""50px;"">
		  <td >&nbsp;
		  </td>
		</tr>

        <tr>
    	  <td nowrap style=""font-size:18px; align=left""> <strong>Ragione sociale del Concorrente: </strong> " + DenominazioneATI(IDDOC) + $@"</td>
    	</tr>
		");
    info_concorrente(IDDOC);
    htmlToReturn.Write($@"


    </table>
	<br/><br/><br/>
	<table width=""100%"">

		<tr>

			<td align=""right"">
				");
    string param_mostra_nome = CStr(Get_Func_Property("OFFERTA_CAUZIONE.asp", "Responsabile", "HIDE", "0", CInt("-1")));
    if (CStr(param_mostra_nome).ToUpper() == "0")
    {
        htmlToReturn.Write(infoOfferta(IDDOC, "Responsabile") + "<br/>");
    }

    htmlToReturn.Write($@"
				<b>Firmato digitalmente</b>
			</td>

		</tr>

	</table>



	</body>
	</html>");
    //'-- Testo aggiunto in automatico per liberare la memoria dei nuovi report
    try
    {
        FreeMemDocument(session);
    }
    catch
    {

    }

}@Html.Raw(htmlToReturn.Out())
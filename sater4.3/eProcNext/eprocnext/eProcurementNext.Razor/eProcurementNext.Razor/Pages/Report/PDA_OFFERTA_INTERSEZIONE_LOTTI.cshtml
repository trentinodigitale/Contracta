@page "/Report/PDA_OFFERTA_INTERSEZIONE_LOTTI.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using Microsoft.VisualBasic
@using System.Globalization
@using static eProcurementNext.CommonDB.Basic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.print_documentModel;
@* @using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel; *@
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.Report.PDA_OFFERTA_INTERSEZIONE_LOTTIModel;
@model eProcurementNext.Razor.Pages.Report.PDA_OFFERTA_INTERSEZIONE_LOTTIModel
@using static eProcurementNext.Session.SessionMiddleware
@{

	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();
}
@{
	string idRow = GetParamURL(Request.QueryString.ToString(), "IDDOC");
	var sqlParams = new Dictionary<string, object?>();

	validate("IDDOC", idRow, TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 1, HttpContext, session);
	//dim ObjSession
	//ObjSession = session("Session")
	//set ObjSession(0) = Request.QueryString
	//set ObjSession(1) = Request.form
	//'-- Passiamo di nuovo anche la request all'indice 3 per permettere alla classe ctldb.blacklist di recuperare l'ip
	//set ObjSession(3) = request
	//set ObjSession(5) = session
	//set ObjSession(6) = application
	//ObjSession(9) = application("Server_RDS")
	//ObjSession(10) = session("Funzionalita")' permessi utenti
	//set ObjSession(13) = objNewDizMlng("MultiLinguismo")
	//
	//session("Session") = ObjSession

	//Set objDB = CreateObject("ctldb.clstabmanage")
	TSRecordSet rsM = null;
	TSRecordSet rsAzi = null;
	sqlParams.Add("@idRow", idRow);
	string strSQL = "select distinct codicefiscale , aziRagioneSociale , Ruolo_impresa  from PDA_Elenco_Partecipanti_Offerta where idrow = @idRow";
	//'-- recupero il record dei partecipanti all'offerta
	rsAzi = cdf.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString, sqlParams);
	//'response.write strSQL
	if(rsAzi.RecordCount >0)
	{
		rsAzi.MoveFirst();
		while(! rsAzi.EOF)
		{
			ReportIntersezioni(GetValueFromRS(rsAzi.Fields["codicefiscale"]), GetValueFromRS(rsAzi.Fields["aziRagioneSociale"]), GetValueFromRS(rsAzi.Fields["Ruolo_impresa"]));
			rsAzi.MoveNext();
		}
	}
	void ReportIntersezioni(string codicefiscale ,string aziRagioneSociale ,string Ruolo_impresa )
	{
		TSRecordSet rsLotti = null;
		TSRecordSet rsOff = null;
		TSRecordSet rsDati = null;
		int x = 0;
		int y = 0;
		int curIdRow = 0;
		int [] ArrayLotti = new int[10000];
		int NumLotti = 0;
		sqlParams.Clear();
		sqlParams.Add("@idRow", idRow);
		sqlParams.Add("@codicefiscale", codicefiscale);
		//'-- recupero i lotti in intersezione 	
		strSQL = "select distinct NumeroLotto from PDA_Intersezione_Lotti_Offerti where idRowOfferta =  @idRow and codicefiscale = @codicefiscale order by NumeroLotto";
		//'response.write strSQL
		rsLotti = cdf.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString, sqlParams);

		//'-- riporto i dati se ci sono lotti in intersezione
		if (rsLotti.RecordCount > 0)
		{
			//'-- se per l'OE è presente una intersezione espongo in chiaro 
			htmlToReturn.Write($@"<br><br><label class=""FldCaption"" >" + aziRagioneSociale + " - " + Ruolo_impresa + "</label><br>");
			//'-- ricopio i lotti in un vettore per cercare più velocemente
			x = 0;
			rsLotti.MoveFirst();
			while(!rsLotti.EOF)
			{
				ArrayLotti[x] = CStr(GetValueFromRS(rsLotti.Fields["NumeroLotto"]));
				//'response.write cstr( rsLotti.fields("NumeroLotto").value )
				x = x + 1;
				rsLotti.MoveNext();
			}
			NumLotti = x;

			//'-- recupero le offerte in intersezione 
			sqlParams.Clear();
			sqlParams.Add("@idRow", idRow);
			sqlParams.Add("@codicefiscale", codicefiscale);
			strSQL = "select distinct idrow  from PDA_Intersezione_Lotti_Offerti where idRowOfferta =  @idRow and codicefiscale = @codicefiscale order by idrow";
			rsOff = cdf.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString, sqlParams);

			//'--dimensiono una matrice per contenere i dati
			dynamic[,] Matrix;
			Matrix = new dynamic[rsOff.RecordCount - 1, rsLotti.RecordCount + 2];
			//'-- recupero i dati per popolare la matrice
			strSQL = "select * from PDA_Intersezione_Lotti_Offerti where idRowOfferta = @idRow  and codicefiscale = @codicefiscale order by idrow , NumeroLotto ";
			rsDati = cdf.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString, sqlParams);

			//'--cicla su i dati per popolare la matrice
			rsDati.MoveFirst();
			y = -1;
			curIdRow = -1;// 'rsDati.fields("idrow").value
			while(! rsDati.EOF)
			{
				if(curIdRow != GetValueFromRS(rsDati.Fields["idrow"]))
				{
					curIdRow = GetValueFromRS(rsDati.Fields["idrow"]);
					y = y + 1;


					Matrix[y, 0] = GetValueFromRS(rsDati.Fields["aziRagioneSociale"]);
					Matrix[y, 1] = GetValueFromRS(rsDati.Fields["ProtocolloOfferta"]);
				}
				x = 2 + GetPosColonna(GetValueFromRS(rsDati.Fields["NumeroLotto"]), ArrayLotti, NumLotti);
				//'Matrix( y ,  x ) = "Conflitto"
				Matrix[y, x] = GetValueFromRS(rsDati.Fields["Ruolo_impresa"]);


				rsDati.MoveNext();
			}
			//'-- preparo la griglia per la visualizzazione
			LibDbModelExt mp_objDB = new LibDbModelExt();
			Dictionary<string, Field> mp_Columns = new Dictionary<string, Field>();
			Dictionary<string, Grid_ColumnsProperty> mp_ColumnsProperty = new Dictionary<string, Grid_ColumnsProperty>();
			mp_objDB.GetFilteredFieldsWeb("PDA_RIEPILOGO_ANOMALIE_INTERSEZIONE", ref mp_Columns, ref mp_ColumnsProperty, CStr(session["strSuffLing"]), 0, 0, ApplicationCommon.Application.ConnectionString, session, true);

			//'-- aggiunge tante colonne per quanti lotti sono in conflitto
			Field objField;
			for(int i= 0;i<NumLotti;i++)
			{
				objField = new Field();
				objField.Init(1, CStr("Lotto" + i), null,null , null, "", false);
				objField.Caption = "Lotto " + ArrayLotti[i - 1];

				mp_Columns.Add(CStr("Lotto" + i),objField);

			}
			Grid mp_objGrid = new Grid();
			mp_objGrid.Columns = mp_Columns;
			mp_objGrid.ColumnsProperty = mp_ColumnsProperty;
			string strColId = "";
			bool bAutocol;

			//' mp_objGrid.RecordSetWeb rs, strColId, bAutocol
			mp_objGrid.SetMatrixDisposition(true);
			mp_objGrid.SetMatrix(Matrix);

			mp_objGrid.id = "GridViewer";
			mp_objGrid.width = "100%";
			mp_objGrid.Editable = false;

			mp_objGrid.Html(htmlToReturn);

		}
	}
	int  GetPosColonna(int  Lotto ,int[] ArrayLotti ,int NumLotti )
	{
		int i;
		i = 0;
		while ( i < NumLotti && CStr( Lotto ) != CStr( ArrayLotti[i] ))
		{
			i = i + 1;
		}

		return i;
	}

}@Html.Raw(htmlToReturn.Out())
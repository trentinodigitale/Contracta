@page "/CustomDoc/Operation_Articoli_ODC.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB;
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.verificaBrowserModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.trace_in_log_utenteModel;
@using static eProcurementNext.Razor.Pages.CustomDoc.Operation_Articoli_ODCModel;
@using Microsoft.VisualBasic;
@model eProcurementNext.Razor.Pages.CustomDoc.Operation_Articoli_ODCModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();
	var SqlParameters = new Dictionary<string, object?>();

	int lIdPfu = 0;
	TSRecordSet? rsConv = null;
	int Convenzioni_Importi_Negativi = 0;

	//'--lavoro con idpfu negativo per non confondermi con il carrello classico
	lIdPfu = -session["idpfu"];
	string OPERATION = ((CStr(GetParamURL(Request.QueryString.ToString(), "OPERATION"))).ToUpper()).Trim(); //' -- ADDROW/DELETE_ALL
	string QT = GetParamURL(Request.QueryString.ToString(), "QT");
	string PrezzoUnitario = GetParamURL(Request.QueryString.ToString(), "PrezzoUnitario");
	int ValoreAccessorio = CInt(GetParamURL(Request.QueryString.ToString(), "ValoreAccessorio"));

	if (string.IsNullOrEmpty(CStr(ValoreAccessorio)))
	{
		ValoreAccessorio = 0;
	}

	string not_editable = GetParamURL(Request.QueryString.ToString(), "not_editable");
	string ID = GetParamURL(Request.QueryString.ToString(), "ID");

	//'--iddoc dell'ODC in cui inserire gli articoli
	string IDDOC_TO_UPDATE = CStr(GetParamURL(Request.QueryString.ToString(), "IDDOC_TO_UPDATE"));
	string IDDOC_RIDOTTO = CStr(GetParamURL(Request.QueryString.ToString(), "IDDOC_RIDOTTO"));

	//'*******************************************
	//'*****  VALIDAZIONE DELL'INPUT UTENTE  *****
	//'*******************************************
	if (OPERATION != "ADDROW" && OPERATION != "DELETE_ALL")
	{
		traceAttack("Valore non consentito per il parametro OPERATION", session, HttpContext);
	}

	validate("ID", ID, TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 0, HttpContext, session);
	validate("IDDOC_TO_UPDATE", IDDOC_TO_UPDATE, TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 0, HttpContext, session);
	validate("IDDOC_RIDOTTO", IDDOC_RIDOTTO, TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 0, HttpContext, session);
	validate("QT", QT, TIPO_PARAMETRO_FLOAT, SOTTO_TIPO_VUOTO, "", 0, HttpContext, session);
	validate("PrezzoUnitario", PrezzoUnitario, TIPO_PARAMETRO_FLOAT, SOTTO_TIPO_VUOTO, "", 0, HttpContext, session);
	validate("ValoreAccessorio", CStr(ValoreAccessorio), TIPO_PARAMETRO_FLOAT, SOTTO_TIPO_VUOTO, "", 0, HttpContext, session);
	validate("not_editable", not_editable.Replace(" ", ""), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0, HttpContext, session);

	//'--aggiunge riga al carrello
	double totale;
	string strSql = string.Empty;
	string strCodRet = string.Empty;
	if (OPERATION == "ADDROW")
	{

		//'--CONTROLLO SE LA CONVENZIONE E' AD IMPORTI NEGATIVI (SE IL TOTALE NEGATIVO)
		SqlParameters.Clear();
		SqlParameters.Add("@id", CStr(CLng(ID)));
		strSql = "select DC.id from Document_MicroLotti_Dettagli DETT with (nolock) inner join Document_Convenzione DC with (nolock) on DETT.IdHeader = DC.id where DETT.ID = @id and Total < 0 ";
		rsConv = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString, SqlParameters);

		if (rsConv.RecordCount > 0)
		{
			Convenzioni_Importi_Negativi = 1;

		}

		if (string.IsNullOrEmpty(IDDOC_RIDOTTO) || IDDOC_RIDOTTO == "0")
		{
			//'--controllo che qt sia positiva
			if (CDbl(QT) <= 0)
			{
				htmlToReturn.Write("Quantita deve essere maggiore di 0");
				throw new ResponseEndException(htmlToReturn.Out(), Response, "Quantita deve essere maggiore di 0");
			}

			if (Convenzioni_Importi_Negativi == 0)
			{

				//'--controllo che prz sia positivo
				if (CDbl(PrezzoUnitario) <= 0)
				{
					htmlToReturn.Write("Prezzo deve essere maggiore di 0");
					throw new ResponseEndException(htmlToReturn.Out(), Response, "Prezzo deve essere maggiore di 0");
				}

				//'--controllo che valoreaccessorio sia non negativo
				if (CDbl(ValoreAccessorio) < 0)
				{
					htmlToReturn.Write("ValoreAccessorio deve essere maggiore o uguale a 0");
					throw new ResponseEndException(htmlToReturn.Out(), Response, "ValoreAccessorio deve essere maggiore o uguale a 0");
				}
			}
			else
			{
				//'--SE LA CONVENZIONE E' AD IMPORTI NEGATIVI (SE IL TOTALE NEGATIVO)
				//'--controllo che prz sia negativo
				if (CDbl(PrezzoUnitario) >= 0)
				{
					htmlToReturn.Write("il Prezzo deve essere minore di 0");
					throw new ResponseEndException(htmlToReturn.Out(), Response, "il Prezzo deve essere minore di 0");
				}

				//'--controllo che valoreaccessorio sia negativo
				if (CDbl(ValoreAccessorio) > 0)
				{
					htmlToReturn.Write("ValoreAccessorio deve essere minore o uguale a 0");
					throw new ResponseEndException(htmlToReturn.Out(), Response, "ValoreAccessorio deve essere minore o uguale a 0");
				}

			}
		}
		else
		{
			totale = (CDbl(QT) * CDbl(PrezzoUnitario)) + CDbl(ValoreAccessorio);
			if (Convenzioni_Importi_Negativi == 0)
			{

				if (totale > 0)
				{
					htmlToReturn.Write("Il totale per le riduzioni ordinativo deve essere negativo");
					throw new ResponseEndException(htmlToReturn.Out(), Response, "Il totale per le riduzioni ordinativo deve essere negativo");
				}
			}
			else
			{
				//'--SE LA CONVENZIONE E' AD IMPORTI NEGATIVI (SE IL TOTALE NEGATIVO)
				if (totale < 0)
				{
					htmlToReturn.Write("Il totale per le riduzioni ordinativo deve essere positivo");
					throw new ResponseEndException(htmlToReturn.Out(), Response, "Il totale per le riduzioni ordinativo deve essere positivo");
				}
			}
		}
		SqlParameters.Clear();
		SqlParameters.Add("@id", CInt(ID));
		SqlParameters.Add("@idpfu", lIdPfu);
		//'--inserisco la riga nel carrello se non presente
		strSql = "select * from Carrello with(nolock) where Id_Product= @id and idPfu= @idpfu";
		//'Response.Write strSql
		//'Response.End
		TSRecordSet rsMsg = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString, SqlParameters);
		if (rsMsg.RecordCount > 0)
		{
			htmlToReturn.Write("articolo gia presente nel carrello");
			throw new ResponseEndException(htmlToReturn.Out(), Response, "articolo gia presente nel carrello");
		}
		else
		{
			SqlParameters.Clear();
			SqlParameters.Add("@qt", QT);
			SqlParameters.Add("@prezzoUnitario", PrezzoUnitario);
			SqlParameters.Add("@idpfu", lIdPfu);
			SqlParameters.Add("@not", not_editable);
			SqlParameters.Add("@valoreAccessorio", ValoreAccessorio);
			SqlParameters.Add("@id", CInt(ID));
			SqlParameters.Add("@Convenzione", "CONVENZIONE");
			strSql = "insert into Carrello ( Codice, Descrizione, QTDisp, PrezzoUnitario, idPfu, Id_Convenzione, Id_Product, NumeroRepertorio, NumeroLotto, Voce, Iva, Titolo, Not_Editable, ValoreAccessorioTecnico) ";
			strSql = $"{strSql} select CODICE_REGIONALE, DESCRIZIONE_CODICE_REGIONALE, @qt, @prezzoUnitario, @idpfu, idHeader, D.Id, NumeroRepertorio, NumeroLotto, Voce, aliquotaiva, C.Titolo, @not, @valoreAccessorio";
			strSql = $"{strSql} from Document_MicroLotti_Dettagli D, CTL_DOC C with (nolock) where D.idHeader=C.Id and C.TipoDoc=@Convenzione and D.Id=@id";

			//'Response.Write strSql
			//'Response.End
			cdf.Execute(strSql, ApplicationCommon.Application.ConnectionString, parCollection: SqlParameters);
			//'Response.end

			//'--chiamo stored che in caso di ADDROW controlla se ho disponibilita e se si inserisce nel carrello
			//'--altrimenti ritorna messaggio errore; mentre nel caso di DELROW cancella dal carrello
			string strCodRetApplicativo = string.Empty;
			strCodRetApplicativo = Check_Disponibilita_Carrello(ID, lIdPfu, IDDOC_TO_UPDATE);

			//'Response.Write "ESITO="  & strCodRetApplicativo & "---" & err.number
			//'Response.end
			if (string.IsNullOrEmpty(strCodRetApplicativo))
			{
				SqlParameters.Clear();
				SqlParameters.Add("@id", CInt(IDDOC_TO_UPDATE));
				SqlParameters.Add("@idpfu", lIdPfu);
				//'--se tutto ol chiamo la stored che inserisce l'articolo nell'ODC
				//'--la stored di controllo ritorna OK oppure ERRORE e nella colonna Errore il messaggio da visualizzare
				strSql = "exec INSERT_ARTICOLI_ODC_FROM_CARRELLO @id , -1 , @idpfu";
				//'response.write strSql  & "---" & Err.number
				//'response.end
				try
				{
					rsMsg = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString, SqlParameters);
					//'if Err.number <> 0 then call ShowError( "Errore check creazione documento, ripetere l'operazione - [" & strSql & "]")
				}
				catch (Exception ex)
				{
					Svuota_Carrello();
					//'--cancello articolo dall'odc
					strCodRet = ex.Message;
				}
				//'--chiamo stored per aggiornare i totali
				SqlParameters.Clear();
				SqlParameters.Add("@id", CInt(IDDOC_TO_UPDATE));
				strSql = "exec UPDATE_TOTALI_ODC @id";
				//'response.write strSql  & "---" & Err.number
				//'response.end
				try
				{
					cdf.Execute(strSql, ApplicationCommon.Application.ConnectionString, parCollection: SqlParameters);
				}
				catch (Exception ex)
				{
					Svuota_Carrello();
					//'--cancello articolo dall'odc
					strCodRet = ex.Message;
				}
				//'-- Se è attiva la SYS di visione degli errori tecnici
				if (!string.IsNullOrEmpty(strCodRet.Trim()))
				{
					if ((CStr(ApplicationCommon.Application["dettaglio-errori"]).ToLower() == "yes") || (CStr(ApplicationCommon.Application["dettaglio-errori"]).ToLower() == "si"))
					{
						htmlToReturn.Write(strCodRet);
					}
					else
					{
						htmlToReturn.Write($"NO_ML###Errore in data : {DateAndTime.Now}");
					}
				}

			}
			else
			{
				htmlToReturn.Write(strCodRetApplicativo);
			}

			throw new ResponseEndException(htmlToReturn.Out(), Response, "");
		}
	}
	//'--svuota carrello
	if (OPERATION == "DELETE_ALL")
	{
		Svuota_Carrello();
		htmlToReturn.Write("");
		throw new ResponseEndException(htmlToReturn.Out(), Response, "");
	}
	//'--svuoto il carrello
	void Svuota_Carrello()
	{
		var SqlParameters = new Dictionary<string, object?>();
		SqlParameters.Add("@idpfu", lIdPfu);
		strSql = "delete Carrello where idPfu= @idpfu";
		cdf.Execute(strSql, ApplicationCommon.Application.ConnectionString, parCollection: SqlParameters);
	}
	//'--controlla se l'utente in input ha il permesso di creare il documento destinazione
	string Check_Disponibilita_Carrello(string idDoc, int User, string idOdc)
	{
		string Esito = string.Empty;
		string strSql = string.Empty;
		string strErrore = string.Empty;
		string _Check_Disponibilita_Carrello = string.Empty;
		Esito = "OK";
		strErrore = string.Empty;
		TSRecordSet? rsMsg = null;

		if (string.IsNullOrEmpty(idOdc))
		{
			idOdc = "0";
		}
		SqlParameters.Clear();
		SqlParameters.Add("@id", CLng(idDoc));
		SqlParameters.Add("@user", User);
		SqlParameters.Add("@idOdc", CLng(CStr(idOdc)));
		//'--la stored di controllo ritorna OK oppure ERRORE e nella colonna Errore il messaggio da visualizzare
		strSql = "exec CK_DISPONIBILITA_CARRELLO @id , @user , -1, '', @idOdc";
		try
		{
			rsMsg = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString, SqlParameters);
			//'if Err.number <> 0 then call ShowError( "Errore check creazione documento, ripetere l'operazione - [" & strSql & "]")
			if (rsMsg.RecordCount > 0)
			{
				rsMsg.MoveFirst();
				Esito = CStr(rsMsg["id"]);
				strErrore = CStr(rsMsg["Errore"]);
			}
		}
		catch
		{
			throw new Exception();
		}
		if (Esito.ToUpper() == "ERRORE")
		{
			_Check_Disponibilita_Carrello = strErrore;
		}
		if (Esito.ToUpper() == "INFO_NOML")
		{
			_Check_Disponibilita_Carrello = $"NO_ML###{strErrore}";
		}
		return _Check_Disponibilita_Carrello;
	}
}
@Html.Raw(htmlToReturn.Out())
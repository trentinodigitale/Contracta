@page "/CustomDoc/Tooltip_Carrello.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.Razor.Pages.CustomDoc.Tooltip_CarrelloModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using Microsoft.VisualBasic;
@*
<!-- #Include File="../ctl_library/functions/verificabrowser.inc" -->
<!-- #INCLUDE FILE="../ctl_library/Functions/CheckSession.inc" -->
<!-- #INCLUDE FILE="../ctl_library/functions/security.inc" -->
<!-- #Include File="../ctl_library/functions/trace_in_log_utente.inc" -->
*@
@model eProcurementNext.Razor.Pages.CustomDoc.Tooltip_CarrelloModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();
}
@{
	long lIdPfu;
	string RIGA;
	//dim objDB
	dynamic IdConvenzione;
	dynamic CodiceModello;

	lIdPfu = session[eProcurementNext.Session.SessionProperty.IdPfu];

	RIGA = GetParamURL(Request.QueryString.ToString(), "RIGA");

	//'*******************************************
	//'*****  VALIDAZIONE DELL'INPUT UTENTE  *****
	//'*******************************************
	validate( "RIGA", RIGA , TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 0, HttpContext, session);
	var sqlParams = new Dictionary<string, object?>();
	sqlParams.Add("@tipodoc", "CONVENZIONE");
	sqlParams.Add("@riga", CStr(CLng(RIGA)));
	//'--recupero convenzione legata all'articolo
	string strSql = " select * from document_microlotti_dettagli D ,ctl_doc C where D.idheader=C.ID and C.TipoDoc=@tipodoc and D.id=@riga";
	TSRecordSet rsConv = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString, sqlParams);
	if ( rsConv.RecordCount > 0){

		rsConv.MoveFirst();
		IdConvenzione = rsConv.Fields["idheader"];
		sqlParams.Clear();
		sqlParams.Add("@id", IdConvenzione);
		sqlParams.Add("@dse_id", "TESTATA_PRODOTTI");
		sqlParams.Add("@name", "Tipo_Modello_Convenzione");
		//'--recupero codice modello legato alla convenzione
		strSql = "select value from ctl_doc_value where idheader=@id and dse_id=@dse_id and dzt_name=@name";



		TSRecordSet rsCodice =  cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString, sqlParams);

		if ( rsCodice.RecordCount > 0 ) {

			rsCodice.MoveFirst();
			CodiceModello = rsCodice.Fields["value"];

			//'--costruisco il nome del modello da recuperare		 
			string strNomeModello = "MODELLO_BASE_CONVENZIONI_" + CodiceModello + "_MOD_Convenzione";

			//'--dal codice del modello recupero attributo che contiene lista colonna da utilizzare per il tooltip
			sqlParams.Clear();
			sqlParams.Add("@tipo", "CONFIG_MODELLI");
			sqlParams.Add("@titolo",CodiceModello);
			strSql = "select id from ctl_doc where tipodoc=@tipo and deleted=0 and titolo=@titolo";
			TSRecordSet rsDoc=  cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString, sqlParams);
			dynamic? ListColumn = null;
			if ( rsDoc.RecordCount > 0 ) {

				rsDoc.MoveFirst();
				dynamic IdModello = rsDoc.Fields["id"];
				sqlParams.Clear();
				sqlParams.Add("@id", "TOOLTIP_ORDINAMENTO");
				sqlParams.Add("@idheader", IdModello);
				sqlParams.Add("@dtz_name", "TOOLTIP_ORDER");
				strSql= "select value from ctl_doc_value where dse_id=@id and idheader=@idheader and dzt_name=@dtz_name";

				TSRecordSet rsColonne =  cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString, sqlParams);
				if ( rsColonne.RecordCount > 0 ) {

					rsColonne.MoveFirst();
					ListColumn = rsColonne.Fields["value"];

					if ( !string.IsNullOrEmpty(ListColumn) ) {

						//'--costruisco html per le colonne indicate
						DrawToolTip(strNomeModello, ListColumn, rsConv, htmlToReturn, session);
						//Response.end

					}

				}
			}else{
				htmlToReturn.Write("documento del modello non trovato");
				//Response.end	
			}

			//'--se non hotrovato attributo TOOLTIP_ORDER allroa recuperole colonne tramite l'ambito della convenzione
			if ( string.IsNullOrEmpty(ListColumn) ) {

				//'--recupero Ambito dalla convenzione
				sqlParams.Clear();
				sqlParams.Add("@idconvenzione", IdConvenzione);
				strSql = "select ambito as value from document_convenzione where id = @idconvenzione";


				TSRecordSet rsAmbito = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString, sqlParams);

				if ( rsAmbito.RecordCount > 0 ) {

					rsAmbito.MoveFirst();
					dynamic Ambito = rsAmbito.Fields["value"];
					sqlParams.Clear();
					sqlParams.Add("@type", "tooltip_carrello");
					sqlParams.Add("@value",Ambito);
					//'--recupero le colonne dalla relazione tooltip_carrello con input Ambito
					strSql = "select * from ctl_relations where rel_type=@type and REL_ValueInput=@value";

					TSRecordSet rsColonne = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString, sqlParams);
					if ( rsColonne.RecordCount > 0 ) {

						rsColonne.MoveFirst();
						ListColumn = rsColonne.Fields["REL_ValueOutput"];

						if ( !string.IsNullOrEmpty(ListColumn) ) {

							//'--costruisco html per le colonne indicate
							DrawToolTip(strNomeModello, ListColumn, rsConv, htmlToReturn, session);

						}else{
							//'--non trovo le colonne
							htmlToReturn.Write("relazione tooltip_carrello per ambito " + Ambito + " vuota");
							//Response.end
						}

					}else{

						//'--non trovo le colonne
						htmlToReturn.Write("relazione tooltip_carrello per ambito " + Ambito + " non presente");
						//Response.end

					}

				}else{
					//'--ambito non presente che faccio?	
					htmlToReturn.Write("Ambito non presente");
					//Response.end
				}	
			}

		}else{

			//'--erorre:codice modello non presente legato alla convenzione
			htmlToReturn.Write("modello non presente legato alla convenzione");
			//Response.end	
		}
	}else{

		//'--errore:convenzione non presente legata alla riga	
		htmlToReturn.Write("convenzione non presente legata alla riga");
		//Response.end
	}		

	void DrawToolTip(string strNomeModello, dynamic ListColumn, TSRecordSet rsConv, EprocResponse response, eProcurementNext.Session.ISession session){


		//'--recupero modello
		LibDbModelExt mp_objDB = new LibDbModelExt();
		Dictionary<string, eProcurementNext.HTML.Field> mp_Columns = new Dictionary<string, eProcurementNext.HTML.Field>();
		Dictionary<string, Grid_ColumnsProperty> mp_ColumnsProperty = new Dictionary<string, Grid_ColumnsProperty>();

		mp_objDB.GetFilteredFieldsWeb(strNomeModello, ref mp_Columns, ref mp_ColumnsProperty, CStr(session[eProcurementNext.Session.SessionProperty.strSuffLing]), 0, 0, ApplicationCommon.Application.ConnectionString, session, true);

		int Indice = 0;

		string[] aInfoCol = Strings.Split(ListColumn, ",");


		htmlToReturn.Write($@"
			<div class=""DivTooltipCarrello"">
			<table>
		");

		for (int i=0; i <= aInfoCol.Length-1; i++){

			//on error resume next
			try{
				if (mp_Columns.ContainsKey(aInfoCol[i]) && mp_Columns[aInfoCol[i]].Caption != null)
				{
					if (Indice == 1){
						Indice = 2;
					}else{
						Indice = 1;
					}

					htmlToReturn.Write($@"

						<tr class=""RowCarrello0" + Indice + @""">
							<th> " + mp_Columns[aInfoCol[i]].Caption.Replace("???", "")
							+ @"</th>" 
					);
					
					mp_Columns[aInfoCol[i]].Value = rsConv.Fields[aInfoCol[i]];

					htmlToReturn.Write($@""
							+ @"<td>" + HtmlEncode(CStr(mp_Columns[aInfoCol[i]].TxtValue())) + @"</td>
					  </tr>
					");
				}
			}
			catch
			{
				
			}
			
		
		}
		htmlToReturn.Write($@"     
			</table>
			</div>
	
		");
	}

	
}
@Html.Raw(htmlToReturn.Out())
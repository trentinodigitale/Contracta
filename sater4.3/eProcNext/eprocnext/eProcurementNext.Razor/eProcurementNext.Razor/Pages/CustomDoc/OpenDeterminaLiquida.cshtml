@page "/CustomDoc/OpenDeterminaLiquida.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB;
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.print_documentModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel;
@using static eProcurementNext.Razor.Pages.CustomDoc.OpenDeterminaLiquidaModel;
@using Microsoft.VisualBasic;
@model eProcurementNext.Razor.Pages.CustomDoc.OpenDeterminaLiquidaModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();

	string strSQL = string.Empty;
	dynamic fSoc = string.Empty;
	string idDoc = GetParamURL(Request.QueryString.ToString(), "IDDOC");
	objDoc = PrintDocument(session, htmlToReturn, HttpContext,Response,Request);//PrintDocument ok
	var SqlParameters = new Dictionary<string, object?>();
	void ShowError(string ErrText)
	{
		throw new ResponseRedirectException("../ctl_library/MessageBoxWin.asp?ML=yes&MSG=" + URLEncode(TruncateMessage(ErrText)) + "&CAPTION=Errore&ICO=2", Response);
	}
		/*string F(string v)
	{
	if(CStr(0.5).Contains("." ))
		{
	v = v.Replace(",", ".");
	}
	else
	{
	v = v.Replace(".", ",");
	}
	v = Strings.FormatNumber(CDbl(v), 2);
	//'v = cstr(v)
	if (CStr(0.5).Contains("." ))
	{
	v = v.Replace(".","A");
	v = v.Replace(",",".");
	v = v.Replace("A", ",");
	}
	return v;
	}*/
	//'--effettuo il salvataggiod el documento
	objDoc.Save(session);
	//--se lo stato è salvato o prenotato nn è possibile fare la detrmina
	if(DOC_FieldTecnical("TESTATA","StatoEsito") ==  "Saved" || Convert.ToBoolean(DOC_FieldTecnical("TESTATA","booked")))
	{
		ShowError("Occorre fare prima impegno");
	}
	//'--verifico se ho selezionato una riga da liquidare
	int nr = DOC_NumRow("PREVQUOT", "");
	int nRigaLiquida = -1;
	int NumeroImpegni = 0;
	int IdRow = -1;
	int Fornitore = -1;
	string ImportoPerQuotidiano = string.Empty;
	string FornitoreVis = string.Empty;
	string QuotidianoVis = string.Empty;
	for (int i = 0;i<nr-1;i++)
	{
		if(DOC_FieldRowTecnical( "PREVQUOT", "Liquida_Check", i ) == "1")
		{
			if(nRigaLiquida != -1)
			{
				nRigaLiquida = -1;
				break;
			}
			else
			{
				nRigaLiquida = i;
				NumeroImpegni = CInt(DOC_FieldRowTecnical("PREVQUOT", "NumeroImpegni",i));
				IdRow = CInt(DOC_FieldRowTecnical("PREVQUOT", "idRow", i));
				Fornitore = CInt(DOC_FieldRowTecnical("PREVQUOT", "Fornitore", i));
				FornitoreVis = DOC_FieldRow("PREVQUOT", "Fornitore", i);
				QuotidianoVis = DOC_FieldRow("PREVQUOT", "CopiaQuotidiani", i);
				ImportoPerQuotidiano = DOC_FieldRow("PREVQUOT", "Importo", i);
			}
		}
	}
	//'--recupero info fornitore
	SqlParameters.Clear();
	SqlParameters.Add("@fornitore", Fornitore);
	TSRecordSet rsForn = cdf.GetRSReadFromQuery_("select dscTesto, aziIndirizzoLeg, aziLocalitaLeg, aziPartitaIva from Aziende, DescsI where aziIdDscFormaSoc=IdDsc and IdAzi =@fornitore ", ApplicationCommon.Application.ConnectionString, SqlParameters);

	if (nRigaLiquida == -1)
	{
		ShowError("Occorre Selezionare una sola riga da liquidare");
	}
	if(string.IsNullOrEmpty(CStr(NumeroImpegni)))
	{
		ShowError("Occorre valorizzare Numero Impegni per la riga da liquidare ");
	}
	//'--recupero e controllo data di pubblicazione per la riga selezionata
	nr = DOC_NumRow("PUBBESITO", "");
	string DataPubblicazione = string.Empty;
	string DataPubblicazioneVis = string.Empty;

	for (int i = 0; i<nr; i++)
	{
		if(DOC_FieldRowTecnical( "PUBBESITO", "Row", i ) == CStr(IdRow))
		{
			DataPubblicazione = DOC_FieldRowTecnical("PUBBESITO", "DataPubblicazione", i).Replace("T", " ");
			DataPubblicazioneVis = DOC_FieldRow("PUBBESITO", "DataPubblicazione", i);
			break;
		}
	}
	if(DataPubblicazione == " 00:00:00" || string.IsNullOrEmpty(DataPubblicazione))
	{
		ShowError("Inserire DataPubblicazione nel foglio pubblicazioni esito ");
	}
	//'-- verifico se esiste già il documento
	SqlParameters.Clear();
	SqlParameters.Add("@id_esito", idDoc);
	SqlParameters.Add("@id_Pubblicazione", IdRow);
	TSRecordSet rs = cdf.GetRSReadFromQuery_("select * from Document_Liquidazioni where ID_Esito = @id_esito and ID_Pubblicazione=@id_Pubblicazione", ApplicationCommon.Application.ConnectionString, SqlParameters);
	if (rs.RecordCount == 0)
	{
		string TestoDetermina = string.Empty;
		string OggettoDetermina = string.Empty;
		TSRecordSet? rsTxt = null;
		// err.Clear
		if(string.IsNullOrEmpty(DOC_FieldTecnical("TESTATA","Esercizio") ))
		{
			ShowError("Occorre inserire l'esercizio");
		}
		if(string.IsNullOrEmpty(DOC_FieldTecnical("TESTATA","DatiBilancio")))
		{
			ShowError("Occorre inserire l'anno di Bilancio");
		}
		//'-- recupero il testo in funzione dell'esercizio
		if(DOC_FieldTecnical("TESTATA","Esercizio") == "Def")
		{
			rsTxt = cdf.GetRSReadFromQuery_("select * from Document_Liquidazioni where ID_Esito = -1 ", ApplicationCommon.Application.ConnectionString);
		}
		else
		{
			rsTxt = cdf.GetRSReadFromQuery_("select * from Document_Liquidazioni where ID_Esito = -2 ", ApplicationCommon.Application.ConnectionString);
		}
		if(rsTxt.RecordCount >0)
		{
			TestoDetermina = CStr(rsTxt["TestoDetermina"]);
			OggettoDetermina = CStr(rsTxt["OggettoDet"]);
		}
		else
		{
			ShowError("Manca il modello di riferimento per la generazione del documento");
		}
		//  '-- recupero i dati base 
		SqlParameters.Clear();
		SqlParameters.Add("@BP_Anno",  DOC_FieldTecnical("TESTATA", "DatiBilancio"));
		rsTxt = cdf.GetRSReadFromQuery_("select top 1 * from Document_DatiBilancio where BP_Anno =@BP_Anno  order by BP_Anno desc ", ApplicationCommon.Application.ConnectionString, SqlParameters);
		if (rsTxt is not null && rsTxt.RecordCount > 0)
		{
			// '-- sostituisco il testo
			int i = 0;
			//rsTxt.fields.count
			for (i= 1; i< CInt(rsTxt.Columns!.Count); i++)
			{
				//rsTxt.fields(i).name
				TestoDetermina = TestoDetermina.Replace("[" + CStr(rsTxt.Columns[i].ColumnName + "]"), CStr(rsTxt[i]!));

			}
			TestoDetermina = TestoDetermina.Replace("[BP_Anno_Prec]", CStr(CInt(CStr(rsTxt["BP_Anno"])) - 1));
		}
		else
		{
			ShowError("Non sono presenti dati per l'anno di Bilancio selezionato");
		}
		TestoDetermina = TestoDetermina.Replace("[NRDeterminaEsito]", DOC_FieldTecnical("TESTATA", "NRDeterminaEsito"));
		TestoDetermina = TestoDetermina.Replace("[DataDeterminaEsito]", DOC_Field("TESTATA", "DataDeterminaEsito"));
		TestoDetermina = TestoDetermina.Replace("[Fornitore]", FornitoreVis);
		TestoDetermina = TestoDetermina.Replace("[aziFormaSoc]", CStr(rsForn["dscTesto"]));
		TestoDetermina = TestoDetermina.Replace("[ImpegnoSpesa]", CStr(NumeroImpegni));
		TestoDetermina = TestoDetermina.Replace("[Imp_Impegno]", ImportoPerQuotidiano);

		TestoDetermina = TestoDetermina.Replace("[Quotidiano]", QuotidianoVis);
		TestoDetermina = TestoDetermina.Replace("[OggettoEsito]", DOC_FieldTecnical("TESTATA", "Oggetto"));
		TestoDetermina = TestoDetermina.Replace("[ProtocolloBando]", DOC_FieldTecnical("TESTATA", "Protocol"));

		TestoDetermina = TestoDetermina.Replace( "[DataPubblicazioneBando]" , DataPubblicazioneVis ) ;
		TestoDetermina = TestoDetermina.Replace("[aziIndirizzoLeg]", CStr(rsForn["aziIndirizzoLeg"]));//
		TestoDetermina = TestoDetermina.Replace("[aziLocalitaLeg]", CStr(rsForn["aziLocalitaLeg"]));//
		TestoDetermina = TestoDetermina.Replace("[aziPartitaIva]", CStr(rsForn["aziPartitaIva"]));//
		SqlParameters.Clear();
		SqlParameters.Add("@id", Fornitore);
		TSRecordSet rsABI = cdf.GetRSReadFromQuery_("select  top 1 * from document_aziende where idazi = @id order by aziDataCreazione DESC", ApplicationCommon.Application.ConnectionString, SqlParameters);
		if(rsABI.RecordCount >0)
		{
			TestoDetermina = TestoDetermina.Replace("[Banca]", CStr(rsABI["Banca"]));
			TestoDetermina = TestoDetermina.Replace("[AgenziaBanca]", CStr(rsABI["AgenziaBanca"]));
			TestoDetermina = TestoDetermina.Replace("[CittaBanca]", CStr(rsABI["CittaBanca"]));
			TestoDetermina = TestoDetermina.Replace("[ABI]" , CStr(rsABI["ABIBanca"]));
			TestoDetermina = TestoDetermina.Replace("[CAB]", CStr(rsABI["CABBanca"]));
			TestoDetermina = TestoDetermina.Replace("[IBAN]", CStr(rsABI["IBAANBanca"]));
		}

		// '--compongo oggetto determina
		OggettoDetermina = OggettoDetermina.Replace("[OggettoEsito]", DOC_FieldTecnical("TESTATA", "Oggetto"));
		OggettoDetermina = OggettoDetermina.Replace("[ProtocolloBando]", DOC_FieldTecnical("TESTATA", "Protocol"));
		OggettoDetermina = OggettoDetermina.Replace("[Fornitore]", FornitoreVis);
		OggettoDetermina = OggettoDetermina.Replace("[Quotidiano]", QuotidianoVis);


		TestoDetermina = TestoDetermina.Replace("'", "''");
		OggettoDetermina = OggettoDetermina.Replace("'", "''");
		//'-- recupero i dati e creo il nuovo documento
		SqlParameters.Clear();
		SqlParameters.Add("@idDoc", idDoc);
		SqlParameters.Add("@idRow", IdRow);
		SqlParameters.Add("@fornitore", Fornitore);
		SqlParameters.Add("@oggetto", OggettoDetermina);
		SqlParameters.Add("@testoDetermina", TestoDetermina);
		strSQL = "insert into Document_Liquidazioni (ID_Esito , ID_Pubblicazione, Fornitore, OggettoDet , TestoDetermina) ";
		strSQL = strSQL + " values (@idDoc, @idRow , @fornitore, @oggetto, @testoDetermina)";
		try
		{
			cdf.Execute(strSQL, ApplicationCommon.Application.ConnectionString, parCollection: SqlParameters);
		}
		catch
		{
			ShowError("Errore in creazione documento , ripetere l'operazione");
		}
		SqlParameters.Clear();
		SqlParameters.Add("@id_Esito", idDoc);
		SqlParameters.Add("@id_Pubblicazione", IdRow);
		rs = cdf.GetRSReadFromQuery_("select * from Document_Liquidazioni where ID_Esito = @id_Esito and ID_Pubblicazione=@id_Pubblicazione", ApplicationCommon.Application.ConnectionString, SqlParameters);

		if(rs.RecordCount == 0)
		{
			ShowError("Errore in creazione documento , ripetere l'operazione");
		}
	}
	try
	{
		FreeMemDocument(session);
	}
	catch
	{

	}
	//'-- apro il documento
	throw new ResponseRedirectException("../CTL_Library/Document/document.asp?UpdateParent=no&JScript=DETERMINA_LIQUIDA&DOCUMENT=DETERMINA_LIQUIDA&MODE=OPEN&IDDOC=" + CStr(rs["Id"]), Response); 
}
@Html.Raw(htmlToReturn.Out())
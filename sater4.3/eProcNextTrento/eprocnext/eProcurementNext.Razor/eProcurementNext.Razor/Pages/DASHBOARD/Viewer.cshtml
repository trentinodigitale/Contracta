@page "/DASHBOARD/Viewer.asp"
@using eProcurementNext.DashBoard
@using eProcurementNext.CommonModule
@using Microsoft.VisualBasic
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.masterPageToolsModel
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.ctl_profiler
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.intestModel 
@using static eProcurementNext.CommonModule.Basic;
@inject eProcurementNext.Session.ISession _session;
@inject eProcurementNext.Application.IEprocNextApplication _application;
@inject eProcurementNext.DashBoard.IViewer _viewer;
@inject IConfiguration configuration;
@model eProcurementNext.Razor.Pages.DASHBOARD.ViewerModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	Layout = ConfigurationServices.GetKey("LayoutVersion", "_masterPage");
	
}
@{
	dynamic TimeStartPage = DateTime.Now.Ticks;
	LoadSession(HttpContext, _session);

	string titoloViewer = "Lista";
	if (!string.IsNullOrEmpty(CStr(GetParamURL(Request.QueryString.ToString(), "CAPTION"))) && string.IsNullOrEmpty(CStr(GetParamURL(Request.QueryString.ToString(), "CaptionNoML")))) {
		titoloViewer = GetParamURL(Request.QueryString.ToString(), "CAPTION");
	}

	ViewData["Title"] = titoloViewer;//Passare titolo della pagina al Layout (_masterPage.cshtml)
	ViewData["pathRoot"] = "../";//Passare la pathRoot al Layout (_masterPage.cshtml)

	dynamic tempQS = GetQueryStringFromContext(Request.QueryString);

	if(tempQS.ToString().Contains("&brcrumb=", StringComparison.Ordinal)){
		dynamic breadCrumb = Request.Query["brcrumb"];
		tempQS = Strings.Replace(tempQS, $@"&brcrumb={breadCrumb}", "&brcrumb=yes");
	}else{
		tempQS = $@"{tempQS}&brcrumb=yes";
	}

	if ( Strings.LCase(CStr(Request.Query["nostack"])) != "yes" ){
		stackUpdateCurrentPosition("viewer",$"dashboard/viewer.asp?{tempQS}", titoloViewer, _session, HttpContext);
	}

	_session.Save();

	//EprocResponse _response = new EprocResponse();

	//_viewer.run(_response); // session, context

	////ServerPageAccess("DASHBOARD.VIEWER", configuration, _session, _application, HttpContext, _response);


	//var temp = _response.Out();

}
@await Component.InvokeAsync("ViewerPage")
@{

	Write_CTL_Profiler("Viewer.ASP", Strings.Replace(Request.Query["TABLE"], "'", "''"), "null", Request, TimeStartPage, configuration, _application);
}
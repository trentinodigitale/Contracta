@page "/Quesiti/InserisceQuesito.asp"
@model eProcurementNext.Razor.Pages.Quesiti.grigliaquesitiModel
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.HTML.BasicFunction;
@using Microsoft.VisualBasic;
@using eProcurementNext.CtlProcess;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.verificaBrowserModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.initialize_ComponentModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.cnvModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.trace_in_log_utenteModel;
@using static eProcurementNext.Session.SessionMiddleware
@{
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new(GetParamURL(HttpContext.Request.QueryString.ToString(), "XML_ATTACH_TYPE"));
    CommonDbFunctions cdf = new();
}
@{

    //on error resume next

    //'-- Per evitare spam email

    void TestCaptcha(string valSession, string valCaptcha)
    {
        string tmpSession;
        bool _TestCaptcha;
        valSession = valSession.Trim();
        valCaptcha = valCaptcha.Trim();
        if ((valSession == null) || (valCaptcha == null))
        {
            _TestCaptcha = false;
        }
        else
        {
            tmpSession = valSession;
            valSession = CStr(session[valSession]).Trim();
            if (valSession is null)
            {
                _TestCaptcha = false;
            }
            else
            {
                valCaptcha = valCaptcha.Replace("i", "I");
                if(Strings.StrComp(valSession, valCaptcha,CompareMethod.Text) == 0)
                {
                    _TestCaptcha = true;
                }
                else
                {
                    _TestCaptcha = false;
                }
            }
        }
    }

    //
    //'- *** Tolgo il controllo del captcha sui quesiti provenienti dall'interno (da un utente loggato) ***
    //'--verifico il codice antispam se è stato inserito correttamente
    //'if not TestCaptcha("ASPCAPTCHA", Request.Form("captchacode")) then
    //'	Response.Write "Captcha fallito. Tentativo di accesso diretto alla pagina di inserimento quesiti bloccato!"
    //'	Response.End 
    //'end if

    validate("GUID_DOC", GetValueFromForm(Request, "GUID_DOC"), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0,HttpContext,session);
    validate("SUBTYPE_ORIGIN", GetValueFromForm(Request, "SUBTYPE_ORIGIN"), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0,HttpContext,session);
    validate("DOCUMENT", GetValueFromForm(Request, "DOCUMENT"), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0,HttpContext,session);

    //'Response.Write Request.Form("Quesito")
    //'Response.end

    //if (err.number = 0)
	//{

    string Quesito = GetValueFromForm(Request, "Quesito");
    string OperatoreEconomico = GetValueFromForm(Request, "OperatoreEconomico");
    string Telefono = GetValueFromForm(Request, "Telefono");
    string Fax = GetValueFromForm(Request, "Fax");
    string EMail = GetValueFromForm(Request, "EMail");
    string GUID_DOC = GetValueFromForm(Request, "GUID_DOC");
    string SUBTYPE_ORIGIN = GetValueFromForm(Request, "SUBTYPE_ORIGIN");
    string backoffice = GetValueFromForm(Request, "backoffice");
    string fascicolo = GetValueFromForm(Request, "FASCICOLO");
    string DOCUMENT = CStr(GetValueFromForm(Request, "DOCUMENT"));

    //'--recupero protollo per il quesito

    string strErrore = string.Empty;
    Exception? eccezione = null;
    string ProtocolloQuesito = string.Empty;
    string strDescErrore =string.Empty;
    string lIdOrigin;
    TSRecordSet? rsMsg = null;
    ClsElab objProc = new();

    int lIdpfu = -20;
    if (!string.Equals(backoffice, "YES"))
    {
        lIdpfu = session["IdPfu"];
    }
    string strSQL = string.Empty;

    string DataInvio = string.Empty;
    int idNewDoc = 0;

    try
    {
        if (!string.IsNullOrEmpty(DOCUMENT))
        {
            //'--GESTIONE PER I NUOVI DOCUMENTI

            //'--setto id del nuovo documento
            lIdOrigin = GUID_DOC;
            //--inserisco il quesito associato al documento
            strSQL = "SET NOCOUNT ON insert into Document_chiarimenti ( ID_ORIGIN , domanda,UtenteDomanda,aziragionesociale,azitelefono1,azifax,azie_mail,fascicolo,Document   ) ";
            strSQL = strSQL + " values ( " + CLng(lIdOrigin) + " , '" + Quesito.Replace("'", "''") + "'," + lIdpfu + ",'" + OperatoreEconomico.Replace("'", "''") + "' ,'" + Telefono.Replace("'", "''") + "','" + Fax.Replace("'", "''") + "','" + EMail.Replace("'", "''") + "','" + fascicolo.Replace("'", "''") + "','" + DOCUMENT.Replace("'", "''") + "')";
            strSQL = strSQL + " select top 1 id , left((convert(varchar(20),cast(datacreazione as datetime),105) + ' ' +convert(varchar(20),cast(datacreazione as datetime),114)),16) as datacreazione from Document_chiarimenti where id = SCOPE_IDENTITY() ";
            //'response.write strSQL
            //'response.end

            string connectionString = ApplicationCommon.Application.ConnectionString;
            try
            {
                rsMsg = cdf.GetRSReadFromQuery_(strSQL, connectionString);
            }
            catch
            {
                strErrore = "Errore inserimento quesito:Ripetere l'operazione.";
            }

            //'--aggiorno field numero quesiti relativo al bando sia nella parte piatta 
            //'--si suppone che la colonna ReceivedQuesiti per ogni bando si asulla tabella Document_Bando
            //
            //'--spostata nel processo CHIARIMENTI_PORTALE-SEND in modo che faccia rollback se non va buon fine
            //'--strSQL = "update Document_Bando set ReceivedQuesiti = cast(isnull(ReceivedQuesiti,0) as int) + 1 where idheader=" & clng(lIdOrigin)
            //'--call objDB.ExecSql( cstr(strSql ) , cstr(session("Session")(8)) )
            //'err.clear
        }

        if (string.IsNullOrEmpty(strErrore))
        {
            //'--recupero id del nuovo quesito inserito (sul documento generico o sul nuovo documento)
            //'set rsMsg = objDB.GetRSReadFromQuery( "select top 1 id , left((convert(varchar(20),cast(datacreazione as datetime),105) + ' ' +convert(varchar(20),cast(datacreazione as datetime),114)),16) as datacreazione from Document_chiarimenti where ID_ORIGIN = " & clng(lIdOrigin) & " and aziragionesociale='" & replace(OperatoreEconomico,"'","''") & "' order by id desc" , Application("ConnectionString"))
            if (rsMsg is not null && rsMsg.RecordCount > 0)
            {
                rsMsg.MoveFirst();
                idNewDoc = CInt(rsMsg["ID"]!);
                DataInvio = CStr(rsMsg["DataCreazione"]);

                //'--attivo processo per calcolo protocollo quesito, e invio delle notifiche mail
                ProtocolloQuesito = string.Empty;

                //objProc.ElaborateWeb(cstr("SEND"), cstr("CHIARIMENTI_PORTALE"), clng(idNewDoc),clng(lIdpfu), strDescErrore ,1, cstr(session("Session")(8) ) )


                //'response.write idNewDoc & "--" & lIdpfu & "---" & strDescErrore
                //'response.end

                try
                { 
                    objProc.Elaborate("SEND", "CHIARIMENTI_PORTALE", CLng(idNewDoc), CLng(lIdpfu), ref strDescErrore,  1, ApplicationCommon.Application.ConnectionString);//'--recupero protocollo
                    if (!string.IsNullOrEmpty(strDescErrore))
                    {
                        strErrore = strDescErrore + " - errore inserimento questito";
                    }
                    rsMsg = cdf.GetRSReadFromQuery_("select Protocol  from Document_chiarimenti where ID = " + idNewDoc, ApplicationCommon.Application.ConnectionString);
                    if (rsMsg.RecordCount > 0)
                    {
                        ProtocolloQuesito = CStr(rsMsg["Protocol"]);
                    }
                }
                catch (Exception e)
                {
                    eccezione = e;
                    strErrore = $"{strDescErrore} - errore inserimento questito - {e.Message}";
                }
            }
            if (string.IsNullOrEmpty(ProtocolloQuesito) || string.Equals(ProtocolloQuesito, "0"))
            {
                strErrore = "Errore recupero del protocollo quesito:Ripetere l'operazione.";
                string numRec = (rsMsg is null) ? string.Empty : rsMsg.RecordCount.ToString();
                strErrore = $"{strErrore}- idnew:{idNewDoc} -numrec:{numRec}";
            }
        }
    }
    catch
    {
        strErrore = "Errore recupero parametri:Ripetere l'operazione.";
    }

    htmlToReturn.Write($@"<table id=""template_doc"" >");
    if(string.IsNullOrEmpty(strErrore))
    {
        traceInLogUtente(1,"InserisceQuesito.asp", "Quesito inviato correttamente con Protocollo \"" + ProtocolloQuesito + "",HttpContext,session);
        htmlToReturn.Write("<thead>");
        htmlToReturn.Write("<tr>");
        htmlToReturn.Write($@"<th colspan=""4"" align=""left nowrap"" class=""thwhite"">Quesito inviato correttamente</th>");
        htmlToReturn.Write("</tr>");
        htmlToReturn.Write("</thead>");
        htmlToReturn.Write("<tbody>");

        htmlToReturn.Write("<tr>");
        htmlToReturn.Write($@"<th  >" +ApplicationCommon.CNV( "Protocollo" )+" </th>"); 
        htmlToReturn.Write("<td >"+ProtocolloQuesito+"</td>");
        htmlToReturn.Write("</tr>");

        htmlToReturn.Write("<tr>");
        htmlToReturn.Write("<th  >"+ApplicationCommon.CNV( "Data invio quesito" )+ "</th>"); 
        htmlToReturn.Write("<td >"+DataInvio.Replace("-","/")+"</td>");
        htmlToReturn.Write("</tr>");
        htmlToReturn.Write("<tr>");

        htmlToReturn.Write("<tr>");
        htmlToReturn.Write($@"<th  >"+ApplicationCommon.CNV( "Quesito" )+"</th>");
        htmlToReturn.Write("<td >");
        Quesito = HtmlEncode(Quesito);
        Quesito = Quesito.Replace(Environment.NewLine, "<br/>");
        Quesito = Quesito.Replace(Environment.NewLine, "<br/>");
        Quesito = Quesito.Replace("\n", "<br/>");

        htmlToReturn.Write(Quesito);
        htmlToReturn.Write("</td>");
        htmlToReturn.Write("</tr>");
    }
    else
    {
        //EprocNext.CommonDB.Basic.TraceErr(eccezione ,ApplicationCommon.Application.ConnectionString,strErrore)
        eProcurementNext.CommonDB.Basic.LogEvent(eProcurementNext.CommonDB.Basic.TsEventLogEntryType.Error, strErrore, ApplicationCommon.Application.ConnectionString, "InserisceQuesito.asp");
        traceInLogUtente(0 , "InserisceQuesito.asp", strErrore,HttpContext,session);
        htmlToReturn.Write("<tbody>");
        htmlToReturn.Write("<tr>");
        htmlToReturn.Write($@"<th  colspan=""4"" align=""left"" style=""font-size:16px;""><div id=""errormsg"">"+ strErrore+$@"</div></th>");
        htmlToReturn.Write("</tr>"); 
    }
    htmlToReturn.Write("</tbody>");
    htmlToReturn.Write("</table>");
}@Html.Raw(htmlToReturn.Out())
@page "/CustomDoc/validaAIC.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB;
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.Razor.Pages.CustomDoc.validaAICModel;
@using Microsoft.VisualBasic;
@model eProcurementNext.Razor.Pages.CustomDoc.validaAICModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();
	var SqlParameters = new Dictionary<string, object?>();
	string aic = CStr(GetParamURL(Request.QueryString.ToString(), "AIC"));
	string strOUT = string.Empty;
	string msgErrorAIC = string.Empty;

	//'on error resume next
	if (aic.Length != 9)
	{
		msgErrorAIC = "Il codice AIC deve essere di 9 cifre";
	}
	else if (Strings.Mid(aic, 1,1).ToUpper() == "E" && IsNumeric(Strings.Mid(aic,2,8)) == false)
	{
		msgErrorAIC = "Il codice AIC se inizia per 'E' deve avere gli 8 caratteri restanti come cifre";

	}
	else if (Strings.Mid(aic, 1,1).ToUpper() != "E")
	{
		if (!IsNumeric(aic))
		{
			msgErrorAIC = "Il codice AIC sembra non essere un numero";
		}
		else
		{
			string codControllo = Strings.Mid(aic, 9, 1);
			int calcCodiceDiControllo = 0;
			SqlParameters.Clear();
			SqlParameters.Add("@aic", aic);
			string strSQL = @"declare @CodiceAIC NVARCHAR(MAX) 
									 set @CodiceAIC = @aic 
									 select ( (	(2*substring(@CodiceAIC,2,1)/10) + (2*substring(@CodiceAIC,4,1)/10) + (2*substring(@CodiceAIC,6,1)/10) 
									 + (2*substring(@CodiceAIC,8,1)/10) + (2*substring(@CodiceAIC,2,1)%10) + (2*substring(@CodiceAIC,4,1)%10) 
									 + (2*substring(@CodiceAIC,6,1)%10) + (2*substring(@CodiceAIC,8,1)%10) + substring(@CodiceAIC,1,1) 
									 + substring(@CodiceAIC,3,1) + substring(@CodiceAIC,5,1) + substring(@CodiceAIC,7,1) ) % 10 ) as controCodice";

			TSRecordSet? rs = null;
			try
			{
				rs = cdf.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString, SqlParameters);
			}
			catch(Exception ex)
			{
				strOUT = $"0#{ex.Message}";
			}

			if (rs is not null && rs.RecordCount >0)
			{
				rs.MoveFirst();
				calcCodiceDiControllo = CInt(rs["controCodice"]!);
			}
			//'response.write "COD_controllo:(" & calcCodiceDiControllo & ")<br/>"
			//'response.write "COD:(" & codControllo & ")"
			//'response.end
			if (CStr(codControllo) !=  CStr(calcCodiceDiControllo))
			{
				msgErrorAIC = "Il codice AIC non ha il codice di controllo corretto";
			}
		}
	}
	strOUT = $"1#{msgErrorAIC}";

	htmlToReturn.Write(strOUT);
}
@Html.Raw(htmlToReturn.Out())
@page "/CustomDoc/CheckComunicazioni_FromPDAMicrolotti.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB;
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using static eProcurementNext.HTML.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel;
@using static eProcurementNext.Razor.Pages.CustomDoc.CheckComunicazioni_FromPDAMicrolotti;
@using Microsoft.VisualBasic;
@*
<!-- #Include File="../ctl_library/functions/verificabrowser.inc" -->
<!-- #INCLUDE FILE="../ctl_library/Functions/CheckSession.inc" -->
<!-- #INCLUDE FILE="../ctl_library/functions/security.inc" -->
<!-- #Include File="../ctl_library/functions/trace_in_log_utente.inc" -->
*@
@model eProcurementNext.Razor.Pages.CustomDoc.CheckComunicazioni_FromPDAMicrolotti
@using static eProcurementNext.Session.SessionMiddleware
@{
	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();
}
@{
	//'--Versione=1&data=2014-03-18&Attvita=54707&Nominativo=Enrico
	var SqlParameters = new Dictionary<string, object?>();
	long User;
	string strSQL;
	string JumpCheck = string.Empty;
	TSRecordSet? rsCom = null;
	string IdDocCom;
	string strDoc;
	string TYPEDOC;

	User = CLng(session["IdPfu"]);
	string strTIPOCOMUNICAZIONE = Trim(GetParamURL(Request.QueryString.ToString(),"TIPOCOMUNICAZIONE"));
	string IDDOC = Trim(GetParamURL(Request.QueryString.ToString(),"IDDOC"));

	string CRITERIOAGGIUDICAZIONEGARA = Trim(GetParamURL(Request.QueryString.ToString(),"CRITERIOAGGIUDICAZIONEGARA"));

	//'Response.Write strTIPOCOMUNICAZIONE & "<br>"
	//'Response.Write IDDOC & "<br>"
	//'Response.End

	strDoc = "PDA_COMUNICAZIONE_GENERICA";
	TYPEDOC = strTIPOCOMUNICAZIONE;

	//'*******************************************
	//'*****  VALIDAZIONE DELL'INPUT UTENTE  *****
	//'*******************************************

	validate( "IDDOC", IDDOC , TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 0,HttpContext,session);

	switch (strTIPOCOMUNICAZIONE){

		//'case	"ESCLUSIONE"
		//'		JumpCheck="ESCLUSIONE"

		//'case	"CHIARIMENTI"
		//'		JumpCheck="CHIARIMENTI"

		//'case	"SORTEGGIO"
		//'		JumpCheck="SORTEGGIO"

		case	"GENERICA":
			JumpCheck="GENERICA";
			break;

		//'case	"GENERICA_FROM_BANDO"
		//'		JumpCheck="GENERICA_FROM_BANDO"

		case	"ESITO_DEFINITIVO_MICROLOTTI":	
			JumpCheck="ESITO_DEFINITIVO_MICROLOTTI";
			break;

		case	"ESITO_DEFINITIVO_INVITATI_MICROLOTTI":	
			JumpCheck="ESITO_DEFINITIVO_MICROLOTTI";
			break;

		case	"ESITO_MICROLOTTI":
		case    "ESITO_INVITATI_MICROLOTTI":	
			JumpCheck="ESITO_MICROLOTTI";
			break;

		default:
			break;

			//'case	"REVOCA" 		
			//'		JumpCheck="REVOCA"

	}

	//on error resume next

	//'--CONTROLLO SE ESISTE UNA COMUNICAZIONE SALVATA
	strSQL = "select * from CTL_DOC where JumpCheck like '%" + JumpCheck + "' and TipoDoc in ('PDA_COMUNICAZIONE_GENERICA') and deleted=0 and StatoFunzionale='InLavorazione' and  LinkedDoc=" + CStr(CLng(IDDOC));

	if (!(string.IsNullOrEmpty(CRITERIOAGGIUDICAZIONEGARA))){
		SqlParameters.Add("@id", CInt(IDDOC));
		SqlParameters.Add("@tipo", "multifornitore");
		//'-- SE SONO SULLE COMUNICAZIONI DI AGGIUDICAZIONE E MI TROVO SUL GIRO DI AGGIUDICAZIONE MULTIFORNITORE, BLOCCO SE C'Ãˆ UN DOCUMENTO DI 'PDA_GRADUATORIA_AGGIUDICAZIONE' IN LAVORAZIONE
		strSQL = "select c.id";
		strSQL = strSQL + "	from PDA_MICROLOTTI_VIEW_TESTATA a";
		strSQL = strSQL + "			inner join Document_MicroLotti_Dettagli b with(nolock) on b.IdHeader = a.Id and b.TipoDoc = 'PDA_MICROLOTTI'";
		strSQL = strSQL + "			inner join CTL_DOC c with(nolock) on c.LinkedDoc = b.Id and c.TipoDoc = 'PDA_GRADUATORIA_AGGIUDICAZIONE' and c.Deleted = 0 and c.StatoFunzionale not in ( 'Confermato', 'Annullato' ,'Variato' )";
		strSQL = strSQL + " where a.id = @id and a.TipoAggiudicazione = @tipo";

		//'response.write strSQL
		//'response.end

		TSRecordSet? rs = GetRS(strSQL, SqlParameters);

		if (rs.RecordCount > 0)
		{
			string MsgWarning = "Invio della comunicazione di aggiudicazione non possibile per la presenza di documenti di 'Graduatoria Aggiudicazione' non completati";
			string qsStringMsg = "ML=yes&MSG=" + URLEncode(TruncateMessage(MsgWarning)) + "&CAPTION=Attenzione&ICO=4";

			//'if ucase(cstr(application("ACCESSIBLE"))) <> "YES" then		
			throw new ResponseRedirectException("../ctl_library/MessageBoxWin.asp?" + qsStringMsg, Response);
			//'else
			//'	Response.Redirect "../ctl_library/path.asp?POP=YES&MSG_ERROR=" & server.urlencode( qsStringMsg )
			//'end if

			throw new ResponseEndException(htmlToReturn.Out(), Response, "");
		}

		//'--se viene passato il CriterioAggiudicazioneGara cerco la comunicazione specifica per quel criterio
		string strSQLSpecifica = "select * from CTL_DOC inner join CTL_DOC_VALUE on id=idheader and dse_id='TESTATA' and dzt_name='CriterioAggiudicazioneGara' and value='" + Strings.Replace(CRITERIOAGGIUDICAZIONEGARA, "'", "''") + "'  where JumpCheck like '%" + JumpCheck + "' and TipoDoc in ('PDA_COMUNICAZIONE_GENERICA') and deleted=0 and StatoFunzionale='InLavorazione' and  LinkedDoc=" + CStr(CLng(IDDOC));
		//'response.write strSQL
		//'response.end
		rsCom = GetRS(strSQLSpecifica);

		if (rsCom is not null && rsCom.RecordCount == 0)
		{
			//'--se non esiste cerco come prima senza criterio
			rsCom = GetRS(strSQL, SqlParameters);
		}

		//'--se passato CriterioAggiudicazioneGara cambio il doc destinazione per cambiare stored procedure
		if (CRITERIOAGGIUDICAZIONEGARA == "15531") 
		{
			TYPEDOC = TYPEDOC + "_PPB"; 
		}
		else
		{
			TYPEDOC = TYPEDOC + "_OEPV";
		}
	}
	else
	{
		rsCom = GetRS(strSQL);
	}

	string TipoDoc;

	//'response.write strSQL
	//'response.end

	if (rsCom is not null && rsCom.RecordCount > 0)
	{
		//'--propongo alert con scelta all'utente
		rsCom.MoveFirst();
		IdDocCom = CStr(rsCom["id"]);
		TipoDoc = CStr(rsCom["TipoDoc"]);

		string MsgWarning = "Esiste gia' una comunicazione salvata";

		//'--azione per aprire la comunicazione

		string ON_OK = "opener.pathRoot = '../';opener.ExecFunctionCenterPath('ctl_library/document/document.asp?lo=base&UpdateParent=no&MODE=SHOW&JScript=" + HtmlEncodeJSValue(TipoDoc) + "&DOCUMENT=" + HtmlEncodeJSValue(TipoDoc) + "&IDDOC=" + HtmlEncodeJSValue(IdDocCom) + "#pda_comunicazione_generica" + IdDocCom + "');self.close();";

		//'--azione per fare una nuova comunicazione


		string ON_KO = "opener.pathRoot = '../';opener.ExecFunctionCenterPath('ctl_Library/document/MakeDocFrom.asp?lo=base&TYPE_TO=" + HtmlEncodeJSValue(strDoc) + "&IDDOC=" + HtmlEncodeJSValue(IDDOC) + "&TYPEDOC=" + HtmlEncodeJSValue(TYPEDOC) + "#pda_comunicazione_generica" + HtmlEncodeJSValue(IdDocCom) + "');self.close();";

	    //'Response.Write ON_KO
	    //'Response.end
	
        throw new ResponseRedirectException("../ctl_library/MessageBoxWin.asp?ON_KO=" + URLEncode ( ON_KO ) + "&ON_OK=" +  URLEncode ( ON_OK ) + "&CAPTION_OK=Apri&CAPTION_KO=Nuova&ML=yes&MSG=" + URLEncode(TruncateMessage(MsgWarning)) + "&CAPTION=Attenzione&ICO=4", Response);
	
	    throw new ResponseEndException(htmlToReturn.Out(), Response, "");
    }

	//'Response.Write "opener.ExecFunctionCenterPath('ctl_Library/document/MakeDocFrom.asp?lo=base&TYPE_TO=" & HtmlEncodeJSValue(strDoc) & "&IDDOC=" & HtmlEncodeJSValue(IDDOC) & "&TYPEDOC=" & HtmlEncodeJSValue(TYPEDOC) & "');self.close();"
	//'Response.End
	
    htmlToReturn.Write("<script>");
    htmlToReturn.Write(" opener.pathRoot = '../';");
   	htmlToReturn.Write(" opener.ExecFunctionCenterPath('ctl_Library/document/MakeDocFrom.asp?TYPE_TO=" + HtmlEncodeJSValue(strDoc) + "&IDDOC=" + HtmlEncodeJSValue(IDDOC) + "&TYPEDOC=" + HtmlEncodeJSValue(TYPEDOC) + "');self.close();");
 
   	//'response.Write "document.close();"
    htmlToReturn.Write("</script>");

    void ShowError( string ErrText )
	{
		throw new ResponseRedirectException("../ctl_library/MessageBoxWin.asp?ML=yes&MSG=" + URLEncode(TruncateMessage(ErrText)) + "&CAPTION=Errore&ICO=2", Response);
	}
}
@Html.Raw(htmlToReturn.Out())
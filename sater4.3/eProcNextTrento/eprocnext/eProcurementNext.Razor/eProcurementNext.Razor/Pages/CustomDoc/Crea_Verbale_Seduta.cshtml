@page "/CustomDoc/Crea_Verbale_Seduta.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB;
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.print_documentModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel;
@using static eProcurementNext.Razor.Pages.CustomDoc.Crea_Verbale_SedutaModel;
@using Microsoft.VisualBasic;
@model eProcurementNext.Razor.Pages.CustomDoc.Crea_Verbale_SedutaModel
@using static eProcurementNext.Session.SessionMiddleware
@{
    CommonDbFunctions cdf = new();
    LoadSession(HttpContext, session);
    EprocResponse htmlToReturn = new();
}
@{
    //'--RECUPERO PARAMETRI
    string IdTemplate = string.Empty;
    int IdSeduta = 0;
    string idNewDoc = string.Empty;
    string strOggettoBando = string.Empty;
    string strProtocolloBando = string.Empty;
    string strFascicolo = string.Empty;
    bool bCustomDataElem = false;
    string contesto = GetParamURL(Request.QueryString.ToString(), "TYPEDOC");
    string GuidTemplate = GetParamURL(Request.QueryString.ToString(), "IDTEMPLATE");
    string GuidSeduta = GetParamURL(Request.QueryString.ToString(), "IDSEDUTA");
    Dictionary<string, string>? mappaCampiCustom = null;
    string IdPDA = string.Empty;

    //'--stabilisco il tipo di template da risolvere
    string TipoSorgente = string.Empty;
    switch (contesto.ToUpper())
    {
        case "PDA_MICROLOTTI":
            TipoSorgente = "2";
            break;
        case "BANDO_SDA":
            TipoSorgente = "3";
            break;
    }
    //'Response.Write GuidTemplate & "<br>"
    //'Response.Write GuidSeduta & "<br>"
    //'response.end
    TSRecordSet? Rs1 = null;
    TSRecordSet? RsVerbale = null;
    var sqlParams = new Dictionary<string, object?>();
    try
    {
        sqlParams.Add("@guid", GuidSeduta);
        Rs1 = cdf.GetRSReadFromQuery_("select top 1 Id from CTL_DOC with (nolock) where GUID=@guid", ApplicationCommon.Application.ConnectionString, sqlParams);
    }
    catch (Exception ex)
    {
        throw new Exception("Errore durante controllo esistenza seduta, ripetere l'operazione");
    }
    if (Rs1.RecordCount > 0)
    {
        Rs1.MoveFirst();
        IdSeduta = CInt(Rs1["Id"]!);

        //'response.write "select top 1 * from ctl_doc where tipodoc='VERBALEGARA' and linkeddoc=" & IdSeduta
        //'response.end
        try
        {
            sqlParams.Clear();
            sqlParams.Add("@tipo", "VERBALEGARA");
            sqlParams.Add("@linkeddoc", IdSeduta);
            RsVerbale = cdf.GetRSReadFromQuery_("select top 1 Id from CTL_DOC with (nolock) where TipoDoc=@tipo and Deleted=0 and LinkedDoc=@linkeddoc", ApplicationCommon.Application.ConnectionString, sqlParams);
        }
        catch
        {
            throw new Exception("Errore durante controllo esistenza verbale, ripetere l'operazione");
        }
        if (RsVerbale.RecordCount == 0)
        {
            //'--CONTROLLO TEMPLATE ESISTENTE e RECUPERO ID
            string strTipoProcedura = string.Empty;
            string strCriterioDiAggiudicazione = string.Empty;
            string strTestata = string.Empty;
            string strTestata2 = string.Empty;
            string strutturaAziendale = string.Empty;
            string strTIPOVERBALE = string.Empty;
            string strPiePagina = string.Empty;
            TSRecordSet? Rs = null;
            string strSezione = string.Empty;
            int nPosSez = 0;
            try
            {
                sqlParams.Clear();
                sqlParams.Add("@tipo", TipoSorgente);
                sqlParams.Add("@guid", GuidTemplate);
                Rs = cdf.GetRSReadFromQuery_("select top 1 * from CTL_DOC with (nolock), Document_VerbaleGara where TipoSorgente = @tipo and Id = IdHeader and GUID = @guid", ApplicationCommon.Application.ConnectionString, sqlParams);
            }
            catch
            {
                throw new Exception("Errore durante il recupero del template, ripetere l'operazione");
            }
            if (Rs.RecordCount == 0)
            {
                throw new Exception("Template inesistente, ripetere l'operazione");
            }
            else
            {
                Rs.MoveFirst();
                strCriterioDiAggiudicazione = CStr(Rs["CriterioAggiudicazioneGara"]);
                strTestata = CStr(Rs["Testata"]);
                strTestata2 = CStr(Rs["Testata2"]);
                strPiePagina = CStr(Rs["PiePagina"]);
                strutturaAziendale = CStr(Rs["strutturaAziendale"]);
                strTIPOVERBALE = CStr(Rs["TIPOVERBALE"]);
                IdTemplate = CStr(Rs["Id"]);
            }
            //'--DALLA SEDUTA RECUPERO IL BANDO DI PARTENZA
            TSRecordSet? RsSeduta = null;
            string strDirezioneProponente = string.Empty;

            string[]? ainfo = null;
            string TitoloSezione = string.Empty;
            try
            {
                sqlParams.Clear();
                sqlParams.Add("@guid", GuidSeduta);
                RsSeduta = cdf.GetRSReadFromQuery_("select Id, LinkedDoc from CTL_DOC with (nolock) where GUID = @guid", ApplicationCommon.Application.ConnectionString, sqlParams);
            }
            catch
            {
                throw new Exception("Errore durante il recupero seduta, ripetere l'operazione");
            }
            if (RsSeduta.RecordCount > 0)
            {
                RsSeduta.MoveFirst();
                IdSeduta = CInt(RsSeduta["Id"]!);
                IdPDA = CStr(RsSeduta["LinkedDoc"]);
                //'--RECUPERO INFO DOCUMENTO ORIGNE (PDA,BANDO_SDA,.....)
                GetInfoDocOrigine();
            }
            else
            {
                throw new Exception("Seduta inesistente, ripetere l'operazione");
            }

            //'--RECUPERO CAMPI CUSTOM e li memorizzao in una mappa nome valore
            mappaCampiCustom = new Dictionary<string, string>();

            try
            {
                RecuperaCampiCustom();
            }
            catch
            {
                throw new Exception("RECUPERO CAMPI CUSTOM");
            }

            //'--RECUPERO STRUTTURA AZIENDALE DALL'ATTRIBUTO PEG
            strDirezioneProponente = string.Empty;
            try
            {
                if (mappaCampiCustom.ContainsKey("Peg"))
                {
                    ainfo = mappaCampiCustom["Peg"].Split("#~#");
                    strDirezioneProponente = ainfo[0];
                }
            }
            catch
            {
                throw new Exception("recupero la struttura aziendale del documento dal PEG");
            }

            //'--CREAZIONE TESTATA DOCUMENTO VERBALEGARA LEGATO ALLA SEDUTA
            sqlParams.Clear();
            sqlParams.Add("@idpfu", CInt(session["idpfu"]));
            sqlParams.Add("@strOggettoBando", strOggettoBando);
            sqlParams.Add("@IDAZI", CInt(session["IDAZI"]));
            sqlParams.Add("@strDirezioneProponente", strDirezioneProponente);
            sqlParams.Add("@strFascicolo", strFascicolo);
            sqlParams.Add("@IdSeduta", IdSeduta);
            string strSQL = "insert into CTL_DOC ( idPfuInCharge, IdPfu, TipoDoc, Body, Azienda, StrutturaAziendale, ProtocolloRiferimento, Fascicolo, LinkedDoc ) ";
            strSQL = $"{strSQL} values ( @idpfu, @idpfu, 'VERBALEGARA',  @strOggettoBando, @IDAZI, @strDirezioneProponente, @strProtocolloBando, @strFascicolo, @IdSeduta )";
            try
            {
                cdf.Execute(strSQL, CStr(ApplicationCommon.Application.ConnectionString), parCollection: sqlParams);
            }
            catch
            {
                throw new Exception($"errore inserimento verbale - [{strSQL}]");
            }
            sqlParams.Clear();
            sqlParams.Add("@linkeddoc", IdSeduta);
            sqlParams.Add("@tipo", "VERBALEGARA");
            //'--RECUPERO ID DEL NUOVO DOCUMENTO VERBALEGARA LEGATO ALLA SEDUTA
            TSRecordSet rsMsg = cdf.GetRSReadFromQuery_("select top 1 Id from CTL_DOC with (nolock) where LinkedDoc = @linkeddoc and TipoDoc=@tipo order by Id desc", ApplicationCommon.Application.ConnectionString, sqlParams);
            if (rsMsg.RecordCount > 0)
            {
                rsMsg.MoveFirst();
                idNewDoc = CStr(rsMsg["Id"]);
            }

            //'--RISOLVO TESTATA e PIEPAGINA PER IL NUOVO VERBALEGARA
            strTestata = RisolvoTestoTemplate(strTestata);
            strTestata2 = RisolvoTestoTemplate(strTestata2);
            strPiePagina = RisolvoTestoTemplate(strTestata2);

            //'--INSERT TESTATA e PIEPAGINA PER IL DOCUMENTO VERBALEGARA
            sqlParams.Clear();
            sqlParams.Add("@idNewDoc", CInt(idNewDoc!));
            sqlParams.Add("@strTipoProcedura", strTipoProcedura);
            sqlParams.Add("@strCriterioDiAggiudicazione", strCriterioDiAggiudicazione);
            sqlParams.Add("@strTestata", strTestata);
            sqlParams.Add("@strPiePagina", strPiePagina);
            sqlParams.Add("@strTestata2", strTestata2);
            sqlParams.Add("@IdTemplate", CInt(IdTemplate!));
            strSQL = "insert into document_VerbaleGara ( IdHeader, ProceduraGara, CriterioAggiudicazioneGara, Testata, PiePagina , Testata2 , IdTipoVerbale , TipoSorgente ) ";
            strSQL = strSQL + " values ( @idNewDoc, @strTipoProcedura, @strCriterioDiAggiudicazione, @strTestata, @strPiePagina, @strTestata2, @IdTemplate,'2')";
            try
            {
                cdf.Execute(strSQL, ApplicationCommon.Application.ConnectionString, parCollection: sqlParams);

            }
            catch
            {
                throw new Exception($"[{strSQL}]");
            }
            //'--INSERT DI TUTTE LE SEZIONI DEL DOCUMENTO VERBALEGARA
            TSRecordSet? RsSezioni = null;
            try
            {
                sqlParams.Clear();
                sqlParams.Add("@id", CInt(IdTemplate));
                RsSezioni = cdf.GetRSReadFromQuery_("select DescrizioneEstesa, TitoloSezione, Expression, Edit, CanEdit from CTL_DOC with (nolock), Document_VerbaleGara_Dettagli D where Id=D.IdHeader and Id= @id order by Pos", ApplicationCommon.Application.ConnectionString, sqlParams);
            }
            catch
            {
                throw new Exception("Errore durante il recupero delle SEZIONI del template, ripetere l'operazione");
            }
            if (RsSezioni.RecordCount == 0)
            {
                throw new Exception("Dettagli Template inesistenti, ripetere l'operazione");
            }
            else
            {
                nPosSez = 100;
                RsSezioni.MoveFirst();
                while (!RsSezioni.EOF)
                {
                    strSezione = CStr(RsSezioni["DescrizioneEstesa"]);
                    TitoloSezione = CStr(RsSezioni["TitoloSezione"]);
                    //'--GESTIONE CUSTOM DELLE SEZIONI DI TIPO Valutazione Chiarimenti ()
                    //'HandleSezioneChiarimenti strTIPOVERBALE ,TitoloSezione , strSezione

                    //'--RISOLVO SEZIONE
                    strSezione = RisolvoTestoTemplate(strSezione);
                    strSezione = strSezione.Replace("'", "''");
                    TitoloSezione = TitoloSezione.Replace("'", "''");
                    //'--CONTROLLO SE DEVE ESSERE SELEZIONATA OPPURE NO
                    string strExpSezione = "";
                    strExpSezione = CStr(RsSezioni["Expression"]).Trim();
                    int nSelSezione = 1;
                    //'--valuto Espressione della sezione
                    if (!string.IsNullOrEmpty(strExpSezione))
                    {
                        if (strExpSezione == "0")
                        {
                            nSelSezione = 0;
                        }
                    }

                    //'--INSERT SEZIONE SUL NUOVO VERBALEGARA
                    sqlParams.Clear();
                    sqlParams.Add("@idNewDoc", CInt(idNewDoc!));
                    sqlParams.Add("@nPosSez", nPosSez);
                    sqlParams.Add("@nSelSezione", CStr(nSelSezione));
                    sqlParams.Add("@TitoloSezione", TitoloSezione);
                    sqlParams.Add("@strSezione", strSezione);
                    sqlParams.Add("@Edit", CStr(RsSezioni["Edit"]));
                    sqlParams.Add("@CanEdit", CStr(RsSezioni["CanEdit"]));
                    strSQL = "insert into Document_VerbaleGara_Dettagli ( IdHeader, Pos, SelRow, TitoloSezione, DescrizioneEstesa, Edit, CanEdit )";
                    strSQL = $"{strSQL} values ( @idNewDoc, @nPosSez, @nSelSezione, @TitoloSezione, @strSezione, @Edit, @CanEdit )";
                    try
                    {
                        cdf.Execute(strSQL, CStr(ApplicationCommon.Application.ConnectionString), parCollection: sqlParams);
                    }
                    catch
                    {
                        throw new Exception($"[{strSQL}]");
                    }
                    nPosSez = nPosSez + 100;
                    RsSezioni.MoveNext();
                }
            }
        }
        else
        {
            idNewDoc = CStr(RsVerbale["Id"]);
        }
    }
    else
    {
        throw new Exception("[Seduta inesistente]");
    }
    try
    {
        FreeMemDocument(session);
    }
    catch
    {

    }
    //'--APRO IL NUOVO DOCUMENTO VERBALE DI GARA CREATO
    htmlToReturn.Write($@"<script language=javascript>


	self.location='../ctl_library/document/document.asp?UpdateParent=yes&lo=base&MODE=SHOW&JScript=VERBALEGARA&DOCUMENT=VERBALEGARA&IDDOC=" + idNewDoc + $@"';

	</script>");

    //'--RISOLVE un TESTO secondo le CONVENZIONI dei TEMPLATE
    string RisolvoTestoTemplate(string strTextInput)
    {
        int CurrLen = 0;
        string strText = string.Empty;
        string strFormat = string.Empty;
        string strHtmlData = string.Empty;

        //'-- parsing del template per la sostituzione delle parti di documento
        CurrLen = 0;

        strText = strTextInput;

        CurrLen = CurrLen + strText.Length;
        //'<div class="logo"><img src="../images/logo.gif"></div><div class="titolo">  <h1>#DATADOC id='LEGALPUB.TESTATA.Azienda.AziRagioneSociale'/#</h1><h2>#DATADOC id='TESTATA.StrutturaAziendale'/#</h2> </div>
        do
        {
            int indStart = Strings.InStr(1, strText, "#DATADOC ");
            if (indStart > 0)
            {
                //'-- prende la parte riguardante il comando dei dati da sostituire
                int indEnd = Strings.InStr(indStart, strText, "/#");
                if (indEnd > 0)
                {
                    indEnd = indEnd + 1;
                    string strDataElem = Strings.Mid(strText, indStart, indEnd - indStart + 1);
                    bCustomDataElem = false;

                    //'--DETERMINO SE E' UN ATTRIBUTO CUSTOM
                    bCustomDataElem = GetTypeDataElem(strDataElem);
                    if (bCustomDataElem)
                    {
                        string strElem = GetValueOfAttribElem(strDataElem, "id='");
                        //'-- suddivide l'elemento nelle sue componenti sezione.area.nome
                        string[] vElem = strElem.Split(".");

                        //'--recupero il valore dalla mappa custom
                        string strTechValue = mappaCampiCustom[vElem[1]];
                        if (strDataElem.Contains("SEDUTA_PDA.Data", StringComparison.Ordinal))
                        {
                            //'--se si tratta di una data recupero la forma visuale
                            strFormat = GetValueOfAttribElem(strDataElem, "format='");
                            strHtmlData = Date_Format(strTechValue, strFormat);
                        }
                        else
                        {
                            strHtmlData = strTechValue;
                        }
                    }
                    else
                    {
                        //'--RISOLVO DAL DOCUMENTO IN MEMORIA
                        strHtmlData = GetHtmlData(strDataElem, session);
                    }
                    if (CStr(strHtmlData) != "EMPTY")
                    {
                        strText = strText.Replace(strDataElem, strHtmlData);
                    }
                    else
                    {
                        strText = strText.Replace(strDataElem, "---PATTERN NON RISOLTO---");
                    }
                }
            }
        } while (InStrVb6(1, strText, "#DATADOC ") > -1 && CBool(InStrVb6(1, strText, "/#")));
        return strText;
    }
    //'--RECUPERA ATTRIBUTI CUSTOM SPECIFICI DEL VERBALE DI GARA CHE STO' CREANDO
    //TIPO??
    void RecuperaCampiCustom()
    {
        switch (contesto.ToUpper())
        {
            case "PDA_MICROLOTTI":
                RecuperaCampiCustomPDA_Microlotti();
                break;
        }
    }
    //'--RECUPERO INFO DOCUMENTO ORIGNE (PDA,BANDO_SDA,.....)
    void GetInfoDocOrigine()
    {
        TSRecordSet? Rs = null;
        switch (contesto.ToUpper())
        {
            case "PDA_MICROLOTTI":
                //'--RECUPERO INFO BANDO DALLA PDA
                try
                {
                    sqlParams.Clear();
                    sqlParams.Add("@id", CInt(IdPDA));
                    Rs = cdf.GetRSReadFromQuery_("select top 1 Oggetto, ProtocolloRiferimento, Fascicolo from CTL_DOC with (nolock), Document_PDA_TESTATA where idHeader=Id and Id=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
                }
                catch
                {
                    throw new Exception("Errore durante recupero PDA, ripetere l'operazione");
                }
                if (Rs.RecordCount == 0)
                {
                    throw new Exception("PDA inesistente, ripetere l'operazione");
                }
                else
                {
                    strOggettoBando = CStr(Rs["Oggetto"]);
                    strProtocolloBando = CStr(Rs["ProtocolloRiferimento"]);
                    strFascicolo = CStr(Rs["Fascicolo"]);
                }
                break;
            case "BANDO_SDA":
                //'--RECUPERO INFO BANDO SDA
                try
                {
                    sqlParams.Clear();
                    sqlParams.Add("@id", CInt(IdPDA));
                    Rs = cdf.GetRSReadFromQuery_("select top 1 Body, Protocollo, Fascicolo from CTL_DOC with (nolock) where Id=@id", ApplicationCommon.Application.ConnectionString, sqlParams);
                }
                catch
                {
                    throw new Exception("Errore durante recupero BANDO SDA, ripetere l'operazione");
                }
                if (Rs.RecordCount == 0)
                {
                    throw new Exception("BANDO SDA inesistente, ripetere l'operazione");
                }
                else
                {
                    strOggettoBando = CStr(Rs["Body"]);
                    strProtocolloBando = CStr(Rs["Protocollo"]);
                    strFascicolo = CStr(Rs["Fascicolo"]);
                }
                break;

        }
    }
    //'--RECUPERA I CAMPI CUSTOM PER I VERBALI DELLA PDA_MICROLOTTI
    void RecuperaCampiCustomPDA_Microlotti()
    {
        string IdMSGAgg = string.Empty;
        string IdMittenteAggiudicataria = string.Empty;
        //'--recupero info della SEDUTA
        sqlParams.Clear();
        sqlParams.Add("@idheader", IdSeduta);
        string strSQL = "select Value from CTL_DOC_Value where IdHeader=@idheader and DZT_Name in ('DataInizio')";
        TSRecordSet Rs = cdf.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString, sqlParams);
        if (Rs.RecordCount > 0)
        {
            Rs.MoveFirst();
            Rs.Filter("dzt_name='DataInizio'");
            mappaCampiCustom.Add("DataInizio", CStr(Rs["Value"]));
        }
        //'--recupero info azienda/e aggiudicatrice
        int nR = DOC_NumRow("OFFERTE", "");
        for (int i = 1; i < nR; i++)
        {
            //'if instr(1,GDOC_FieldAreaRowTecnical( "Valutazione", "statopda", "griglia" , i ),"5") > 0 then
            if (DOC_FieldRowTecnical("OFFERTE", "statoPDA", i) == "5")
            {
                IdMSGAgg = DOC_FieldRowTecnical("OFFERTE", "idMsg", i);
                sqlParams.Clear();
                sqlParams.Add("@id", CInt(IdMSGAgg));
                //'--recupero azienda mittente del messaggio
                strSQL = "select IdMittente from TAB_MESSAGGI_FIELDS where IdMsg= @id";

                TSRecordSet? RS1 = cdf.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString, sqlParams);
                if (RS1 is not null && RS1.RecordCount > 0)
                {
                    RS1.MoveFirst();
                    IdMittenteAggiudicataria = CStr(RS1["IdMittente"]);
                    sqlParams.Clear();
                    sqlParams.Add("@id", CInt(IdMittenteAggiudicataria));
                    //'recupera le info dell'azienda aggiudicatrice
                    strSQL = "select a.aziLocalitaLeg, a.aziProvinciaLeg, a.aziIndirizzoLeg, a.aziPartitaIVA, d.vatValore_FT as codicefiscale from Aziende a inner join ProfiliUtente p on a.IdAzi=p.pfuIdAzi left join DM_Attributi d on d.lnk = a.IdAzi and d.dztNome='codicefiscale' where p.IdPfu = @id";
                    TSRecordSet? RS_AZI_AGG = cdf.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString, sqlParams);
                    if (RS_AZI_AGG is not null && RS_AZI_AGG.RecordCount > 0)
                    {
                        RS_AZI_AGG.MoveFirst();
                        mappaCampiCustom.Add("LOCALITALEG", CStr(RS_AZI_AGG["aziLocalitaLeg"]));
                        mappaCampiCustom.Add("PROVINCIALEG", CStr(RS_AZI_AGG["aziProvinciaLeg"]));
                        mappaCampiCustom.Add("INDIRIZZOLEG", CStr(RS_AZI_AGG["aziIndirizzoLeg"]));
                        mappaCampiCustom.Add("PIVA", CStr(RS_AZI_AGG["aziPartitaIVA"]));
                        mappaCampiCustom.Add("codicefiscale", CStr(RS_AZI_AGG["codicefiscale"]));
                    }
                }
            }
        }
    }
    //'--DETERMINA SE IL DATA ELEMENT ANALIZZATO RIGUARDA UN ATTRIBUTO CUSTOM PRESENTE NELLA MAPPA DEI VALORI CUSTOM
    bool GetTypeDataElem(string strDataElem)
    {
        bool bcustom;
        bcustom = false;
        switch (contesto.ToUpper())
        {
            case "PDA_MICROLOTTI":
                if (InStrVb6(1, strDataElem, "SEDUTA_PDA.DataInizio") > -1 ||
                    InStrVb6(1, strDataElem, "SEDUTA_PDA.LOCALITALEG") > -1 || InStrVb6(1, strDataElem, "SEDUTA_PDA.PROVINCIALEG") > -1 ||
                    InStrVb6(1, strDataElem, "SEDUTA_PDA.INDIRIZZOLEG") > -1 || InStrVb6(1, strDataElem, "SEDUTA_PDA.PIVA") > -1 ||
                    InStrVb6(1, strDataElem, "SEDUTA_PDA.codicefiscale") > -1)
                {
                    bcustom = true;
                }
                break;
        }
        return bcustom;
    }
}
@Html.Raw(htmlToReturn.Out())
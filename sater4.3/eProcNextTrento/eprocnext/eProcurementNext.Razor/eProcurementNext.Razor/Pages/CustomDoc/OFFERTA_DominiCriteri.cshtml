@page "/CustomDoc/OFFERTA_DominiCriteri.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB;
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.verificaBrowserModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.CustomDoc.OFFERTA_DominiCriteriModel;
@using Microsoft.VisualBasic;
@model eProcurementNext.Razor.Pages.CustomDoc.OFFERTA_DominiCriteriModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();
}
@{
	//'----------------------------RIF ATTIVITA 292994 ---- PAGINA NON USATA, LA LASCIO SULLA 046 MA AL MOMENTO NON LA USA NESSUNO
	//on error goto 0
	string strOUT = string.Empty;
	string IDDOC = CStr(GetParamURL(Request.QueryString.ToString(), "IDDOC")).Trim();
	string TIPODOC = GetParamURL(Request.QueryString.ToString(), "TIPODOC").Replace("'", "''");


	validate("IDDOC", IDDOC, TIPO_PARAMETRO_INT, CInt(""), "", 0, HttpContext, session);
	validate("TIPODOC", TIPODOC, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);
	string strSQL = string.Empty;
	TSRecordSet? rs = null;
	//'--RECUPERO LE INFO PER IL DOC OFFERTA
	try
	{
		if (CStr(TIPODOC) == "OFFERTA")
		{
			var sqlParams = new Dictionary<string, object?>(); 
			sqlParams.Add("@IDDOC", CInt(IDDOC));
			strSQL = @" declare @idbando int
								 declare @idOff int 
								 set @idOff=@IDDOC
								 select @idbando=LinkedDoc from ctl_doc with(nolock) where id=@idOff 
								 select * 
										from 
													(
														select 
																'B' as NL,
																dbo.GetPos(DV.AttributoCriterio,'.', 2) as Attributo,
																Formula
																from Document_Microlotto_Valutazione DV with(nolock)
																where  DV.idheader=@idbando and DV.TipoDoc='BANDO_GARA' 
																	and DV.CriterioValutazione='quiz' and dbo.GetPos(DV.Formula,'#'+'='+'#', 2) in ( 'dominio') 
															union all
														select 
																	o.NumeroLotto as NL,
																	dbo.GetPos(DV.AttributoCriterio,'.', 2) as Attributo,
																	Formula
																from Document_MicroLotti_Dettagli o with(nolock)
																	inner join Document_MicroLotti_Dettagli DB with(nolock) on DB.TipoDoc='BANDO_GARA' and DB.IdHeader=@idbando and DB.NumeroLotto=o.NumeroLotto and DB.Voce=0
																	inner join Document_Microlotto_Valutazione DV with(nolock) on DV.TipoDoc='LOTTO' and DV.idHeader=DB.Id and DV.CriterioValutazione='quiz' 		
																	where
																	o.IdHeader = @idOff 
																	and O.TipoDoc = 'OFFERTA' 
																	and O.voce = 0
																	and dbo.GetPos(DV.Formula,'#'+'='+'#', 2) in ( 'dominio') 
														) W";

			rs = cdf.GetRSReadFromQuery_(strSQL, CStr(ApplicationCommon.Application.ConnectionString), sqlParams);

			strOUT = @"{""ATTRIBUTI"":[{";
			string DZT_NAME = string.Empty;
			string NL = string.Empty;
			string Valori = string.Empty;
			if (rs is not null && rs.RecordCount > 0)
			{
				rs.MoveFirst();
				while (!rs.EOF)
				{
					NL = $@"{NL}[""{CStr(rs["NL"])}""],";
					DZT_NAME = $@"{DZT_NAME}""{CStr(rs["Attributo"])}"",";
					Valori = $@"{Valori}[""{CStr(rs["Formula"])}""],";
					rs.MoveNext();
				}
			}
			if (!string.IsNullOrEmpty(DZT_NAME))
			{
				//'RIMUOVE LA , finale
				DZT_NAME = Strings.Mid(DZT_NAME, 1, DZT_NAME.Length - 1);
				Valori = Strings.Mid(Valori, 1, Valori.Length - 1);
				NL = Strings.Mid(NL, 1, NL.Length - 1);

				strOUT = strOUT + @"""DZT_NAME"":[" + DZT_NAME + @"],""Valori"":[" + Valori + @"],""Contesto"":[" + NL + @"]}]}";
			}
			else
			{
				strOUT = strOUT + "}]}";
			}
		}

		////{"SHOW":[{"Attributi":["Divisione_lotti","ProceduraGara","CriterioAggiudicazioneGara","Conformita"],"Valori":[[0,1,2],[15476],[15531],["No"]]}]}
		strOUT = $"1#{strOUT}";
	}
	catch(Exception ex)
	{
		strOUT = $"0#{ex.Message}";
	}

	htmlToReturn.Write(strOUT);
}
@Html.Raw(htmlToReturn.Out())
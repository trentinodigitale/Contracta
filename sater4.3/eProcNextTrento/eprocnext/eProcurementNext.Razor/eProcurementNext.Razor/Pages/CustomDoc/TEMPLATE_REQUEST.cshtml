@page "/CustomDoc/TEMPLATE_REQUEST.asp"
@inject eProcurementNext.Session.ISession session;
@inject eProcurementNext.Application.IEprocNextApplication _application;
@inject IConfiguration configuration;
@using eProcurementNext.CommonDB;
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using Microsoft.VisualBasic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.print_documentModel
@using static eProcurementNext.Core.Pages.CTL_LIBRARY.functions.DocumentPermissionModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.ctl_profiler
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel
@using static eProcurementNext.Session.SessionMiddleware
@{
    CommonDbFunctions cdf = new();
    LoadSession(HttpContext, session);
    EprocResponse htmlToReturn = new();
    dynamic TimeStartPage = DateTime.Now.Ticks;

    Layout = ConfigurationServices.GetKey("LayoutVersion", "_masterPage");

    string CMD = string.Empty;
    string titoloDocumento;
    string g_suffix;
    dynamic g_idPfu;
    dynamic g_ID_DOC;
    string g_MODULO;
    bool g_editable;
    dynamic g_Caption = "";
    string objDocument_Id;
    string g_InCaricoA;
    Dictionary<string, string> g_DomLotti = null;
    dynamic g_idBando;
    string g_idTemplate = "";
    dynamic g_TipoBando;
    string g_ElencoFieldObblig;
    string g_ElencoFieldObbligModulo;

    dynamic g_SIGN_ATTACH = "";
    dynamic g_SIGN_LOCK = "";
    dynamic g_SIGN_HASH = "";
    dynamic g_StatoDocRiferimento = "";
    dynamic g_JumpCheck = "";


    //'-- collezione di attributi
    //DA VERIFICARE IL TIPO!
    Dictionary<string, dynamic> g_col;
    Dictionary<string, dynamic> g_col_UUID;
    Dictionary<string, dynamic> g_col_UUID_new;
    Dictionary<string, dynamic> g_colObblig;
    Dictionary<string, dynamic> g_Iterazioni;
    Dictionary<string, dynamic> g_col_SelVeloce;

    //'--variabile per tracciare l'errore
    string g_strCause;

    //'-- INIT
    //set g_DomLotti = nothing

    g_ID_DOC = GetParamURL(Request.QueryString.ToString(), "IDDOC");
    string IDDOC = g_ID_DOC;
    validate("IDDOC", g_ID_DOC, TIPO_PARAMETRO_INT, 0, "", 0, HttpContext, session);

    g_MODULO = GetParamURL(Request.QueryString.ToString(), "CRITERION");
    validate("CRITERION", g_MODULO, TIPO_PARAMETRO_INT, 0, "", 0, HttpContext, session);

    g_ID_DOC = CLng(g_ID_DOC);

    string g_TipoDocCheck;

    g_TipoDocCheck = "MODULO_TEMPLATE_REQUEST";

    //'--se passato il criterio cambio doc da controllare
    if (CStr(g_MODULO) != "") {
        g_TipoDocCheck = "TEMPLATE_REQUEST_GROUP";
    }

    //'--effettuo il controllo di accesso del documento
    DocPermission(HttpContext, g_ID_DOC, g_TipoDocCheck, "", session, htmlToReturn, Request, Response);

    g_suffix = "I";
    g_idPfu = session["IdPfu"];

    string[] g_Level_LastR = new string[40];

    //'-- da definire
    g_editable = true;
    //'InCaricoA = "OE" ' "Ente"
    g_InCaricoA = "Ente";
    titoloDocumento = ApplicationCommon.CNV("Titolo TEMPLATE REQUEST");
    g_ElencoFieldObblig = "";

    //dim objDB_MTR
    CommonDbFunctions objDB_MTR = new CommonDbFunctions();

    //'-- invoco la gestione della pagina
    //call drawMasterPage("../",titoloDocumento)
    ViewData["Title"] = titoloDocumento;//Passare titolo della pagina al Layout (_masterPage.cshtml)
    ViewData["pathRoot"] = "../";//Passare la pathRoot al Layout (_masterPage.cshtml)

    g_strCause = "LoadDocument";
    try
    {
        LoadDocument();
    }
    catch(Exception ex)
    {
        ShowErrorLocal(ex);
    }

    //'-- recupero dal form i dati per conservarli in memoria
    g_strCause = "UpdateContentInMem";
    try
    {
        UpdateContentInMem();
    }
    catch(Exception ex)
    {
        ShowErrorLocal(ex);
    }

    if (!string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "COMMAND")))
    {
        g_strCause = "ExecuteCommand COMMAND=" + GetParamURL(Request.QueryString.ToString(), "COMMAND");
        try{
            ExecuteCommand(GetParamURL(Request.QueryString.ToString(), "COMMAND"));
        }
        catch(Exception ex)
        {
            ShowErrorLocal(ex);
        }
    }
    TSRecordSet? rs_SorgenteCampo = null;
    bool b_SorgenteCampo = false;

    g_strCause = "DrawHtml";
    try{
        DrawHtml();
    }
    catch (Exception ex)
    {
        ShowErrorLocal(ex);
    }

    //'-- metto in memoria il documento
    g_strCause = "SaveInMem";
    try{
        SaveInMem(session);
    }
    catch (Exception ex)
    {
        ShowErrorLocal(ex);
    }

    //'--------------------------------
    //'-- recupera il valore di default data la sorgente
    //'--------------------------------

    dynamic InitDefalutValue(dynamic SorgenteCampo)
    {
        dynamic dynToReturn = "";
        //InitDefalutValue = ""

        //'---------------------------------------------
        //'-- LA FUNZIONE è DA OTTIMIZZARE SI DEVONO PORTARE LE TRE SORGENTI DI DATI IN TRE RECORDSET PER ESSERE RECUPERATI DIRETTAMENTE
        //'-- EVITANDO DI RIFARE LA QUERY PER TUTTI I DATI
        //'---------------------------------------------
        //'set rs = objDB_MTR.GetRSReadFromQuery( "SELECT  dbo.ESPD_FIELD_DEFAULT_VALUE_FROM_SORGENTE( " & g_id_doc & " , '" & SorgenteCampo  & "' ) as Valore   ", Application("ConnectionString"))
        //'if rs.recordcount > 0 ) {
        //'	rs.movefirst
        //'	InitDefalutValue = rs.fields("Valore").value
        //'}

        if (!b_SorgenteCampo)
        {
            b_SorgenteCampo = true;
            rs_SorgenteCampo = objDB_MTR.GetRSReadFromQuery_("exec ESPD_FIELD_DEFAULT_VALUE  " + g_ID_DOC + " ", ApplicationCommon.Application.ConnectionString);

            if (rs_SorgenteCampo.RecordCount > 0)
            {
                rs_SorgenteCampo.MoveFirst();
            }
            else
            {
                rs_SorgenteCampo = null;
            }
        }

        if (rs_SorgenteCampo is not null)
        {
            try
            {
                dynToReturn = GetValueFromRS(rs_SorgenteCampo.Fields[SorgenteCampo]);
            }
            catch
            {

            }
        }

        return dynToReturn;
    }

    //'--------------------------------
    //'-- gestione die comandi invocati sul documento
    //'--------------------------------
    void ExecuteCommand(string CMD)
    {
        int numItem;
        string[] vcommand = Strings.Split(CMD, ".");

        switch (vcommand[0])
        {
            case "SAVE":
                Save();
                break;
            case "ADDITEM":
                string[] v = Strings.Split(vcommand[1], "@@@");
                string ix = v[0] + "@@@" + v[1];

                if (g_Iterazioni.ContainsKey(ix) == true)
                {
                    numItem = CInt(g_Iterazioni[ix]);
                    g_Iterazioni[ix] = (numItem + 1);
                }
                else
                {
                    g_Iterazioni.Add(ix, "2");
                }

                break;
            case "SIGN_ERASE":
                var sqlParams = new Dictionary<string, object?>();
                sqlParams.Add("@g_ID_DOC", CInt(g_ID_DOC));
                sqlParams.Add("@g_idPfu", CInt(g_idPfu));
                objDB_MTR.Execute(CStr("exec ESPD_SIGN_ERASE @g_ID_DOC, @g_idPfu"), ApplicationCommon.Application.ConnectionString, parCollection: sqlParams);
                LoadDocument();

                break;
            case "RELOAD":

                //'-- toglie dalla sessione il flag per indicare che il documento è in memoria
                objDocument_Id = "MODULO_TEMPLATE_REQUEST";
                string strSecName = $"DOC_SEC_MEM_{objDocument_Id}_{g_ID_DOC}";
                session[strSecName] = "";

                //'-- reinnesca il caricamento
                LoadDocument();
                break;
            case "DELITEM":
                v = Strings.Split(vcommand[1], "@@@");
                ix = $"{v[0]}@@@{v[1]}";

                if (g_Iterazioni.ContainsKey(ix) == true)
                {
                    numItem = CInt(g_Iterazioni[ix]);
                    numItem = numItem - 1;
                    if (numItem <= 0)
                    {
                        numItem = 1;
                    }
                    g_Iterazioni[ix] = numItem;
                }
                else
                {
                    g_Iterazioni.Add(ix, "1");
                }
                break;
            default:
                break;
        }
    }

    //'--------------------------------
    //'-- rendo persistenti i dati in memoria sul DB
    //'--------------------------------
    void Save()
    {
        if (!g_editable)
        {
            return;
        }

        string cmdSQL;

        var sqlParams = new Dictionary<string, object?>();
        sqlParams.Add("@g_ID_DOC", CInt(g_ID_DOC));
        if (string.IsNullOrEmpty(g_MODULO))
        {
            //'-- cancello tutti i dati del documento
            objDB_MTR.Execute("delete from  CTL_DOC_Value where idheader = @g_ID_DOC and DSE_ID in ( 'MODULO','ITERAZIONI' , 'OBBLIGATORI' ) ", ApplicationCommon.Application.ConnectionString, parCollection: sqlParams);
        }
        else
        {
            //'-- elimino tutti i record relativi al modulo
            foreach (var item in g_col)
            {
                var R = item.Key;
                objDB_MTR.Execute(CStr("delete from CTL_DOC_Value where  idheader = @g_ID_DOC and DSE_ID = 'MODULO' and dzt_name = '" + R + "' "), ApplicationCommon.Application.ConnectionString, parCollection: sqlParams);
            }

            //'-- elimino le iterazioni del modulo
            foreach (var item in g_Iterazioni)
            {
                var R = item.Key;
                objDB_MTR.Execute(CStr("delete from CTL_DOC_Value where  idheader = @g_ID_DOC and DSE_ID = 'ITERAZIONI' and dzt_name = '" + R + "' "), ApplicationCommon.Application.ConnectionString, parCollection: sqlParams);
            }

            //'-- elimino la collezione di campi obbligatori precedentemente salvata
            foreach (var item in g_colObblig)
            {
                var R = item.Key;
                objDB_MTR.Execute(CStr("delete from CTL_DOC_Value where  idheader = @g_ID_DOC and DSE_ID = 'OBBLIGATORI' and dzt_name = '" + R + "' "), ApplicationCommon.Application.ConnectionString, parCollection: sqlParams);
            }
        }

        //'-- salvo i dati
        foreach (var item in g_col)
        {
            var R = item.Key;
            if (Strings.Right(R, 2) != "_V" && Strings.Right(R, 9) != "_edit_new" && Strings.Right(R, 5) != "_edit")
            {
                cmdSQL = "insert into CTL_DOC_Value( idheader , DSE_ID , Row ,dzt_name, Value ) values( @g_ID_DOC, 'MODULO' , 0 ,'" + R + "' , '" + Strings.Replace(g_col[R], "'", "''") + "' )";
                objDB_MTR.Execute(cmdSQL, ApplicationCommon.Application.ConnectionString, parCollection: sqlParams);
            }
        }

        //'-- salvo il numero di iterazioni
        foreach (var item in g_Iterazioni)
        {
            var R = item.Key;
            cmdSQL = "insert into CTL_DOC_Value( idheader , DSE_ID , Row , dzt_name, Value ) values( @g_ID_DOC, 'ITERAZIONI' , 0 , '" + R + "' , '" + g_Iterazioni[R].Replace("'", "''") + "' )";
            objDB_MTR.Execute(cmdSQL, ApplicationCommon.Application.ConnectionString, parCollection: sqlParams);
        }

        //'-- salvo il numero di iterazioni
        foreach (var item in g_colObblig)
        {
            var R = item.Key;
            cmdSQL = "insert into CTL_DOC_Value( idheader , DSE_ID , Row , dzt_name, Value ) values( @g_ID_DOC, 'OBBLIGATORI' , 0 , '" + R + "' , '" + g_colObblig[R].Replace("'", "''") + "' )";
            objDB_MTR.Execute(cmdSQL, ApplicationCommon.Application.ConnectionString, parCollection: sqlParams);
        }

        //'-- salvo GLI UUID_MANCANTI
        foreach (var item in g_col_UUID_new)
        {
            var R = item.Key;

            var sqlP = new Dictionary<string, object?>();
            sqlP.Add("@uuidNewR", g_col_UUID_new[R]);
            sqlP.Add("@g_ID_DOC", CInt(g_ID_DOC));
            sqlP.Add("@R", R);

            //cmdSQL = "insert into CTL_DOC_Value( idheader , DSE_ID , Row ,dzt_name, Value ) values( " + g_ID_DOC + " , 'UUID' , 0 ,'" + R + "' , '" + g_col_UUID_new[R].Replace("'", "''") + "' )"
            cmdSQL = "if not exists( select idrow from CTL_DOC_Value with (nolock) where idheader = " + g_ID_DOC + " and DSE_ID = 'UUID' and row = 0 and dzt_name = '" + R + "' ) begin insert into CTL_DOC_Value( idheader , DSE_ID , Row ,dzt_name, Value ) values( " + g_ID_DOC + " , 'UUID' , 0 ,'" + R + "' , '" + Strings.Replace(g_col_UUID_new[R], "'", "''") + "') end ";
            //'response.write cmdSQL
            //'response.end
            objDB_MTR.Execute(cmdSQL, ApplicationCommon.Application.ConnectionString);

            //'-- li aggiungo alla collezione degli UUID già creati per non ricrearli
            if (g_col_UUID.ContainsKey(R) == false){
                g_col_UUID.Add(R, g_col_UUID_new[R]);
            }
        }
        //'-- svuoto la collezione ricreandola
        g_col_UUID_new = new Dictionary<string, dynamic>();// CreateObject("Scripting.Dictionary")

        //'-- se il documento è in carico all'ente
        if (g_InCaricoA == "Ente")
        {
            //'--  evidenziamo sul template la compilazione degli obbligatori
            objDB_MTR.Execute("exec TEMPLATE_CONTEXT_EVIDENCE_OBBLIG " + g_ID_DOC + " , '" + g_MODULO + "'", ApplicationCommon.Application.ConnectionString);

            //'-- aggiorno la memoria del template se presente in sessione per consentire l'aggiornamento del documento delle spunte
            UpdateMemTemplateObblig();
        }

        //'-- generiamo gli UUID per la compilazione della REQUEST E DELLA RESPONSE
        objDB_MTR.Execute("exec TEMPLATE_CONTEXT_GENERATE_UUID_REQUEST " + g_ID_DOC + " , '" + g_MODULO + "'", ApplicationCommon.Application.ConnectionString);

        //'-- dopo il salvataggio sarebbe meglio ricaricare
    }

    //'-- aggiorno la memoria del template se presente in sessione per consentire l'aggiornamento del documento delle spunte
    void UpdateMemTemplateObblig()
    {
        TSRecordSet rs = objDB_MTR.GetRSReadFromQuery_("SELECT * from ctl_doc_value with (nolock) where idheader = " + g_idTemplate + " and DSE_ID = 'VALORI' and  DZT_Name = 'EsitoRiga'   order by row ", ApplicationCommon.Application.ConnectionString);
        if (rs.RecordCount > 0)
        {
            rs.MoveFirst();
            while (rs.EOF == false)
            {
                Save_DOC_MatrixValue("TEMPLATE_CONTEST", g_idTemplate, "VALORI", 10, CInt(rs.Fields["row"]), CStr(rs.Fields["Value"]), session);

                rs.MoveNext();
            }
        }
    }

    //'--------------------------------
    //'-- recupera la collezione di valori o dal DB o dalla memoria se il documento è in memoria
    //'--------------------------------
    void LoadDocument()
    {
        //'-----------------------------------------------------------
        //'-- verifico il documento a chi è in carico e se è editabile
        //'-----------------------------------------------------------
        if (GetParamURL(Request.QueryString.ToString(), "lo") != "print")
        {
            //'--verifico la presenza della firma per determinare l'iditabilit͊
            TSRecordSet rs = objDB_MTR.GetRSReadFromQuery_("SELECT isnull( d.SIGN_LOCK , '' ) as SIGN_LOCK , isnull( d.SIGN_ATTACH , '' ) as SIGN_ATTACH , isnull( d.SIGN_HASH , '' ) as SIGN_HASH , case when isnull( aziAcquirente , -1 ) <> 0 then 'Ente' else 'OE' end InCaricoA , isnull( d.Caption , '' ) as Caption , isnull( R.StatoFunzionale , '' ) as StatoDocRiferimento , isnull(d.jumpcheck,'') as Jumpcheck from ctl_doc d with(nolock) left join aziende a with(nolock)  ON D.AZIENDA = A.IDAZI left join CTL_DOC R with(nolock) on R.id = d.linkeddoc where d.id  = " + g_ID_DOC + " ", ApplicationCommon.Application.ConnectionString);
            g_editable = false;
            if (rs.RecordCount > 0)
            {
                rs.MoveFirst();
                if (CStr(rs["SIGN_HASH"]) == "" && CStr(rs["StatoDocRiferimento"]) == "InLavorazione")
                {
                    g_editable = true;
                }

                g_InCaricoA = CStr(rs["InCaricoA"]);
                g_Caption = CStr(rs["Caption"]);

                g_SIGN_ATTACH = CStr(rs["SIGN_ATTACH"]);
                g_SIGN_LOCK = CInt(rs["SIGN_LOCK"]!);
                g_SIGN_HASH = CStr(rs["SIGN_HASH"]);
                g_StatoDocRiferimento = CStr(rs["StatoDocRiferimento"]);

                g_JumpCheck = CStr(rs["Jumpcheck"]);

                htmlToReturn.Write("<!-- IN CARICO A [" + g_InCaricoA + "] -->");
            }
        }
        else
        {
            g_InCaricoA = "OE";
            g_editable = false;
        }

        objDocument_Id = "MODULO_TEMPLATE_REQUEST";
        string strSecName = "DOC_SEC_MEM_" + objDocument_Id + "_" + g_ID_DOC;

        //'-----------------------------------------------------------
        //'-- verifico se il documento è in memoria, in questo caso recupero la colelzione dalla memoria
        //'-----------------------------------------------------------
        if (session[strSecName] == "yes" && g_editable == true)
        {
            g_col = session[strSecName + "_Value"];
            g_Iterazioni = session[strSecName + "_Iterazioni"];
            g_colObblig = session[strSecName + "_Obbligatori"];
            g_col_UUID = session[strSecName + "_UUID"];
            g_col_UUID_new = session[strSecName + "_UUID_new"];
            g_col_SelVeloce = session[strSecName + "_SelVeloce"];
            g_idBando = session[strSecName + "_IdBando"];
            g_idTemplate = session[strSecName + "_IdTemplate"];
            g_TipoBando = session[strSecName + "_TipoBando"];
        }
        else
        {
            //'-- altrimenti lo carico dal db
            TSRecordSet rs = objDB_MTR.GetRSReadFromQuery_("SELECT DZT_Name, isnull(Value,'') as Value from ctl_doc_value with (nolock) where idheader = " + g_ID_DOC + " and DSE_ID = 'MODULO'  order by idrow ", ApplicationCommon.Application.ConnectionString);

            g_col = new Dictionary<string, dynamic>();//CreateObject("Scripting.Dictionary")

            if (rs.RecordCount > 0)
            {
                rs.MoveFirst();

                while (!rs.EOF)
                {
                    g_col.Add(CStr(rs["DZT_Name"]), CStr(rs["Value"]));
                    rs.MoveNext();
                }
            }

            //'-- carico le iterazioni dei gruppi
            rs = objDB_MTR.GetRSReadFromQuery_("SELECT DZT_Name, isnull(Value,'') as Value from ctl_doc_value with (nolock) where idheader = " + g_ID_DOC + " and DSE_ID = 'ITERAZIONI'  order by idrow ", ApplicationCommon.Application.ConnectionString);

            g_Iterazioni = new Dictionary<string, dynamic>();//CreateObject("Scripting.Dictionary")

            if (rs.RecordCount > 0)
            {// ) {
                rs.MoveFirst();

                while (rs.EOF == false)
                {
                    g_Iterazioni.Add(CStr(rs.Fields["DZT_Name"]), rs.Fields["Value"]);

                    rs.MoveNext();
                }
            }

            //'-- carico gli UUID già definiti per non crearli nuovamente

            rs = objDB_MTR.GetRSReadFromQuery_("SELECT * from ctl_doc_value with (nolock) where idheader = " + g_ID_DOC + " and DSE_ID = 'UUID'  order by idrow ", ApplicationCommon.Application.ConnectionString);

            g_col_UUID = new Dictionary<string, dynamic>();//CreateObject("Scripting.Dictionary")
            g_col_UUID_new = new Dictionary<string, dynamic>();//CreateObject("Scripting.Dictionary")

            if (rs.RecordCount > 0)
            {
                rs.MoveFirst();

                while (rs.EOF == false)
                {
                    if (!g_col_UUID.ContainsKey(CStr(rs.Fields["DZT_Name"])))
                    {
                        g_col_UUID.Add(CStr(rs["DZT_Name"]), CStr(rs["Value"]));
                    }

                    rs.MoveNext();
                }
            }

            //'-- creo la collezione dei campi obbligatori per consentire il salvataggio, non serve caricarlo perchè si rigenera sempre

            g_colObblig = new Dictionary<string, dynamic>();//CreateObject("Scripting.Dictionary")

            //'-- recupero il bando a cui L'ESPD è collegato navigando all'indietro

            rs = objDB_MTR.GetRSReadFromQuery_("SELECT dbo.GetIdTemplateComtest(  " + IDDOC + " ) AS idTemplate ", ApplicationCommon.Application.ConnectionString);
            g_idTemplate = CStr(rs["idTemplate"]);

            rs = objDB_MTR.GetRSReadFromQuery_("SELECT linkedDoc from ctl_doc with(nolock) where id =  " + g_idTemplate + "  ", ApplicationCommon.Application.ConnectionString);
            g_idBando = rs.Fields["linkedDoc"];

            rs = objDB_MTR.GetRSReadFromQuery_("SELECT tipoDoc from ctl_doc with(nolock) where id =  " + g_idBando + "  ", ApplicationCommon.Application.ConnectionString);
            g_TipoBando = rs.Fields["tipoDoc"];

            //'--creo la collezione per gli attributi a selzione veloce
            g_col_SelVeloce = new Dictionary<string, dynamic>();//CreateObject("Scripting.Dictionary")
        }
    }

    //'--------------------------------
    //'-- recupera dal form tutti i valori che sono arrivati mettendoli nella collezione globale
    //'--------------------------------
    void UpdateContentInMem()
    {
        if (!Request.HasFormContentType)
        {
            return;
        }
        //'-- manca la gestione dei radio

        foreach (var item in Request.Form)
        {
            var R = item.Key;
            if (Strings.Right(R, 2) != "_V" && Strings.Right(R, 9) != "_edit_new" && Strings.Right(R, 5) != "_edit")
            {
                if (g_col.ContainsKey(R) == true)
                {
                    g_col[R] = item.Value;//request.form( R )
                }
                else
                {
                    //'-- se non è presente lo aggiungo
                    if (Strings.Left(R, 4) == "MOD_")
                    {
                        g_col.Add(R, item.Value);//request.form( R )
                    }
                }
            }
        }

        // '--aggiorno nella collezione dei valori tutti i campi a selezioneveloce che sono checkbox e che se non sono spuntati
        //'--non arrivano nel form e quindi verrebbe lasciato il valore precedente fatto al caricamento
        foreach (var Sel_Veloce in g_col_SelVeloce)
        {
            var RSel_Veloce = Sel_Veloce.Key;
            // 'response.write RSel_Veloce & "---" & request.form ( RSel_Veloce ) & "<br>"

            //'--se non arriva nel form allora lo metto a off in base dati
            if ((GetValueFromForm(Request, RSel_Veloce) == null) || string.IsNullOrEmpty(CStr(GetValueFromForm(Request, RSel_Veloce))))
            {
                g_col[RSel_Veloce] = "";
            }
        }
    }

    //'--------------------------------
    //'-- disegna tutto il documento
    //'--------------------------------
    void DrawHtml()
    {
        //'--------------------------------------
        //'-- disegno la caption
        //'--------------------------------------
        g_strCause = g_strCause + " - disegno la caption";
        eProcurementNext.HTML.Caption obj = new eProcurementNext.HTML.Caption();//createobject( "CtlHtml.Caption" )

        if (IsMasterPageNew())
        {
            htmlToReturn.Write($@"
                <table width=""100%"" class=""Caption"" border=""0"" cellspacing=""0"" cellpadding=""0"">
                    <tbody>
                        <tr class=""pageTitle"">
                            <td> " + CStr(g_Caption) + $@" </td>
                        </tr>
                    </tbody>
                </table>
            ");
        }
        else
        {
            htmlToReturn.Write(obj.SetCaption(CStr(g_Caption)));
        }

        //'--aggiungo campo nascosto con la caption per il genera pdf che la recupera come nome file
        htmlToReturn.Write($@"<input type=""hidden"" name=""Caption""  id=""Caption""  value=""" + HtmlEncode(CStr(g_Caption)) + @""" />" + Environment.NewLine);

        //'--aggiungo campo nascosto con JumpCheck per il genera pdf che la recupera come nome file
        htmlToReturn.Write($@"<input type=""hidden"" name=""JumpCheck""  id=""JumpCheck""  value=""" + HtmlEncode(CStr(g_JumpCheck)) + @""" />" + Environment.NewLine);

        //'-- disegno il frame nascosto per eseguire ADDITEM e DELITEM
        htmlToReturn.Write(@"<iframe frameborder=""0"" width=""100%"" heigth=""200px;"" id=""DGUE_Command"" name=""DGUE_Command"" src=""../ctl_library/loading.html"" marginheight=""0"" marginwidth=""0"" style=""display:none;"" ></iframe>");

        //'--------------------------------------
        //'-- disegno la toolbar
        //'--------------------------------------
        g_strCause = g_strCause + " - disegno la toolbar";
        if ((GetParamURL(Request.QueryString.ToString(), "lo")).ToLower() == "base")
        {
            Toolbar ObjToolbar = eProcurementNext.BizDB.Lib_dbFunctions.GetHtmlToolbar(CStr("MODULO_TEMPLATE_REQUEST_VER2_TOOLBAR_DOCUMENT"), CStr(session["Funzionalita"]), CStr(g_suffix), ApplicationCommon.Application.ConnectionString, session);

            TSRecordSet rs = objDB_MTR.GetRSReadFromQuery_("select * from CTL_DOC with(nolock) where id = " + g_ID_DOC + " ", ApplicationCommon.Application.ConnectionString);

            ObjToolbar.strPath = "../images/toolbar/";
            ObjToolbar.mp_accessible = "YES";

            int j = 1;
            while (j <= ObjToolbar.Buttons.Count)
            {
                //'-- se il documento non è editabile
                if (ObjToolbar.Buttons.ElementAt(j - 1).Value.Id == "SAVEDOC" && g_editable == false)
                {
                    ObjToolbar.Buttons.ElementAt(j - 1).Value.Enabled = false;
                }

                //'-- se in carico all'OE tolgo il comando per ShowPDF
                if (ObjToolbar.Buttons.ElementAt(j - 1).Value.Id == "PRINT" && g_InCaricoA == "OE")
                {
                    ObjToolbar.Buttons.Remove(ObjToolbar.Buttons.ElementAt(j - 1).Key);
                }

                //'-- se in carico all'OE tolgo il comando per la request
                if (ObjToolbar.Buttons.ElementAt(j - 1).Value.Id == "XMLREQ" && g_InCaricoA == "OE")
                {
                    ObjToolbar.Buttons.Remove(ObjToolbar.Buttons.ElementAt(j - 1).Key);
                }

                //'-- se in carico all'Ente tolgo il comando per la response
                if (ObjToolbar.Buttons.ElementAt(j - 1).Value.Id == "XMLRES" && g_InCaricoA == "Ente")
                {
                    ObjToolbar.Buttons.Remove(ObjToolbar.Buttons.ElementAt(j - 1).Key);
                }

                //'-- se in carico all'Ente tolgo il comando per la load response
                if (ObjToolbar.Buttons.ElementAt(j - 1).Value.Id == "LXMLRES")
                {
                    if (g_InCaricoA == "Ente")
                    {
                        ObjToolbar.Buttons.Remove(ObjToolbar.Buttons.ElementAt(j - 1).Key);
                    }
                    else
                    {
                        //'-- se il doc non è editabile disattivo la load
                        if (g_editable == false)
                        {
                            ObjToolbar.Buttons.ElementAt(j - 1).Value.Enabled = false;
                        }
                    }
                }

                j = j + 1;
            }

            ObjToolbar.Html(htmlToReturn);
        }

        //'--------------------------------------
        //'-- campi di servizio
        //'--------------------------------------
        g_strCause = g_strCause + " - campi di servizio";
        htmlToReturn.Write($@"<input type=""hidden"" name=""DOCUMENT_READONLY""  id=""DOCUMENT_READONLY""  value=""" + IIF(g_editable = true, "0", "1") + @""" />" + Environment.NewLine);

        htmlToReturn.Write($@"<input type=""hidden"" name=""IDDOC""  id=""IDDOC""  value=""" + g_ID_DOC + @""" />" + Environment.NewLine);

        htmlToReturn.Write($@"<input type=""hidden"" name=""CommandQueryString""  id=""CommandQueryString""  value=""IDDOC=" + g_ID_DOC + @"&CRITERION=" + g_MODULO + @"&jscript=MODULO_TEMPLATE_REQUEST_VER2&lo=base");
        htmlToReturn.Write($@"&VER=" + GetParamURL(Request.QueryString.ToString(), "VER") + @""" />" + Environment.NewLine);

        htmlToReturn.Write($@"<input type=""hidden"" name=""PrintQueryString""  id=""PrintQueryString""  value=""&CRITERION=" + g_MODULO + @"&jscript=MODULO_TEMPLATE_REQUEST_VER2&VER=" + GetParamURL(Request.QueryString.ToString(), "VER") + @""" />" + Environment.NewLine);

        htmlToReturn.Write($@"<input type=""hidden"" name=""TYPEDOC""  id=""TYPEDOC""  value=""MODULO_TEMPLATE_REQUEST"" />" + Environment.NewLine);
        htmlToReturn.Write($@"<input type=""hidden"" name=""SUFFIX_LANGUAGE""  id=""SUFFIX_LANGUAGE""  value=""" + g_suffix + @""" />" + Environment.NewLine);
        htmlToReturn.Write($@"<input type=""hidden"" name=""codicefiscale""  id=""codicefiscale""  value="""" />" + Environment.NewLine);

        htmlToReturn.Write($@"<input type=""hidden"" name=""INCARICOA""  id=""INCARICOA""  value=""" + g_InCaricoA + @""" />" + Environment.NewLine);

        htmlToReturn.Write($@"<input type=""hidden"" name=""SIGN_ATTACH""  id=""SIGN_ATTACH""  value=""" + g_SIGN_ATTACH + @""" />" + Environment.NewLine);
        htmlToReturn.Write($@"<input type=""hidden"" name=""SIGN_LOCK""  id=""SIGN_LOCK""  value=""" + g_SIGN_LOCK + @""" />" + Environment.NewLine);
        htmlToReturn.Write($@"<input type=""hidden"" name=""SIGN_HASH""  id=""SIGN_HASH""  value=""" + g_SIGN_HASH + @""" />" + Environment.NewLine);
        htmlToReturn.Write($@"<input type=""hidden"" name=""StatoDocRiferimento""  id=""StatoDocRiferimento""  value=""" + g_StatoDocRiferimento + @""" />" + Environment.NewLine);

        //'--------------------------------------
        //'-- apro la div che contiene il contenuto del documento
        //'--------------------------------------
        htmlToReturn.Write($@"<div class=""ModuloBootstrap"" >");
        //Codice originale:
        //htmlToReturn.Write($@"<div class=""cover"" id=""" + Id + @""" name=""" + Id + @"""  >");
        htmlToReturn.Write($@"<div class=""cover"" id=""" + "" + @""" name=""" + "" + @"""  >");

        htmlToReturn.Write($@"<form ID=""FORMDOCUMENT"" name=""FORMDOCUMENT"" method=""post"" enctype="""" action="""" >");
        htmlToReturn.Write($@"<fieldset>");

        if (g_InCaricoA == "OE")
        {
            g_strCause = g_strCause + " - DisplayFirma";
            DisplayFirma(g_SIGN_ATTACH);
        }

        htmlToReturn.Write($@"<input type=""hidden"" name=""Note""  id=""Note""  value=""" + GetParamURL(Request.QueryString.ToString(), "Note") + @""" />" + Environment.NewLine);

        g_strCause = g_strCause + " - drawModuleTemplate";
        drawModuleTemplate();

        htmlToReturn.Write($@"</fieldset>");
        htmlToReturn.Write($@"</form>");

        htmlToReturn.Write($@"</div>");
        htmlToReturn.Write($@"</div>");

        if (g_ElencoFieldObblig.Length > 0)
        {
            //'-- toglie l'ultima virgola
            g_ElencoFieldObblig = Strings.Left(g_ElencoFieldObblig, (g_ElencoFieldObblig.Length) - 1);
            //'g_ElencoFieldObblig = replace(  g_ElencoFieldObblig , "'" , """" )
        }

        g_ElencoFieldObblig = "[" + g_ElencoFieldObblig + "]";

        htmlToReturn.Write($@"<input type=""hidden"" name=""ElencoFieldObblig""  id=""ElencoFieldObblig""  value=""" + g_ElencoFieldObblig + @""" />" + Environment.NewLine);

        //'-- disegno il frame nascosto per eseguire ADDITEM e DELITEM
        htmlToReturn.Write(@"<iframe frameborder=""0"" width=""100%"" heigth=""200px;"" id=""DGUE_Command"" name=""DGUE_Command"" src=""../ctl_library/loading.html"" marginheight=""0"" marginwidth=""0"" style=""display:none;"" ></iframe>");

        //'-- se ho richiesto il SALVA e sono arrivato qui mostro il messaggio "Salvataggio effettuato correttamente"
        if (GetParamURL(Request.QueryString.ToString(), "COMMAND") == "SAVE")
        {
            htmlToReturn.Write(@"script language=""javascript"">");
            htmlToReturn.Write(@"        DMessageBox('../', 'Salvataggio - Correttamente eseguito', 'Informazione', 1, 400, 300);");
            htmlToReturn.Write(@"</script>");
        }

        //'-- se ho eseguito ADDITEM/DELITEM inserisco codice javascript per aggiornare il DGUE del frame nasconsto

        string qTest = GetParamURL(Request.QueryString.ToString(), "COMMANND");

        if (!String.IsNullOrEmpty(qTest))
        {
            CMD = qTest;
            string[] vcommand = qTest.Split('.');

            if (vcommand[0] == "ADDITEM" || vcommand[0] == "DELITEM")
            {
                htmlToReturn.Write(@"<script type=""text/javascript"">");
                htmlToReturn.Write(@" parent.getObj('Contenitore_" + g_MODULO + "').innerHTML = getObj('Contenitore_" + g_MODULO + "').innerHTML ; ");
                //'--invoco sul padre la funzione per IDENTIFIER_LOT per cambiare onclick
                htmlToReturn.Write(@"  parent.Change_OnClick_Identifier_lot();");
                htmlToReturn.Write(@"  parent.ShowWorkInProgress(false);");
                htmlToReturn.Write(@"</script>");
            }
        }
    }

    //'-- Funzione specifica per ogni pagina di template
    void drawModuleTemplate()
    {
        dynamic IDDOC;
        string idTemplate;
        string SqlFilter;

        IDDOC = g_ID_DOC;

        SqlFilter = "";

        //'on error resume next

        string KeyGruppoAperto = "";
        int Gruppo_Aperto = 0;
        int Parte_aperta = 0;

        //'-- LEGGO IL DOCUMENTO ctl_doc

        //'-- CERCO IL TEMPLATE'
        //'set rs = objDB_MTR.GetRSReadFromQuery( "SELECT dbo.GetIdTemplateComtest(  " & IDDOC & " ) AS idTemplate ", Application("ConnectionString"))
        //'idTemplate = rs.fields("idTemplate").value
        idTemplate = g_idTemplate;

        //'-- verifico se richiesto un filtro sul modulo
        if (!string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "CRITERION")))
        {
            SqlFilter = " and idModulo = '" + GetParamURL(Request.QueryString.ToString(), "CRITERION").Replace("'", "''") + "' ";
        }
        //'-- Recupero tutte le parti del template ordinate
        //'htmlToReturn.Write($@"select * from TEMPLATE_REQUEST_PARTS where idTemplate = " & idTemplate
        TSRecordSet rs = objDB_MTR.GetRSReadFromQuery_("select * from TEMPLATE_REQUEST_PARTS where idTemplate = " + idTemplate + SqlFilter + " order by row ", ApplicationCommon.Application.ConnectionString);

        //'-- ciclo su tutte le parti del template per effettuare il disegno del modulo
        if (rs.RecordCount > 0)
        {
            rs.MoveFirst();
            //'modello =  rs.fields("Modello").value
            //'response.write modello & vbcrlf

            while (rs.EOF == false)
            {
                string REQUEST_PART = CStr(rs.Fields["REQUEST_PART"]);
                string Descrizione = CStr(rs.Fields["Descrizione"]);
                string TEMPLATE_REQUEST_GROUP = CStr(rs.Fields["TEMPLATE_REQUEST_GROUP"]);
                string KeyRiga = CStr(rs.Fields["KeyRiga"]);
                string idModulo = CStr(rs.Fields["idModulo"]);
                var Editabile = rs.Fields["Editabile"];

                if (REQUEST_PART == "Parti")
                {
                    //'-- se era apert un gruppo devo chiuderlo
                    if (Gruppo_Aperto == 1)
                    {
                        htmlToReturn.Write($@"</div></div></div>" + Environment.NewLine + "<!-- Chiusura Sezione " + KeyGruppoAperto + " -->" + Environment.NewLine);

                        Gruppo_Aperto = 0;
                    }

                    //'-- se era aperta una parte devo chiuderla
                    if (Parte_aperta == 1)
                    {
                        htmlToReturn.Write($@"</div>" + Environment.NewLine + "<!-- Chiusura PARTE -->" + Environment.NewLine);
                    }

                    //'-- Apro una nuova parte del modulo
                    htmlToReturn.Write($@"<div class=""panel-default""> <div> <h2><span>" + Descrizione + "</span></h2></div>");
                    Parte_aperta = 1;
                }

                if (REQUEST_PART == "Gruppo")
                {
                    //'-- se era apert un gruppo devo chiuderlo
                    if (Gruppo_Aperto == 1)
                    {
                        htmlToReturn.Write($@"</div></div></div>" + Environment.NewLine + "<!-- Chiusura Sezione " + KeyGruppoAperto + " -->" + Environment.NewLine);
                    }

                    htmlToReturn.Write(Environment.NewLine + "<!-- Apertura Sezione " + KeyRiga + " -->" + Environment.NewLine);
                    htmlToReturn.Write($@"<div class=""panel panel-espd"">");
                    htmlToReturn.Write($@"<div class=""panel-heading"" data-toggle=""collapse"" data-target=""#" + KeyRiga + @""">");
                    htmlToReturn.Write($@"<h4 class=""panel-title"">");
                    htmlToReturn.Write($@"<span data-i18n=""crit_top_title_grounds_criminal_conv"">" + Descrizione + "</span>");
                    htmlToReturn.Write($@"</h4></div>");

                    htmlToReturn.Write($@"<div id=""" + KeyRiga + @""" class=""collapse in"">");
                    htmlToReturn.Write($@"<div class=""espd-panel-body panel-body"">");

                    Gruppo_Aperto = 1;
                    KeyGruppoAperto = KeyRiga;
                }

                if (REQUEST_PART == "Commenti")
                {
                    //'-- per ogni attributo presente nel modulo si itera il processo
                    htmlToReturn.Write($@"<div class=""PanelCommenti"" >" + ReplaceBr(Descrizione, Environment.NewLine, "<br />") + "</div>" + Environment.NewLine);
                }

                if (REQUEST_PART == "Titolo")
                {
                    //'-- per ogni attributo presente nel modulo si itera il processo
                    htmlToReturn.Write($@"<div class=""PanelTitolo"" >" + ReplaceBr(Descrizione, Environment.NewLine, "<br />") + "</div>" + Environment.NewLine);
                }

                if (REQUEST_PART == "Modulo" && !string.IsNullOrEmpty(idModulo))
                {
                    //'-- per ogni attributo presente nel modulo si itera il processo
                    htmlToReturn.Write(Environment.NewLine + "<!--  Modulo : [" + TEMPLATE_REQUEST_GROUP + "] -->" + Environment.NewLine);
                    //'--htmlToReturn.Write($@"select dbo.GetHtmlModuloRequest( " & idModulo & " , '" & KeyRiga & "' , " & idDocInUse & " ,'' , '" & g_InCaricoA & "' ) as html "
                    //'--set rsMod = objDB_MTR.GetRSReadFromQuery( "select dbo.GetHtmlModuloRequest( " & idModulo & " , '" & KeyRiga & "' , " & IDDOC & " ,'' , '" & g_InCaricoA & "' ) as html " , Application("ConnectionString"))

                    //'--response.write    vbcrlf &  "<div class=""Modulo"" >"  & rsMod.fields( "html" ).value & "</div>" & vbcrlf

                    htmlToReturn.Write(Environment.NewLine + @"<div class=""Modulo CRITERION"" >");  //' CRITERION
                    htmlToReturn.Write(Environment.NewLine + @"<div class=""row"" >");  //' CRITERION

                    if (GetParamURL(Request.QueryString.ToString(), "VER") == "2")
                    {
                        GetHtmlModuloRequestVer2(idModulo, IDDOC, g_InCaricoA, KeyRiga, "EU");

                        //'-- aggiunge il disegno dei sub criterion nazionali
                        DrawNationalSubCriterion(idModulo, IDDOC, g_InCaricoA, KeyRiga);

                        //'else
                        //'	GetHtmlModuloRequest idModulo , KeyRiga , IDDOC  ,"" ,  g_InCaricoA
                    }

                    htmlToReturn.Write("</div>" + Environment.NewLine);
                    htmlToReturn.Write("</div>" + Environment.NewLine);
                }
                if ((REQUEST_PART).ToLower() == "selezioneveloce")
                {
                    // '--nel caso di SelezioneVeloce disegno un checkbox con una funzione su onchange per andare ad influenzare
                    //	'--tutti i campi indicati nel campo "CampiInteressati"

                    //'--costruisco i nomi dei campi della parte
                    string Field_SelezioneVeloce = "MOD_" + KeyRiga + "_SelVeloce";

                    string Value_SelezioneVeloce = "off";

                    //'--recupero il valore del checkbox dalla collezione dei valori
                    if (g_col.ContainsKey(Field_SelezioneVeloce))
                    {
                        Value_SelezioneVeloce = g_col[Field_SelezioneVeloce];
                    }

                    string Field_CampiInteressati = Field_SelezioneVeloce + "_CampiInteressati";
                    //'--recupero la lista dei campi da influenzare
                    string Val_CampiInteressati = GetValueFromRS(rs.Fields["CampiInteressati"]);


                    //' -- utilizzato per fare i test Val_CampiInteressati = "MOD_F_0_1_FLD_K2_R1,MOD_F_0_1_FLD_K3_R1"

                    htmlToReturn.Write(@"<div class=""panel-default"">");
                    //'--apertura tabella
                    htmlToReturn.Write("<table>");
                    //'--apertura riga
                    htmlToReturn.Write("<tr>");
                    //'--colonna con il checkbox
                    htmlToReturn.Write(@"<td><input type=""checkbox"" id=""" + Field_SelezioneVeloce + @"""  name=""" + Field_SelezioneVeloce + @""" class=""SelezioneVeloce"" onchange=""SelezioneVeloce('" + Field_SelezioneVeloce + @"',1 )"" ");

                    //'--se value 1 allora setto il checkbox spuntato
                    if (Value_SelezioneVeloce == "on")
                    {
                        htmlToReturn.Write(" checked " + Environment.NewLine);
                    }
                    //'--se stiamo lato ente disabilitiamo la checkbox
                    if (g_InCaricoA.ToLower() == "ente")
                    {
                        htmlToReturn.Write(" disabled " + Environment.NewLine);
                    }
                    //'--chiudo il campo checkbox
                    htmlToReturn.Write("></td>" + Environment.NewLine);
                    //'--colonna con cella vuota
                    htmlToReturn.Write("<td>&nbsp;</td>");
                    //'--colonna con cella descrizione
                    htmlToReturn.Write("<td>" + Descrizione + "</td>");
                    //'--chiusura riga e tabella
                    htmlToReturn.Write("</tr></table>");

                    //'-- campo nascosto con i campi da influenzare
                    htmlToReturn.Write($@"<input type=""hidden"" id=""" + Field_CampiInteressati + @""" name=""" + Field_CampiInteressati + @""" value=""" + Val_CampiInteressati + @""" >" + Environment.NewLine);

                    htmlToReturn.Write("</div>" + Environment.NewLine);

                    //'--nel js andiamo a scrivere la funzione SelezioneVeloce che recupera i campi interessati da influenzare;
                    //'--se il checkbox vale true allora li setta tutti a non editabili ed a no altrimenti li mette non selezionati editabili
                    //'--fare anche su onload del documento
                    //'--i campi da influenzare sono radiobutton (come separatore usiamo la virgola ",")

                    //'--costruisco una collezione dei campi SelVeloce che sono checkbox per poterli aggiornare nella collezione dei valori
                    //'--perchè quando il checkbox non è selezionato non arriva nulla al server nella request.for
                    if (g_col_SelVeloce.ContainsKey(Field_SelezioneVeloce) == false)
                    {
                        g_col_SelVeloce.Add(Field_SelezioneVeloce, Field_SelezioneVeloce);
                    }

                    // '--aggiungo i campi radio influenzati dalla selezione veloce
                    //'--perchè sono come i checkbox cioè se non spuntati non arrivano sul server nel form
                    string[] aCampiInteressati = Val_CampiInteressati.Split(",");
                    int n = aCampiInteressati.Length - 1;

                    for (int i = 0; i < n; i++)
                    {
                        if (!string.IsNullOrEmpty(aCampiInteressati[i]))
                        {
                            if (g_col_SelVeloce.ContainsKey(aCampiInteressati[i]) == false)
                            {
                                g_col_SelVeloce.Add(aCampiInteressati[i], aCampiInteressati[i]);
                            }
                        }
                    }
                }

                rs.MoveNext();
            }

            //'-----------------------------------------------
            //'-- effettuo le chiusure delle div fuori ciclo
            if (Gruppo_Aperto == 1)
            {
                htmlToReturn.Write($@"</div></div></div>" + Environment.NewLine + "<!-- Chiusura Sezione " + KeyGruppoAperto + " -->" + Environment.NewLine);
            }

            if (Parte_aperta == 1)
            {
                htmlToReturn.Write($@"</div>" + Environment.NewLine + "<!-- Chiusura PARTE -->" + Environment.NewLine);
            }
            if (IsMasterPageNew())
            {
                
            }else{
                htmlToReturn.Write($@"</div>");
            }
        }
    }

    //'---------------------------------------------------------------------
    //'---------------------------------------------------------------------
    //'---------------------------------------------------------------------
    void DrawNationalSubCriterion(string idModulo, dynamic IDDOC, dynamic InCaricoA, string KeyRiga)
    {
        TSRecordSet rsSubCriteria;

        rsSubCriteria = objDB_MTR.GetRSReadFromQuery_(CStr("select id , Versione from CTL_DOC with(nolock) where tipodoc = 'TEMPLATE_REQUEST_GROUP' and versione <> '00' and deleted = 0 and linkeddoc = " + idModulo), ApplicationCommon.Application.ConnectionString);

        if (rsSubCriteria.RecordCount > 0)
        {
            rsSubCriteria.MoveFirst();

            while (rsSubCriteria.EOF == false)
            {

                GetHtmlModuloRequestVer2(rsSubCriteria.Fields["id"], IDDOC, InCaricoA, KeyRiga + "_" + rsSubCriteria.Fields["Versione"], "SUB");

                rsSubCriteria.MoveNext();
            }
        }
    }

    //'---------------------------------------------------------------------
    //'---------------------------------------------------------------------
    //'---------------------------------------------------------------------
    void MakeAttrib(string DZT_Name, string RG_FLD_TYPE, int Obbligatorio, string DZT_Type, string DZT_DM_ID, dynamic DZT_DM_ID_Um, dynamic DZT_Dec, dynamic DZT_Len, dynamic DZT_Format, dynamic DZT_Help, string DZT_InCaricoA, string SorgenteCampo, string UUID, string Group_Related)
    {
        string Value;
        Value = "";

        //'response.write "RG_FLD_TYPE=" & RG_FLD_TYPE & "<br>"
        htmlToReturn.Write($@"<!-- ATTRIB " + DZT_Name + " -->");
        //'exit function

        //'--mi segno in un campo nascosto il GRuppo RElazionato se esiste
        htmlToReturn.Write(@"<input type=""hidden"" id=""Group_Related_" + DZT_Name + @""" name=""Group_Related_" + DZT_Name + @""" value=""" + Group_Related + @""">" + Environment.NewLine);

        //'-- se viene richiesto di disegnare IDENTIFIER_LOT non passo per il dizionario
        if (RG_FLD_TYPE == "BANDO_LOTTO_CIG")
        {
            //'-- Elenco dei lotti a cui si riferisce la richiesta
            bool Editable = false;
            if ((g_InCaricoA == DZT_InCaricoA || string.IsNullOrEmpty(DZT_InCaricoA)) && g_editable == true)
            {
                Editable = true;
            }

            if (!string.IsNullOrEmpty(SorgenteCampo))
            {
                Value = InitDefalutValue(SorgenteCampo);
            }

            if (g_col.ContainsKey(DZT_Name))
            {
                if (!Editable)
                {
                    Value = g_col[DZT_Name];
                }
                else
                {
                    g_col[DZT_Name] = Value;
                }
            }
            else
            {
                g_col.Add(DZT_Name, Value);
            }

            //'-- se è stato definito un UUID lo associo al campo
            if (!string.IsNullOrEmpty(UUID))
            {
                if (g_col_UUID.ContainsKey(DZT_Name) == false)
                {
                    if (g_col_UUID_new.ContainsKey(DZT_Name) == false)
                    {
                        g_col_UUID_new.Add(DZT_Name, UUID);
                    }
                }
            }

            htmlToReturn.Write($@"" + Environment.NewLine);
            htmlToReturn.Write($@"<div class=""BANDO_LOTTO_CIG"" > " + Environment.NewLine);

            htmlToReturn.Write($@"	<!-- elementi selezionati -->" + Environment.NewLine);
            htmlToReturn.Write($@"	<div class=""col-md-12"" >" + Environment.NewLine);
            htmlToReturn.Write($@"	" + Environment.NewLine);
            //'htmlToReturn.Write($@"		<select  Class=""BANDO_LOTTO_CIG"" id=""" + DZT_Name + @"_SELECTED_ITEM"" >" + Environment.NewLine);

            //'-- inserisco il dominio selezionato
            //'if Value <> "" then
            //'	v = split( Value , "###" )
            //'	n = ubound( v )

            //'	for i = 0 to n
            //'		if v(i) <> "" then
            //'			response.write "		  <option value=""" & v(i) &""">" & v(i) & "</option>" & vbcrlf
            //'		END IF
            //'	NEXT

            //'end if

            //'response.write "		</select>" & vbcrlf
            htmlToReturn.Write($@"<table class=""VerticalModel_ReadOnlyField  width_100_percent"" cellspacing=""0"" cellpadding=""0"" border=""0"" ><tr><td>	" + Environment.NewLine);

            if (!string.IsNullOrEmpty(Value))
            {
                string[] v = Strings.Split(Value, "###");
                int n = v.Length - 1;
                string strTempValue = string.Empty;

                for (int i = 0; i <= n; i++)
                {// to n
                    if (!string.IsNullOrEmpty(v[i]))
                    {
                        strTempValue = Replace(v[i], $"{g_idBando}_LOTTO", " Lotto ");
                        htmlToReturn.Write($"<span>{strTempValue}</span>{Environment.NewLine}");
                        if (i != n)
                        {
                            htmlToReturn.Write($"<br>{Environment.NewLine}");
                        }
                    }
                }
            }
            htmlToReturn.Write("	</td> </tr></table>" + Environment.NewLine);

            htmlToReturn.Write($@"	</div>" + Environment.NewLine);

            htmlToReturn.Write($@"</div>" + Environment.NewLine);

            htmlToReturn.Write($@"<input type=""hidden"" id=""" + DZT_Name + @""" name=""" + DZT_Name + @""" value=""" + Value + @""">" + Environment.NewLine);
        }
        else
        {
            string Filter = string.Empty;
            int Context = 0;
            string Style = "VerticalModel";
            Field obj;
            //dim align
            dynamic valore = "";

            if (g_col.ContainsKey(DZT_Name))
            {
                valore = g_col[DZT_Name];
            }
            else
            {
                g_col.Add(DZT_Name, "");
            }

            //'-- se è stato definito un UUID lo associo al campo
            if (!string.IsNullOrEmpty(UUID) && !g_col_UUID.ContainsKey(DZT_Name) && !g_col_UUID_new.ContainsKey(DZT_Name))
            {
                g_col_UUID_new.Add(DZT_Name, UUID);
            }

            //'Public Function GetFilteredFieldExt(DZT_Name As String, suffix As String, idPfu As Long, Filter As String, Context As Integer, strConnectionString As String, session As Variant) As Variant
            if (!string.IsNullOrEmpty(DZT_DM_ID))
            {
                //'--se si tratta di IDENTIFIER_LOT applico il filtro per idgara e tipodoc
                if (RG_FLD_TYPE == "IDENTIFIER_LOT")
                {
                    Filter = $"SQL_WHERE=(idgara={g_idBando} and tipodoc='{g_TipoBando}')";
                }

                eProcurementNext.BizDB.LibDbDictionary objDiz = new eProcurementNext.BizDB.LibDbDictionary();
                obj = objDiz.GetFilteredFieldExt(CStr(RG_FLD_TYPE), CStr(g_suffix), CLng(g_idPfu), session, CStr(Filter), ApplicationCommon.Application.ConnectionString, CInt(Context));

                obj.Name = DZT_Name;
            }
            else
            {
                obj = eProcurementNext.HTML.BasicFunction.getNewField(CInt(DZT_Type));
                obj.Init(CInt(DZT_Type), CStr(DZT_Name), CStr(valore), null, null, CStr(DZT_Format));
            }

            bool Editable = false;

            if ((g_InCaricoA == DZT_InCaricoA || string.IsNullOrEmpty(DZT_InCaricoA)) && g_editable == true)
            {
                Editable = true;
            }

            if (g_col.ContainsKey(DZT_Name))
            {
                obj.Value = g_col[DZT_Name];
            }
            else
            {
                g_col.Add(DZT_Name, "");
            }

            //'Obj.Width = "95%"
            //'-- se il campo è vuoto ed è prevista una sorgente dati proviamo a recuperarla
            if (string.IsNullOrEmpty(obj.Value) && !string.IsNullOrEmpty(SorgenteCampo))
            {
                obj.Value = InitDefalutValue(SorgenteCampo);
            }

            //'-- i campi editabili ed obbligatori entrano nella collezioni per controllare che vengano compilati
            if (Editable && Obbligatorio == 1)
            {
                g_ElencoFieldObbligModulo = g_ElencoFieldObbligModulo + "~~~" + DZT_Name + "~~~,";
            }

            //'-- se il campo è editabile setto le proprietà
            if (Editable)
            {//then
                if ((RG_FLD_TYPE == "SiNo_Modulo" || RG_FLD_TYPE == "SiNoAltro" || RG_FLD_TYPE == "SiNo" || RG_FLD_TYPE == "INDICATOR" || RG_FLD_TYPE == "CODE_BOOLEAN_TYPE_REQUIREMENT"))
                {
                    obj.setOnChange(CStr("OnChangeScelta( this );"));
                }
                else
                {
                    obj.setOnChange(CStr("OnModificaDGUE( this );"));
                }

                if (DZT_Type == "4" && DZT_DM_ID == "Year")
                {
                    obj.Style = "YearDomain";
                }

                if (DZT_Type == "1")
                {
                    obj.MaxLen = 1000;
                }

                if (DZT_Type == "5" || DZT_Type == "8")
                {
                    obj.width = 100;
                }

            }

            //'-- per i campi non editabili si mette una tabella come bordo
            if (!Editable && CInt(DZT_Type) != 11)
            {
                //'strCause = "Entro nel blocco per campi non editabili"
                string align = "";
                if (CInt(DZT_Type) == 2 || CInt(DZT_Type) == 7)
                {
                    align = @" align=""right"" ";
                }

                htmlToReturn.Write($@"<table border=""0"" cellspacing=""0"" cellpadding=""0"" class=""" + Style + @"_ReadOnlyField " + @" width_100_percent" + @""" ><tr><td  name=""Cell_" + DZT_Name + @""" id=""Cell_" + DZT_Name + @"""  width=""100%"" height=""100%"" " + align + " ");

                //'If Not prop Is Nothing Then
                //'
                //'	If prop.Wrap = False And UCase(accessible) <> "YES" Then
                //'		response.Write " nowrap>"
                //'	Else
                //'		response.Write ">"
                //'	End If
                //'Else
                //'	If UCase(accessible) <> "YES" Then
                htmlToReturn.Write($@">");
                //'	Else
                //'		response.Write ">"
                //'	End If
                //'End If
            }

            htmlToReturn.Write($@"<div class=""div_fld_template"">");

            //'-- se il campo è in errore (ad ese. per obbligatorietà o validazione formale) mostro l'icona di err
            //'If fld.Error <> 0 Then
            //'
            //'		Dim strGifErr As String
            //'		Dim strAlt As String
            //'
            //'		If fld.Error = 1 Then
            //'
            //'			If UCase(accessible) <> "YES" Then
            //'				strGifErr = "State_Err.gif"
            //'			Else
            //'				strGifErr = "State_Err.png"
            //'			End If
            //'
            //'			strAlt = "Errore"
            //'
            //'		End If
            //'
            //'		If fld.Error = 2 Then
            //'			If UCase(accessible) <> "YES" Then
            //'				strGifErr = "State_Warning.gif"
            //'			Else
            //'				strGifErr = "State_Warning.png"
            //'			End If
            //'
            //'			strAlt = "Attenzione"
            //'		End If
            //'
            //'		If fld.Error = 3 Then
            //'			If UCase(accessible) <> "YES" Then
            //'				strGifErr = "info.gif"
            //'			Else
            //'				strGifErr = "info.png"
            //'			End If
            //'
            //'			strAlt = "Informazione"
            //'		End If
            //'
            //'		response.Write "<img alt=""" & strAlt & """ src=""" & HtmlEncode(PathImage & strGifErr) & """ title=""" & HtmlEncode(fld.ErrDescription) & """/>"
            //'
            //'	End If

            //'--nel caso di domini gerarchici o domini estesi a causa di un bug nella funzione ValueHtml (dove viene gestita la variabile membro "editable" e non quella in input la metodo)
            //'--nel disegno del field ci recuperiamo l'oggetto specifico e gli settiamo la prop di editable sopra
            if (DZT_Type == "5" || DZT_Type == "8")
            {

                //'response.write "RG_FLD_TYPE=" & RG_FLD_TYPE & " - DZT_TYPE=" & DZT_Type & " - editable=" & Editable & "<br>"
                //set objPrimitive = obj.GetPrimitiveObject()
                obj.SetEditable(Editable);
                //set objPrimitive = nothing
            }

            if (!Editable)
            {
                //'--per i domini gerarchici ed i domini chiusi disegno una tabella senza invocare la libreria
                //'--che restituisce un codice html con delle classi di stile che hanno la prop NOWRAP settata e questo comporta
                //'--che molte descrizioni vanno fuori dai margini della pagina

                if (DZT_Type == "5" || DZT_Type == "8" || (DZT_Type == "4" && RG_FLD_TYPE != "INDICATOR"))
                {
                    //'response.write DZT_DM_ID & "-" & Obj.Value

                    //'--chiamo la stored per recuperare le desc dai codici
                    htmlToReturn.Write("<span>" + Get_Desc_Gerarchici(DZT_DM_ID, obj.Value) + "</span>");
                }
                else
                {
                    obj.umValueHtml(htmlToReturn, false);
                    obj.ValueHtml(htmlToReturn, false);
                }
            }
            else
            {
                obj.umValueHtml(htmlToReturn);
                obj.ValueHtml(htmlToReturn);
            }

            htmlToReturn.Write("</div>");

            //'-- chiudo la tabella dei soli editabili
            if (!Editable && CInt(DZT_Type) != 11)
            {
                htmlToReturn.Write("</td></tr></table>");
            }

            //'--mi segno in un campo nascosto gli attributi di tipo IDENTIFIER_LOT
            if (Editable && RG_FLD_TYPE == "IDENTIFIER_LOT")
            {
                htmlToReturn.Write($@"<input filter=""{Filter}"" class=""Identificativo_lotto"" type=""hidden"" id=""IDENTIFIER_LOT"" name=""IDENTIFIER_LOT"" value=""{DZT_Name}"">{Environment.NewLine}");
            }
        }
    }

    //'---------------------------------------------------------------------
    //'---------------------------------------------------------------------
    //'---------------------------------------------------------------------
    void MakeAttrib_IDENTIFIER_LOT(dynamic DZT_Name, dynamic RG_FLD_TYPE, dynamic Obbligatorio, dynamic DZT_Type, dynamic DZT_DM_ID, dynamic DZT_DM_ID_Um, dynamic DZT_Dec, dynamic DZT_Len, dynamic DZT_Format, dynamic DZT_Help, dynamic DZT_InCaricoA)
    {
        //'-- se ho già il dominio dei lotti lo riutilizzo, altrimenti lo carico

        TSRecordSet rs;

        if (g_DomLotti == null)
        {
            //'set rs = objDB_MTR.GetRSReadFromQuery( "SELECT Numerolotto from document_microlotti_dettagli  where tipodoc = '" & g_TipoBando & "' and idheader = " & g_idBando & " and Voce = 0  order by id ", Application("ConnectionString"))
            //'Set g_DomLotti = CreateObject("Scripting.Dictionary")

            //'if rs.recordcount > 0 then
            //'	rs.movefirst

            //'	while rs.eof = false

            //'		g_DomLotti.add rs.fields("Numerolotto").value , "Lotto " & rs.fields("Numerolotto").value
            //'		rs.movenext
            //'	wend
            //'else
            //    '-- di base è sempre peresente un lotto
            //'	g_DomLotti.add "1" , "Lotto 1"
            //'end if

            g_DomLotti = new Dictionary<string, string>();//CreateObject("Scripting.Dictionary")

            var Value = InitDefalutValue("BANDO_LOTTO_CIG");
            //'-- inserisco il dominio selezionato

            if (!string.IsNullOrEmpty(Value))
            {
                string[] v = Strings.Split(Value, "###");
                int n = (v.Length - 1);

                for (int i = 0; i <= n; i++)
                {// to n
                    if (!string.IsNullOrEmpty(v[i]))
                    {
                        g_DomLotti.Add(v[i], v[i]);
                    }
                }
            }
        }

        MakeAttrib_IDENTIFIER(DZT_Name, RG_FLD_TYPE, Obbligatorio, g_DomLotti, DZT_Help, DZT_InCaricoA);
    }

    //'---------------------------------------------------------------------
    //'-- Disegna l'attributo per la selezione degli identificatori
    //'---------------------------------------------------------------------
    void MakeAttrib_IDENTIFIER(string DZT_Name, string RG_FLD_TYPE, int Obbligatorio, Dictionary<string, string> Dominio, dynamic DZT_Help, string DZT_InCaricoA)
    {
        bool Editable;
        string Value;
        string[] v;

        Editable = false;

        if ((g_InCaricoA == DZT_InCaricoA || string.IsNullOrEmpty(DZT_InCaricoA)) && g_editable == true)
        {
            Editable = true;
        }

        if (g_col.ContainsKey(DZT_Name) == true)
        {
            Value = CStr(g_col[DZT_Name]);
        }
        else
        {
            g_col.Add(DZT_Name, "");
            Value = "";
        }

        //'-- se è stato definito un UUID lo associo al campo
        //UUID non dichiarato in questa funzione
        string UUID = "";
        if (!string.IsNullOrEmpty(UUID))
        {
            if (g_col_UUID.ContainsKey(DZT_Name) == false)
            {
                if (g_col_UUID_new.ContainsKey(DZT_Name) == false)
                {
                    g_col_UUID_new.Add(DZT_Name, UUID);
                }
            }
        }

        //'-- i campi editabili ed obbligatori entrano nella collezioni per controllare che vengano compilati
        if (Editable == true && Obbligatorio == 1)
        {
            //'-- abbiamo messo il nome della lista degli oggetti selezionati per farla evidenziare perchè il
            //'-- campo vero e proprio che contiene le selezioni è nascosto
            g_ElencoFieldObbligModulo = g_ElencoFieldObbligModulo + "~~~" + DZT_Name + "_SELECTED_ITEM" + "~~~,";
        }

        if (Editable == true)
        {
            htmlToReturn.Write($@"" + Environment.NewLine);
            htmlToReturn.Write($@"<div class=""ESPD_IDENTIFIER"" > " + Environment.NewLine);

            htmlToReturn.Write($@"	<!-- elenco completo -->" + Environment.NewLine);
            htmlToReturn.Write($@"	<div class=""col-md-5"" >" + Environment.NewLine);

            htmlToReturn.Write($@"		<select multiple Class=""ESPD_IDENTIFIER_ALL"" id=""" + DZT_Name + @"_ALL_DOMAIN"" ondblclick=""AddIdentifier('" + DZT_Name + @"' )"" >" + Environment.NewLine);

            //'-- inserisco il dominio passato
            foreach (var item in Dominio)
            {
                var R = item.Key;
                htmlToReturn.Write($@"		  <option value=""" + R + @""">" + Dominio[R] + "</option>" + Environment.NewLine);
            }

            htmlToReturn.Write($@"		</select>" + Environment.NewLine);
            htmlToReturn.Write($@"	</div>" + Environment.NewLine);

            htmlToReturn.Write($@"	<!-- bottoni -->" + Environment.NewLine);
            htmlToReturn.Write($@"	<div class=""col-md-2 IDENTIFIER_LOT_BUTTON"" >" + Environment.NewLine);
            htmlToReturn.Write($@"		<a class=""col-md-2 IDENTIFIER_LOT_BUTTON_ADD"" onclick=""AddIdentifier('" + DZT_Name + @"');"" >&#x3E;&#x3E; </a>" + Environment.NewLine);
            htmlToReturn.Write($@"		<a class=""col-md-2 IDENTIFIER_LOT_BUTTON_DEL"" onclick=""DelIdentifier('" + DZT_Name + @"');"" >&#x3C;&#x3C; </a>" + Environment.NewLine);
            htmlToReturn.Write($@"	</div>" + Environment.NewLine);

            htmlToReturn.Write($@"	<!-- elementi selezionati -->" + Environment.NewLine);
            htmlToReturn.Write($@"	<div class=""col-md-5"" >" + Environment.NewLine);
            htmlToReturn.Write($@"	" + Environment.NewLine);
            htmlToReturn.Write($@"		<select multiple Class=""ESPD_IDENTIFIER_SEL"" id=""" + DZT_Name + @"_SELECTED_ITEM"" ondblclick=""DelIdentifier('" + DZT_Name + @"' )"" >" + Environment.NewLine);

            //'-- inserisco il dominio selezionato
            if (!string.IsNullOrEmpty(Value))
            {
                v = Strings.Split(Value, "###");
                int n = v.Length - 1;

                for (int i = 0; i <= n; i++)
                {// to n
                    if (!string.IsNullOrEmpty(v[i]))
                    {
                        htmlToReturn.Write($@"		  <option value=""" + v[i] + @""">" + Dominio[v[i]] + @"</option>" + Environment.NewLine);
                    }
                }
            }

            htmlToReturn.Write($@"		</select>" + Environment.NewLine);
            htmlToReturn.Write($@"	</div>" + Environment.NewLine);
            htmlToReturn.Write($@"</div>" + Environment.NewLine);
        }
        else
        {
            htmlToReturn.Write($@"" + Environment.NewLine);
            htmlToReturn.Write($@"<div class=""ESPD_IDENTIFIER "" > " + Environment.NewLine);

            htmlToReturn.Write($@"	<!-- elementi selezionati -->" + Environment.NewLine);
            htmlToReturn.Write($@"	<div class=""col-md-12"" >" + Environment.NewLine);
            htmlToReturn.Write($@"	" + Environment.NewLine);
            //'htmlToReturn.Write($@"		<select  Class=""ESPD_IDENTIFIER_SEL"" id=""" + DZT_Name + @"_SELECTED_ITEM"" >" + Environment.NewLine);

            //'-- inserisco il dominio selezionato
            //'if Value <> "" then
            //'	v = split( Value , "###" )
            //'	n = ubound( v )

            //'	for i = 0 to n
            //'		if v(i) <> "" then
            //'			response.write "		  <option value=""" & v(i) &""">" & Dominio(v(i)) & "</option>" & vbcrlf
            //'		END IF
            //'	NEXT

            //'end if

            //'response.write "		</select>" & vbcrlf

            htmlToReturn.Write($@"<table class=""VerticalModel_ReadOnlyField  width_100_percent"" cellspacing=""0"" cellpadding=""0"" border=""0"" ><tr><td>	" + Environment.NewLine);

            if (!string.IsNullOrEmpty(Value))
            {
                v = Strings.Split(Value, "###");
                int n = v.Length - 1;

                for (int i = 0; i <= n; i++)
                {//to n
                    if (!string.IsNullOrEmpty(v[i]))
                    {
                        htmlToReturn.Write("<span>" + Dominio[v[i]] + "</span>" + Environment.NewLine);
                        if (i != n)
                        {
                            htmlToReturn.Write($@"<br>" + Environment.NewLine);
                        }
                    }
                }
            }

            htmlToReturn.Write($@"	</td> </tr></table>" + Environment.NewLine);
            htmlToReturn.Write($@"	</div>" + Environment.NewLine);

            htmlToReturn.Write($@"</div>" + Environment.NewLine);
        }

        htmlToReturn.Write($@"<input type=""hidden"" id=""" + DZT_Name + @""" name=""" + DZT_Name + @""" value=""" + Value + @""">" + Environment.NewLine);
    }

    //'-- salva nella sessione di lavoro ASP le variabili per gestire
    void SaveInMem(dynamic sessionLoc)
    {
        if (g_editable == false)
        {
            return;
        }

        objDocument_Id = "MODULO_TEMPLATE_REQUEST";
        string strSecName = "DOC_SEC_MEM_" + objDocument_Id + "_" + g_ID_DOC;

        session[strSecName] = "yes";

        session[strSecName + "_Value"] = g_col;
        session[strSecName + "_Iterazioni"] = g_Iterazioni;
        session[strSecName + "_Obbligatori"] = g_colObblig;
        session[strSecName + "_UUID"] = g_col_UUID;
        session[strSecName + "_UUID_new"] = g_col_UUID_new;
        session[strSecName + "_SelVeloce"] = g_col_SelVeloce;

        session[strSecName + "_IdBando"] = g_idBando;
        session[strSecName + "_idTemplate"] = g_idTemplate;
        session[strSecName + "_TipoBando"] = g_TipoBando;
    }

    void DrawLegislation(dynamic idModulo)
    {
        string SQL;
        TSRecordSet rsCur;

        SQL = @"select  isnull( DescrizioneEstesa , '' ) as DescrizioneEstesa,  replace( isnull( r.Note , '' ) , '""' , '''' ) as ToolTip  "
        + " from CTL_DOC m with(nolock) "
        + "	inner join DOCUMENT_REQUEST_GROUP r with(nolock) on m.id = r.idHeader "
        + " where   m.id = " + CStr(idModulo) + " and  isnull( TypeRequest , '' ) = 'L' "
        + " order by [idRow], r.ItemPath";

        rsCur = objDB_MTR.GetRSReadFromQuery_(SQL, ApplicationCommon.Application.ConnectionString);

        if (rsCur.RecordCount > 0)
        {
            rsCur.MoveFirst();
            while (rsCur.EOF == false)
            {
                htmlToReturn.Write($@"<div class=""LEGISLATION"">");
                htmlToReturn.Write(ReplaceBr(HtmlEncode(GetValueFromRS(rsCur.Fields["DescrizioneEstesa"])), Environment.NewLine, "<br />"));
                htmlToReturn.Write($@"</div>");
                rsCur.MoveNext();
            }
        }
    }

    void DrawADDITIONAL_DESCRIPTION_LINE(dynamic idModulo)
    {
        string SQL;
        TSRecordSet rsCur;

        SQL = @"select  isnull( DescrizioneEstesa , '' ) as DescrizioneEstesa,  replace( isnull( r.Note , '' ) , '""' , '''' ) as ToolTip  "
        + " from CTL_DOC m with(nolock) "
        + "	inner join DOCUMENT_REQUEST_GROUP r with(nolock) on m.id = r.idHeader "
        + " where   m.id = " + CStr(idModulo) + " and  isnull( TypeRequest , '' ) = 'A' "
        + " order by [idRow], r.ItemPath";

        rsCur = objDB_MTR.GetRSReadFromQuery_(SQL, ApplicationCommon.Application.ConnectionString);

        if (rsCur.RecordCount > 0)
        {
            rsCur.MoveFirst();
            while (rsCur.EOF == false)
            {
                htmlToReturn.Write(@"<div class=""ADDITIONAL_DESCRIPTION_LINE"">");
                htmlToReturn.Write(ReplaceBr(HtmlEncode(CStr(GetValueFromRS(rsCur.Fields["DescrizioneEstesa"]))), Environment.NewLine, "<br />"));
                htmlToReturn.Write("</div>");
                rsCur.MoveNext();
            }
        }
    }

    void DrawSubCriteriaZero(dynamic idModulo)
    {
        string SQL;
        TSRecordSet rsCur;

        //SQL = "select  isnull( m.Note , '' )  as Nota  "
        //+ " from CTL_DOC m with(nolock) "
        //+ " where   m.LinkedDoc = " + CStr(idModulo) + " and  Tipodoc = 'TEMPLATE_REQUEST_GROUP' and deleted = 0 and versione = '00' " ;
        //
        //rsCur = objDB_MTR.GetRSReadFromQuery_(cstr(SQL), ApplicationCommon.Application["ConnectionString"]);
        //
        //if (rsCur.RecordCount > 0){
        //
        //    rsCur.MoveFirst();
        //    while (rsCur.EOF == false){
        //        htmlToReturn.Write( @"<div class=""SUB_CRITERION_0""><br />" );
        //        htmlToReturn.Write( Strings.Replace( HtmlEncode( CStr(rsCur.Fields["Nota"])), Environment.NewLine, "<br />" ) );
        //        htmlToReturn.Write( "</div>");
        //        rsCur.MoveNext();
        //    }
        //
        //}
        string Testo = GetTextSubCriteriaZero(idModulo);

        if (!string.IsNullOrEmpty(Testo))
        {
            htmlToReturn.Write($@"<div class=""SUB_CRITERION_0""><br />");
            htmlToReturn.Write(Testo);
            htmlToReturn.Write("</div>");

        }
    }

    string GetTextSubCriteriaZero(dynamic idModulo)
    {
        string stringToReturn = "";

        string SQL = "select  isnull( m.Note , '' )  as Nota  "
        + " from CTL_DOC m with(nolock) "
        + " where m.LinkedDoc = " + CStr(idModulo) + " and  Tipodoc = 'TEMPLATE_REQUEST_GROUP' and deleted = 0 and versione = '00' ";

        TSRecordSet rsCur = objDB_MTR.GetRSReadFromQuery_(SQL, ApplicationCommon.Application.ConnectionString);

        if (rsCur.RecordCount > 0)
        {

            rsCur.MoveFirst();
            while (!rsCur.EOF)
            {
                stringToReturn = ReplaceBr(HtmlEncode(CStr(rsCur.Fields["Nota"])), Environment.NewLine, "<br />");
                stringToReturn = ReplaceBr(stringToReturn, CStr(Strings.Chr(13)), "<br />");
                stringToReturn = ReplaceBr(stringToReturn, CStr(Strings.Chr(10)), "<br />");
                rsCur.MoveNext();
            }
        }

        return stringToReturn;
    }

    //'---------------------------------------------------------------------
    //'---------------------------------------------------------------------
    //'---------------------------------------------------------------------
    void GetHtmlModuloRequestVer2(dynamic idModulo, dynamic idDocInUse, dynamic InCaricoA, string KeyModulo, dynamic TipoModulo)
    {
        int[] VettoreIterazioni = new int[100];
        TSRecordSet rsSubCriteria;

        //'-- recupero il titolo da inserire come primo elemento descrittivo del gruppo di richieste
        TSRecordSet rsMod = objDB_MTR.GetRSReadFromQuery_(CStr("select  isnull( Body , '' ) as titolo  ,  isnull( Note , '' ) as Note, isnull( c1.value,'') as ToolTip ,isnull( c2.value,'') as Tooltip_UK  from CTL_DOC m with(nolock)  left join ctl_doc_value C1 with (nolock) on c1.IdHeader = m.id and c1.DSE_ID ='TIPOLOGIA' and C1.dzt_name='Tooltip' left join ctl_doc_value C2 with (nolock) on C2.IdHeader = m.id and C2.DSE_ID ='TIPOLOGIA' and C2.dzt_name='Tooltip_UK' where  m.id = " + CStr(idModulo)), ApplicationCommon.Application.ConnectionString);

        //'--htmlToReturn.Write($@"select  isnull( Body , '' ) as titolo from CTL_DOC m with(nolock) where  m.id = " & idModulo

        string Titolo = CStr(rsMod.Fields["Titolo"]);
        string Note = CStr(rsMod.Fields["Note"]);
        string ToolTip = CStr(GetValueFromRS(rsMod.Fields["ToolTip"]));

        //'-- svuoto la collezione di campi obbligatori del modulo che vengono raccolti dalla navigazione
        g_ElencoFieldObbligModulo = "";

        //'--------------------------------------------
        //'-- recordset per tutte le richieste nel gruppo
        //'--------------------------------------------
        string SQL;
        SQL = @"select isnull( ItemPath , '' ) as ItemPath , isnull( RG_FLD_TYPE , '' ) as RG_FLD_TYPE , isnull( TypeRequest , '' ) as TypeRequest, isnull( DescrizioneEstesa , '' ) as DescrizioneEstesa, isnull( Related , '' ) as Related , isnull( ItemLevel , '' ) as ItemLevel , "
        + @" dbo.GetID_ElementModulo ( ItemPath , ItemLevel  , TypeRequest ) as GUID , isnull( Iterabile , '' ) as Iterabile , replace( isnull( r.Note , '' ) , '""' , '''' ) as ToolTip , "
        + " isnull( Obbligatorio , '' ) as Obbligatorio , "
        + "  dz.DZT_Type,  "
        + "  dz.DZT_DM_ID,  "
        + "  dz.DZT_DM_ID_Um, 0 as   DZT_Len,  dz.DZT_Dec, "
        + "  dz.DZT_Format, UUID ,"
        + "  dz.DZT_Help, dz.DZT_Multivalue , r.InCaricoA  , isnull( r.SorgenteCampo , '' ) as SorgenteCampo, m.id as IdModulo  "
        + " from CTL_DOC m with(nolock) "
        + "	inner join DOCUMENT_REQUEST_GROUP r with(nolock) on m.id = r.idHeader "
        + " inner join LIB_Dictionary dz with(nolock) on dz.DZT_Name = r.RG_FLD_TYPE "
        + " where   m.id = " + CStr(idModulo) + " and isnull( TypeRequest , '' ) not in ( 'L' , 'A' )"
        + " order by [idRow], r.ItemPath";

        //'& " where   m.id = " & idModulo & " and ItemPath like '" & FieldStart & "%' and ItemLevel >= '" & StartItemLevel & "' and isnull( TypeRequest , '' ) <> 'L'" _

        //'response.write SQL
        //'response.end

        TSRecordSet rsCur = objDB_MTR.GetRSReadFromQuery_(SQL, ApplicationCommon.Application.ConnectionString);

        htmlToReturn.Write($@"<!-- MODULO " + CStr(idModulo) + " -->" + Environment.NewLine);

        htmlToReturn.Write($@"<div class=""form-group col-md-12 "">");

        //'-- titolo della domanda ( Body del modulo )
        if (!string.IsNullOrEmpty(Titolo))
        {
            htmlToReturn.Write($@"<span class=""CaptionModulo""  >" + HtmlEncode(Titolo).Replace(Environment.NewLine, "<br />"));
        }
        //'--se presente inserisco tooltip sul criterio
        if (!string.IsNullOrEmpty(ToolTip) && ToolTip != "<br>")
        {
            htmlToReturn.Write($@"<img src=""../Ctl_library/images/toolbar/info.png"" data-toggle=""tooltip"" class=""ModTooltip""  title=""" + ToolTip + @""" />" + Environment.NewLine);
        }

        htmlToReturn.Write("</span>");

        //'------------------------------------------
        //'-- Descrizione del modulo campo Note
        //'------------------------------------------
        htmlToReturn.Write($@"<div class=""col-md-5 GIUSTIFICATO "" >");

        //'response.write  Server.htmlencode( Note)
        string NoteSub0;

        //'-- inserire un parametro che consente di recuperare il testo di GetTextSubCriteriaZero ed evita la chiamata DrawSubCriteriaZero
        //'-- CONDIVIDERE CON SABATO SE OK
        string Disable_DrawSubCriteriaZero = Get_Func_Property("TEMPLATE_REQUEST.ASP", "DrawSubCriteriaZero", "DISABLE", "0", CInt("-1"));

        NoteSub0 = "";// 'GetTextSubCriteriaZero( idModulo )
        if (Disable_DrawSubCriteriaZero == "1")
        {
            NoteSub0 = GetTextSubCriteriaZero(idModulo);
        }

        if (!string.IsNullOrEmpty(NoteSub0))
        {
            htmlToReturn.Write(ReplaceBr(NoteSub0, Environment.NewLine, "<br />"));
        }
        else
        {
            htmlToReturn.Write(ReplaceBr(Note, Environment.NewLine, "<br />"));
        }

        //'-- aggiunge le ADDITIONAL_DESCRIPTION_LINE
        DrawADDITIONAL_DESCRIPTION_LINE(idModulo);

        //'-- aggiunge le legislation
        DrawLegislation(idModulo);

        //'-- aggiunge il sottocriterio 0 se presente per i criteri europei ( si escludono i subcriteri )
        if (TipoModulo == "EU")
        {
            if (Disable_DrawSubCriteriaZero == "0")
            {
                DrawSubCriteriaZero(idModulo);
            }
        }

        htmlToReturn.Write($@"</div>" + Environment.NewLine);

        //'------------------------------------------
        //'-- compongo l'html con tutte le richieste del gruppo
        //'--------------------------------------------
        htmlToReturn.Write($@"<div class=""col-md-7 "">");
        if (rsCur.RecordCount > 0)
        {
            int NewCurPosition;
            int CurPosition;

            rsCur.MoveFirst();
            CurPosition = rsCur.AbsolutePosition;
            NewCurPosition = CurPosition - 1;

            //'-- disegna tutto il modulo un livello alla volta gerarchicamente
            //'-- suddividendo la rappresentazione fra Ente ed OE
            while (rsCur.EOF == false && NewCurPosition != CurPosition)
            {
                KeyModulo = KeyModulo.ToUpper().Replace(".", "_");

                //'--E.P. l'ultimo parametro è il gruppo contenitore che all'inizio è vuoto
                GetHtmlModulo(rsCur, 1, InCaricoA, VettoreIterazioni, KeyModulo, "");
                NewCurPosition = rsCur.AbsolutePosition;
            }
        }

        //'-- chiusura del gruppo di elementi
        htmlToReturn.Write($@"</div>" + Environment.NewLine);

        //'-- chiusura del modulo
        htmlToReturn.Write($@"</div>" + Environment.NewLine);

        //'-- espongo in chiaro i campi obbligatori del modulo
        if (g_ElencoFieldObbligModulo.Length > 0)
        {
            //'-- concatena tutti gli obbligatori
            g_ElencoFieldObblig = g_ElencoFieldObblig + g_ElencoFieldObbligModulo;

            //'-- toglie l'ultima virgola dagli obbligatori del modulo
            g_ElencoFieldObbligModulo = Strings.Left(g_ElencoFieldObbligModulo, g_ElencoFieldObbligModulo.Length - 1);
        }

        g_ElencoFieldObbligModulo = "[" + g_ElencoFieldObbligModulo + "]";

        htmlToReturn.Write($@"<input type=""hidden"" name=""ElencoFieldObblig_" + KeyModulo + @"""  id=""ElencoFieldObblig_" + KeyModulo + @"""  value=""" + g_ElencoFieldObbligModulo + @""" />" + Environment.NewLine);

        //'-- conservo in memoria i campi obbligatori del modulo
        if (g_colObblig.ContainsKey("MOD_" + KeyModulo) == true)
        {
            g_colObblig["MOD_" + KeyModulo] = g_ElencoFieldObbligModulo;
        }
        else
        {
            g_colObblig.Add("MOD_" + KeyModulo, g_ElencoFieldObbligModulo);
        }
    }

    //'---------------------------------------------------------------------
    //'-- funzione ricorsiva che disegna tutte gli elementi del modulo partendo dal livello indicato
    //'---------------------------------------------------------------------
    //'-----GROUP_Related contiene il nome del gruppo relazionato all'attributo per la visibilità
    void GetHtmlModulo(TSRecordSet rsCur, int Livello, dynamic InCaricoA, int[] VettoreIterazioni, string KeyModulo, string GROUP_Related)
    {
        string ToolTip; //'nvarchar(max)
        string CurField = string.Empty;
        string GUID;//'varchar(500)
        string UUID; //'varchar(500)
        string ItemPath;  //'varchar(500) ,
        string RG_FLD_TYPE; //'varchar(500),
        string TypeRequest; //'varchar(20) ,
        string DescrizioneEstesa; //'nvarchar(max) ,
        string Related; //'varchar ( 500)
        int ItemLevel; //'int
        int PrevItemLevel; //'int
        int StartItemLevel; //'int
        int NumColGroup;//'int
        dynamic PrevGUID; //'varchar(500)
        int NRow; //'int
        string Iterabile; //'INT
        int Obbligatorio; //'int
        dynamic SorgenteCampo;
        int CurPosition;
        bool bContinue;
        string FieldStart = "";
        string My_GROUP_Related = "";

        //'-- conservo la posizione dell'elemento ch devo disegnare per riposizionarmi
        CurPosition = rsCur.position;

        ItemPath = CStr(rsCur.Fields["ItemPath"]);
        RG_FLD_TYPE = CStr(rsCur.Fields["RG_FLD_TYPE"]);
        TypeRequest = CStr(rsCur.Fields["TypeRequest"]);
        DescrizioneEstesa = CStr(rsCur.Fields["DescrizioneEstesa"]);
        Related = CStr(rsCur.Fields["Related"]);
        ItemLevel = CInt(rsCur.Fields["ItemLevel"]);
        GUID = CStr(rsCur.Fields["GUID"]);
        UUID = CStr(rsCur.Fields["UUID"]);
        Iterabile = CStr(rsCur.Fields["Iterabile"]);
        ToolTip = CStr(rsCur.Fields["ToolTip"]);
        Obbligatorio = CInt(rsCur.Fields["Obbligatorio"]);
        string DZT_Type = CStr(rsCur.Fields["DZT_Type"]);
        dynamic DZT_DM_ID = rsCur.Fields["DZT_DM_ID"];
        dynamic DZT_DM_ID_Um = rsCur.Fields["DZT_DM_ID_Um"];
        dynamic DZT_Dec = rsCur.Fields["DZT_Dec"];
        dynamic DZT_Len = rsCur.Fields["DZT_Len"];
        dynamic DZT_Format = rsCur.Fields["DZT_Format"];
        dynamic DZT_Help = rsCur.Fields["DZT_Help"];
        string DZT_InCaricoA = CStr(rsCur.Fields["InCaricoA"]);
        SorgenteCampo = rsCur.Fields["SorgenteCampo"];

        //'-- di base ogni elemento � presente una volta sola
        NRow = 1;

        //'-- verifico se � iterabile
        Iterabile = CStr(rsCur.Fields["Iterabile"]);

        //'-- recupero il numero di occorrenze del livello da disegnare nel caso sia iterabile
        if (Iterabile == "1")
        {
            //'-- prendo il nome del campo
            FieldStart = GetNameFieldIterato(GUID, VettoreIterazioni, "B");

            if (g_Iterazioni.ContainsKey(KeyModulo + "@@@" + FieldStart) == true)
            {
                NRow = CInt(g_Iterazioni[KeyModulo + "@@@" + FieldStart]);
            }
        }

        //'-- ciclo sul numero di occorrenze
        for (int ix = 1; ix <= NRow; ix++)
        {// to NRow
         //'-- recupero la posizione iniziale
            if (ix > 1)
            {
                rsCur.AbsolutePosition = CurPosition;
            }

            //'-- identifico l'iesimo elemento
            if (Iterabile == "1")
            {
                VettoreIterazioni[Livello] = ix;
            }
            else
            {
                VettoreIterazioni[Livello] = 0;
            }

            if (TypeRequest == "K" || TypeRequest == "T" || TypeRequest == "G" || TypeRequest == "Q" || TypeRequest == "C" || TypeRequest == "A" || TypeRequest == "L")
            {
                //'-- inserisco la div del gruppo
                htmlToReturn.Write($@"<!-- Apro gruppo [" + GetNameFieldIterato(GUID, VettoreIterazioni, "") + "] -->");

                //'-- ho tolto la classe row generava un effetto indesiderato nella rappresentazione, faceva ereditare a livello superiore
                //'-- lo sfondo
                //'--htmlToReturn.Write($@"<div class=""row "
                htmlToReturn.Write($@"<div class="" ");

                //'-- se il GUID è prefissato con "IT" allora mettiamo una classe che ci consente di evidenziarlo
                if (Strings.Left(UUID, 2).ToUpper() == "IT")
                {
                    htmlToReturn.Write($@"National_Style_IT ");
                }

                //'-- se il gruppo � relazionato alla risposta superiore di base viene nascosto poi l'utente lo apre con la selezione
                //'if Related <> "" ) {
                if (Related.ToUpper() == "GROUP_FULFILLED.ON_TRUE" || Related.ToUpper() == "GROUP_FULFILLED.ON_FALSE")
                {
                    PrevGUID = g_Level_LastR[ItemLevel];
                    htmlToReturn.Write($@"GRP_Related"" style=""display: ;"" name=""GRP_Related"" id=""GRP_MOD_" + KeyModulo + "_FLD_" + PrevGUID + "_" + Strings.Split(Related, ".")[1] + @"""    > " + Environment.NewLine);
                    htmlToReturn.Write($@"<input type=""hidden""  id=""H_GRP_MOD_" + KeyModulo + "_FLD_" + PrevGUID + "_" + Strings.Split(Related, ".")[1] + @"""  value=""" + HtmlEncode(Related) + @"""> ");


                    //'--mi segno il gruppo relazionato per il gruppocorrente se esiste
                    htmlToReturn.Write($@"<input type=""hidden"" id=""Group_Related_" + "GRP_MOD_" + KeyModulo + "_FLD_" + PrevGUID + "_" + Strings.Split(Related, ".")[1] + @""" name=""Group_Related_" + KeyModulo + "_FLD_" + PrevGUID + "_" + Strings.Split(Related, ".")[1] + @""" value=""" + GROUP_Related + @""">");

                    //'--avvaloro la variabile del gruppo contenitore
                    My_GROUP_Related = "GRP_MOD_" + KeyModulo + "_FLD_" + PrevGUID + "_" + Strings.Split(Related, ".")[1];
                }
                else
                {
                    htmlToReturn.Write($@"""  > " + Environment.NewLine);
                }

                //'-- se iterabile si mette la barra
                if (Iterabile == "1")
                {
                    //'-- riposizioni il recordset, potrebbe essersi spostato iterando
                    rsCur.AbsolutePosition = CurPosition;

                    htmlToReturn.Write($@"<div class=""GroupItemToolbar"" ><ul>");

                    //'-- se  il documento editabile e il campo � in carico all'utente
                    //'-- si mette il comando per rimuovere il campo
                    //'ix > 1 and
                    if (ix == NRow && (string.IsNullOrEmpty(DZT_InCaricoA) || DZT_InCaricoA == InCaricoA) && g_editable == true)
                    {
                        htmlToReturn.Write($@"<li><a alt=""Aggiunge elemento"" onclick=""AddItem( '" + KeyModulo + "@@@" + FieldStart + "@@@" + ix + @"', " + rsCur.Fields["IdModulo"] + @")"" ><img src=""../Ctl_library/images/toolbar/add_2.png"" ></A> </li>");
                        htmlToReturn.Write($@"<li><a alt=""Elimina elemento"" onclick=""DelItemVer2( '" + KeyModulo + "@@@" + FieldStart + "@@@" + ix + @"', " + rsCur.Fields["IdModulo"] + @")"" ><img src=""../Ctl_library/images/toolbar/del_2.png"" ></A> </li> ");
                    }

                    //'-- si mette il titolo del gruppo
                    htmlToReturn.Write($@"<li> " + ReplaceBr(HtmlEncode(DescrizioneEstesa), Environment.NewLine, "<br />"));

                    htmlToReturn.Write($@" #" + (ix) + "</li>			 </ul>			 </div>" + Environment.NewLine);
                }
                else
                {
                    //'-- metto la descrizione del gruppo se presente
                    if (!string.IsNullOrEmpty(DescrizioneEstesa))
                    {
                        htmlToReturn.Write($@"<div class=""col-md-12  alert GRP_alert""><p>" + ReplaceBr(HtmlEncode(DescrizioneEstesa), Environment.NewLine, "<br />"));

                        if (!string.IsNullOrEmpty(ToolTip) && ToolTip != "<br>")
                        {
                            //'--set @Html = @Html + '<a href="#" data-toggle="tooltip" class="test"  title="' + @ToolTip + '" ><img src="../images/toolbar/info.png" /></a>'  + Environment.NewLine
                            htmlToReturn.Write($@"<img src=""../Ctl_library/images/toolbar/info.png"" data-toggle=""tooltip"" class=""ModTooltip""  title=""" + ToolTip + @""" />" + Environment.NewLine);
                        }

                        htmlToReturn.Write($@"</p></div>" + Environment.NewLine);
                    }
                }

                //'-- apro il contenitore del gruppo
                htmlToReturn.Write($@"<div class=""col-md-12 "">" + Environment.NewLine);

                //'--se non ho definito un nuovo gruppo relaionato uso quello in input alla funzione
                if (string.IsNullOrEmpty(My_GROUP_Related))
                {

                    My_GROUP_Related = GROUP_Related;
                }

                //'-- invoco il disegno dei propri figli
                rsCur.MoveNext();
                bContinue = true;
                while (!rsCur.EOF && bContinue)
                {
                    //'-- se l'elemento � un figlio lo disegna
                    if (CInt(rsCur.Fields["ItemLevel"]) == ItemLevel + 1)
                    {
                        //'-- invoco il disegno dell'elemento successivo
                        //'--ho usato un'altra variabile  per indicare la parentela
                        GetHtmlModulo(rsCur, Livello + 1, InCaricoA, VettoreIterazioni, KeyModulo, My_GROUP_Related);

                        //'-- se l'elemento � un mio nipote non devo disegnarlo, lo devo saltare, � stato disegnato dal mio figlio
                    }
                    else if (CInt(rsCur.Fields["ItemLevel"]) > ItemLevel + 1)
                    {
                        rsCur.MoveNext();

                        //'-- se l'elemento � un livello superiore o uguale devo uscire
                    }
                    else if (CInt(rsCur.Fields["ItemLevel"]) <= ItemLevel)
                    {
                        bContinue = false;
                    }
                }

                //'-- chiudo il gruppo
                htmlToReturn.Write($@"</div>");
                htmlToReturn.Write($@"</div>");

                //'-- se  il documento editabile e il campo � in carico all'utente
                //'-- si mette il comando per rimuovere il campo
                if (Iterabile == "1" && ix == NRow && (string.IsNullOrEmpty(DZT_InCaricoA) || DZT_InCaricoA == InCaricoA) && g_editable)
                {
                    //'htmlToReturn.Write($@"<div class=""GroupItemToolbar"" ><ul>"
                    //'htmlToReturn.Write($@"<li><a alt=""Aggiunge elemento"" onclick=""AddItem( '" & KeyModulo & "@@@" & FieldStart  & "@@@" & ix & "' )"" ><img src=""../Ctl_library/images/toolbar/add_2.png"" ></A> </li>"
                    //'-- si mette il titolo del gruppo
                    //'htmlToReturn.Write($@"<li> " & replace( Server.HTMLEncode( DescrizioneGruppo ), Environment.NewLine , "<br />" )  & "</li>"
                    //'htmlToReturn.Write($@"</ul></div>" + Environment.NewLine
                }

                htmlToReturn.Write($@"<!-- chiudo gruppo [" + GetNameFieldIterato(GUID, VettoreIterazioni, "") + "] -->");

                //'-- recupero la posizione iniziale
                //'rsCur.AbsolutePosition = CurPosition
            }

            //'-------------------------------------
            //'-- ATTRIBUTI REQUIREMENT E QUESTION
            //'-------------------------------------
            if (TypeRequest == "R" || TypeRequest == "M")
            {
                //'-- se iterabile si mette la barra
                if (Iterabile == "1")
                {
                    htmlToReturn.Write($@"<div class=""GroupItemToolbar"" ><ul>");

                    //'-- se  il documento editabile e il campo è carico all'utente
                    //'-- si mette il comando per rimuovere il campo
                    if (ix == NRow && (string.IsNullOrEmpty(DZT_InCaricoA) || DZT_InCaricoA == InCaricoA) && g_editable)
                    {
                        htmlToReturn.Write($@"<li><a alt=""Aggiunge elemento"" onclick=""AddItem( '" + KeyModulo + "@@@" + FieldStart + "@@@" + ix + @"', " + rsCur.Fields["IdModulo"] + @")"" ><img src=""../Ctl_library/images/toolbar/add_2.png""></a></li>");
                        htmlToReturn.Write($@"<li><a alt=""Elimina elemento"" onclick=""DelItemVer2( '" + KeyModulo + "@@@" + FieldStart + "@@@" + ix + @"', " + rsCur.Fields["IdModulo"] + @")"" ><img src=""../Ctl_library/images/toolbar/del_2.png"" ></a> </li>");
                    }

                    //'-- si mette il titolo del gruppo
                    htmlToReturn.Write($@"<li> " + ReplaceBr(HtmlEncode(DescrizioneEstesa), Environment.NewLine, "<br />"));

                    htmlToReturn.Write($@" #" + (ix) + "</li>			 </ul>			 </div>" + Environment.NewLine);
                }

                NumColGroup = 12;

                //'-- genero l'indice multidimensionale dove è posizionato l'attributo unito all'UUID
                if (!string.IsNullOrEmpty(UUID))
                {
                    UUID = UUID + MakeMultiDimPos(GUID, VettoreIterazioni);
                }

                //'-- conservo l'elemento corrente per gestire le relazioni
                CurField = GetNameFieldIterato(GUID, VettoreIterazioni, "");
                if (RG_FLD_TYPE == "SiNo_Modulo" || RG_FLD_TYPE == "SiNoAltro" || RG_FLD_TYPE == "SiNo" || RG_FLD_TYPE == "INDICATOR" || RG_FLD_TYPE == "CODE_BOOLEAN_TYPE_REQUIREMENT")
                {
                    g_Level_LastR[ItemLevel] = CurField;
                }

                //'-- se il GUID è prefissato con "IT" allora mettiamo una classe che ci consente di evidenziarlo
                if (Strings.Left(UUID, 2).ToUpper() == "IT")
                {
                    htmlToReturn.Write($@"<div class=""form-group col-md-" + NumColGroup + @" National_Style_IT"" >" + Environment.NewLine);
                }
                else
                {
                    htmlToReturn.Write($@"<div class=""form-group col-md-" + NumColGroup + @""" >" + Environment.NewLine);
                }

                //'-- l'evidence si apre sempre con tre attributi distinti di tipo testo : URL , Reference/Code, Issuer
                if (RG_FLD_TYPE == "EVIDENCE_IDENTIFIER")
                {
                    if (!string.IsNullOrEmpty(DescrizioneEstesa))
                    {
                        htmlToReturn.Write($@"<div class=""form-group col-md-" + NumColGroup + @""" >" + Environment.NewLine);
                        htmlToReturn.Write($@"<label class=""control-label col-md-12 small");

                        if (Obbligatorio == 1)
                        {
                            htmlToReturn.Write($@" FieldObblig");
                        }

                        htmlToReturn.Write($@"""  >" + ReplaceBr(HtmlEncode(DescrizioneEstesa), Environment.NewLine, "<br />"));

                        if (!string.IsNullOrEmpty(ToolTip) && ToolTip != "<br>")
                        {
                            htmlToReturn.Write($@"<img src=""../Ctl_library/images/toolbar/info.png"" data-toggle=""tooltip"" class=""ModTooltip""  title=""" + ToolTip + @""" />" + Environment.NewLine);
                        }

                        htmlToReturn.Write($@"</label>" + Environment.NewLine);
                        htmlToReturn.Write($@"</div>" + Environment.NewLine);
                    }

                    //'-- URL
                    htmlToReturn.Write($@"<div class=""form-group col-md-" + NumColGroup + @""" >" + Environment.NewLine);
                    htmlToReturn.Write($@"<label class=""control-label col-md-4 small" + IIF(Obbligatorio == 1, "FieldObblig", "") + @"""  >" + ApplicationCommon.CNV("url evidence identifier"));
                    htmlToReturn.Write($@"</label>" + Environment.NewLine);

                    htmlToReturn.Write($@"<div class=""col-md-8""  >");
                    MakeAttrib("MOD_" + KeyModulo + "_FLD_URL_" + CurField, RG_FLD_TYPE + "_URL", Obbligatorio, DZT_Type, DZT_DM_ID, DZT_DM_ID_Um, DZT_Dec, DZT_Len, DZT_Format, DZT_Help, DZT_InCaricoA, SorgenteCampo, IIF(string.IsNullOrEmpty(UUID), "", UUID + "_URL"), GROUP_Related);
                    htmlToReturn.Write($@"</div>" + Environment.NewLine);
                    htmlToReturn.Write($@"</div>" + Environment.NewLine);

                    //'-- Ref
                    htmlToReturn.Write($@"<div class=""form-group col-md-" + NumColGroup + @""" >" + Environment.NewLine);
                    htmlToReturn.Write($@"<label class=""control-label col-md-4 small" + IIF(Obbligatorio == 1, "FieldObblig", "") + @"""  >" + ApplicationCommon.CNV("Reference/Code evidence identifier"));
                    htmlToReturn.Write($@"</label>" + Environment.NewLine);

                    htmlToReturn.Write($@"<div class=""col-md-8""  >");
                    MakeAttrib("MOD_" + KeyModulo + "_FLD_REF_" + CurField, RG_FLD_TYPE + "_REF", Obbligatorio, DZT_Type, DZT_DM_ID, DZT_DM_ID_Um, DZT_Dec, DZT_Len, DZT_Format, DZT_Help, DZT_InCaricoA, SorgenteCampo, IIF(string.IsNullOrEmpty(UUID), "", UUID + "_REF"), GROUP_Related);
                    htmlToReturn.Write($@"</div>" + Environment.NewLine);
                    htmlToReturn.Write($@"</div>" + Environment.NewLine);

                    //'-- ISSUER
                    htmlToReturn.Write($@"<div class=""form-group col-md-" + NumColGroup + @""" >" + Environment.NewLine);
                    htmlToReturn.Write($@"<label class=""control-label col-md-4 small" + IIF(Obbligatorio == 1, "FieldObblig", "") + @"""  >" + ApplicationCommon.CNV("Issuer evidence identifier"));
                    htmlToReturn.Write($@"</label>" + Environment.NewLine);

                    htmlToReturn.Write($@"<div class=""col-md-8""  >");
                    MakeAttrib("MOD_" + KeyModulo + "_FLD_ISS_" + CurField, RG_FLD_TYPE + "_ISSUER", Obbligatorio, DZT_Type, DZT_DM_ID, DZT_DM_ID_Um, DZT_Dec, DZT_Len, DZT_Format, DZT_Help, DZT_InCaricoA, SorgenteCampo, IIF(string.IsNullOrEmpty(UUID), "", UUID + "_ISS"), GROUP_Related);
                    htmlToReturn.Write($@"</div>" + Environment.NewLine);
                    htmlToReturn.Write($@"</div>" + Environment.NewLine);

                    //'-- l'IDENTIFIER_EO si apre su due attributi uno identifica la tipologia di informazione e l'altro è il dato inserito
                    //'--  serve ad indentificare il fornitore
                }
                else if (RG_FLD_TYPE == "IDENTIFIER_EO")
                {
                    htmlToReturn.Write($@"<label class=""control-label col-md-4 small");

                    if (Obbligatorio == 1)
                    {
                        htmlToReturn.Write($@" FieldObblig");
                    }

                    htmlToReturn.Write($@"""  >" + ReplaceBr(HtmlEncode(DescrizioneEstesa), Environment.NewLine, "<br />"));

                    if (!string.IsNullOrEmpty(ToolTip) && ToolTip != "<br>")
                    {
                        htmlToReturn.Write($@"<img src=""../Ctl_library/images/toolbar/info.png"" data-toggle=""tooltip"" class=""ModTooltip""  title=""" + ToolTip + @""" />" + Environment.NewLine);
                    }

                    htmlToReturn.Write($@"</label>" + Environment.NewLine);

                    htmlToReturn.Write($@"<div class=""col-md-3""  >");
                    MakeAttrib("MOD_" + KeyModulo + "_FLD_ID_" + CurField, RG_FLD_TYPE + "_TYPE", Obbligatorio, DZT_Type, "EOIDType", DZT_DM_ID_Um, DZT_Dec, DZT_Len, DZT_Format, DZT_Help, DZT_InCaricoA, SorgenteCampo, IIF(string.IsNullOrEmpty(UUID), "", UUID + "_ID"), GROUP_Related);
                    htmlToReturn.Write($@"</div>" + Environment.NewLine);

                    htmlToReturn.Write($@"<div class=""col-md-5""  >");
                    MakeAttrib("MOD_" + KeyModulo + "_FLD_" + CurField, RG_FLD_TYPE, Obbligatorio, DZT_Type, DZT_DM_ID, DZT_DM_ID_Um, DZT_Dec, DZT_Len, DZT_Format, DZT_Help, DZT_InCaricoA, "", UUID, GROUP_Related);
                    htmlToReturn.Write($@"</div>" + Environment.NewLine);

                    //'-- il periodo prevede due date e viene gestito diversamente
                }
                else if (RG_FLD_TYPE == "PERIOD")
                {
                    string[] Desc;
                    Desc = Strings.Split(ReplaceBr(HtmlEncode(DescrizioneEstesa), Environment.NewLine, "<br />"), ";");
                    string Data_I;
                    string Data_F;
                    //'-- se è presente una sola descrizione mette una riga con la descrizione e poi i periodi
                    if ((Desc.Length - 1) == 0)
                    {
                        htmlToReturn.Write($@"<div class=""form-group col-md-" + NumColGroup + @""" >" + Environment.NewLine);
                        htmlToReturn.Write($@"<label class=""control-label col-md-4 small " + IIF(Obbligatorio == 1, "FieldObblig", "") + @"""  >" + Desc[0]);
                        if (!string.IsNullOrEmpty(ToolTip) && ToolTip != "<br>")
                        {
                            htmlToReturn.Write($@"<img src=""../Ctl_library/images/toolbar/info.png"" data-toggle=""tooltip"" class=""ModTooltip""  title=""" + ToolTip + @""" />" + Environment.NewLine);
                        }
                        htmlToReturn.Write($@"</label></DIV>" + Environment.NewLine);

                        Data_I = "Data Inizio";
                        Data_F = "Data Fine";
                    }
                    else
                    {
                        Data_I = Desc[0];
                        Data_F = Desc[1];
                    }

                    //'-- periodo inizio
                    htmlToReturn.Write($@"<label class=""control-label col-md-4 small " + IIF(Obbligatorio == 1, "FieldObblig", "") + @"""  >" + Data_I);
                    if (!string.IsNullOrEmpty(ToolTip) && ToolTip != "<br>")
                    {
                        htmlToReturn.Write($@"<img src=""../Ctl_library/images/toolbar/info.png"" data-toggle=""tooltip"" class=""ModTooltip""  title=""" + ToolTip + @""" />" + Environment.NewLine);
                    }
                    htmlToReturn.Write($@"</label>" + Environment.NewLine);

                    htmlToReturn.Write($@"<div class=""col-md-2""  >");
                    MakeAttrib("MOD_" + KeyModulo + "_FLD_I_" + CurField, RG_FLD_TYPE + "_I", Obbligatorio, DZT_Type, DZT_DM_ID, DZT_DM_ID_Um, DZT_Dec, DZT_Len, DZT_Format, DZT_Help, DZT_InCaricoA, SorgenteCampo, IIF(string.IsNullOrEmpty(UUID), "", UUID + "_I"), GROUP_Related);
                    htmlToReturn.Write($@"</div>" + Environment.NewLine);

                    //'-- periodo fine
                    htmlToReturn.Write($@"<label class=""control-label col-md-4 small " + IIF(Obbligatorio == 1, "FieldObblig", "") + @"""  >" + Data_F);
                    if (!string.IsNullOrEmpty(ToolTip) && ToolTip != "<br>")
                    {
                        htmlToReturn.Write($@"<img src=""../Ctl_library/images/toolbar/info.png"" data-toggle=""tooltip"" class=""ModTooltip""  title=""" + ToolTip + @""" />" + Environment.NewLine);
                    }
                    htmlToReturn.Write($@"</label>" + Environment.NewLine);

                    htmlToReturn.Write($@"<div class=""col-md-2""  >");
                    MakeAttrib("MOD_" + KeyModulo + "_FLD_F_" + CurField, RG_FLD_TYPE + "_F", Obbligatorio, DZT_Type, DZT_DM_ID, DZT_DM_ID_Um, DZT_Dec, DZT_Len, DZT_Format, DZT_Help, DZT_InCaricoA, SorgenteCampo, IIF(string.IsNullOrEmpty(UUID), "", UUID + "_F"), GROUP_Related);
                    htmlToReturn.Write($@"</div>" + Environment.NewLine);
                }
                else
                { //'-- altri attributi
                    htmlToReturn.Write($@"<label class=""control-label col-md-4 small");

                    if (Obbligatorio == 1)
                    {
                        htmlToReturn.Write($@" FieldObblig");
                    }

                    htmlToReturn.Write($@"""  >" + HtmlEncode(DescrizioneEstesa).Replace(Environment.NewLine, "<br />"));

                    if (!string.IsNullOrEmpty(ToolTip) && ToolTip != "<br>")
                    {
                        htmlToReturn.Write($@"<img src=""../Ctl_library/images/toolbar/info.png"" data-toggle=""tooltip"" class=""ModTooltip""  title=""" + ToolTip + @""" />" + Environment.NewLine);
                    }

                    htmlToReturn.Write($@"</label>" + Environment.NewLine);

                    int numColDraw;
                    if (RG_FLD_TYPE == "Currency")
                    {
                        numColDraw = 5;
                    }
                    else
                    {
                        numColDraw = 8;
                    }

                    htmlToReturn.Write($@"<div class=""col-md-" + numColDraw + @"""  >");
                    MakeAttrib("MOD_" + KeyModulo + "_FLD_" + CurField, RG_FLD_TYPE, Obbligatorio, DZT_Type, DZT_DM_ID, DZT_DM_ID_Um, DZT_Dec, DZT_Len, DZT_Format, DZT_Help, DZT_InCaricoA, SorgenteCampo, UUID, GROUP_Related);
                    htmlToReturn.Write($@"</div>" + Environment.NewLine);

                    if (RG_FLD_TYPE == "Currency")
                    {
                        htmlToReturn.Write($@"<div class=""col-md-3""  >");
                        MakeAttrib("MOD_" + KeyModulo + "_FLD_CUR_" + CurField, "CurrencyDom", Obbligatorio, DZT_Type, "CurrencyDom", DZT_DM_ID_Um, DZT_Dec, DZT_Len, DZT_Format, DZT_Help, DZT_InCaricoA, SorgenteCampo, IIF(string.IsNullOrEmpty(UUID = ""), "", UUID + "_CUR"), GROUP_Related);
                        htmlToReturn.Write($@"</div>" + Environment.NewLine);
                    }
                }

                htmlToReturn.Write($@"</div>" + Environment.NewLine);

                //'-- mi sposto sul nodo successivo
                rsCur.MoveNext();
            }
        }
    }

    //'---------------------------------------------------------------------
    //'-- recupera dal vettore delle iterazioni l'indice del campo per ogni livello e compone il nome univoco dell'attributo
    //'---------------------------------------------------------------------
    string GetNameFieldIterato(string FIELD, int[] VettoreIterazioni, string Base_o_Campo)
    {
        int i;
        string ret = "";
        string[] v;
        int vn;

        v = Strings.Split(FIELD, "_");

        vn = v.Length - 1;

        if (Base_o_Campo == "B")
        {
            vn = vn - 1;
        }

        //'-- se richiedo la base mi serve il campo per memorizzare quel elemento quante iterazioni ha
        //'-- quindi devo escludere la numerazione delle iterazioni

        for (i = 0; i <= vn; i++)
        {//to vn

            if (i > 0)
            {
                ret = ret + "_";
            }

            if (VettoreIterazioni[i + 1] == 0)
            {
                ret = ret + v[i];
            }
            else
            {
                ret = ret + v[i] + "(" + VettoreIterazioni[i + 1] + ")";
            }
        }

        //'-- se ho escluso l'ultimo lo devo aggiungere senza l'iterazione
        if (Base_o_Campo == "B")
        {
            if (i > 0)
            {
                ret = ret + "_";
            }
            ret = ret + v[i];
        }

        return ret;
    }

    string MakeMultiDimPos(string FIELD, int[] VettoreIterazioni)
    {
        int i;
        string ret = "";
        string[] v;
        int vn;

        v = Strings.Split(FIELD, "_");

        vn = v.Length - 1;

        ret = ret + "(";

        //'-- se richiedo la base mi serve il campo per memorizzare quel elemento quante iterazioni ha
        //'-- quindi devo escludere la numerazione delle iterazioni

        for (i = 0; i <= vn; i++)
        {//to vn

            if (i > 0)
            {// then
                ret = ret + ",";
            }

            if (VettoreIterazioni[i + 1] == 0)
            {//then
                ret = ret + "1";
            }
            else
            {
                ret = ret + VettoreIterazioni[i + 1];
            }

        }

        ret = ret + ")";

        return ret;
    }

    void DisplayFirma(dynamic PdfFirmato)
    {
        if (GetParamURL(Request.QueryString.ToString(), "lo").ToLower() == "base")
        { //'<> "print" then

            //on error goto 0

            //dim Obj


            //'dim ObjSession

            //'ObjSession = session("Session")
            //'set ObjSession(0) = Request.QueryString
            //'set ObjSession(1) = Request.form

            //'-- Passiamo di nuovo anche la request all'indice 3 per permettere alla classe ctldb.blacklist di recuperare l'ip
            //'set ObjSession(3) = request
            //'set ObjSession(5) = session
            //'set ObjSession(6) = application
            //'ObjSession(9) = application("Server_RDS")
            //'ObjSession(10) = session("Funzionalita")' permessi utenti

            //'set ObjSession(13) = objNewDizMlng("MultiLinguismo")

            //'dim objAttivaGlobal
            //'set objAttivaGlobal = server.createObject("ctldb.clsTabManage")

            //'objAttivaGlobal.setProfilerDB( cstr( Application("ATTIVA_DB_PROFILER") ) )
            //'objAttivaGlobal.setGlobalConnectionString( cstr(Application("ConnectionString")) )
            //'err.clear

            Field Obj = eProcurementNext.HTML.BasicFunction.getNewField(CInt(18));
            Obj.ConnectionString = ApplicationCommon.Application.ConnectionString;
            Obj.Init(CInt(18), CStr("SIGN_Attach"), CStr(PdfFirmato), null, null, CStr("INTV"));

            string noKey = string.Empty;
            string strHtmlGuida = ApplicationCommon.CNV("DGU_GUIDA_ALLA_COMPILAZIONE");
            noKey = CStr(session["NoMLKey"]);
            if (string.IsNullOrEmpty(noKey))
            {
                noKey = "???";
            }

            //-- se non esiste la chiave di ML annullo il contenuto
            if (Left(strHtmlGuida, Len(noKey)) == noKey && !string.IsNullOrEmpty(noKey))
            {
                strHtmlGuida = string.Empty;
            }

            htmlToReturn.Write(strHtmlGuida);

            htmlToReturn.Write($@"

	            <div id=""DIV_FIRMA"">
                        <h1>Firma Documento</h1>
                            <ul class=""liststylenone"">
                                <li class=""display_inline""><input type=""button"" class=""generapdf"" title=""Genera pdf"" id=""generapdf"" name=""SignSection"" disabled=""disabled"" value=""Genera pdf"" onclick=""GeneraPDF();""> </li>
                                <li><input type=""button"" class=""editistanza"" title=""Modifica Dati"" id=""editistanza"" name=""SignSection"" disabled=""disabled"" value=""Modifica Dati"" onclick=""TogliFirma();""></li>
                                <li><input type=""button"" class=""attachpdf"" title=""Genera pdf""  id=""attachpdf"" name=""SignSection"" disabled=""disabled""  value=""Allega pdf firmato""
					            onclick =""AllegaDOCFirmato();""></li>
                            </ul>
				            <table class=""allegato_firma"">
					            <tr>
						            <td><strong>File Firmato: </strong></td>
						            <td>
            ");
            //'response.write PdfFirmato
            Obj.ValueHtml(htmlToReturn, false);
            htmlToReturn.Write($@"
                                    </td>
					            </tr>
				            </table>
	            </div>

	        ");
        }
    }

    //'--a partire da un dominio ed i codici ritorna una stringa con le descrizioni separate da un <br>
    string Get_Desc_Gerarchici(string Dominio, string StrCodici)
    {
        string result = "";
        if (!String.IsNullOrEmpty(StrCodici))
        {
            TSRecordSet rs_Desc_Gerarchici = cdf.GetRSReadFromQuery_("exec Get_Desc_Dom '" + Dominio + "', '" + StrCodici + "','I'", ApplicationCommon.Application.ConnectionString);
            if (rs_Desc_Gerarchici.RecordCount > 0)
            {
                while (!rs_Desc_Gerarchici.EOF)
                {
                    result = result + CStr(rs_Desc_Gerarchici["Descrizione"]) + "</br>";
                    rs_Desc_Gerarchici.MoveNext();
                }
            }
        }

        return result;
    }

    //'--MOSTRA ERRORE
    void ShowErrorLocal(Exception ex) 
    {

        string strErroreCompleto;
        int idPfu;

        idPfu = session["IdPfu"];

        if ( CStr(idPfu) == String.Empty )
        {
            idPfu = -20;
        }

        strErroreCompleto = ex.ToString();
        string strSqlLog = "INSERT INTO CTL_LOG_PROC " +
                   "(DOC_NAME, PROC_NAME, id_Doc, idPfu, Parametri, data) VALUES " +
                   "('MODULO_TEMPLATE_REQUEST','TEmplate_REquest.asp'," + IDDOC + "," + idPfu + ",'" + Strings.Replace(strErroreCompleto, ",", "") + "',getdate())";

        CommonDbFunctions cdb = new();
        cdb.Execute(CStr(strSqlLog), ApplicationCommon.Application.ConnectionString);

        string ErrText = "NO_ML###" + ApplicationCommon.CNV("INFO_UTENTE_ERRORE_PROCESSO") + DateTime.Now.ToString();

        htmlToReturn.Write(@"<script language=""javascript"">");
        htmlToReturn.Write(@" var msg =  '" + Strings.Replace(Strings.Replace(ErrText, Environment.NewLine, ""), @"'", @"\'") + @"';");
        htmlToReturn.Write(@" DMessageBox( '../ctl_library/' , msg , 'Attenzione' , 2 , 400 , 300 );");
        htmlToReturn.Write(@"</script>");

        throw new ResponseEndException(htmlToReturn.Out(), Response, "");
    }



}
@Html.Raw(htmlToReturn.Out())
@{
    Write_CTL_Profiler("TEMPLATE_REQUEST.ASP", "TEMPLATE_REQUEST", "", Request, TimeStartPage, configuration, _application);
}
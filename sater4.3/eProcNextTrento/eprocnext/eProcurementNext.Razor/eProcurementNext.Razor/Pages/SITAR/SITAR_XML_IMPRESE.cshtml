@page "/SITAR/SITAR_XML_IMPRESE.asp"
@inject eProcurementNext.Session.ISession session;
@using System.IO;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonDB.Basic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.ctl_profiler
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.HTML.BasicFunction;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.logModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel;
@using static eProcurementNext.CommonModule.Basic;
@using static eProcurementNext.Razor.Pages.SITAR.SITAR_XML_DOCUMENTAZIONEModel;
@using eProcurementNext.CtlProcess;
@using static eProcurementNext.Session.SessionMiddleware
@model eProcurementNext.Razor.Pages.SITAR.SITAR_XML_IMPRESEModel
@{
    EprocResponse response = new();
    CommonDbFunctions cdf = new();

    LoadSession(HttpContext, session);
    HttpContext.Response.ContentType = "TEXT/XML";
    if (GetParamURL(Request.QueryString.ToString(), "VIDEO") != "1")
    {
        HttpContext.Response.Headers.Add("Content-Disposition", "attachment; filename=SITAR_XML_IMPRESE.XML");
    }

    string vbTab = string.Empty;
    string RUP_Login = string.Empty;
    string RUP_CF = string.Empty;
    string RUP_Pwd = string.Empty;
    string CF_Ente = string.Empty;
    string g_ID_DOC = string.Empty; // '-- ID della GARA
    string g_id_PDA = string.Empty;
    string g_SQLfilter = string.Empty;
    string OPERATION = string.Empty;
    string cfRapLeg = string.Empty;
    string STRsql = string.Empty;
    string FILE_ALLEGATO = string.Empty;

    var sqlParams = new Dictionary<string, object?>();

    //'-- init
    vbTab = "    ";
    string SOVRASCR = "true";

    g_ID_DOC = GetParamURL(Request.QueryString.ToString(), "IDDOC");
    OPERATION = GetParamURL(Request.QueryString.ToString(), "OPERATION");
    validate("IDDOC", g_ID_DOC, TIPO_PARAMETRO_INT, 0, "", 1, HttpContext, session);
    validate("OPERATION", OPERATION, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);

    //'-- recupero l'elenco dei lotti dalla gara
    TSRecordSet rs_pwd = new TSRecordSet();
    TSRecordSet rsEsiti = new TSRecordSet();
    TSRecordSet rs_Lotti = new TSRecordSet();
    TSRecordSet rs_Lotti_PDA = new TSRecordSet();
    TSRecordSet rs_Gara = new TSRecordSet();
    TSRecordSet rs_ComAggiudic = new TSRecordSet();
    TSRecordSet rs_Aziende = new TSRecordSet();
    TSRecordSet rs_RapLeg = new TSRecordSet();

    sqlParams.Add("@RUP_Login", RUP_Login);
    rs_pwd = GetRS("select dbo.OCP_getPasswordWS(@RUP_Login) as account", sqlParams);
    rs_pwd.MoveFirst();

    string sitar_account = CStr(rs_pwd["account"]);
    string[] arr = sitar_account.Split("@@@");

    string SITAR_LOGIN = arr[0];
    string SITAR_PASSWORD = arr[1];

    //'-- se è stato richiesto l'invio a lotti
    sqlParams.Clear();
    sqlParams.Add("@ID_DOC", CInt(g_ID_DOC));
    if (OPERATION.ToUpper() == "ISTANZIAIMPRESELOTTI")
    {
        STRsql = "select * from SITAR_XML_LISTA_LOTTI where idRow = @ID_DOC";
        rs_Lotti = GetRS(STRsql, sqlParams);

        //'-- recupero l'id del documento dai lotti

        rs_Lotti.MoveFirst();
        g_ID_DOC = CStr(rs_Lotti["idHeader"]);
        sqlParams.Clear();
        sqlParams.Add("@ID_DOC", CInt(g_ID_DOC));
    }
    else
    {
        //'-- g_ID_DOC è già l'id del documento
        STRsql = "select * from SITAR_XML_LISTA_LOTTI where idheader = @ID_DOC";
        rs_Lotti = GetRS(STRsql, sqlParams);
        rs_Lotti.MoveFirst();
    }

    rs_Gara = GetRS("select CFEIN from SITAR_XML_DATI_GARA with(nolock) where idHeader = @ID_DOC", sqlParams);

    CF_Ente = CStr(rs_Gara["CFEIN"]);

    response.Write(@"<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:bean='http://beans.ws.vigilanza.sil.eldasoft.it'>
	<soapenv:Header/>
	<soapenv:Body>
		<bean:istanziaElencoImpreseInvitate>
			<bean:login>
				<bean:login>" + SITAR_LOGIN + @"</bean:login>
				<bean:password>" + SITAR_PASSWORD + @"</bean:password>
			</bean:login>
			<bean:elencoImpreseInvitate>
				<bean:testata>
					<bean:CFEIN>" + CF_Ente + @"</bean:CFEIN>
					<bean:SOVRASCR>" + SOVRASCR + @"</bean:SOVRASCR>
				</bean:testata>
				<bean:oggettoXML>	
					<![CDATA[
    <bean:richiestaSincrona_IstanzaElencoImpreseInvitate  test='false' xmlns:bean='http://beans.vigilanza.sil.eldasoft.it'>");

    //'-- CICLO SUI LOTTI
    while(!rs_Lotti.EOF) {
        response.Write(@"<bean:listaElencoImpreseInvitate>
		<bean:W3CIG>" + encodeXML(CStr(rs_Lotti["W3CIG"])) + @"</bean:W3CIG>");

        sqlParams.Clear();
        sqlParams.Add("@idRow", CInt(rs_Lotti["idRow"]!));
        rs_Aziende = GetRS("select * from SITAR_XML_IMPRESE where LinkedDoc = @idRow", sqlParams);
        rs_Aziende.MoveFirst();

        //'-- Ciclo sulle partecipanti
        if(rs_Aziende.RecordCount > 0) 
        {
            rs_Aziende.MoveFirst();

            while(!rs_Aziende.EOF) 
            {
                response.Write(@"<bean:ImpresaInvitata>");

                response.Write(addOptionalTag(Left(CStr(rs_Aziende["CFIMP"]), 16), "bean:CFIMP"));
                response.Write(addOptionalTag(CStr(rs_Aziende["NOMIMP"]), "bean:NOMIMP"));

                response.Write(addOptionalTag(CStr(rs_Aziende["W3AGIDGRP"]), "bean:W3AGIDGRP"));
                response.Write(addOptionalTag(CStr(rs_Aziende["W3ID_TIPOA"]), "bean:W3ID_TIPOA"));
                response.Write(addOptionalTag(CStr(rs_Aziende["W3RUOLO"]), "bean:W3RUOLO"));
                response.Write(addOptionalTag(CStr(rs_Aziende["G_NAZIMP"]), "bean:G_NAZIMP"));

                response.Write(addOptionalTag(Left(CStr(rs_Aziende["INDIMP"]), 60), "bean:INDIMP"));
                response.Write(addOptionalTag(CStr(rs_Aziende["NCIIMP"]), "bean:NCIIMP"));

                response.Write(addOptionalTag(Left(CStr(rs_Aziende["CAPIMP"]), 5), "bean:CAPIMP"));

                response.Write(addOptionalTag(CStr(rs_Aziende["LOCIMP"]), "bean:LOCIMP"));
                response.Write(addOptionalTag(CStr(rs_Aziende["TELIMP"]), "bean:TELIMP"));
                response.Write(addOptionalTag(CStr(rs_Aziende["FAXIMP"]), "bean:FAXIMP"));

                response.Write(addOptionalTag(CStr(rs_Aziende["EMAI2IP"]), "bean:EMAI2IP"));
                response.Write(addOptionalTag(CStr(rs_Aziende["NCCIAA"]), "bean:NCCIAA"));
                response.Write(addOptionalTag(CStr(rs_Aziende["GNATGIUI"]), "bean:GNATGIUI"));

                //'-- LEGALI RAPPRESENTANTI
                rs_RapLeg = GetRS("select * from SITAR_XML_LEGALI_RAPPRESENTANTI where idHeader = -@idRow", sqlParams);
                if(rs_RapLeg.RecordCount > 0) 
                {
                    rs_RapLeg.MoveFirst();

                    while(!rs_RapLeg.EOF) 
                    {
                        response.Write(@"<bean:listaLegaliRappresentanti>");
                        response.Write(addOptionalTag(CStr(rs_RapLeg["CFTIM"]), "bean:CFTIM"));
                        response.Write(addOptionalTag(CStr(rs_RapLeg["COGTIM"]), "bean:COGTIM"));
                        response.Write(addOptionalTag(CStr(rs_RapLeg["NOMETIM"]), "bean:NOMETIM"));
                        response.Write(@"</bean:listaLegaliRappresentanti>");
                    }
                }
                response.Write(addOptionalTag(CStr(rs_Aziende["W9IMPARTEC"]), "bean:W9IMPARTEC"));
                response.Write(@"		</bean:ImpresaInvitata>" + Environment.NewLine);

                rs_Aziende.MoveNext();
            }
        }

        response.Write(@"</bean:listaElencoImpreseInvitate>");
        rs_Lotti.MoveNext();
    }

    response.Write(@"</bean:richiestaSincrona_IstanzaElencoImpreseInvitate>
						]]>
				</bean:oggettoXML>
			</bean:elencoImpreseInvitate>
		</bean:istanziaElencoImpreseInvitate>
	</soapenv:Body>
    </soapenv:Envelope>");
}
@Html.Raw(response.Out())
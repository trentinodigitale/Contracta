@page "/registrazione_er.asp"
@inject eProcurementNext.Session.ISession session;
@inject eProcurementNext.BizDB.ITabManage _TabManage;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.CommonModule
@using eProcurementNext.Core.Storage
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using eProcurementNext.CommonDB;
@using static eProcurementNext.Razor.Pages.registrazione_erModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.cnvModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.captcha_accessModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.controlliModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.net_utilsModel;
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.Extensions.Primitives
@using Microsoft.VisualBasic;
@using System.Web
@using System.IO;
@using System.Security.Claims
@using eProcurementNext.Razor;
@using static eProcurementNext.Razor.Pages.Functions.costanti;
@model eProcurementNext.Razor.Pages.registrazione_erModel
@using static eProcurementNext.Session.SessionMiddleware
@{
    LoadSession(HttpContext, session);
    EprocResponse htmlToReturn = new();

}
@{
    string strErrore = string.Empty;

    string strJsOnLoad = "";
    string strMnemonico = "";
    string styleInformativaParix = "";
    string styleInformativaEnte = "";
    string codicefiscale = "";
    bool aziendaGiaCensita = false;
    string comando = "";
    string strStep = "";
    string strLabelErrStato = "";
    string strLabelErrPIVA = "";
    string strLabelErrCF = "";
    string strLabelErrRagSoc = "";
    string strLabelErrNatGiur = "";
    string strLabelErrIndiriz = "";
    string strLabelErrTelefon = "";
    string strLabelErrFax = "";
    string strLabelErrEmail = "";

    string strLabelErrCap = "";
    string strLabelErrCitta = "";
    string strLabelErrProvincia = "";

    string strLabelErrIscrCCIAA = "";
    string strLabelErrSedeCCIAA = "";
    string strLabelErrAnnoCostituzione = "";

    string strLabelErrCodiceEORI = "";
    string codProv = "";
    string editLocalita = "";
    string editProv = "";

    string strLabelErrNomeRapLeg = "";
    string strLabelErrCognomeRapLeg = "";
    string strLabelErrTelRapLeg = "";
    string strLabelErrCellulareRapLeg = "";
    string strLabelErrEmailRif = "";
    string strLabelErrFunzAzi = "";
    string strLabelErrCfRapLegM = "";
    string strLabelErrEmailRifAzi = "";
    string strLabelWarningCfRapLegM = "";

    string strLabelErrAgree = "";
    string strLabelErrCaptcha = "";

    dynamic[,] matriceMiscInfo = new dynamic[99, 99];

    bool cleanSession = false;




    htmlToReturn.Write($@"
		<div class=""loading"" id=""loading"" style=""display:none"">
		  <!--
			<img id=""loading-image"" src=""images/ajax-loading.gif"" alt=""Loading..."" />
			-->
		</div>

	");

    //'response.write "querystring:" & request.querystring
    //'response.write session.SessionID

    string attivaProfessionisti = CStr(ApplicationCommon.Application["ATTIVA_CENSIMENTO_PROFESSIONISTI"]).ToUpper();

    //'-- Test controllo di sessione + Generazione chiave di aggancio per la sessione di lavoro correte
    if (string.IsNullOrEmpty(CStr(session["SESSION_WORK_KEY"])))
    {

        //'call pulisciSessione()
        generaChiaveSessione();

        if (Request.HasFormContentType && Request.Form.Count > 2)
        {
            session["errore_campo"] = ApplicationCommon.CNV("Tempo di inattività troppo lungo. Sessione scaduta, ripetere l'operazione.");
            avanzaRegistrazione("continua", false, "0");
            throw new ResponseEndException(htmlToReturn.Out(), Response, "Tempo di inattività troppo lungo. Sessione scaduta, ripetere l'operazione.");
        }

    }

    if (string.IsNullOrEmpty(CStr(session["CONTROLLO_PEC"])))
    {
        //on error resume next
        string controlloPec = "0";
        try
        {
            controlloPec = Get_Func_Property("REGISTRAZIONE_OE", "aziE_Mail", "controlloPec", "0", -1);

        }
        catch
        {
            controlloPec = "";
        }
        session["CONTROLLO_PEC"] = CStr(controlloPec);
        //on error goto 0
    }

    strJsOnLoad = "";

    strMnemonico = "PA";

    if (!string.IsNullOrEmpty(CStr(ApplicationCommon.Application["REG_MARKET_PLACE"])))
    {
        strMnemonico = ApplicationCommon.Application["REG_MARKET_PLACE"];
    }

    styleInformativaParix = "display:none";
    styleInformativaEnte = "display:none";

    //'-- Raccolta dati da form
    string descStato = CStr(GetValueFromForm(Request, "stato"));                //'--obblig
    string codStato = CStr(GetValueFromForm(Request, "stato_cod"));         //'--obblig
    codicefiscale = CStr(GetValueFromForm(Request, "codicefiscale"));   //'--obblig. se stato italia
    string PartitaIva = CStr(GetValueFromForm(Request, "PartitaIva"));          //'--obblig
    string professionista = CStr(GetValueFromForm(Request, "professionista"));

    string RagSociale = CStr(GetValueFromForm(Request, "RagSociale"));              //'--obblig
    string NaturaGiuridica = CStr(GetValueFromForm(Request, "NaturaGiuridica"));    //'--obblig
    string Indirizzo = CStr(GetValueFromForm(Request, "Indirizzo"));                //'--obblig
    string cap = CStr(GetValueFromForm(Request, "cap"));                            //'--obblig
    string citta = CStr(GetValueFromForm(Request, "Citta"));                        //'--obblig
    string provincia = CStr(GetValueFromForm(Request, "Provincia"));                //'--obblig
    string aziLocalitaLeg2 = CStr(GetValueFromForm(Request, "aziLocalitaLeg2"));
    string aziProvinciaLeg2 = CStr(GetValueFromForm(Request, "aziProvinciaLeg2"));
    string AnnoCostituzione = CStr(GetValueFromForm(Request, "AnnoCostituzione"));
    string IscrCCIAA = CStr(GetValueFromForm(Request, "IscrCCIAA"));
    string SedeCCIAA = CStr(GetValueFromForm(Request, "SedeCCIAA"));

    string CodiceEORI = CStr(GetValueFromForm(Request, "CodiceEORI"));

    string Telefono = CStr(GetValueFromForm(Request, "Telefono"));                  //'--obblig
    string NumeroFax = CStr(GetValueFromForm(Request, "NumeroFax"));                //'--obblig
    string EMail = CStr(GetValueFromForm(Request, "EMail"));                        //'--obblig

    string NomeRapLeg = CStr(GetValueFromForm(Request, "NomeRapLeg"));          //'--obblig
    string CognomeRapLeg = CStr(GetValueFromForm(Request, "CognomeRapLeg"));    //'--obblig
    string TelefonoRapLeg = CStr(GetValueFromForm(Request, "TelefonoRapLeg"));  //'--obblig
    string CellulareRapLeg = CStr(GetValueFromForm(Request, "CellulareRapLeg"));
    string EMailRif = CStr(GetValueFromForm(Request, "EMailRif"));              //'--obblig
    string EMailRiferimentoAzienda = CStr(GetValueFromForm(Request, "EMailRiferimentoAzienda"));
    string funzione_aziendale = CStr(GetValueFromForm(Request, "funzione_aziendale")); //'--obblig
    string cfRapLeg = CStr(GetValueFromForm(Request, "cfRapLeg")); //'--obblig

    string esterno_con_firma = CStr(GetValueFromForm(Request, "esterno_con_firma"));

    string privacyagree = CStr(GetValueFromForm(Request, "privacyagree"));      //'--obblig
                                                                                //'captchacode = trim(cstr(Request.Form("captchacode")))		//'--obblig

    //'SE YES non verrà inserito lo step di firma nel giro di registrazione. se assente o diverso da YES rester� come prima
    if (CStr(ApplicationCommon.Application["REG_DISATTIVA_FIRMA"]).ToUpper() == "YES")
    {
        session["attiva_step_firma"] = "";
    }


    aziendaGiaCensita = false;
    bool aziendaEnte = false;
    bool aziendaPIVA_OE = false;
    string strSql;
    TSRecordSet rs;
    if (CStr(session["azienda_gia_censita"]) == "YES")
    {

        aziendaGiaCensita = true;

        if (CStr(ApplicationCommon.Application["REG_RICHIEDI_FIRMA_OE"]).ToUpper() != "YES")
        {
            session["attiva_step_firma"] = "";
        }

    }

    if (CStr(session["azienda_ente"]) == "YES")
    {
        aziendaEnte = true;
        //'session("attiva_step_firma") = ""
    }

    if (CStr(session["azienda_oe"]) == "YES")
    {
        aziendaPIVA_OE = true;
    }

    //'-- raccolta parametri da querystring
    if (!string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "sel")))
    {

        if (CStr(session["last_step"]) == "1")
        {

            if (CStr(GetParamURL(Request.QueryString.ToString(), "fieldname")).ToLower() == "stato")
            {
                codStato = GetParamURL(Request.QueryString.ToString(), "sel");
                descStato = GetParamURL(Request.QueryString.ToString(), "seldesc");
                session["form_reg_dstato"] = descStato;
                session["form_reg_cstato"] = codStato;
            }

        }
        else if (CStr(session["last_step"]) == "2")
        {

            if (CStr(GetParamURL(Request.QueryString.ToString(), "fieldname")).ToLower() == "localita")
            {

                string cod = GetParamURL(Request.QueryString.ToString(), "sel");
                session["form_reg_stato_2"] = "";

                string[] vet = Strings.Split(cod, "-");

                if ((vet.Length - 1) > 3)
                {

                    //'-- Recupero lo stato
                    string statoFromLocalita = vet[0] + "-" + vet[1] + "-" + vet[2] + "-" + vet[3];
                    session["form_reg_stato_2"] = statoFromLocalita;

                }


                if ((vet.Length - 1) == 7)
                {

                    session["form_reg_localita_leg"] = cod;
                    session["form_reg_citta"] = GetParamURL(Request.QueryString.ToString(), "seldesc");

                    codProv = vet[0] + "-" + vet[1] + "-" + vet[2] + "-" + vet[3] + "-" + vet[4] + "-" + vet[5] + "-" + vet[6];

                    strSql = "select dmv_descml, dmv_level from lib_domainvalues with(nolock) where dmv_dm_id = 'geo' and dmv_cod = '" + codProv.Replace("'", "''") + "' and dmv_level = 6";
                    rs = GetRS(strSql);

                    if (rs.RecordCount > 0)
                    {

                        rs.MoveFirst();

                        session["form_reg_provincia_leg"] = codProv;
                        session["form_reg_provincia"] = rs.Fields["dmv_descml"];

                    }

                    //set rs = nothing

                }
                //'-- Recupero la provincia a partire dal figlio ( il comune ) che ha selezionato
                if ((vet.Length - 1) == 6)
                {
                    //'-- se l'utente ha selezionato la provincia ( quindi livello 6)
                    codProv = vet[0] + "-" + vet[1] + "-" + vet[2] + "-" + vet[3] + "-" + vet[4] + "-" + vet[5] + "-" + vet[6];
                    //'response.write "<h1>" & codProv & "</h1>"
                }
                else
                {
                    string finalCodeProv = vet[vet.Length - 1];
                    codProv = Strings.Replace(cod, "-" + finalCodeProv, "");
                }

                strSql = "select dmv_descml, dmv_level from lib_domainvalues with(nolock) where dmv_dm_id = 'geo' and dmv_cod = '" + codProv.Replace("'", "''") + "'";
                rs = GetRS(strSql);

                if (rs.RecordCount > 0)
                {

                    rs.MoveFirst();

                    if (CInt(rs.Fields["dmv_level"]) == 6)
                    {

                        //'-- Setto la descrizione del comune se non si � scelto 'altro'
                        //'-- cos� da non perdere un eventuale descrizione recuperata da parix
                        if (Strings.Right(cod, 4) != "-XXX")
                        {
                            session["form_reg_citta"] = GetParamURL(Request.QueryString.ToString(), "seldesc");
                        }

                        session["form_reg_localita_leg"] = cod;

                        string descProv = CStr(rs.Fields["dmv_descml"]);
                        session["form_reg_provincia_leg"] = codProv;
                        session["form_reg_provincia"] = descProv;

                    }
                    else if (CInt(rs.Fields["dmv_level"]) == 5)
                    {

                        session["form_reg_citta"] = "";

                        session["form_reg_localita_leg"] = "";

                        session["form_reg_provincia_leg"] = cod;
                        session["form_reg_provincia"] = GetParamURL(Request.QueryString.ToString(), "seldesc");

                    }

                }

                //set rs = nothing

            }

        }

    }

    comando = CStr(GetValueFromForm(Request, "comando"));

    if (string.IsNullOrEmpty(comando))
    {
        comando = CStr(GetParamURL(Request.QueryString.ToString(), "comando"));
    }

    strStep = CStr(GetValueFromForm(Request, "step"));

    //'response.write "<h1>STEP:" & strStep
    //'response.write "; COMANDO:" & comando & "</h1>"

    if (string.IsNullOrEmpty(strStep) && string.IsNullOrEmpty(comando) && !string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "sel")))
    {

        comando = "ricarica";

    }

    string esitoParix = "";
    DebugTrace dt = new DebugTrace();

    //'-- Se si � arrivati su questa pagina a partire dal form di registrazione
    //'-- memorizzo i dati inviati in sessioni per non perderli
    if (comando.ToLower() == "sel-stato" || comando.ToLower() == "continua" || comando.ToLower() == "sel-sede-legale")
    {

        if (strStep == "1")
        {

            session["form_reg_dstato"] = descStato;
            session["form_reg_cstato"] = codStato;
            session["form_reg_cf"] = codicefiscale;
            session["form_reg_piva"] = PartitaIva;
            session["form_professionista"] = professionista;

        }

        if (strStep == "2")
        {
            session["form_reg_ragsoc"] = RagSociale;
            session["form_reg_natgiu"] = NaturaGiuridica;
            session["form_reg_indiriz"] = Indirizzo;
            session["form_reg_annocostr"] = AnnoCostituzione;
            session["form_reg_iscrccia"] = IscrCCIAA;
            session["form_reg_sedeccia"] = SedeCCIAA;
            session["form_reg_codiceeori"] = CodiceEORI;

            session["form_reg_telefono"] = Telefono;
            session["form_reg_numfax"] = NumeroFax;
            session["form_reg_email"] = EMail;

            session["form_reg_cap"] = cap;
            session["form_reg_citta"] = citta;
            session["form_reg_provincia"] = provincia;

            session["form_reg_localita_leg"] = aziLocalitaLeg2;
            session["form_reg_provincia_leg"] = aziProvinciaLeg2;

        }

        if (strStep == "3")
        {
            session["form_reg_NomeRapLeg"] = NomeRapLeg;
            session["form_reg_CognomeRapLeg"] = CognomeRapLeg;
            session["form_reg_telrapleg"] = TelefonoRapLeg;
            session["form_reg_celrapleg"] = CellulareRapLeg;
            session["form_reg_emailrif"] = EMailRif;

            session["form_reg_emailrifazi"] = EMailRiferimentoAzienda;

            session["form_reg_funzazi"] = funzione_aziendale;
            session["form_reg_cfRapLeg"] = cfRapLeg;

            session["form_esterno_con_firma"] = esterno_con_firma;

            //'-- se nello step 1 italia e nello step 2 estero e natura giuridica = 'soggetto estero' allora setto come stato dell'azienda lo stato desunto dallo step 2
            if (session["form_reg_cstato"] == "M-1-11-ITA" && session["form_reg_stato_2"] != "M-1-11-ITA" && session["form_reg_natgiu"] == "Soggetto estero")
            {

                strSql = "select dmv_descml from lib_domainvalues with(nolock) where dmv_dm_id = 'geo' and dmv_cod = '" + CStr(session["form_reg_stato_2"]).Replace("'", "''") + "'";
                rs = GetRS(strSql);

                if (rs.RecordCount > 0)
                {

                    rs.MoveFirst();

                    session["form_reg_cstato"] = session["form_reg_stato_2"];
                    session["form_reg_dstato"] = rs.Fields["dmv_descml"];

                }

                //set rs = nothing

            }

        }

        if (strStep == "4")
        {
            session["form_reg_privacyagree"] = privacyagree;
        }

    }
    else if (comando.ToLower() == "scarica-pdf")
    {

        session["pdf_generato"] = "YES";
        throw new ResponseRedirectException(CStr(session["url_pdf"]), Response);
        //throw new ResponseEndException(htmlToReturn.Out(), "pdf_generato = YES");

    }
    else if (comando.ToLower() == "invia_documento")
    {
        //'-- il giro di firma avviene soltanto per la registrazione di un operatore economico
        //'-- per il sotto caso 'azienda non censita'+ modifica dati azienda presi da parix.

        //'iddoc = request.form("iddoc")
        dynamic iddoc = session["REG_DOC_ID"];

        int idAzi = 0;
        idAzi = censusOfCompany(CStr(session["reg_IdMp"]));

        if (idAzi != 0)
        {

            //'-- se sto nel giro di firma per censimento utente ( giro con sys REG_RICHIEDI_FIRMA_OE )
            if (aziendaGiaCensita == true && CStr(ApplicationCommon.Application["REG_RICHIEDI_FIRMA_OE"]).ToUpper() == "YES")
            {
                idAzi = CInt(session["ID_AZI"]);
            }

            //'-----------------
            //' Aggiorno le colonne azienda e idpfu per il documento dopo aver effettuato il censimento
            //'-----------------
            strSql = "UPDATE ctl_doc " + Environment.NewLine;
            strSql = strSql + "	SET idpfu = pf.idPfu, " + Environment.NewLine;
            strSql = strSql + "     Azienda = pf.pfuIdAzi " + Environment.NewLine;

            if (CStr(session["firma_olografa"]) != "1")
            {
                strSql = strSql + "     ,Destinatario_User = 0 " + Environment.NewLine;
                strSql = strSql + "     ,Destinatario_Azi = 0 " + Environment.NewLine;
            }

            strSql = strSql + "  FROM ctl_doc doc,profiliutente pf " + Environment.NewLine;
            strSql = strSql + "	where pf.pfuIdAzi = " + idAzi + " and doc.id = " + iddoc;

            ExecSQL(strSql);

            if (CStr(session["firma_olografa"]) != "1")
            {
                strSql = "delete from CTL_DOC_Destinatari where idheader = " + iddoc;
                ExecSQL(strSql);
            }

            dynamic idPfu;

            if (CStr(ApplicationCommon.Application["REG_RICHIEDI_FIRMA_OE"]).ToUpper() == "YES")
            {

                strSql = "select top 1 idpfu from profiliutente with(nolock) where pfuidazi = " + idAzi + " order by 1 desc";
                rs = GetRS(strSql);
                rs.MoveFirst();
                idPfu = rs.Fields["idpfu"];
                //set rs = nothing

            }
            else
            {

                strSql = "select idpfu from profiliutente with(nolock) where pfuidazi = " + idAzi;
                rs = GetRS(strSql);
                rs.MoveFirst();
                idPfu = rs.Fields["idpfu"];
                //set rs = nothing

            }



            //on error resume next
            eProcurementNext.CtlProcess.ClsElab objProc = new eProcurementNext.CtlProcess.ClsElab();
            string strDescErrore = "";
            try
            {
                objProc.Elaborate("SEND", "VERIFICA_REGISTRAZIONE_FORN", CLng(iddoc), CLng(idPfu), ref strDescErrore, 1, ApplicationCommon.Application["ConnectionString"]);
            }
            catch (Exception ex)
            {
                dt.Write("registrazione.er.cshtml line 486 -----   StackTrace: " + ex.ToString());

                strErrore = " Errore VERIFICA_REGISTRAZIONE_FORN,SEND " + ex.Message + "-" + strDescErrore + ":";
                htmlToReturn.Write(strErrore);
                MyErrore("", "", ex.ToString());

                throw new ResponseEndException(htmlToReturn.Out(), Response, strErrore);
            }

            if (!string.IsNullOrEmpty(strDescErrore))
            {
                strErrore = " Errore VERIFICA_REGISTRAZIONE_FORN,SEND " + "-" + strDescErrore + ":";
                htmlToReturn.Write(strErrore);
                throw new ResponseEndException(htmlToReturn.Out(), Response, strErrore);
            }




            //'-- se non stiamo nel giro di firma olografa, metto lo statoFunzionale del documento direttamente a 'Confermato'
            if (CStr(session["firma_olografa"]) != "1")
            {

                string idDocVerifica = CStr(session["REG_DOC_ID"]);

                if (!string.IsNullOrEmpty(idDocVerifica))
                {
                    string statoFunzionale = "Confermato";
                    strSql = "update ctl_doc set StatoFunzionale = '" + Strings.Replace(statoFunzionale, "'", "''") + "' where id = " + CStr(idDocVerifica);
                    ExecSQL(strSql);
                }

            }



            //on error goto 0

        }
    }
    else if (comando.ToLower() == "allega-pdf")
    {
        string pathFile = "";
        bool errore;
        string messaggio;

        string idDoc = CStr(session["REG_DOC_ID"]);

        if (!string.IsNullOrEmpty(idDoc))
        {

            string basePath = ApplicationCommon.Application["PathFolderAllegati"];
            string filePath = GetValueFromForm(Request, "frm_upld_fname");

            pathFile = System.IO.Path.Combine(basePath, filePath);

            //'-- Controllo se il file esiste prima di invocare la libreria
            if (CommonStorage.FileExists(pathFile))
            {
                FileInfo f = new FileInfo(pathFile);

                if (f.Length > 0)
                {

                    //'-- se il file è un PDF o un P7M provo faccio il giro di firma
                    var extFile = CommonStorage.GetNormalizedFileExtension(pathFile, false).ToLower();

                    if (extFile == "pdf" || extFile == "p7m")
                    {
                        LibDbAttach objLib = new LibDbAttach();

                        //'Codice di ritorno
                        //'1 : tutto ok
                        //'2 : errore
                        //'3 : allegato non corrispondente
                        //on error resume next

                        var accessGuid = eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel.insertAccessBarrier(session, HttpContext);
                        try
                        {
                            var esito = objLib.AllegaFirma(session, HttpContext, accessGuid, pathFile, f.Name, "ctl_doc", idDoc, "0", "id");
                            session["firma_olografa"] = "0";
                            dt.Write("registrazione.er.cshtml line 618 esito: " + esito + "   -----");
                            // beginswith 1#
                            // beginswith 0#
                            if (esito.Contains("#", StringComparison.Ordinal))
                            {

                                //string retCode = cstr(Strings.Split(esito, "#")[0]);
                                messaggio = Strings.Split(esito, "#")[1];

                                //'response.write "<h1>" & messaggio & "</h1>"

                                if (esito.StartsWith("0#", StringComparison.Ordinal))
                                { //retCode != "1" ) {
                                    errore = true;

                                    if (messaggio.ToLower() == "errore_iscertificatosottoscrizione")
                                    {
                                        messaggio = "Firma sul file non presente o non valida";
                                    }

                                    if (messaggio.ToLower() == "il file non è firmato digitalmente"
                                    || messaggio.ToLower() == "il file non e\u0027 firmato digitalmente"
                                    || messaggio.ToLower() == "il file non e' firmato digitalmente"
                                    || messaggio.ToLower() == "pdf hash: il file non è firmato digitalmente"
                                    || messaggio.ToLower() == "pdf hash: il file non e\u0027 firmato digitalmente"
                                    || messaggio.ToLower() == "pdf hash: il file non e' firmato digitalmente")
                                    {
                                        //'--------------------------------------------------------------------------------------------------------
                                        //'--- SE L'AZIENDA E' ESTERA PERMETTO LA FIRMA OLOGRAFA, ALTRIMENTI OBBLIGO L'ALLEGA CON FIRMA DIGITALE --
                                        //'--------------------------------------------------------------------------------------------------------
                                        //'if ucase(cstr(session("azienda_estera"))) = "YES" ) {
                                        if (CStr(session["azienda_estera"]).ToUpper() == "YES" && CStr(session["form_esterno_con_firma"]) != "1")
                                        {
                                            //'-- Se siamo nel caso di file non firmato digitalmente, entriamo automaticamente nel caso d'uso 'firma olografa'
                                            errore = false;
                                            messaggio = "";
                                            session["firma_olografa"] = "1";
                                        }
                                        else
                                        {
                                            errore = true;
                                            session["firma_olografa"] = "0";
                                        }
                                    }
                                    else
                                    {
                                        errore = true;
                                        session["firma_olografa"] = "0";
                                    }
                                }
                                else
                                {
                                    errore = false;
                                }
                            }
                            else
                            {
                                errore = true;
                                messaggio = "Errore in allega file. Ripetere l'operazione";
                            }
                        }
                        catch (Exception ex)
                        {
                            errore = true;
                            messaggio = $"ERRORE:{ex.Message}";
                        }


                    }
                    else
                    {
                        //'--------------------------------------------------------------------------------------------------------
                        //'--- SE L'AZIENDA E' ESTERA PERMETTO LA FIRMA OLOGRAFA, ALTRIMENTI OBBLIGO L'ALLEGA CON FIRMA DIGITALE --
                        //'--- E NON E' STATO FLAGGATO IL CHECK PER DICHIARARE DI ESSERE IN POSSESSO DI UN KIT DI FIRMA--
                        //'--------------------------------------------------------------------------------------------------------
                        if (CStr(session["azienda_estera"]).ToUpper() == "YES" && CStr(session["form_esterno_con_firma"]) != "1")
                        {
                            //'-- Se siamo nel caso di file non firmato digitalmente, entriamo automaticamente nel caso d'uso 'firma olografa'
                            errore = false;
                            messaggio = "";
                            session["firma_olografa"] = "1";
                        }
                        else
                        {
                            errore = true;
                            messaggio = "Allegare un file firmato 'PDF' o 'P7M'";
                            session["firma_olografa"] = "0";
                        }
                    }

                    if (session["firma_olografa"] == "1")
                    {
                        //'-- se firma olografa allego il file in base dati anche se non firmato
                        LibDbAttach objLib = new LibDbAttach();

                        //on error resume next
                        try
                        {
                            string accessGuid = eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel.insertAccessBarrier(session, HttpContext);
                            string esito = objLib.allegaFile(HttpContext, accessGuid, pathFile, f.Name, "ctl_doc", idDoc, "id");
                        }
                        catch (Exception ex)
                        {
                            errore = true;
                            messaggio = $"ERRORE:{ex.Message}";
                        }
                    }

                    if (!errore)
                    {
                        messaggio = "OK";

                        //'-- cambio il nome dell'allegato sulla tabella per non far uscire il nome tecnico rad...tmp..
                        strSql = "select top 1 sign_attach from ctl_doc with(nolock) where isnull(sign_attach,'') <> '' and id = " + CStr(CLng(idDoc));

                        //'-- strInfoTechAttach = strName & "*" & strType & "*" & dSize & "*" & strHashName
                        rs = GetRS(strSql);
                        dt.Write("registrazione.er.cshtml line 745 strSql: " + strSql + "   -----   rs.RecordCount: " + rs.RecordCount);

                        if (rs.RecordCount > 0)
                        {
                            rs.MoveFirst();

                            string techValue = CStr(rs["sign_attach"]);//8DAC24AFB42291B.p7m*p7m*94455*a7b331fee4974652b_20221109111549870*SHA256**2022-11-09T12:15:51
                            string[] vet = Strings.Split(techValue, "*");

                            string nome = vet[0];//8DAC24AFB42291B.p7m
                            string hash = vet[3];//

                            int pos = Strings.InStr(1, nome, "." + vet[1]);

                            string new_name = Strings.Replace(nome, Strings.Left(nome, pos - 1) + "." + vet[1], "verifica_registrazione");

                            techValue = Strings.Replace(techValue, nome, new_name);

                            //'-- aggiorno il nome del file sulla tabella ctl_attach

                            CommonDbFunctions cdb = new();
                            Dictionary<string, object?> parColl = new();
                            parColl.Add("@new_name", new_name);
                            parColl.Add("@hash", hash);

                            strSql = "update ctl_attach ";
                            strSql = strSql + " set att_name = @new_name";
                            strSql = strSql + " where att_hash = @hash";

                            cdb.Execute(strSql, ApplicationCommon.Application.ConnectionString, parCollection: parColl);

                            //'-- aggiorno il campo tecnico con il nuovo nome dell'allegato sulla ctl_doc
                            if (!string.IsNullOrEmpty(techValue))
                            {
                                parColl.Clear();
                                parColl.Add("@techValue", techValue);
                                parColl.Add("@idDoc", idDoc);
                                strSql = "update ctl_doc ";
                                strSql = strSql + " set sign_attach = @techValue";
                                strSql = strSql + " where id = @idDoc";
                                cdb.Execute(strSql, ApplicationCommon.Application.ConnectionString, parCollection: parColl);

                            }
                        }
                        else
                        {
                            errore = true;
                            messaggio = "Errore in allega file. Ripetere l'operazione";
                        }
                    }
                }
                else
                {
                    errore = true;
                    messaggio = "Allegato a taglia zero.";
                }
            }
            else
            {
                errore = true;
                messaggio = "Allega prima un file";
            }

            //'-- se il file non � stato ancora cancellato, lo cancello
            if (CommonStorage.ExistsFile(pathFile))
            {
                CommonStorage.DeleteFile(pathFile);
            }
        }
        else
        {
            errore = true;
            //'messaggio = "Errore nel recupero del documento.ID vuoto"
            messaggio = "Sessione di lavoro scaduta. Ritornare allo step 1";
        }

        if (!errore)
        {
            if (CStr(session["CONTROLLO_PEC"]) == "1")
            {
                //'NELL'ULTIMO STEP DI REGISTRAZIONE, PRIMA DI PASSARE ALLA FIRMA DEL DOCUMENTO O ALL'INVIO FINALE EFFETTUO UN ULTIMO CONTROLLO PER BLOCCARE IL CENSIMENTO
                //'IN CASO LA PEC INSERITA NELLO STEP 1 E' STATA VERIFICATA E NON E' VALIDA
                strSql = "SELECT isPEC, Status FROM CTL_Pec_Verify with(nolock) where eMail = '" + session["form_reg_email"].Replace("'", "''") + "' and [Status] = 'ELABORATED' and isPEC = 0";

                rs = GetRS(strSql);
                dt.Write("registrazione.er.cshtml line 850 strSql: " + strSql + "   -----   rs.RecordCount: " + rs.RecordCount);

                if (rs.RecordCount > 0)
                {
                    rs.MoveFirst();

                    //'-- SE LA PEC INSERITA � GI� STATA VALIDATA E NON RISULTA VALIDA. BLOCCHIAMO SUBITO
                    if (CStr(rs["Status"]).ToUpper() == "ELABORATED" && CStr(rs.Fields["isPEC"]) == "0")
                    {

                        errore = true;
                        messaggio = "La PEC aziendale inserita &egrave; stata verificata e non risulta valida";
                    }
                }
            }
        }

        insertCampoReg("MESSAGGIO_ESITO_ALLEGA", CStr(messaggio));

        session["reg_form_esito_sign"] = messaggio;
        session["reg_form_errore_sign"] = errore;

        //on error goto 0

        //'response.write "ESITO:" & ESITO

        firmaPdf();
    }

    //'Response.Write  lcase(comando)
    //'response.end

    bool erroreValidazione = false;

    //'-- se si � completata la compilazione del form
    if (comando.ToLower() == "continua")
    {
        strLabelErrStato = "";
        strLabelErrPIVA = "";
        strLabelErrCF = "";

        if (strStep == "1")
        {
            //'-- Controllo la presenza degli attributi obbligatori
            if (string.IsNullOrEmpty(codStato))
            {
                erroreValidazione = true;
                strLabelErrStato = @"<label for=""stato"" class=""label_error"">Selezionare lo stato</label>";
            }
            else
            {
                //'-- con l'attivit� 223168 si � introdotto il seguente ragionamento : "in caso di estero anteporremo al CF il codice paese a tre cifre"
                //'if codStato <> "M-1-11-ITA" and PartitaIva <> "" ) {
                if (codStato != "M-1-11-ITA" && !string.IsNullOrEmpty(codicefiscale))
                {

                    string[] arrTmp = Strings.Split(codStato, "-");
                    string codStato3Cifre = arrTmp[arrTmp.Length - 1];

                    int lenCodStato = codStato3Cifre.Length + 1;

                    //'-- Aggiunto il prefisso dello stato al codice fiscale dell'o.e. estero se non l'avevo gi� fatto
                    if (Strings.Left(codicefiscale, lenCodStato) != codStato3Cifre + "-")
                    {
                        session["form_reg_cf"] = codStato3Cifre + "-" + codicefiscale;
                        codicefiscale = session["form_reg_cf"];
                    }
                }
            }

            //'-- se la partita iva non � stata imputata e NON si sta censendo un professionista oppure la lunghezza della partita iva � minore o uguale a 2
            if (((string.IsNullOrEmpty(PartitaIva) || PartitaIva.Length <= 2) && string.IsNullOrEmpty(CStr(session["form_professionista"]))) || (CStr(session["form_professionista"]) == "si" && PartitaIva == "IT"))
            {
                erroreValidazione = true;
                strLabelErrPIVA = @"<label for=""PartitaIva"" class=""label_error"" id=""err_PartitaIva"">Inserire la Partita Iva</label>";
            }
            else
            {
                //'-- ****************************************
                //'-- **** CONTROLLO FORMALE PARTITA IVA *****
                //'-- ****************************************

                //'-- Se lo stato � italia facciamo il controllo classico
                if ((codStato == "M-1-11-ITA") && !string.IsNullOrEmpty(PartitaIva))
                {
                    string pi = MidVb6(PartitaIva, 3); //'Ci tolgo la sigla dello stato

                    if (MidVb6(PartitaIva, 1, 2).ToUpper() != "IT")
                    {
                        erroreValidazione = true;
                        //'session("errore_campo") = "La partita iva italiana deve iniziare per IT"
                        strLabelErrPIVA = @"<label for=""PartitaIva"" class=""label_error"" id=""err_PartitaIva"">La partita iva italiana deve iniziare per IT</label>";
                    }
                    else
                    {
                        string strCheck = ControllaPIVA(pi);

                        //'response.write "CONTROLLO PIVA : " & strCheck

                        if (!string.IsNullOrEmpty(strCheck))
                        {
                            erroreValidazione = true;
                            //'session("errore_campo") = strCheck
                            strLabelErrPIVA = @"<label for=""PartitaIva"" class=""label_error"" id=""err_PartitaIva"">" + strCheck + "</label>";
                        }
                    }

                }
                else
                {
                    //'-- se � stato selezionato lo stato
                    if ((!string.IsNullOrEmpty(codStato) && !string.IsNullOrEmpty(PartitaIva)))
                    {

                        //'-- Recupero il prefisso dello stato dalle prime 2 cifre della piva
                        string prefissoStato = CStr(MidVb6(PartitaIva, 1, 2)).ToUpper();
                        string pi = Strings.Right(PartitaIva, PartitaIva.Length - 2);

                        //'-- Se il formato della partita iva � valido passo a verificare se � corretta rispetto
                        //'-- allo stato selezionato
                        if (erroreValidazione == false)
                        {

                            //'Se la partita IVA non inizia per EU
                            //'	lo stato deve combaciare con la partita iva, cio� le prime 2 cifre.
                            //'
                            //'Se la partita IVA inizia per EU
                            //'	Se lo stato scelto � tra quelli presenti nella nostra tabella di validazione PIVA, blocchiamo per stato non coincidente
                            //'	Se lo stato scelto non � tra quelli presenti nella tabella di validazione PIVA, lo facciamo passare previa validazione piva EU

                            string[] arrTmp = Strings.Split(codStato, "-"); ;
                            string codStatoISO = arrTmp[arrTmp.Length - 1];

                            if (prefissoStato.ToUpper() != "EU")
                            {



                                //'strSql = "select stato from ctl_controllopiva "
                                //'strSql = strSql & " left join GEO_Elenco_Stati_ISO_3166_1 on iso_3166_1_2_lettercode = stato "
                                //'strSql = strSql & " where iso_3166_1_3_lettercode = '" & replace(codStatoISO,"'","''") & "'"

                                strSql = "select stato from ctl_controllopiva ";
                                strSql = strSql + @" left join GEO_Elenco_Stati_ISO_3166_1 on iso_3166_1_Number = CodiceEsterno ";
                                strSql = strSql + @" where iso_3166_1_3_lettercode = '" + codStatoISO.Replace("'", "''") + "'";

                                rs = GetRS(strSql);

                                if (rs.RecordCount > 0)
                                {

                                    rs.MoveFirst();
                                    string codStato2 = CStr(rs.Fields["stato"]).Trim();

                                    if (codStato2.ToUpper() != prefissoStato.ToUpper())
                                    {

                                        erroreValidazione = true;
                                        strLabelErrPIVA = @"<label for=""PartitaIva"" class=""label_error"" id=""err_PartitaIva"">Partita iva non valida per lo stato scelto</label>";

                                    }

                                }
                                else
                                {

                                    erroreValidazione = true;
                                    strLabelErrPIVA = @"<label for=""PartitaIva"" class=""label_error"" id=""err_PartitaIva"">Partita iva non valida per lo stato scelto</label>";

                                }

                                //set rs = nothing

                            }
                            else
                            {

                                //'-- SE EU

                                //'strSql = "select stato from ctl_controllopiva "
                                //'strSql = strSql & " inner join GEO_Elenco_Stati_ISO_3166_1 on iso_3166_1_2_lettercode = stato "
                                //'strSql = strSql & " where isnull(pattern,'') <> '' and iso_3166_1_3_lettercode = '" & replace(codStatoISO,"'","''") & "'"

                                strSql = "select stato from ctl_controllopiva ";
                                strSql = strSql + " inner join GEO_Elenco_Stati_ISO_3166_1 on iso_3166_1_Number = CodiceEsterno ";
                                strSql = strSql + " where isnull(pattern,'') <> '' and iso_3166_1_3_lettercode = '" + codStatoISO.Replace("'", "''") + "'";

                                rs = GetRS(strSql);

                                if (rs.RecordCount > 0)
                                {

                                    //'response.write strSql
                                    //'response.end

                                    erroreValidazione = true;
                                    strLabelErrPIVA = @"<label for=""PartitaIva"" class=""label_error"" id=""err_PartitaIva"">Partita iva non valida per lo stato scelto</label>";

                                }

                                //set rs = nothing

                            }

                            if (erroreValidazione == false)
                            {
                                string resp = "";
                                string[] arr;
                                try
                                {
                                    resp = checkPivaExt(prefissoStato, pi);
                                    arr = Strings.Split(resp, "#");
                                    if (arr[0] != "0")
                                    { //'se c'� un warning(errore formale sulla piva)
                                        erroreValidazione = true;
                                        strLabelErrPIVA = @"<label for=""PartitaIva"" class=""label_error"" id=""err_PartitaIva"">" + arr[1] + "</label>";
                                    }
                                }
                                catch (Exception ex)
                                {
                                    erroreValidazione = true;
                                    strLabelErrPIVA = @"<label for=""PartitaIva"" class=""label_error"" id=""err_PartitaIva"">" + Strings.Split(resp, "#")[1] + "-" + HtmlEncode(ex.Message) + "</label>";
                                }


                            }

                        }

                    }

                }

            }

            //'-- CON L'ATTIVITA' 223168 L'IMPUTAZIONE DEL CODICE FISCALE DIVENTA OBBLIGATORIA ANCHE PER GLI ESTERI ( IDENTIFICATIVO FISCALE ESTERO )
            //'if codStato = "M-1-11-ITA" and codicefiscale = "" ) {
            if (string.IsNullOrEmpty(codicefiscale))
            {
                erroreValidazione = true;
                strLabelErrCF = @"<label for=""codicefiscale"" class=""label_error"" id=""err_codicefiscale"">Inserire il codice fiscale</label>";
            }

            if (codStato == "M-1-11-ITA" && !string.IsNullOrEmpty(codicefiscale))
            {

                //'-- ****************************************
                //'-- *** CONTROLLO FORMALE CODICE FISCALE ***
                //'-- ****************************************
                string resp;
                //'-- Se la checkbox 'sono professionista' manca o non � stata chekkata
                if (string.IsNullOrEmpty(CStr(session["form_professionista"])))
                {
                    resp = ControllaCF(codicefiscale, false); //'-- false indica che il codice fiscale appartiene ad un azienda
                }
                else
                {

                    //'--professionista/onlus/associazione
                    //'--prima controllo se il CF � di un professionista come Persona Fisica
                    resp = ControllaCF(codicefiscale, true);     //'-- true indica che il codice fiscale appartiene ad una persona fisica

                    //'--se il CF non � di una PErsona fisica controllo se � di una azienda Onlus/associazione
                    if (!string.IsNullOrEmpty(resp))
                    {
                        resp = ControllaCF(codicefiscale, false);    //'-- false indica che il codice fiscale appartiene ad un azienda
                    }

                }

                if (!string.IsNullOrEmpty(resp))
                {

                    erroreValidazione = true;
                    //'session("errore_campo") = resp

                    strLabelErrCF = @"<label for=""codicefiscale"" class=""label_error"" id=""err_codicefiscale"">" + resp + "</label>";

                }

            }

            //'-- Verifico se l'utente ha imputato CF e PIVA invertiti tra di loro
            if (checkCfPivaInvertiti(CStr(codicefiscale), CStr(session["form_reg_piva"])))
            {

                strLabelErrPIVA = @"<label for=""PartitaIva"" class=""label_error"" id=""err_PartitaIva"">E' gia presente un azienda con il codice fiscale corrispondente alla partita iva imputata</label>";
                erroreValidazione = true;

            }

            //'-- se si sta censendo un professionista e lo stato selezionato non � ITALIA, blocco
            if (codStato != "M-1-11-ITA" && !string.IsNullOrEmpty(CStr(session["form_professionista"])))
            {

                strLabelErrStato = @"<label for=""PartitaIva"" class=""label_error"" id=""err_PartitaIva"">Non sono ammessi professionisti esteri</label>";
                erroreValidazione = true;

            }
            int esitoIdAzi = 0;
            if (erroreValidazione == false)
            {

                esitoIdAzi = checkEsistenzaAzienda(CStr(codicefiscale), CStr(session["form_reg_piva"]));

                session["ID_AZI"] = esitoIdAzi;
                session["azienda_ente"] = "NO";
                aziendaEnte = false;

                //'-- se l'azienda è gia presente nel sistema oppure è deleted
                if (esitoIdAzi > 0 || esitoIdAzi == -111)
                {
                    if (esitoIdAzi == -111)
                    {
                        session["errore_campo"] = ApplicationCommon.CNV("L'operatore economico risulta già registrato a sistema ma lo stato non è più attivo, pertanto non è possibile procedere con una nuova registrazione.");
                        aziendaGiaCensita = true;
                        erroreValidazione = true;
                    }
                    else
                    {
                        aziendaGiaCensita = true;
                        session["azienda_gia_censita"] = "YES";
                        session["form_professionista"] = "";

                        //La check del professionista verrà svuotata solo se l'azienda risulta già censita. In tal caso si recupera la PIVA coerente. SOLO SE LA PIVA è VALORIZZATA
                        //if (string.IsNullOrEmpty(session["form_reg_piva"]))
                        //{
                        session["form_professionista"] = "";
                    //}

                    }

                }
                else
                {

                    aziendaGiaCensita = false;
                    session["azienda_gia_censita"] = "NO";

                    //'-- l'azienda non � gi� presente come fornitore. passo a verificare se per� � presente come ente
                    esitoIdAzi = -1;
                    esitoIdAzi = checkEsistenzaAziendaEnte(CStr(codicefiscale));

                    if (esitoIdAzi > 0)
                    {

                        session["azienda_ente"] = "YES";
                        aziendaEnte = true;

                        session["form_reg_piva"] = getPIVA(esitoIdAzi);

                        //'------------------------------------------------------------------------------------------------------------------------------------------------------------
                        //'--- SE IL CODICE FISCALE DELL'AZIENDA NON � DI UN OPERATORE ECONOMICO, SEGNALO ALL'UTENTE CHE STA PER CENSIRE UNA NUOVA AZIENDA GIA PRESENTE COME ENTE.  ---
                        //'------------------------------------------------------------------------------------------------------------------------------------------------------------

                        styleInformativaEnte = "";
                        strJsOnLoad = $@"SqueezeBox.initialize();" + Environment.NewLine;
                        strJsOnLoad = strJsOnLoad + $@"SqueezeBox.open($('info-dati-ente'), {{" + Environment.NewLine;
                        strJsOnLoad = strJsOnLoad + $@"			handler: 'adopt'," + Environment.NewLine;
                        strJsOnLoad = strJsOnLoad + $@"			size: {{x: 300, y: 250}}" + Environment.NewLine;
                        strJsOnLoad = strJsOnLoad + $@"		}});" + Environment.NewLine;

                    }


                }

            }

            //'--ATTIVITA 227546 CONTROLLO SE AZIENDA GIA' CENSITA NON FACCIAMO AGGIUNGERE ALTRI UTENTI SE LA CONFIGURAZIONE LO PREVEDE
            if (aziendaGiaCensita == true)
            {
                if (erroreValidazione == false)
                {
                    string CONSENTI_UTENZE_MULTIPLE = Get_Func_Property("PREVIOUS_VERSION", "CONSENTI_UTENZE_MULTIPLE", "ATTIVO", "SI", -1);
                    if (CONSENTI_UTENZE_MULTIPLE != "SI")
                    {
                        erroreValidazione = true;
                        session["errore_campo"] = "Per l'operatore economico è già presente un utente, nel caso procedere con un recupero delle credenziali attraverso le funzioni dedicate.";
                    }
                }
            }


            if (aziendaGiaCensita == true)
            {

                if (erroreValidazione == false)
                {

                    strSql = "declare @profiloLimitato varchar(500) " + Environment.NewLine;
                    strSql = strSql + "set @profiloLimitato = ''" + Environment.NewLine;
                    strSql = strSql + "select @profiloLimitato = REL_ValueOutput from ctl_relations with(nolock) where REL_Type = 'PROFILI_BASE' and REL_ValueInput = 'OE_LIMITATO'" + Environment.NewLine;
                    strSql = strSql + "select count(pfu.idpfu) as Utenti " + Environment.NewLine;
                    strSql = strSql + "	from profiliutente pfu with(nolock)" + Environment.NewLine;
                    strSql = strSql + "			inner join ProfiliUtenteAttrib attr with(nolock) ON pfu.idpfu = attr.IdPfu and attr.dztNome = 'Profilo' and attr.attValue = @profiloLimitato " + Environment.NewLine;
                    strSql = strSql + "	where pfuidazi = " + CStr(session["ID_AZI"]);

                    rs = GetRS(strSql);

                    int utentiLimit = 0;
                    int utentiAzienda = 1;

                    if (rs.RecordCount > 0)
                    {
                        rs.MoveFirst();
                        utentiLimit = CInt(rs.Fields["Utenti"]);
                    }

                    strSql = "select count(*) as Utenti from profiliutente with(nolock) where pfuidazi = " + CStr(session["ID_AZI"]);
                    rs = GetRS(strSql);
                    if (rs.RecordCount > 0)
                    {
                        rs.MoveFirst();
                        utentiAzienda = CInt(rs.Fields["Utenti"]);
                    }

                    //'--se esistono utenti per azienda (kpf 428899) e se tutti gli utenti dell'azienda sono in stato 'limitato' blocco il censimento
                    if (utentiAzienda > 0 && utentiAzienda == utentiLimit)
                    {
                        erroreValidazione = true;
                        session["errore_campo"] = "L'azienda nella quale ci si vuole censire è in fase di approvazione";
                    }

                    //set rs = nothing

                }

            }


            //'-- se non ci sono stati errori di validazione nello step 1 e l'azienda non � gi� censita passo ad invocare parix
            if (erroreValidazione == false && aziendaGiaCensita == false)
            { //'and aziendaEnte = false ) {

                //'-- Se stiamo nel caso d'uso, ente che si sta per censire anche come OE.
                //'-- Recupero tutti i dati dell'ente per portarli nell'interfaccia, scheda 2.
                //'-- fatto ci� invoco comunque parix e andr� a sovrascrivere i dati pre-esistenti e da avvalorare quelli mancanti
                if (aziendaEnte == true)
                {
                    recuperaInfoParix(esitoIdAzi, false);
                }

                //'-- invoco parix solo se � italia e se codiceFiscale avvalorato
                if (codStato == "M-1-11-ITA" && !string.IsNullOrEmpty(codicefiscale))
                {

                    session["azienda_estera"] = "NO";

                    //'-- se trovo in sessione il codice fiscale vuol dire che � gia stato invocato
                    //'-- parix. quindi verifico se � stato cambiato.
                    if (CStr(session["form_reg_cf_parix"]) != codicefiscale)
                    {

                        session["form_reg_cf_parix"] = codicefiscale;

                        //'-- se sono nel caso ente che si sta censendo come OE. non devo ripulire i dati presenti in quanto ci ho caricato i dati dell'ente
                        if (aziendaEnte == false)
                        {
                            ripulisciInfoparix();
                        }


                        //'-- se si � scelto italia come stato per l'invocazione a parix tolto il prefisso dello stato
                        esitoParix = invokeParix(codicefiscale, PartitaIva);

                        session["esitoParix"] = esitoParix;

                        //'response.write "<h1>parix:" & esitoParix & "</h1>"
                        //'response.end

                        if (string.IsNullOrEmpty(CStr(esitoParix)))
                        {

                            recuperaInfoParix(codicefiscale, true);


                            session["attiva_step_firma"] = "";
                            session["form_reg_stato_2"] = "M-1-11-ITA";

                            //'------------------------------------------------------------------------------------------------------------------------------
                            //'----- AVVISO L'UTENTE CHE PARIX HA RITORNATO INFORMAZIONI PER IL CODICE FISCALE INSERITO E CHE LE MODIFICHE DEI DATI  --------
                            //'----- NON AVVERRANNO ANCHE SUL REGISTRO DELLE IMPRESE
                            //'------------------------------------------------------------------------------------------------------------------------------

                            //'-- se non � gi� presente l'informativa ente
                            if (!string.IsNullOrEmpty(styleInformativaEnte))
                            {

                                styleInformativaParix = "";

                                strJsOnLoad = $@"SqueezeBox.initialize();" + Environment.NewLine;
                                strJsOnLoad = strJsOnLoad + $@"SqueezeBox.open($('info-parix-dati'), {{" + Environment.NewLine;
                                strJsOnLoad = strJsOnLoad + $@"			handler: 'adopt'," + Environment.NewLine;
                                strJsOnLoad = strJsOnLoad + $@"			size: {{x: 300, y: 250}}" + Environment.NewLine;
                                strJsOnLoad = strJsOnLoad + $@"		}});" + Environment.NewLine;

                            }

                        }
                        else
                        {

                            styleInformativaParix = "display:none";

                            //on error resume next

                            string userIp = getIpClient(Request).Replace("'", "''");
                            string browserUsato = Request.HttpContext.GetServerVariable("HTTP_USER_AGENT") != null ? Request.HttpContext.GetServerVariable("HTTP_USER_AGENT").Replace("'", "''") : "";

                            strSql = "INSERT INTO CTL_LOG_UTENTE " +
                            "(ip,datalog,paginaDiArrivo,paginaDiPartenza,querystring,form,browserUsato,sessionID) VALUES " +
                            "('" + userIp + "',getDate(),'INVOCAZIONE-PARIX','REGISTRAZIONE'," +
                            "'ERRORE','" + CStr(esitoParix).Replace("'", "''") + "','" + browserUsato + "','" + CStr(session.SessionID).Replace("'", "''") + "')";

                            ExecSQL(strSql);

                        }



                    }

                    //'---- VISTO CHE SIAMO NEL CASO IN CUI IL REGISTRO DELLE IMPRESE CI HA RITORNATO L'AZIENDA ANDIAMO A CONTROLLARE
                    //'--		SE IL CODICE FISCALE E LA PARTITA IVA IMPUTATI DALL'UTENTE CORRISPONDONO CON QUANTO RITORNATO DAL REGISTRO IMPRESE. SE COSI' NON FOSSE BLOCCHIAMO
                    if (!string.IsNullOrEmpty(CStr(ApplicationCommon.Application["CONNETTORE_AZIENDE_EXT"])) && string.IsNullOrEmpty(CStr(session["esitoParix"])))
                    {

                        //'response.write "<H1>esitoparix:" & esitoParix & "</H1>"
                        //'--se l'integrazione ritorna la PIVA controllo che i dati ritornati coincidono con quelli inseriti nel form
                        //'--nel caso in cui la PIVA non � ritornata consideriamo l'azienda come non presente nel sistema esterno.
                        if (!string.IsNullOrEmpty(CStr(session["oe_piva_registro_imprese"])))
                        {

                            if (CStr(session["oe_CodiceFiscale_registro_imprese"]) != CStr(session["form_reg_cf_parix"]) || CStr(session["oe_piva_registro_imprese"]) != CStr(session["form_reg_piva"]).ToUpper().Replace("IT", ""))
                            {

                                erroreValidazione = true;
                                session["errore_campo"] = ApplicationCommon.CNV("I dati inseriti non coincidono con quelli restituiti dal registro delle imprese");

                            }

                        }

                    }


                    //'------------------------------------------------------------------------------------------------------------------------------------------------
                    //'-- SE INTEGRAZIONE NON ATTIVA oppure INTEGRAZIONE NON HA RITORNATO NULLA --> ALLORA CONTROLLO SE PIVA ESISTENTE SU ALTRA AZIENDA NEL SISTEMA ---
                    //'------------------------------------------------------------------------------------------------------------------------------------------------
                    if (string.IsNullOrEmpty(CStr(ApplicationCommon.Application["CONNETTORE_AZIENDE_EXT"])) || !string.IsNullOrEmpty(CStr(session["esitoParix"])))
                    {

                        //'--solo se valorizzata faccio il controllo
                        if (!string.IsNullOrEmpty(CStr(session["form_reg_piva"])))
                        {

                            int esitoPIVA_OE = -1;
                            esitoPIVA_OE = checkPIVA_esistenteOE(CStr(session["form_reg_piva"]));

                            if (esitoPIVA_OE > 0)
                            {

                                session["azienda_oe"] = "YES";
                                aziendaPIVA_OE = true;

                                //'---------------------------------------------------------------------------------------------------------------------
                                //'--- SE LA PARTITA IVA DELL'AZIENDA E' GIA PRESENTE PER UN ALTRA AZIENDA OE, LO CONSENTIAMO MA DIAMO UN MESSAGGIO ----
                                //'---------------------------------------------------------------------------------------------------------------------

                                styleInformativaEnte = "";
                                strJsOnLoad = $@"SqueezeBox.initialize();" + Environment.NewLine;
                                strJsOnLoad = strJsOnLoad + $@"SqueezeBox.open($('info-dati-oe'), {{" + Environment.NewLine;
                                strJsOnLoad = strJsOnLoad + $@"			handler: 'adopt'," + Environment.NewLine;
                                strJsOnLoad = strJsOnLoad + $@"			size: {{x: 300, y: 250}}" + Environment.NewLine;
                                strJsOnLoad = strJsOnLoad + $@"		}});" + Environment.NewLine;

                            }

                        }

                    }

                }
                else
                {

                    session["azienda_estera"] = "YES";

                    if (CStr(ApplicationCommon.Application["REG_DISATTIVA_FIRMA"]).ToUpper() != "YES")
                    {
                        session["attiva_step_firma"] = "YES";
                    }

                    session["form_reg_cf_parix"] = codicefiscale;

                    if (aziendaEnte == false)
                    {
                        ripulisciInfoparix();
                    }

                }

                //'-- carico in sessione i dati di validazione per i campi
                loadValidationCollection();

            }
            else
            {

                //'-- non ricordo perch� avevo invocato il recuperaInfoParix sotto if di azienda aziendaEnte = true
                //'-- ma se lo lascio cos� non mi recupera pi� i dati azienda quando un azienda � gi� presente ma NON � ente..
                //'-- cio� il 99,9% dei casi..
                //'if aziendaEnte = true ) {
                //'	call recuperaInfoParix(esitoIdAzi, false)
                //'}

                recuperaInfoParix(esitoIdAzi, false);

                //'-- Se � stato richiesto di richiedere sempre la firma
                if (CStr(ApplicationCommon.Application["REG_RICHIEDI_FIRMA_OE"]).ToUpper() == "YES")
                {

                    if (CStr(ApplicationCommon.Application["REG_DISATTIVA_FIRMA"]).ToUpper() != "YES")
                    {

                        session["attiva_step_firma"] = "YES";

                    }

                }
                else
                {

                    //'-- Non dovendo modificare i dati azienda disattivo lo step di firma
                    session["attiva_step_firma"] = "NO";

                }

                //'-- carico in sessione i dati di validazione per i campi
                loadValidationCollection();

            }

        }

        if (strStep == "2")
        {

            //'-- se stiamo proseguendo dallo step 2 valido i dati del form 2
            strLabelErrRagSoc = "";
            strLabelErrNatGiur = "";
            strLabelErrIndiriz = "";
            strLabelErrTelefon = "";
            strLabelErrFax = "";
            strLabelErrEmail = "";

            strLabelErrCap = "";
            strLabelErrCitta = "";
            strLabelErrProvincia = "";

            strLabelErrIscrCCIAA = "";
            strLabelErrSedeCCIAA = "";

            strLabelErrCodiceEORI = "";


            //'-- Se siamo nel caso 'azienda gia censita' o nel caso di un ente che vuole censirsi come OE,  non valido i dati dell'azienda avendoli recuperati dal database (quindi gia validi)
            if (aziendaGiaCensita == false)
            {  //'and aziendaEnte = false ) {

                if (string.IsNullOrEmpty(cap))
                {
                    erroreValidazione = true;
                    strLabelErrCap = @"<label for=""cap"" class=""label_error"">Campo obbligatorio</label>";
                }
                else
                {
                    //'-- se lo stato � italia applicato la validazione del cap
                    if (codStato == "M-1-11-ITA" && validateFieldReg("cap", cap) == false)
                    {
                        erroreValidazione = true;
                        strLabelErrCap = @"<label for=""cap"" class=""label_error"">Valore non valido</label>";
                    }
                }

                if (string.IsNullOrEmpty(citta))
                {
                    erroreValidazione = true;
                    strLabelErrCitta = @"<label for=""citta"" class=""label_error"">Campo obbligatorio</label>";
                }
                else
                {
                    if (validateFieldReg("Citta", citta) == false)
                    {
                        erroreValidazione = true;
                        strLabelErrCitta = @"<label for=""citta"" class=""label_error"">Valore non valido</label>";
                    }
                }

                if (string.IsNullOrEmpty(provincia))
                {
                    erroreValidazione = true;
                    strLabelErrProvincia = @"<label for=""provincia"" class=""label_error"">Campo obbligatorio</label>";
                }
                else
                {
                    if (validateFieldReg("Provincia", provincia) == false)
                    {
                        erroreValidazione = true;
                        strLabelErrProvincia = @"<label for=""provincia"" class=""label_error"">Valore non valido</label>";
                    }
                }

                if (string.IsNullOrEmpty(RagSociale))
                {
                    erroreValidazione = true;
                    strLabelErrRagSoc = @"<label for=""RagSociale"" class=""label_error"">Campo obbligatorio</label>";
                }
                else
                {

                    if (validateFieldReg("RagSociale", RagSociale) == false)
                    {
                        erroreValidazione = true;
                        strLabelErrRagSoc = @"<label for=""RagSociale"" class=""label_error"">Valore non valido</label>";
                    }

                }

                if (string.IsNullOrEmpty(NaturaGiuridica) || NaturaGiuridica == "0")
                {
                    erroreValidazione = true;
                    strLabelErrNatGiur = @"<label for=""NaturaGiuridica"" class=""label_error"">Campo obbligatorio</label>";
                }

                if (string.IsNullOrEmpty(Indirizzo))
                {
                    erroreValidazione = true;
                    strLabelErrIndiriz = @"<label for=""Indirizzo"" class=""label_error"">Campo obbligatorio</label>";
                }
                else
                {
                    if (validateFieldReg("Indirizzo", Indirizzo) == false)
                    {
                        erroreValidazione = true;
                        strLabelErrIndiriz = @"<label for=""Indirizzo"" class=""label_error"">Valore non valido</label>";
                    }
                }


                //'-- Se � stato inserito l'anno di iscrizione verifico che il suo valore sia maggiore di 1900 e minore
                //'-- dell'anno corrente
                if (!string.IsNullOrEmpty(AnnoCostituzione))
                {
                    if (IsNumeric(AnnoCostituzione))
                    {
                        if (CLng(AnnoCostituzione) < 1900 || CLng(AnnoCostituzione) > DateAndTime.Year(DateAndTime.Now))
                        {
                            erroreValidazione = true;
                            strLabelErrAnnoCostituzione = @"<label for=""AnnoCostituzione"" class=""label_error"">Campo non valido</label>";
                        }
                    }
                    else
                    {
                        erroreValidazione = true;
                        strLabelErrAnnoCostituzione = @"<label for=""AnnoCostituzione"" class=""label_error"">Campo non valido</label>";
                    }
                }

                if (!string.IsNullOrEmpty(IscrCCIAA))
                {
                    if (!IsNumeric(IscrCCIAA))
                    {
                        erroreValidazione = true;
                        strLabelErrIscrCCIAA = @"<label for=""IscrCCIAA"" class=""label_error"">Campo non valido</label>";
                    }
                }

                if (!string.IsNullOrEmpty(SedeCCIAA))
                {
                    if (validateFieldReg("SedeCCIAA", SedeCCIAA) == false)
                    {
                        erroreValidazione = true;
                        strLabelErrSedeCCIAA = @"<label for=""SedeCCIAA"" class=""label_error"">Campo non valido</label>";
                    }
                }

                if (!string.IsNullOrEmpty(CodiceEORI))
                {
                    if (validateFieldReg("CodiceEORI", CodiceEORI) == false)
                    {
                        erroreValidazione = true;
                        strLabelErrCodiceEORI = @"<label for=""CodiceEORI"" class=""label_error"">Campo non valido</label>";
                    }
                }

                if (string.IsNullOrEmpty(Telefono))
                {
                    erroreValidazione = true;
                    strLabelErrTelefon = @"<label for=""Telefono"" class=""label_error"">Campo obbligatorio</label>";
                }
                else
                {
                    if (validateFieldReg("Telefono", Telefono) == false)
                    {
                        erroreValidazione = true;
                        strLabelErrTelefon = @"<label for=""Telefono"" class=""label_error"">Valore non valido</label>";
                    }
                }


                if (string.IsNullOrEmpty(NumeroFax))
                { //'CONTROLLO NON RICHIESTO PIU'
                  //'erroreValidazione = true
                  //'strLabelErrFax = "<label for=""NumeroFax"" class=""label_error"">Campo obbligatorio</label>";
                }
                else
                {
                    if (validateFieldReg("NumeroFax", NumeroFax) == false)
                    {
                        erroreValidazione = true;
                        strLabelErrFax = @"<label for=""NumeroFax"" class=""label_error"">Valore non valido</label>";
                    }
                }

                if (string.IsNullOrEmpty(EMail))
                {
                    erroreValidazione = true;
                    strLabelErrEmail = @"<label for=""EMail"" class=""label_error"">Campo obbligatorio</label>";
                }
                else
                {

                    if (!isEmailValid(EMail))
                    {
                        erroreValidazione = true;
                        strLabelErrEmail = @"<label for=""EMail"" class=""label_error"">Email non valida</label>";
                    }
                    else
                    {

                        //'-----------------------------------------------------------------------------------------------
                        //'-- SE SUL CLIENTE � ATTIVO IL BLOCCO DELLE CREDENZIALI FINO ALLA VALIDAZIONE DELL'EMAIL PEC  --
                        //'-----------------------------------------------------------------------------------------------
                        if (CStr(session["CONTROLLO_PEC"]) == "1")
                        {

                            string strSQL = "SELECT isPEC, [Status] FROM CTL_Pec_Verify with(nolock) where eMail = '" + EMail.Replace("'", "''") + "'";

                            rs = GetRS(strSQL);

                            if (rs.RecordCount > 0)
                            {

                                rs.MoveFirst();

                                //'-- SE LA PEC INSERITA � GI� STATA VALIDATA E NON RISULTA VALIDA. BLOCCHIAMO SUBITO
                                if (CStr(rs.Fields["Status"]).ToUpper() == "ELABORATED" && CStr(rs.Fields["isPEC"]) == "0")
                                {

                                    erroreValidazione = true;
                                    strLabelErrEmail = @"<label for=""EMail"" class=""label_error"">La PEC inserita non risulta valida</label>";

                                }

                            }
                            else
                            {

                                //'-- SE L'EMAIL � FORMALMENTE VALIDA INSERISCO IL RECORD NELLA CTL_PEC_VERIFY PER FAR CONTROLLARE LA BONT� DELLA PEC.
                                //'--		SUBITO IN SUCCESSIONE FACCIO SCATTARE IL PROCESSO PER FAR PARTIRE LA MAIL DI VERIFICA PEC

                                strSQL = @"IF NOT EXISTS ( select * from CTL_Pec_Verify with(nolock) where eMail = '" + EMail.Replace("'", "''") + "' )";
                                strSQL = strSQL + @"BEGIN" + Environment.NewLine;
                                strSQL = strSQL + @"		SET NOCOUNT ON" + Environment.NewLine;
                                strSQL = strSQL + @"		declare @idPec INT" + Environment.NewLine;
                                strSQL = strSQL + @"		insert into CTL_Pec_Verify (eMail,isPEC,DataIns,[Status], tipodoc) values ( '" + EMail.Replace("'", "''") + "', 0, GETDATE(), 'Inserted', 'REGISTRAZIONE')" + Environment.NewLine;
                                strSQL = strSQL + @"		set @idPec = SCOPE_IDENTITY()" + Environment.NewLine;
                                strSQL = strSQL + @"		select @idPec as id" + Environment.NewLine;
                                strSQL = strSQL + @"END" + Environment.NewLine;
                                strSQL = strSQL + @"ELSE" + Environment.NewLine;
                                strSQL = strSQL + @"		select top 0 123 as id";

                                TSRecordSet rs2 = GetRS(strSQL);

                                if (rs2.RecordCount > 0)
                                {

                                    rs2.MoveFirst();

                                    dynamic idPecVerify = rs2.Fields["id"];

                                    //on error resume next

                                    string strDescErrore = "";
                                    try
                                    {
                                        eProcurementNext.CtlProcess.ClsElab objProc = new eProcurementNext.CtlProcess.ClsElab();
                                        objProc.Elaborate("SEND_MAIL_CHECK_PEC", "MAIL_PEC", CLng(idPecVerify), CLng(-20), ref strDescErrore, 1, ApplicationCommon.Application.ConnectionString);

                                    }
                                    catch (Exception ex)
                                    {
                                        strErrore = @" Errore MAIL_PEC,SEND_MAIL_CHECK_PEC " + ex.Message + "-" + strDescErrore + ":";
                                        htmlToReturn.Write(strErrore);
                                        MyErrore("", "", ex.ToString());

                                        throw new ResponseEndException(htmlToReturn.Out(), Response, strErrore);
                                    }


                                    if (!string.IsNullOrEmpty(strDescErrore))
                                    {

                                        //set rs = nothing
                                        //set rs2 = nothing
                                        strErrore = @" Errore MAIL_PEC,SEND_MAIL_CHECK_PEC " + "-" + strDescErrore + ":";
                                        htmlToReturn.Write(strErrore);
                                        throw new ResponseEndException(htmlToReturn.Out(), Response, strErrore);

                                    }

                                    //on error goto 0

                                    //'}else{
                                    //'	set rs = nothing
                                    //'	set rs2 = nothing
                                    //'	response.write "ERRORE BLOCCANTE NELL'INSERIMENTO DELLA PEC ALL'INTERNO DELLA CTL_Pec_Verify"
                                    //'	response.end
                                }

                                //set rs2 = nothing

                            }

                            //set rs = nothing

                        }

                    }

                }

                //'-- se la codifica della provincia � vuota vuol dire che non � stata selezionata la sede legale a partire dal dominio geo. quindi blocco
                if (codStato == "M-1-11-ITA" && string.IsNullOrEmpty(CStr(session["form_reg_provincia_leg"])))
                {
                    erroreValidazione = true;
                    strLabelErrCitta = @"<label for=""citta"" class=""label_error"">Selezionare comune sede legale</label>";
                }

                //'-- se nel 1o step ho selezionato lo stato italia e nel 2o step ho selezionato un comune di un paese estero
                //'--	MA NON ho messo come natura giuridica 'Soggetto estero' allora blocco
                if (erroreValidazione == false && (NaturaGiuridica != "Soggetto estero" && codStato == "M-1-11-ITA" && session["form_reg_stato_2"] != "M-1-11-ITA"))
                {
                    erroreValidazione = true;
                    strLabelErrCitta = @"<label for=""citta"" class=""label_error"">Per poter selezionare una localit&agrave; estera la natura giuridica deve essere 'Soggetto estero'</label>";
                }


            }

        }

        if (strStep == "3")
        {

            //'-- se stiamo proseguendo dallo step 3 valido i dati del form 3
            strLabelErrNomeRapLeg = "";
            strLabelErrCognomeRapLeg = "";
            strLabelErrTelRapLeg = "";
            strLabelErrCellulareRapLeg = "";
            strLabelErrEmailRif = "";
            strLabelErrFunzAzi = "";
            strLabelErrCfRapLegM = "";
            strLabelErrEmailRifAzi = "";
            strLabelWarningCfRapLegM = "";


            if (string.IsNullOrEmpty(NomeRapLeg))
            {
                erroreValidazione = true;
                strLabelErrNomeRapLeg = @"<label for=""NomeRapLeg"" class=""label_error"">Campo obbligatorio</label>";
            }
            else
            {
                if (validateFieldReg("NomeRapLeg", NomeRapLeg) == false)
                {
                    erroreValidazione = true;
                    strLabelErrNomeRapLeg = @"<label for=""NomeRapLeg"" class=""label_error"">Valore non valido</label>";
                }
            }

            if (string.IsNullOrEmpty(CognomeRapLeg))
            {
                erroreValidazione = true;
                strLabelErrCognomeRapLeg = @"<label for=""CognomeRapLeg"" class=""label_error"">Campo obbligatorio</label>";
            }
            else
            {
                if (validateFieldReg("CognomeRapLeg", CognomeRapLeg) == false)
                {
                    erroreValidazione = true;
                    strLabelErrCognomeRapLeg = @"<label for=""CognomeRapLeg"" class=""label_error"">Valore non valido</label>";
                }
            }

            if (string.IsNullOrEmpty(TelefonoRapLeg))
            {
                erroreValidazione = true;
                strLabelErrTelRapLeg = @"<label for=""TelefonoRapLeg"" class=""label_error"">Campo obbligatorio</label>";
            }
            else
            {
                if (validateFieldReg("TelefonoRapLeg", TelefonoRapLeg) == false)
                {
                    erroreValidazione = true;
                    strLabelErrTelRapLeg = @"<label for=""TelefonoRapLeg"" class=""label_error"">Valore non valido</label>";
                }
            }

            if (!string.IsNullOrEmpty(CellulareRapLeg) && validateFieldReg("CellulareRapLeg", CellulareRapLeg) == false)
            {
                erroreValidazione = true;
                strLabelErrCellulareRapLeg = @"<label for=""CellulareRapLeg"" class=""label_error"">Valore non valido</label>";
            }

            if (string.IsNullOrEmpty(EMailRif))
            {
                erroreValidazione = true;
                strLabelErrEmailRif = @"<label for=""EMailRif"" class=""label_error"">Campo obbligatorio</label>";
            }
            else if (!isEmailValid(EMailRif))
            {
                erroreValidazione = true;
                strLabelErrEmailRif = @"<label for=""EMailRif"" class=""label_error"">Email non valida</label>";
            }
            if (!string.IsNullOrEmpty(EMailRiferimentoAzienda) && !isEmailValid(EMailRiferimentoAzienda))
            {
                erroreValidazione = true;
                strLabelErrEmailRifAzi = @"<label for=""EMailRiferimentoAzienda"" class=""label_error"">Email non valida</label>";
            }
            if (string.IsNullOrEmpty(funzione_aziendale) || funzione_aziendale == "0")
            {
                erroreValidazione = true;
                strLabelErrFunzAzi = @"<label for=""funzione_aziendale"" class=""label_error"">Campo obbligatorio</label>";
            }

            if (string.IsNullOrEmpty(cfRapLeg))
            {
                erroreValidazione = true;
                strLabelErrCfRapLegM = @"<label for=""cfRapLeg"" class=""label_error"">Campo obbligatorio</label>";
            }
            else
            {

                //'-- se ha inserito il cf del rapLeg e ha scelto Italia effettuo anche una verifica formale
                if (codStato == "M-1-11-ITA")
                {

                    //'-- ****************************************
                    //'-- *** CONTROLLO FORMALE CODICE FISCALE ***
                    //'-- ****************************************
                    string resp = ControllaCF(cfRapLeg, true);

                    if (!string.IsNullOrEmpty(resp))
                    {

                        erroreValidazione = true;
                        strLabelErrCfRapLegM = @"<label for=""cfRapLeg"" class=""label_error"">Codice fiscale non valido</label>";

                    }
                    else
                    {

                        if (string.IsNullOrEmpty(CStr(session["form_reg_warning_cfrapleg"])) || CStr(session["form_reg_warning_cfrapleg"]) != (cfRapLeg + NomeRapLeg + CognomeRapLeg))
                        {

                            //'-- se � un codice fiscale valido formalmente passo ad effettuare il controllo (in warning, cio� non bloccante)
                            //'-- per verificare che nome e cognome del rapLeg corrispondono con il codice fiscale
                            if (!isMyCF(NomeRapLeg, CognomeRapLeg, cfRapLeg))
                            {
                                erroreValidazione = true;
                                strLabelWarningCfRapLegM = @"<label for=""cfRapLeg"" class=""label_error"">Codice fiscale non corrispondente</label>";
                                session["form_reg_warning_cfrapleg"] = cfRapLeg + NomeRapLeg + CognomeRapLeg;
                            }

                        }

                    }

                }


                strSql = @"select idpfu,pfuDeleted from profiliutente with(nolock) where pfuCodiceFiscale = '" + cfRapLeg.Replace("'", "''") + "' and pfuIdAzi = " + CStr(session["ID_AZI"]);
                //'response.write strSql
                //'response.end

                rs = GetRS(strSql);

                if (rs.RecordCount > 0)
                {
                    erroreValidazione = true;
                    //'PRIMA DELLE MODIFICHE FATTE CON ATTIVITA' 336256  mostrava il messaggio e bloccava
                    //'session("errore_campo") = "Utente gia censito. Effettuare il recupero credenziali"
                    if (CInt(rs.Fields["pfuDeleted"]) == 1)
                    {
                        session["errore_campo"] = ApplicationCommon.CNV(@"L'utente inserito risulta cessato nel sistema. Si desidera riattivarlo? In caso di riattivazione verranno inviate le credenziali all’indirizzo e-mail registrato nella piattaforma.") + @" <div id='messaggio_utente' ><input type=""submit"" class=""btn_forward"" name=""comando"" value=""Riattiva Utente"" onclick=""document.getElementById('loading').style.display = 'block'""/><br/><br/></div>";
                    }
                    else
                    {
                        session["errore_campo"] = ApplicationCommon.CNV(@"L'utente inserito risulta già presente nel sistema. Si desidera ricevere nuovamente le credenziali? Verranno inviate le credenziali all’indirizzo e-mail registrato nella piattaforma.") + @" <div id='messaggio_utente'><input type=""submit"" class=""btn_forward"" name=""comando"" value=""Invia Credenziali"" onclick=""document.getElementById('loading').style.display = 'block'""/><br/><br/></div>";
                    }

                }

            }

        }

        if (strStep == "4")
        {

            //'-- se stiamo proseguendo dallo step 3 valido i dati del form 3
            strLabelErrAgree = "";
            strLabelErrCaptcha = "";

            if (string.IsNullOrEmpty(privacyagree) || privacyagree.ToLower() == "no")
            {
                erroreValidazione = true;
                strLabelErrAgree = @"<label for=""privacyagree"" class=""label_error"">Scelta obbligatoria</label>";
            }

            //'esitoCaptcha = cstr(request.form("esitoCaptcha"))
            //'if esitoCaptcha = "KO" ) {

            if (!TestCaptcha("captcha_access_totale", GetValueFromForm(Request, (session["captcha_field_name"]))))
            {
                erroreValidazione = true;
                //'strLabelErrCaptcha = "<label for=""captchacode"" class=""label_error"">Valore non corretto</label>"
                strLabelErrCaptcha = @"<label class=""label_error"">Valore non corretto</label>";
            }

            if (erroreValidazione == false)
            {
                session["censimento_ok"] = "OK";
                session["censimento2_ok"] = "OK";
            }

            if (CStr(session["CONTROLLO_PEC"]) == "1")
            {

                //'NELL'ULTIMO STEP DI REGISTRAZIONE, PRIMA DI PASSARE ALLA FIRMA DEL DOCUMENTO O ALL'INVIO FINALE EFFETTUO UN ULTIMO CONTROLLO PER BLOCCARE IL CENSIMENTO
                //'IN CASO LA PEC INSERITA NELLO STEP 1 E' STATA VERIFICATA E NON E' VALIDA
                strSql = "SELECT isPEC, Status FROM CTL_Pec_Verify with(nolock) where eMail = '" + session["form_reg_email"].Replace("'", "''") + "' and [Status] = 'ELABORATED' and isPEC = 0";

                rs = GetRS(strSql);

                if (rs.RecordCount > 0)
                {

                    rs.MoveFirst();

                    //'-- SE LA PEC INSERITA � GI� STATA VALIDATA E NON RISULTA VALIDA. BLOCCHIAMO SUBITO
                    if (CStr(rs.Fields["Status"]).ToUpper() == "ELABORATED" && CStr(rs.Fields["isPEC"]) == "0")
                    {

                        erroreValidazione = true;
                        session["errore_campo"] = "La PEC aziendale inserita &egrave; stata verificata e non risulta valida";

                    }

                }

                //set rs = nothing

            }

        }

        //'-- se non c'� stato un errore di validazione avanzo nella registrazione
        if (strStep == "1" && !erroreValidazione)
        {

            //set obj = server.CreateObject("ctldb.clsAzienda")

            int esitoIdAzi = checkEsistenzaAzienda(CStr(codicefiscale), CStr(session["form_reg_piva"]));

            //set obj = nothing

            //'-- se l'azienda � gia presente nel sistema
            if (esitoIdAzi > 0)
            {

                //'session("errore_campo") = "azienda gi&agrave; censita"
                //'erroreValidazione = true
                aziendaGiaCensita = true;
                session["azienda_gia_censita"] = "YES";

            }
            else
            {
                session["azienda_gia_censita"] = "NO";
            }

        }

    }
    else if (comando.ToLower() == "sel-stato")
    {

        //'-- Recupero l'id della lib_domainvalues associato all'italia per aprire
        //'-- il dominio direttamente sull'italia
        strSql = "select id from lib_domainvalues with(nolock) where dmv_dm_id = 'geo' and dmv_descml in ('Italy','Italia')";
        rs = GetRS(strSql);

        rs.MoveFirst();

        dynamic codiceItalia = rs.Fields["id"];

        //set rs = nothing

        session["gerarchico_path_start"] = "GEO";                            //'-- filtro di partenza per il gerarchico.
        session["gerarchico_path_filtra"] = "GEO and " + CStr(codiceItalia);     //'-- chiedo il dominio GEO preselezionato sull'italia

        string chiamante = "/" + ApplicationCommon.Application["NOMEAPPPORTALE_JOOMLA"] + "/index.php/registrazione";

        //'-- se negli headers mi arriva il chiamante ( vedi contesto portale_ic - wrapper asp )
        if (!string.IsNullOrEmpty(CStr(GetValueFromForm(Request, "CUSTOM_CALLBACK"))))
        {
            chiamante = CStr(GetValueFromForm(Request, "CUSTOM_CALLBACK"));
        }


        session["gerarchico_chiamante"] = chiamante + "?comando=ricarica";

        session["gerarchico_livelli_sel"] = ",3,";
        session["gerarchico_livello_max"] = "3";
        session["suggerimento_gerarchico"] = "Suggerimento di selezione dello stato di provenienza dell'azienda per il censimento";
        if (!string.IsNullOrEmpty(CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"])))
        {
            throw new ResponseRedirectException("/" + CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"]) + $@"/ctl_library/gerarchici.asp?lo=content&portale=yes&backoffice=yes&fieldname=stato", Response);
        }
        else
        {
            throw new ResponseRedirectException("/Application/ctl_library/gerarchici.asp?lo=content&portale=yes&backoffice=yes&fieldname=stato", Response);
        }


    }
    else if (comando.ToLower() == "sel-sede-legale")
    {

        //'-- Recupero l'id della lib_domainvalues associato allo stato scelto nello step 1
        strSql = "select id from lib_domainvalues with(nolock) where dmv_dm_id = 'geo' and dmv_cod = '" + CStr(session["form_reg_cstato"]).Replace("'", "''") + "'";
        rs = GetRS(strSql);

        rs.MoveFirst();

        dynamic codStatoScelto = rs.Fields["id"];

        //set rs = nothing

        session["gerarchico_path_start"] = "GEO";            //'-- filtro di partenza per il gerarchico. in questo caso chiediamo
        session["gerarchico_path_filtra"] = "GEO and " + CStr(codStatoScelto);

        string chiamante = "/" + ApplicationCommon.Application["NOMEAPPPORTALE_JOOMLA"] + "/index.php/registrazione";

        //'-- se negli headers mi arriva il chiamante ( vedi contesto portale_ic - wrapper asp )
        if (!string.IsNullOrEmpty(CStr(GetValueFromForm(Request, "CUSTOM_CALLBACK"))))
        {
            chiamante = CStr(GetValueFromForm(Request, "CUSTOM_CALLBACK"));
        }

        session["gerarchico_chiamante"] = chiamante + "?comando=ricarica";

        if (CStr(session["form_reg_cstato"]) == "M-1-11-ITA")
        {
            //'session("gerarchico_livelli_sel") = ",6,7,"
            session["gerarchico_livelli_sel"] = ",7,";
            session["gerarchico_livello_max"] = "7";
        }
        else
        {
            session["gerarchico_livelli_sel"] = ",6,";
            session["gerarchico_livello_max"] = "6";
        }

        session["suggerimento_gerarchico"] = "Suggerimento di selezione della localita legale dell'azienda";
        if (!string.IsNullOrEmpty(CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"])))
        {
            throw new ResponseRedirectException("/" + CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"]) + $@"/ctl_library/gerarchici.asp?lo=content&portale=yes&backoffice=yes&fieldname=localita", Response);
        }
        else
        {
            throw new ResponseRedirectException("/Application/ctl_library/gerarchici.asp?lo=content&portale=yes&backoffice=yes&fieldname=localita", Response);
        }

    }
    else if (comando.ToLower() == "indietro")
    {

        session["err_validazione_registrazione"] = "";

        switch (strStep)
        {
            case "":
                drawStep1();
                break;
            case "1":
                drawStep1();
                break;
            case "2":
                drawStep1();
                break;
            case "3":
                drawStep2();
                break;
            case "4":
                drawStep3();
                break;
            default:
                drawStep1();
                break;
        }

        throw new ResponseEndException(htmlToReturn.Out(), Response, "indietro");

    }
    else if (comando.ToLower() == "ricarica")
    {

        session["err_validazione_registrazione"] = "";

        strStep = session["last_step"];
        session["last_step"] = "";


        switch (strStep)
        {
            case "":
                drawStep1();
                break;
            case "1":
                drawStep1();
                break;
            case "2":
                drawStep2();
                break;
            case "3":
                drawStep3();
                break;
            case "4":
                drawStep4();
                break;
            default:
                drawStep1();
                break;
        }

        throw new ResponseEndException(htmlToReturn.Out(), Response, "ricarica");

    }
    else if (comando.ToLower() == "riattiva utente")
    {
        strSql = "select idpfu,pfuDeleted from profiliutente with(nolock) where pfuCodiceFiscale = '" + cfRapLeg.Replace("'", "''") + "' and pfuIdAzi = " + CStr(session["ID_AZI"]);

        rs = GetRS(strSql);
        if (rs.RecordCount > 0)
        {
            if (CInt(rs.Fields["pfuDeleted"]) == 1)
            {
                string strDescErrore = "";
                try
                {
                    eProcurementNext.CtlProcess.ClsElab objProc = new eProcurementNext.CtlProcess.ClsElab();
                    objProc.Elaborate("RIPRISTINA_DA_REGISTRAZIONE", "USER_DOC", CLng(rs.Fields["idpfu"]), CLng(rs.Fields["idpfu"]), ref strDescErrore, 1, ApplicationCommon.Application.ConnectionString);
                    objProc = null;
                }
                catch (Exception ex)
                {
                    strErrore = " Errore USER_DOC,RIPRISTINA_DA_REGISTRAZIONE " + ex.Message + "-" + strDescErrore + ":";
                    htmlToReturn.Write(strErrore);
                    MyErrore("", "", ex.ToString());
                    throw new ResponseEndException(htmlToReturn.Out(), Response, strErrore);
                }

                if (!string.IsNullOrEmpty(strDescErrore))
                {

                    strErrore = " Errore USER_DOC,RIPRISTINA_DA_REGISTRAZIONE " + "-" + strDescErrore + ":";
                    htmlToReturn.Write(strErrore);
                    throw new ResponseEndException(htmlToReturn.Out(), Response, strErrore);

                }
                else
                {
                    session["msg_info"] = ApplicationCommon.CNV("La sua utenza è stata riattivata, le sue credenziali sono state inviate all’indirizzo e-mail registrato nella piattaforma.");
                    avanzaRegistrazione("continua", false, "5");
                }
            }
        }
        else
        {
            session["msg_info"] = "Errore nessun utente corrisponde ai dati inseriti.";
            avanzaRegistrazione("continua", false, "5");
        }

        throw new ResponseEndException(htmlToReturn.Out(), Response, "riattiva utente");

    }
    else if (comando.ToLower() == "invia credenziali")
    {

        strSql = "select idpfu,pfuDeleted from profiliutente with(nolock) where pfuCodiceFiscale = '" + cfRapLeg.Replace("'", "''") + "' and pfuIdAzi = " + CStr(session["ID_AZI"]);

        rs = GetRS(strSql);
        if (rs.RecordCount > 0)
        {
            if (CInt(rs.Fields["pfuDeleted"]) == 0)
            {
                string strDescErrore = "";
                try
                {
                    eProcurementNext.CtlProcess.ClsElab objProc = new eProcurementNext.CtlProcess.ClsElab();
                    objProc.Elaborate("RECUPEROPWD", "RECUPEROCODICI", CLng(rs.Fields["idpfu"]), CLng(rs.Fields["idpfu"]), ref strDescErrore, 1, ApplicationCommon.Application.ConnectionString);
                    objProc = null;
                }
                catch (Exception ex)
                {
                    strErrore = " Errore RECUPEROCODICI,RECUPEROPWD " + ex.Message + "-" + strDescErrore + ":";
                    htmlToReturn.Write(strErrore);
                    MyErrore("", "", ex.ToString());
                    throw new ResponseEndException(htmlToReturn.Out(), Response, strErrore);
                }

                if (!string.IsNullOrEmpty(strDescErrore))
                {

                    strErrore = " Errore RECUPEROCODICI,RECUPEROPWD " + "-" + strDescErrore + ":";
                    htmlToReturn.Write(strErrore);
                    throw new ResponseEndException(htmlToReturn.Out(), Response, strErrore);

                }
                else
                {
                    session["msg_info"] = ApplicationCommon.CNV("Le sue credenziali sono state inviate all’indirizzo e-mail  registrato nella piattaforma.");
                    avanzaRegistrazione("continua", false, "5");
                }
            }
        }
        else
        {
            session["msg_info"] = "Errore nessun utente corrisponde ai dati inseriti.";
            avanzaRegistrazione("continua", false, "5");
        }

        throw new ResponseEndException(htmlToReturn.Out(), Response, "invia credenziali");

    }

    avanzaRegistrazione(comando, erroreValidazione, strStep);

    void drawStep1()
    {

        session["reg_form_esito_ok"] = "";
        session["reg_form_esito_sign"] = "";
        session["last_step"] = "1";
        session["pdf_generato"] = "";

        if (!string.IsNullOrEmpty(CStr(session["err_validazione_registrazione"])))
        {

            styleInformativaParix = "display:none";
            styleInformativaEnte = "display:none";
            strJsOnLoad = "";

        }

        //Gestione dell'assenza PIVA: Controllo la partita IVA salvata in sessione e se non è valorizzata allora alla generazione dello step 1 vado a spuntare l'assenza e bloccare il campo
        string PartitaIvaDisabled = string.Empty;

        if (!string.IsNullOrEmpty(session["form_professionista"]))
        {
            PartitaIvaDisabled = "disabled";
        }

        jsFocus();

        htmlToReturn.Write($@"

			<div id=""main_registrazione"" class=""main_registrazione"">
				<div id=""shadow"">

					<div id=""middle"">
						<div id=""colcontainer"">

							<div id=""colcx"" class=""large"">

								<!-- <h2>" + ApplicationCommon.CNV("Registrati") + $@"</h2> -->
								" + ApplicationCommon.CNV("Per registrarsi") + $@"

		");
        drawSteps(1);
        htmlToReturn.Write($@"

							<div class=""data_form"">
								<form name=""FormCens"" id=""FormCens"" action="""" method=""post"">
									<fieldset>
										<div id=""accordion"">
											<h3 class=""toggler atStart""><span>1</span><span class=""data_form_title"">" + ApplicationCommon.CNV("Registrazione Operatore") + $@"</span></h3>
											<div class=""element atStart"" id=""foglio1"">

												<div class=""form_row"">
													<div class=""form_field"">

														<label for=""stato"">*Stato</label>

		");
        string focusStato = "focusthis";
        if (comando == "ricarica")
        {
            focusStato = "";
        }
        htmlToReturn.Write($@"

														<input type=""text"" class=""" + focusStato + $@" txt required " + IIF(!string.IsNullOrEmpty(strLabelErrStato), "InputError", "") + $@""" id=""stato"" name=""stato"" value=""" + HtmlEncode(session["form_reg_dstato"]) + $@""" readonly=""readonly""/>

														<input type=""hidden"" id=""stato_cod"" name=""stato_cod"" value=""" + HtmlEncode(session["form_reg_cstato"]) + $@"""/>

														<button class=""button"" name=""comando"" type=""submit"" value=""sel-stato"" alt=""Seleziona stato"" onclick=""document.getElementById('loading').style.display = 'block'"">
															Seleziona stato
														</button>

														" + strLabelErrStato + $@"

													</div>
												</div>

												<div class=""form_row"">

													<span class=""lblsx"">
														Per verificare la validit&agrave; della Partita Iva comunitaria utilizza il link della
														<a target=""_blank"" href=""https://ec.europa.eu/taxation_customs/vies/#/vat-validation"">Commissione Europea.</a>
													</span>

                                    				<div class=""form_help"">
														" + ApplicationCommon.CNV("Help_PIVA") + $@"
													</div>

                                    				<div class=""form_row"">

		");

        string labelCF = ApplicationCommon.CNV("Codice Fiscale Ditta / Identificativo Fiscale Estero");
        string obbligPIVA = "*";

        //'-- la SYS è settata a YES, stiamo attivando la possibilit� di censire i professionisti
        if (attivaProfessionisti == "YES")
        {

            string checkProf = "";
            obbligPIVA = "";

            if (!string.IsNullOrEmpty(CStr(session["form_professionista"])))
            {
                checkProf = "checked";
                labelCF = ApplicationCommon.CNV("Codice Fiscale / Identificativo Fiscale Estero");
            }

            /* Blocco il campo PartitaIva e lo svuoto se la check Professionista è spuntata */
            htmlToReturn.Write($@"
                                            <script type=""text/javascript"">

											    function svuotaPIVA(isProfessionista)
												    {{
													    let Piva = document.getElementById(""PartitaIva"");

													    if (isProfessionista.checked != true)
													    {{
														    Piva.disabled = false;
													    }}
													    else
													    {{
														    Piva.value = """";
														    Piva.disabled = true;
													    }}
												    }}
											</script>

		                                        ");
            htmlToReturn.Write($@"

														<br/>

														<div class=""form_field"">
                                                            <!--
															    <label for=""professionista"">
																    " + ApplicationCommon.CNV("Sono Professionista") + $@"
															    </label>
                                                            -->
															<input type=""checkbox"" id=""professionista"" name=""professionista"" " + checkProf + $@" onclick=""svuotaPIVA(this)"" value=""si"" style=""width:2em""/>" + ApplicationCommon.CNV("Spuntare se professionista") + $@"
														</div>

														<br/>

		");

        }

        string pivaDisabled = "";
        string focusOnCodFisc = "";
        string focusOnPIVA = "";

        //'-- successivamente all'attivit� 223168 non disabilitiamo più il campo del codice fiscale così da permettere all'utente l'imputazione dell'identificativo fiscale estero
        //'if cstr(session("form_reg_cstato")) <> "M-1-11-ITA" then
        //'	pivaDisabled = " disabled=""disabled"""
        //'	session("form_reg_cf") = ""
        //'end if

        htmlToReturn.Write($@"

														<div class=""form_field"">
															<label for=""codicefiscale"" class=""lblsx"">* " + labelCF + $@"</label>

		");
        if (string.IsNullOrEmpty(pivaDisabled))
        {
            focusOnCodFisc = "";
            if (comando == "ricarica")
            {
                focusOnCodFisc = "superFocus ";
            }
        }
        htmlToReturn.Write($@"

															<input type=""text"" class=""" + focusOnCodFisc + $@"codicefiscale txt required " + IIF(!string.IsNullOrEmpty(strLabelErrCF), "InputError", "") + $@""" maxlength=""16"" id=""codicefiscale"" name=""codicefiscale"" value=""" + HtmlEncode(session["form_reg_cf"]) + $@""" " + pivaDisabled + $@"/>

															" + strLabelErrCF + $@"

														</div>

														<div class=""form_field"">

															<label for=""PartitaIva"">
																" + obbligPIVA + $@" <abbr title=""Partita IVA"">" + ApplicationCommon.CNV("Partita IVA") + $@"</abbr>
															</label>

		");
        if (!string.IsNullOrEmpty(pivaDisabled))
        {
            focusOnPIVA = "";
            if (!string.IsNullOrEmpty(CStr(GetParamURL(Request.QueryString.ToString(), "fieldName"))) && comando == "ricarica")
            {
                focusOnPIVA = "superFocus ";
            }
        }
        htmlToReturn.Write($@"

															<input type=""text"" class=""" + focusOnPIVA + $@" pivaext required txt " + IIF(!string.IsNullOrEmpty(strLabelErrPIVA), "InputError", "") + $@""" name=""PartitaIva"" id=""PartitaIva"" maxlength=""15"" {PartitaIvaDisabled} value=""" + HtmlEncode(session["form_reg_piva"]) + $@"""/>

															" + strLabelErrPIVA + $@"

														</div>

													</div>
												</div>

		");

        drawCampiHidden();
        visualizzaErrore();
        htmlToReturn.Write($@"

												<input type=""submit"" class=""btn_forward"" name=""comando"" value=""Continua"" onclick=""document.getElementById('loading').style.display = 'block'""/>

											</div>
										</div>

										<input type=""hidden"" name=""step"" value=""1""/>




									</fieldset>
								</form>
							</div>

							</div>

						</div>
					</div>

				</div>
			</div>

		");

    }

    void drawStep2()
    {

        session["last_step"] = "2";

        jsFocus();

        htmlToReturn.Write($@"
		<div id=""main_registrazione"" class=""main_registrazione"">
			<div id=""shadow"">

				<div id=""middle"">
					<div id=""colcontainer"">

						<div id=""colcx"" class=""large"">

							" + ApplicationCommon.CNV("Per registrarsi") + $@"

		");
        drawSteps(2);
        string readOnlyFields = "";
        if (aziendaGiaCensita)
        {
            readOnlyFields = @"readonly=""readonly""";
        }
        else
        {
            readOnlyFields = "";
        }

        htmlToReturn.Write($@"

						<div class=""data_form"">
							<form name=""FormCens"" id=""FormCens"" action="""" method=""post"">
								<fieldset>
									<div id=""accordion"">
										<h3 class=""toggler atStart""><span>2</span><span class=""data_form_title"">" + ApplicationCommon.CNV("Registrazione Operatore") + $@"</span></h3>
										<div class=""element atStart"" id=""foglio1"">

											<!-- <noscript> -->
												<div style=""" + styleInformativaParix + $@""">
													<div id=""info-parix-dati"">
														<h5>Informativa</h5>
														<p>
															I dati di seguito precompilati sono stati recuperati in automatico dal registro delle imprese. <br/>
														</p>
														<p>
															Eventuali modifiche a questi ultimi non comporteranno una variazione al registro delle imprese
														</p>
													</div>
													<br/>
												</div>
											<!-- </noscript>-->

												<div style=""" + styleInformativaEnte + $@""">
													<div id=""info-dati-ente"">
														<h5>Informativa</h5>
														<p>
															Il codice fiscale inserito &egrave; gi&agrave; associato ad un ente.
														</p>
														<p>
															Proseguendo la registrazione l&apos;Ente verr&agrave; censito anche come operatore economico.
														</p>
													</div>
													<br/>
												</div>

												<div style=""" + styleInformativaEnte + $@""">
													<div id=""info-dati-oe"">
														<h5>Informativa</h5>
														<p>
															La Partita IVA inserita &egrave; gi&agrave; associata ad un Operatore Economico.
														</p>
														<p>
															Proseguendo la registrazione un Nuovo Operatore Economico verr&agrave; censito.
														</p>
													</div>
													<br/>
												</div>

												<div class=""form_field"">

			");

        string strLabelRagSoc = "";
        if (!string.IsNullOrEmpty(CStr(session["form_professionista"])))
        {
            strLabelRagSoc = ApplicationCommon.CNV("Ragione sociale ovvero Nome e Cognome del professionista");
        }
        else
        {
            strLabelRagSoc = ApplicationCommon.CNV("Ragione Sociale Portale");
        }
        htmlToReturn.Write($@"

													<label for=""RagSociale"">*" + strLabelRagSoc + $@"</label>

			");
        //'if aziendaGiaCensita or cstr(session("azienda_ente")) = "YES" then
        if (aziendaGiaCensita)
        {
            htmlToReturn.Write($@"
														<input type=""hidden"" class=""txt100 required " + IIF(!string.IsNullOrEmpty(strLabelErrRagSoc), "InputError", "") + $@""" id=""RagSociale"" " + readOnlyFields + $@" name=""RagSociale"" value=""" + HtmlEncode(session["form_reg_ragsoc"]) + $@"""/>
														<span class=""form_readonly_field"">" + HtmlEncode(session["form_reg_ragsoc"]) + $@"</span>
			");
        }
        else
        {

            string focusOnRagSoc = "focusthis ";
            //'if cstr(request.querystring("fieldName")) <> "" and comando <> "ricarica" then
            //'	focusOnRagSoc = ""
            //'end if

            htmlToReturn.Write($@"
														<input type=""text"" class=""" + focusOnRagSoc + "txt100 required " + IIF(!string.IsNullOrEmpty(strLabelErrRagSoc), "InputError", "") + $@""" id=""RagSociale"" " + readOnlyFields + $@" name=""RagSociale"" value=""" + HtmlEncode(session["form_reg_ragsoc"]) + $@"""/>
			");
        }
        htmlToReturn.Write($@"

													" + strLabelErrRagSoc + $@"

												</div>

                                    			<div class=""form_field"">

													<label for=""NaturaGiuridica"">*" + ApplicationCommon.CNV("Natura giuridica") + $@"</label>

			");

        //'if aziendaGiaCensita = false and cstr(session("azienda_ente")) <> "YES" then
        if (aziendaGiaCensita == false)
        {

            TSRecordSet rs;
            //dim obj
            //dim NaturaGiuridica

            //set rs = createObject("adodb.recordset")
            dynamic selected = session["form_reg_natgiu"];

            rs = getNaturaGiuridica();

            htmlToReturn.Write($@"
													<select id=""NaturaGiuridica"" name=""NaturaGiuridica"" class=""txt required " + IIF(!string.IsNullOrEmpty(strLabelErrNatGiur), "InputError", "") + $@""">
														<option value=""0"">" + ApplicationCommon.CNV("Scegli Natura Giuridica") + $@"</option>
			");
            while (!rs.EOF)
            {

                if (CStr(rs.Fields["DMV_Deleted"]) == "0")
                {

                    if (CStr(selected) == CStr(rs.Fields["DMV_DescML"]))
                    {
                        htmlToReturn.Write(@"<option value=""" + rs.Fields["DMV_DescML"] + @""" selected=""selected"">");
                    }
                    else
                    {
                        htmlToReturn.Write(@"<option value=""" + rs.Fields["DMV_DescML"] + @""">");
                    }
                    htmlToReturn.Write(rs.Fields["DMV_DescML"] + "</option>");

                }

                rs.MoveNext();

            }
            //set rs=nothing
            htmlToReturn.Write($@"
													</select>

													" + strLabelErrNatGiur + $@"

			");

        }
        else
        {

            htmlToReturn.Write($@"
													<input type=""hidden"" class=""txt required"" id=""NaturaGiuridica"" " + readOnlyFields + $@" name=""NaturaGiuridica"" value=""" + HtmlEncode(session["form_reg_natgiu"]) + $@"""/>
													<span class=""form_readonly_field"">" + HtmlEncode(session["form_reg_natgiu"]) + $@"</span>
			");
        }

        htmlToReturn.Write($@"

                                    			</div>

												<br/>

                                    			<div class=""form_field"">
													<label for=""Indirizzo"">*" + ApplicationCommon.CNV("Indirizzo") + $@"</label>

			");
        //'if aziendaGiaCensita or cstr(session("azienda_ente")) = "YES" then
        if (aziendaGiaCensita)
        {
            htmlToReturn.Write($@"
														<input type=""hidden"" class=""txt100 required " + IIF(!string.IsNullOrEmpty(strLabelErrIndiriz), "InputError", "") + $@""" id=""Indirizzo"" " + readOnlyFields + $@" name=""Indirizzo"" value=""" + HtmlEncode(session["form_reg_indiriz"]) + $@"""/>
														<span class=""form_readonly_field"">" + HtmlEncode(session["form_reg_indiriz"]) + $@"</span>
			");
        }
        else
        {
            htmlToReturn.Write($@"
														<input type=""text"" class=""txt100 required " + IIF(!string.IsNullOrEmpty(strLabelErrIndiriz), "InputError", "") + $@""" id=""Indirizzo"" " + readOnlyFields + $@" name=""Indirizzo"" value=""" + HtmlEncode(session["form_reg_indiriz"]) + $@"""/>
			");
        }
        htmlToReturn.Write($@"

													" + strLabelErrIndiriz + $@"
												</div>


			");

        //'-------------------------------------------------
        //'-- ** GESTIONE NON-EDITABILITA LOCALITA + PROV **
        //'-------------------------------------------------
        //'if aziendaGiaCensita = false and cstr(session("azienda_ente")) <> "YES" then
        if (aziendaGiaCensita == false)
        {

            //'-- di base localita e prov non sono editabili
            editLocalita = @" readonly = ""readonly"" ";
            editProv = @" readonly = ""readonly"" ";

            if (CStr(session["form_reg_cstato"]) != "M-1-11-ITA")
            {
                //'-- se non si � scelto italia rendiamo editabili localita e provincia
                editLocalita = "";
                editProv = "";
            }
            else
            {

                string codLocalita = CStr(session["form_reg_localita_leg"]);

                //' perch� c'era quest'if ??
                //'if codLocalita = "" then
                //'	codLocalita = cstr(session("form_reg_provincia_leg"))
                //'end if

                //'response.write "codLocalita:" & codLocalita

                //'-- Se � stata fatta una scelta dal gerarchico ed � un 'altro'
                if (!string.IsNullOrEmpty(codLocalita) && Strings.Right(codLocalita, 4) == "-XXX")
                {

                    strSql = "select isnull(dmv_level,0) as dmv_level from lib_domainvalues with(nolock) where dmv_dm_id = 'geo' and dmv_cod = '" + codLocalita.Replace("'", "''") + "'";
                    rs = GetRS(strSql);

                    //'response.write strsql

                    if (rs.RecordCount > 0)
                    {

                        rs.MoveFirst();

                        dynamic livello = rs.Fields["dmv_level"];

                        if (CInt(livello) == 7)
                        {

                            editLocalita = "";

                            string[] vet = Strings.Split(codLocalita, "-");

                            //'-- Se il padre della selezione effettuata ('altro comune')
                            //'-- � un 'altra provincia'. metto editabile anche la provincia
                            if (vet[6] == "XXX")
                            {
                                editProv = "";
                            }


                        }
                        else if (CInt(livello) == 6)
                        {

                            editLocalita = "";
                            editProv = "";

                        }

                    }

                    //set rs = nothing

                }
                else if ((string.IsNullOrEmpty(codLocalita) && !string.IsNullOrEmpty(codProv)))
                {

                    editLocalita = "";

                }

                //'-- se ho la descrizione della provincia ma non il codice (o il codice � 'altro'/XXX) rendo editabile la text per la descrizione della provincia
                if ((string.IsNullOrEmpty(codProv) || Strings.Right(codProv, 4) == "-XXX") && !string.IsNullOrEmpty(session["form_reg_citta"]))
                {
                    editProv = "";
                }

            }

        }
        else
        {

            editLocalita = @" readonly = ""readonly"" ";
            editProv = @" readonly = ""readonly"" ";

        }

        htmlToReturn.Write($@"

                                    			<div class=""form_field"">
													<label for=""Citta"">*" + ApplicationCommon.CNV("Località") + $@"</label>

			");
        //'if aziendaGiaCensita or cstr(session("azienda_ente")) = "YES" then
        if (aziendaGiaCensita)
        {
            htmlToReturn.Write($@"
														<input type=""hidden"" class=""txt required " + IIF(!string.IsNullOrEmpty(strLabelErrIndiriz), "InputError", "") + $@""" " + editLocalita + $@"  id=""Citta"" name=""Citta"" value=""" + HtmlEncode(session["form_reg_citta"]) + $@"""/>
														<span class=""form_readonly_field"">" + HtmlEncode(session["form_reg_citta"]) + $@"</span>
			");
        }
        else
        {
            htmlToReturn.Write($@"
														<input type=""text"" class=""txt required " + IIF(!string.IsNullOrEmpty(strLabelErrIndiriz), "InputError", "") + $@""" " + editLocalita + $@"  id=""Citta"" name=""Citta"" value=""" + HtmlEncode(session["form_reg_citta"]) + $@"""/>
			");
        }
        htmlToReturn.Write($@"

													" + strLabelErrCitta + $@"

													<input type=""hidden"" name=""aziLocalitaLeg2"" value=""" + HtmlEncode(session["form_reg_localita_leg"]) + $@"""/>

			");
        //'if cstr(session("form_reg_cstato")) = "M-1-11-ITA" and aziendaGiaCensita = false and cstr(session("azienda_ente")) <> "YES" then
        if (CStr(session["form_reg_cstato"]) == "M-1-11-ITA" && aziendaGiaCensita == false)
        {
            htmlToReturn.Write($@"
														<button class=""button"" name=""comando"" type=""submit"" value=""sel-sede-legale"" alt=""Seleziona la localit&agrave; della sede legale"" onclick=""document.getElementById('loading').style.display = 'block'"">
															" + ApplicationCommon.CNV("Selezionare località sede legale") + $@"
														</button>
			");
        }
        htmlToReturn.Write($@"

												</div>

                                    			<div class=""form_field"">
													<label for=""Provincia"">*" + ApplicationCommon.CNV("Provincia") + $@"</label>

			");
        //'if aziendaGiaCensita or cstr(session("azienda_ente")) = "YES" then
        if (aziendaGiaCensita)
        {
            htmlToReturn.Write($@"
														<input type=""hidden"" class=""txt required " + IIF(!string.IsNullOrEmpty(strLabelErrProvincia), "InputError", "") + $@""" " + editProv + $@" id=""Provincia"" name=""Provincia"" value=""" + HtmlEncode(session["form_reg_provincia"]) + $@"""/>
														<span class=""form_readonly_field"">" + HtmlEncode(session["form_reg_provincia"]) + $@"</span>
			");
        }
        else
        {

            htmlToReturn.Write($@"
														<input type=""text"" class=""txt required " + IIF(!string.IsNullOrEmpty(strLabelErrProvincia), "InputError", "") + $@""" " + editProv + $@" id=""Provincia"" name=""Provincia"" value=""" + HtmlEncode(session["form_reg_provincia"]) + $@"""/>
			");
        }
        htmlToReturn.Write($@"

														" + strLabelErrProvincia + $@"

														<input type=""hidden"" name=""aziProvinciaLeg2"" value=""" + HtmlEncode(session["form_reg_provincia_leg"]) + $@"""/>

													</div>

													<div class=""form_field"">
														<label for=""cap"">*" + ApplicationCommon.CNV("C.A.P.") + $@"</label>

			");
        //'if aziendaGiaCensita or cstr(session("azienda_ente")) = "YES" then
        if (aziendaGiaCensita)
        {
            htmlToReturn.Write($@"
															<input type=""hidden"" class=""txt required " + IIF(!string.IsNullOrEmpty(strLabelErrCap), "InputError", "") + $@""" id=""cap"" " + readOnlyFields + $@" name=""cap"" value=""" + HtmlEncode(session["form_reg_cap"]) + $@"""/>
															<span class=""form_readonly_field"">" + HtmlEncode(session["form_reg_cap"]) + $@"</span>
			");
        }
        else
        {

            string focusOnCap = "";
            if (!string.IsNullOrEmpty(CStr(GetParamURL(Request.QueryString.ToString(), "fieldName"))) && comando == "ricarica")
            {
                focusOnCap = "superFocus ";
            }

            htmlToReturn.Write($@"
															<input type=""text"" class=""" + focusOnCap + $@"txt required " + IIF(!string.IsNullOrEmpty(strLabelErrCap), "InputError", "") + $@""" id=""cap"" " + readOnlyFields + $@" name=""cap"" value=""" + HtmlEncode(session["form_reg_cap"]) + $@"""/>
			");
        }
        htmlToReturn.Write($@"

														" + strLabelErrCap + $@"

													</div>

													<div class=""form_field"">

														<label for=""AnnoCostituzione"" class=""labelsx"">" + ApplicationCommon.CNV("Anno di costituzione") + $@"</label>

			");
        //'if aziendaGiaCensita or cstr(session("azienda_ente")) = "YES" then
        if (aziendaGiaCensita)
        {
            htmlToReturn.Write($@"
															<input id=""AnnoCostituzione"" name=""AnnoCostituzione"" maxlength=""4"" type=""hidden"" " + readOnlyFields + $@" class=""txt numeric " + IIF(!string.IsNullOrEmpty(strLabelErrAnnoCostituzione), "InputError", "") + $@""" value=""" + HtmlEncode(session["form_reg_annocostr"]) + $@"""/>
															<span class=""form_readonly_field"">" + HtmlEncode(session["form_reg_annocostr"]) + $@"</span>
			");
        }
        else
        {
            htmlToReturn.Write($@"
															<input id=""AnnoCostituzione"" name=""AnnoCostituzione"" maxlength=""4"" type=""text"" " + readOnlyFields + $@" class=""txt numeric " + IIF(!string.IsNullOrEmpty(strLabelErrAnnoCostituzione), "InputError", "") + $@""" value=""" + HtmlEncode(session["form_reg_annocostr"]) + $@"""/>
			");
        }
        htmlToReturn.Write($@"

														" + strLabelErrAnnoCostituzione + $@"

													</div>

													<div class=""form_field"">
														<label for=""IscrCCIAA"" class=""labelsx"">" + ApplicationCommon.CNV("Iscrizione CCIAA") + $@"</label>

			");
        //'if aziendaGiaCensita or cstr(session("azienda_ente")) = "YES" then
        if (aziendaGiaCensita)
        {
            htmlToReturn.Write($@"
															<input id=""IscrCCIAA"" name=""IscrCCIAA"" type=""hidden"" " + readOnlyFields + $@" class=""txt " + IIF(!string.IsNullOrEmpty(strLabelErrIscrCCIAA), "InputError", "") + $@""" value=""" + HtmlEncode(session["form_reg_iscrccia"]) + $@"""/>
															<span class=""form_readonly_field"">" + HtmlEncode(session["form_reg_iscrccia"]) + $@"</span>
			");
        }
        else
        {
            htmlToReturn.Write($@"
															<input id=""IscrCCIAA"" name=""IscrCCIAA"" type=""text"" " + readOnlyFields + $@" class=""txt " + IIF(!string.IsNullOrEmpty(strLabelErrIscrCCIAA), "InputError", "") + $@""" value=""" + HtmlEncode(session["form_reg_iscrccia"]) + $@"""/>
			");
        }
        htmlToReturn.Write($@"

														" + strLabelErrIscrCCIAA + $@"
													</div>

													<div class=""form_field"">
														<label for=""SedeCCIAA"" class=""labelsx"">" + ApplicationCommon.CNV("Della CCIAA di") + $@"</label>

			");
        //'if aziendaGiaCensita or cstr(session("azienda_ente")) = "YES" then
        if (aziendaGiaCensita)
        {
            htmlToReturn.Write($@"
															<input id=""SedeCCIAA"" name=""SedeCCIAA"" type=""hidden"" " + readOnlyFields + $@" class=""txt " + IIF(!string.IsNullOrEmpty(strLabelErrSedeCCIAA), "InputError", "") + $@""" value=""" + HtmlEncode(session["form_reg_sedeccia"]) + $@"""/>
															<span class=""form_readonly_field"">" + HtmlEncode(session["form_reg_sedeccia"]) + $@"</span>
			");
        }
        else
        {
            htmlToReturn.Write($@"
															<input id=""SedeCCIAA"" name=""SedeCCIAA"" type=""text"" " + readOnlyFields + $@" class=""txt " + IIF(!string.IsNullOrEmpty(strLabelErrSedeCCIAA), "InputError", "") + $@""" value=""" + HtmlEncode(session["form_reg_sedeccia"]) + $@"""/>
			");
        }
        htmlToReturn.Write($@"

														" + strLabelErrSedeCCIAA + $@"
													</div>

													<div class=""form_field"">
														<label for=""CodiceEORI"" class=""labelsx"">" + ApplicationCommon.CNV("Codice EORI") + $@"</label>

			");
        if (aziendaGiaCensita)
        {
            htmlToReturn.Write($@"
															<input id=""CodiceEORI"" name=""CodiceEORI"" type=""hidden"" " + readOnlyFields + $@" class=""txt " + IIF(!string.IsNullOrEmpty(strLabelErrCodiceEORI), "InputError", "") + $@""" value=""" + HtmlEncode(session["form_reg_codiceeori"]) + $@"""/>
																<span class=""form_readonly_field"">" + HtmlEncode(session["form_reg_sedeccia"]) + $@"</span>
			");
        }
        else
        {
            htmlToReturn.Write($@"
																<input id=""CodiceEORI"" name=""CodiceEORI"" type=""text"" " + readOnlyFields + $@" class=""txt " + IIF(!string.IsNullOrEmpty(strLabelErrCodiceEORI), "InputError", "") + $@""" value=""" + HtmlEncode(session["form_reg_codiceeori"]) + $@"""/>
			");
        }
        htmlToReturn.Write($@"

															" + strLabelErrCodiceEORI + $@"
													</div>



			");

        string strHelpTelFax = ApplicationCommon.CNV("Campi Tel Fax");
        if (!string.IsNullOrEmpty(strHelpTelFax))
        {
            htmlToReturn.Write($@"

													<div>
			");
            //'if aziendaGiaCensita = false and  cstr(session("azienda_ente")) <> "YES" then
            if (aziendaGiaCensita == false)
            {
                htmlToReturn.Write(strHelpTelFax);
            }
            htmlToReturn.Write($@"
													</div>
			");

        }

        htmlToReturn.Write($@"

												<div class=""form_field"">

													<label for=""Telefono"" class=""labelsx"">*" + ApplicationCommon.CNV("Telefono") + $@"</label>

			");
        //'if ( aziendaGiaCensita or cstr(session("azienda_ente")) = "YES") then
        if (!string.IsNullOrEmpty(CStr(session["form_reg_telefono"])) && (aziendaGiaCensita))
        {
            htmlToReturn.Write($@"
														<input type=""hidden"" class=""txt required " + IIF(!string.IsNullOrEmpty(strLabelErrTelefon), "InputError", "") + $@""" id=""Telefono"" " + readOnlyFields + $@" name=""Telefono"" value=""" + HtmlEncode(session["form_reg_telefono"]) + $@"""/>
																<span class=""form_readonly_field"">" + HtmlEncode(session["form_reg_telefono"]) + $@"</span>
					");
        }
        else
        {
            htmlToReturn.Write($@"
																<input type=""text"" class=""txt required " + IIF(!string.IsNullOrEmpty(strLabelErrTelefon), "InputError", "") + $@""" id=""Telefono"" " + readOnlyFields + $@" name=""Telefono"" value=""" + HtmlEncode(session["form_reg_telefono"]) + $@"""/>
			");
        }
        htmlToReturn.Write($@"

																" + strLabelErrTelefon + $@"


															</div>

															<div class=""form_field"">

																<label for=""NumeroFax"" class=""labelsx"">" + ApplicationCommon.CNV("Fax") + $@"</label>

			");
        //'if ( aziendaGiaCensita or cstr(session("azienda_ente")) = "YES" ) then
        if (aziendaGiaCensita)
        {
            htmlToReturn.Write($@"
																	<input type=""hidden"" class=""txt " + IIF(!string.IsNullOrEmpty(strLabelErrFax), "InputError", "") + $@""" id=""NumeroFax"" " + readOnlyFields + $@" name=""NumeroFax"" value=""" + HtmlEncode(session["form_reg_numfax"]) + $@"""/>
																	<span class=""form_readonly_field"">" + HtmlEncode(session["form_reg_numfax"]) + $@"</span>
			");
        }
        else
        {
            htmlToReturn.Write($@"
																	<input type=""text"" class=""txt  " + IIF(!string.IsNullOrEmpty(strLabelErrFax), "InputError", "") + $@""" id=""NumeroFax"" " + readOnlyFields + $@" name=""NumeroFax"" value=""" + HtmlEncode(session["form_reg_numfax"]) + $@"""/>
			");
        }
        htmlToReturn.Write($@"

																" + strLabelErrFax + $@"

															</div>


															<div class=""form_field"">

																<label for=""EMail"" class=""labelsx"">* " + ApplicationCommon.CNV("Email_registrazione") + $@"</label>

			");
        //'if aziendaGiaCensita or cstr(session("azienda_ente")) = "YES" then
        if (aziendaGiaCensita)
        {
            htmlToReturn.Write($@"
																	<input type=""hidden"" class=""txt100 email required " + IIF(!string.IsNullOrEmpty(strLabelErrEmail), "InputError", "") + $@""" id=""EMail"" " + readOnlyFields + $@" name=""EMail"" value=""" + HtmlEncode(session["form_reg_email"]) + $@"""/>
																	<span class=""form_readonly_field"">" + HtmlEncode(session["form_reg_email"]) + $@"</span>
			");
        }
        else
        {
            htmlToReturn.Write($@"
																	<input type=""text"" class=""txt100 email required " + IIF(!string.IsNullOrEmpty(strLabelErrEmail), "InputError", "") + $@""" id=""EMail"" " + readOnlyFields + $@" name=""EMail"" value=""" + HtmlEncode(session["form_reg_email"]) + $@"""/>
			");
        }
        htmlToReturn.Write($@"

																" + strLabelErrEmail + $@"

															</div>

            ");
        visualizzaErrore();
        htmlToReturn.Write($@"

										</div>

									</div>


									<input type=""hidden"" name=""step"" value=""2""/>

									<!-- Dallo step 1 -->
									<input type=""hidden"" id=""stato_cod"" name=""stato_cod"" value=""" + HtmlEncode(session["form_reg_cstato"]) + $@"""/>
									<input type=""hidden"" id=""stato"" name=""stato"" value=""" + HtmlEncode(session["form_reg_dstato"]) + $@"""/>
									<input type=""hidden"" id=""codicefiscale"" name=""codicefiscale"" value=""" + HtmlEncode(session["form_reg_cf"]) + $@"""/>
									<input type=""hidden"" id=""PartitaIva"" name=""PartitaIva"" value=""" + HtmlEncode(session["form_reg_piva"]) + $@"""/>
									<input type=""hidden"" id=""professionista"" name=""professionista"" value=""" + HtmlEncode(session["form_professionista"]) + $@"""/>
									<!-- Dallo step 1 -->

			");
        drawCampiHidden();

        string onFocusBotton = "";
        //'if aziendaGiaCensita or cstr(session("azienda_ente")) = "YES" then
        if (aziendaGiaCensita)
        {
            onFocusBotton = "focusthis ";
        }
        htmlToReturn.Write($@"

											<input type=""submit"" class=""" + onFocusBotton + $@"btn_forward"" name=""comando"" value=""Continua"" onclick=""document.getElementById('loading').style.display = 'block'""/>
									<input type=""submit"" class=""btn_back"" name=""comando"" value=""Indietro"" onclick=""document.getElementById('loading').style.display = 'block'""/>

								</fieldset>
							</form>

						</div>
						</div>

					</div>
				</div>

			</div>

		</div>




			");

    }

    void drawStep3()
    {

        session["last_step"] = "3";

        jsFocus();

        htmlToReturn.Write($@"
		<script type=""text/javascript"">
		function Upper_First_Letter( strValue )
			{{

				return strValue.replace(/\w+/g, function(word) {{
					return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
				}});

			}}
		</script>

		<div id=""main_registrazione"" class=""main_registrazione"">
			<div id=""shadow"">

				<div id=""middle"">
					<div id=""colcontainer"">

						<div id=""colcx"" class=""large"">

							" + ApplicationCommon.CNV("Per registrarsi") + $@"

		");
        drawSteps(3);
        htmlToReturn.Write($@"

						<div class=""data_form"">
							<form  name=""FormCens"" id=""FormCens"" action="""" method=""post"">
								<fieldset>
									<div id=""accordion"">
										<h3 class=""toggler atStart"" id=""h3rapleg""><span>3</span><span class=""data_form_title"">" + ApplicationCommon.CNV("Informazioni utente") + $@"</span></h3>

											<div class=""element atStart"" id=""foglio2"">
												<fieldset>
													<div class=""form_field"">

														<label for=""NomeRapLeg"">*" + ApplicationCommon.CNV("Nome") + $@"</label>

														<input type=""text"" class=""focusthis txt required " + IIF(!string.IsNullOrEmpty(strLabelErrNomeRapLeg), "InputError", "") + $@""" id=""NomeRapLeg"" name=""NomeRapLeg"" onchange=""javascript: this.value = Upper_First_Letter ( this.value );"" value=""" + HtmlEncode(session["form_reg_NomeRapLeg"]) + $@"""/>
														" + strLabelErrNomeRapLeg + $@"

													</div>
													<div class=""form_field"">

														<label for=""CognomeRapLeg"">*" + ApplicationCommon.CNV("Cognome") + $@"</label>

														<input type=""text"" class="" txt required " + IIF(!string.IsNullOrEmpty(strLabelErrCognomeRapLeg), "InputError", "") + $@""" id=""CognomeRapLeg"" name=""CognomeRapLeg"" onchange=""javascript: this.value = Upper_First_Letter ( this.value );"" value=""" + HtmlEncode(session["form_reg_CognomeRapLeg"]) + $@"""/>
														" + strLabelErrCognomeRapLeg + $@"

													</div>
													<div class=""form_field"">

														<label for=""TelefonoRapLeg"">*" + ApplicationCommon.CNV("Telefono 1") + $@"</label>

														<input type=""text"" class="" txt required " + IIF(!string.IsNullOrEmpty(strLabelErrTelRapLeg), "InputError", "") + $@""" id=""TelefonoRapLeg"" name=""TelefonoRapLeg"" value=""" + HtmlEncode(session["form_reg_telrapleg"]) + $@"""/>
														" + strLabelErrTelRapLeg + $@"

													</div>
													<div class=""form_field"">
														<label for=""CellulareRapLeg"">" + ApplicationCommon.CNV("Telefono 2") + $@"</label>
														<input type=""text"" class="" txt " + IIF(!string.IsNullOrEmpty(strLabelErrCellulareRapLeg), "InputError", "") + $@""" id=""CellulareRapLeg"" name=""CellulareRapLeg"" value=""" + HtmlEncode(session["form_reg_celrapleg"]) + $@"""/>
														" + strLabelErrCellulareRapLeg + $@"
													</div>
													<div class=""form_field"">

														<label for=""EMailRif"">*" + ApplicationCommon.CNV("E_mailRapLeg ") + $@"</label>

														<input type=""text"" class=""txt100 email required " + IIF(!string.IsNullOrEmpty(strLabelErrEmailRif), "InputError", "") + $@""" id=""EMailRif"" name=""EMailRif"" value=""" + HtmlEncode(session["form_reg_emailrif"]) + $@"""/>
														" + strLabelErrEmailRif + $@"

													</div>
													<!--
													<div class=""form_field"">
														<label for=""EMailRiferimentoAzienda""> " + ApplicationCommon.CNV("Email Riferimento Azienda") + $@"</label>
													-->

														<input type=""hidden"" class=""txt100 email " + IIF(!string.IsNullOrEmpty(strLabelErrEmailRifAzi), "InputError", "") + $@""" id=""EMailRiferimentoAzienda"" name=""EMailRiferimentoAzienda"" value=""" + HtmlEncode(session["form_reg_emailrifazi"]) + $@"""/>
													<!--
													" + strLabelErrEmailRifAzi + $@"
													</div>
													-->
													<div class=""form_field"">

														<label for=""funzione_aziendale"">*" + ApplicationCommon.CNV("Funzione Aziendale") + $@"</label>

		");
        //'-- ruoli lato seller
        rs = GetRS("select dmv_descml,dmv_cod,dmv_sort from lib_domainvalues with(nolock) where dmv_dm_id = 'pfuRuoloAziendale' and isnull(dmv_deleted,0) = 0 and dmv_father like '%S%' order by dmv_sort asc");
        dynamic selected = session["form_reg_funzazi"];
        rs.MoveFirst();
        htmlToReturn.Write($@"
															<select id=""funzione_aziendale"" name=""funzione_aziendale"" class=""txt required " + IIF(!string.IsNullOrEmpty(strLabelErrFunzAzi), "InputError", "") + $@""">
																<option value=""0"">" + ApplicationCommon.CNV("Scegli Qualifica") + $@"</option>
		");
        while (!rs.EOF)
        {

            if (selected == rs.Fields["dmv_cod"])
            {
                htmlToReturn.Write(@"<option value=""" + rs.Fields["dmv_cod"] + @""" selected=""selected"">");
            }
            else
            {
                htmlToReturn.Write(@"<option value=""" + rs.Fields["dmv_cod"] + @""">");
            }
            htmlToReturn.Write(rs.Fields["dmv_descml"] + "</option>");

            rs.MoveNext();
        }
        //set rs=nothing
        htmlToReturn.Write($@"
															</select>

															" + strLabelErrFunzAzi + $@"

													</div>
													<div class=""form_field"">

														<label for=""cfRapLeg"">*" + ApplicationCommon.CNV("Codice fiscale") + $@"</label>

														<input type=""text"" class="" txt required " + IIF(!string.IsNullOrEmpty(strLabelErrCfRapLegM), "InputError", "") + $@" " + IIF(!string.IsNullOrEmpty(strLabelWarningCfRapLegM), "InputWarning", "") + $@""" id=""cfRapLeg"" onchange=""onchange_cfRapLeg()"" name=""cfRapLeg"" value=""" + HtmlEncode(session["form_reg_cfRapLeg"]) + $@"""/>

														" + strLabelErrCfRapLegM + $@"
														" + strLabelWarningCfRapLegM + $@"

													</div>

		");
        //'-- Se l'azienda � estera
        if (CStr(session["form_reg_cstato"]) != "M-1-11-ITA")
        {
            htmlToReturn.Write($@"
														<div class=""form_field"">
															<label for=""esterno_con_firma"">" + ApplicationCommon.CNV("Firma digitale") + $@"</label>
															<input type=""checkbox"" id=""esterno_con_firma"" name=""esterno_con_firma"" value=""1"" style=""width:2em""/>" + ApplicationCommon.CNV("Spuntare se si è in possesso di un kit di firma digitale") + $@"
														</div>
		");
        }
        htmlToReturn.Write($@"

		");
        drawCampiHidden();
        visualizzaErrore();
        htmlToReturn.Write($@"

													<input type=""hidden"" name=""step"" value=""3""/>

													<!-- Dallo step 1 -->
													<input type=""hidden"" id=""stato_cod"" name=""stato_cod"" value=""" + HtmlEncode(session["form_reg_cstato"]) + $@"""/>
													<input type=""hidden"" id=""stato"" name=""stato"" value=""" + HtmlEncode(session["form_reg_dstato"]) + $@"""/>
													<input type=""hidden"" id=""codicefiscale"" name=""codicefiscale"" value=""" + HtmlEncode(session["form_reg_cf"]) + $@"""/>
													<input type=""hidden"" id=""PartitaIva"" name=""PartitaIva"" value=""" + HtmlEncode(session["form_reg_piva"]) + $@"""/>
													<input type=""hidden"" id=""professionista"" name=""professionista"" value=""" + HtmlEncode(session["form_professionista"]) + $@"""/>
													<!-- Dallo step 1 -->

													<!-- Dallo step 2 -->
													<input type=""hidden"" id=""RagSociale"" name=""RagSociale"" value=""" + HtmlEncode(session["form_reg_ragsoc"]) + $@"""/>
													<input type=""hidden"" id=""NaturaGiuridica"" name=""NaturaGiuridica"" value=""" + HtmlEncode(session["form_reg_natgiu"]) + $@"""/>
													<input type=""hidden"" id=""Indirizzo"" name=""Indirizzo"" value=""" + HtmlEncode(session["form_reg_indiriz"]) + $@"""/>
													<input type=""hidden"" id=""AnnoCostituzione"" name=""AnnoCostituzione"" value=""" + HtmlEncode(session["form_reg_annocostr"]) + $@"""/>
													<input type=""hidden"" id=""IscrCCIAA"" name=""IscrCCIAA"" value=""" + HtmlEncode(session["form_reg_iscrccia"]) + $@"""/>
													<input type=""hidden"" id=""SedeCCIAA"" name=""SedeCCIAA"" value=""" + HtmlEncode(session["form_reg_sedeccia"]) + $@"""/>
													<input type=""hidden"" id=""CodiceEORI"" name=""CodiceEORI"" value=""" + HtmlEncode(session["form_reg_codiceeori"]) + $@"""/>

													<input type=""hidden"" id=""Telefono"" name=""Telefono"" value=""" + HtmlEncode(session["form_reg_telefono"]) + $@"""/>
													<input type=""hidden"" id=""NumeroFax"" name=""NumeroFax"" value=""" + HtmlEncode(session["form_reg_numfax"]) + $@"""/>
													<input type=""hidden"" id=""EMail"" name=""EMail"" value=""" + HtmlEncode(session["form_reg_email"]) + $@"""/>

													<input type=""hidden"" id=""cap"" name=""cap"" value=""" + HtmlEncode(session["form_reg_cap"]) + $@"""/>
													<input type=""hidden"" id=""Citta"" name=""Citta"" value=""" + HtmlEncode(session["form_reg_citta"]) + $@"""/>
													<input type=""hidden"" name=""aziLocalitaLeg2"" value=""" + HtmlEncode(session["form_reg_localita_leg"]) + $@"""/>
													<input type=""hidden"" id=""Provincia"" name=""Provincia"" value=""" + HtmlEncode(session["form_reg_provincia"]) + $@"""/>
													<input type=""hidden"" name=""aziProvinciaLeg2"" value=""" + HtmlEncode(session["form_reg_provincia_leg"]) + $@"""/>

													<!-- Dallo step 2 -->


													<input type=""submit"" class=""btn_forward"" name=""comando"" value=""Continua"" onclick=""document.getElementById('loading').style.display = 'block'""/>
													<input type=""submit"" class=""btn_back"" name=""comando"" value=""Indietro"" onclick=""document.getElementById('loading').style.display = 'block'""/>


												</fieldset>
											</div>

									</div>

								</fieldset>
							</form>
						</div>
						</div>

					</div>
				</div>

			</div>

		</div>

		");
    }

    void drawStep4()
    {

        session["last_step"] = "4";

        jsFocus();

        htmlToReturn.Write($@"
		<div id=""main_registrazione"" class=""main_registrazione"">
			<div id=""shadow"">

				<div id=""middle"">
					<div id=""colcontainer"">

						<div id=""colcx"" class=""large"">

							<!-- <h2>" + ApplicationCommon.CNV("Registrati") + $@"</h2> -->
							" + ApplicationCommon.CNV("Per registrarsi") + $@"

		");
        drawSteps(4);
        htmlToReturn.Write($@"
						<div class=""data_form"">
							<form name=""FormCens"" id=""FormCens"" action="""" method=""post"">
								<div id=""accordion"">
									<h3 class=""toggler atStart""><span>4</span><span class=""data_form_title"">" + ApplicationCommon.CNV("Trattamento dati personali") + $@"</span></h3>
									<div class=""element atStart"" >
										<fieldset>
											<div>" + ApplicationCommon.CNV("Il sottoscritto dichiara") + $@"</div>
											" + ApplicationCommon.CNV("Informativa sul trattamento dei dati personali") + $@"
											" + ApplicationCommon.CNV("La non accettazione") + $@"

											<div>



												<label class=""focusthis radio"" for=""privacyagreeAccetto"">
													" + ApplicationCommon.CNV("Accetto") + $@"
												</label>


		");
        string privacyagree_si = "";
        string privacyagree_no = "";
        if (session["form_reg_privacyagree"] == "si")
        {
            privacyagree_si = @" checked=""checked""";
            privacyagree_no = @"";
        }
        else
        {
            privacyagree_no = @" checked=""checked""";
            privacyagree_si = @"";
        }
        htmlToReturn.Write($@"

												<input type=""radio"" id=""privacyagreeAccetto"" name=""privacyagree"" value=""si"" class=""rb req"" " + privacyagree_si + $@"/>

												<label class=""radio"" for=""privacyagreeNonAccetto"">" + ApplicationCommon.CNV("Non Accetto") + $@"</label>
												<input type=""radio"" id=""privacyagreeNonAccetto"" name=""privacyagree"" value=""no"" class=""radio rb"" " + privacyagree_no + $@"/>

												" + strLabelErrAgree + $@"

											</div>

											<div>

												<label class=""labelancora change_captcha"" style=""cursor: pointer;cursor: hand;"" onclick=""document.getElementById('div_captcha').innerHTML = getAccessCaptcha();"">
													Cambia codice di controllo
												</label>

												<div class=""div_captcha"" id=""div_captcha"">

		");
        string output = generaCaptchaAccessibile("captcha_access_totale", "captcha_field_name", "captcha_access_tot_formato", session);
        htmlToReturn.Write($@"

													<span class=""labelsx"">
														<span class=""label_captcha_access"" style="""">
															<strong>Anti-spam<span id=""captcha_access"">" + output + $@"</span></strong>
														</span>
													</label>

													<input class=""required " + IIF(!string.IsNullOrEmpty(strLabelErrCaptcha), "InputError", "") + $@""" name=""" + session["captcha_field_name"] + $@""" size=""10"" value="""" maxlength=""20""/>

													<span>
														( Scrivere il risultato in
		");
        if (session["captcha_access_tot_formato"] == 1)
        {
            htmlToReturn.Write("cifre");
        }
        else
        {
            htmlToReturn.Write("lettere");
        }
        htmlToReturn.Write($@"
														)
													</span>

												</div>

												" + strLabelErrCaptcha + $@"

												<noscript>
													<p class=""help"">Ricaricare la pagina per cambiare il codice di controllo</p>
												</noscript>

												<script type=""text/javascript"">
													function getAccessCaptcha()
													{{
														var ajax = GetXMLHttpRequest();

														if(ajax)
														{{
															var nocache = new Date().getTime();

															try
															{{
																ajax.open(""GET"", '" + ApplicationCommon.Application["WEBSERVERAPPLICAZIONE"] + ApplicationCommon.Application["strVirtualDirectory"] + $@"/ctl_library/getAccessCaptcha.asp?nocache=' + nocache , false);
																ajax.send(null);
															}}
															catch(e)
															{{
																alert('Errore di accesso alla pagina. Il problema non si presenta in produzione');
																return;
															}}

															if(ajax.readyState == 4)
															{{
																if(ajax.status == 200 )
																{{
																	//alert(ajax.responseText);
																	return ajax.responseText;
																}}
															}}
														}}
													}}

													function GetXMLHttpRequest() {{
														var
															XHR = null,
															browserUtente = navigator.userAgent.toUpperCase();

														if(typeof(XMLHttpRequest) === ""function"" || typeof(XMLHttpRequest) === ""object"")
															XHR = new XMLHttpRequest();
															else if(window.ActiveXObject && browserUtente.indexOf(""MSIE 4"") < 0) {{
																if(browserUtente.indexOf(""MSIE 5"") < 0)
																	XHR = new ActiveXObject(""Msxml2.XMLHTTP"");
																else
																	XHR = new ActiveXObject(""Microsoft.XMLHTTP"");
															}}
															return XHR;
													}};

												</script>

											<!--

												<span class=""labelsx"">

													<img id=""captcha"" src=""/" + ApplicationCommon.Application["NOMEAPPPORTALE_JOOMLA"] + $@"/securimage/securimage_show.php"" alt=""CAPTCHA Image"" />

													<noscript>
														<p class=""help"">Ricaricare la pagina per cambiare il captcha</p>
													</noscript>

													<a href=""#"" onclick=""document.getElementById('captcha').src = '/" + ApplicationCommon.Application["NOMEAPPPORTALE_JOOMLA"] + $@"/securimage/securimage_show.php?' + Math.random(); return false"">
														" + ApplicationCommon.CNV("Cambia Immagine") + $@"
													</a>

												</span>

												<label for=""captchacode"" class=""labelsx"">
													" + ApplicationCommon.CNV("Riporta codice alfanumerico") + $@"
												</label>

												<input class=""txt required " + IIF(!string.IsNullOrEmpty(strLabelErrCaptcha), "InputError", "") + $@""" name=""captchacode"" type=""text"" id=""captchacode"" size=""10"" maxlength=""10"" value=""""/>

											-->



		");
        visualizzaErrore();
        drawCampiHidden();
        htmlToReturn.Write($@"

												<input type=""hidden"" name=""step"" value=""4""/>

												<!-- Dallo step 1 -->
												<input type=""hidden"" id=""stato_cod"" name=""stato_cod"" value=""" + HtmlEncode(session["form_reg_cstato"]) + $@"""/>
												<input type=""hidden"" id=""stato"" name=""stato"" value=""" + HtmlEncode(session["form_reg_dstato"]) + $@"""/>
												<input type=""hidden"" id=""codicefiscale"" name=""codicefiscale"" value=""" + HtmlEncode(session["form_reg_cf"]) + $@"""/>
												<input type=""hidden"" id=""PartitaIva"" name=""PartitaIva"" value=""" + HtmlEncode(session["form_reg_piva"]) + $@"""/>
												<input type=""hidden"" id=""professionista"" name=""professionista"" value=""" + HtmlEncode(session["form_professionista"]) + $@"""/>
												<!-- Dallo step 1 -->

												<!-- Dallo step 2 -->
												<input type=""hidden"" id=""RagSociale"" name=""RagSociale"" value=""" + HtmlEncode(session["form_reg_ragsoc"]) + $@"""/>
												<input type=""hidden"" id=""NaturaGiuridica"" name=""NaturaGiuridica"" value=""" + HtmlEncode(session["form_reg_natgiu"]) + $@"""/>
												<input type=""hidden"" id=""Indirizzo"" name=""Indirizzo"" value=""" + HtmlEncode(session["form_reg_indiriz"]) + $@"""/>
												<input type=""hidden"" id=""AnnoCostituzione"" name=""AnnoCostituzione"" value=""" + HtmlEncode(session["form_reg_annocostr"]) + $@"""/>
												<input type=""hidden"" id=""IscrCCIAA"" name=""IscrCCIAA"" value=""" + HtmlEncode(session["form_reg_iscrccia"]) + $@"""/>
												<input type=""hidden"" id=""SedeCCIAA"" name=""SedeCCIAA"" value=""" + HtmlEncode(session["form_reg_sedeccia"]) + $@"""/>
												<input type=""hidden"" id=""CodiceEORI"" name=""CodiceEORI"" value=""" + HtmlEncode(session["form_reg_codiceeori"]) + $@"""/>

												<input type=""hidden"" id=""Telefono"" name=""Telefono"" value=""" + HtmlEncode(session["form_reg_telefono"]) + $@"""/>
												<input type=""hidden"" id=""NumeroFax"" name=""NumeroFax"" value=""" + HtmlEncode(session["form_reg_numfax"]) + $@"""/>
												<input type=""hidden"" id=""EMail"" name=""EMail"" value=""" + HtmlEncode(session["form_reg_email"]) + $@"""/>

												<input type=""hidden"" id=""cap"" name=""cap"" value=""" + HtmlEncode(session["form_reg_cap"]) + $@"""/>
												<input type=""hidden"" id=""Citta"" name=""Citta"" value=""" + HtmlEncode(session["form_reg_citta"]) + $@"""/>
												<input type=""hidden"" name=""aziLocalitaLeg2"" value=""" + HtmlEncode(session["form_reg_localita_leg"]) + $@"""/>
												<input type=""hidden"" id=""Provincia"" name=""Provincia"" value=""" + HtmlEncode(session["form_reg_provincia"]) + $@"""/>
												<input type=""hidden"" name=""aziProvinciaLeg2"" value=""" + HtmlEncode(session["form_reg_provincia_leg"]) + $@"""/>
												<!-- Dallo step 2 -->

												<!-- Dallo step 3 -->
												<input type=""hidden"" id=""NomeRapLeg"" name=""NomeRapLeg"" value=""" + HtmlEncode(session["form_reg_NomeRapLeg"]) + $@"""/>
												<input type=""hidden"" id=""CognomeRapLeg"" name=""CognomeRapLeg"" value=""" + HtmlEncode(session["form_reg_CognomeRapLeg"]) + $@"""/>
												<input type=""hidden"" id=""TelefonoRapLeg"" name=""TelefonoRapLeg"" value=""" + HtmlEncode(session["form_reg_telrapleg"]) + $@"""/>
												<input type=""hidden"" id=""CellulareRapLeg"" name=""CellulareRapLeg"" value=""" + HtmlEncode(session["form_reg_celrapleg"]) + $@"""/>
												<input type=""hidden"" id=""EMailRif"" name=""EMailRif"" value=""" + HtmlEncode(session["form_reg_emailrif"]) + $@"""/>
												<input type=""hidden"" id=""EMailRiferimentoAzienda"" name=""EMailRiferimentoAzienda"" value=""" + HtmlEncode(session["form_reg_emailrifazi"]) + $@"""/>
												<input type=""hidden"" id=""funzione_aziendale"" name=""funzione_aziendale"" value=""" + HtmlEncode(session["form_reg_funzazi"]) + $@"""/>
												<!-- Dallo step 3 -->

											</div>

											<div>
												<input type=""submit"" class=""btn_forward"" name=""comando"" value=""Continua"" onclick=""document.getElementById('loading').style.display = 'block'""/>
												<input type=""submit"" class=""btn_back"" name=""comando"" value=""Indietro"" onclick=""document.getElementById('loading').style.display = 'block'""/>
											</div>

										</fieldset>
									</div>

								</div>
							</form>
						</div>
						</div>

					</div>
				</div>

			</div>

		</div>

		");
    }

    void visualizzaErrore()
    {

        string errore = HtmlEncode(GetParamURL(Request.QueryString.ToString(), "errorecampo"));
        if (string.IsNullOrEmpty(errore))
        {
            errore = CStr(session["errore_campo"]);
            session["errore_campo"] = "";
        }

        if (!string.IsNullOrEmpty(errore))
        {
            htmlToReturn.Write(@"<div class=""error"" id=""messaggio_errore"" >");
            htmlToReturn.Write(@"<strong>" + ApplicationCommon.CNV("Attenzione") + ": </strong>" + errore);
            htmlToReturn.Write(@"</div>");
        }
    }

    void visualizzaInfo()
    {

        string info = CStr(session["msg_info"]);
        session["msg_info"] = "";


        if (!string.IsNullOrEmpty(info))
        {
            htmlToReturn.Write(@"<div class=""error"">");
            htmlToReturn.Write(@"<strong>" + ApplicationCommon.CNV("Attenzione") + ": </strong>" + info);
            htmlToReturn.Write(@"</div>");
        }
    }

    void drawCampiHidden()
    {

        htmlToReturn.Write($@"
			<!-- <input type=""hidden"" id=""URL_APP"" name=""URL_APP"" value=""" + ApplicationCommon.Application["WEBSERVERAPPLICAZIONE"] + $@"""/> -->
			<input type=""hidden"" name=""Evento"" value=""Censimento"" />
			<input type=""hidden"" value=""" + strMnemonico + $@""" name=""strMnemonicoMP"" />
			<input type=""hidden"" name=""TipoUser"" value=""3"" />
			<input type=""hidden"" name=""ateco"" value=""0"" />
			<input type=""hidden"" name=""codici"" value=""0"" />
			<input type=""hidden"" value="""" name=""DescAtt"" />
			<input type=""hidden"" value=""0"" name=""IscrizioneAlbo"" />
			<input type=""hidden"" value=""0"" name=""CancellatoDiUfficio"" />

			<input type=""hidden"" name=""ClasseIscriz"" value="""" />
			<input type=""hidden"" name=""ClassificazioneSOA"" value=""472"" />





			");
        segnalaErrore();

    }

    void segnalaErrore()
    {

        if (!string.IsNullOrEmpty(session["err_validazione_registrazione"]) && string.IsNullOrEmpty(CStr(session["errore_campo"])))
        {
            htmlToReturn.Write($@"
				<div id=""texterror"">
					<p>
						<strong>" + ApplicationCommon.CNV("Attenzione:") + $@"</strong>
						<span>" + ApplicationCommon.CNV("I campi evidenziati non sono stati compilati correttamente!") + $@"</span>
					</p>
				</div>
			");

        }

    }

    bool TestCaptcha(string valSession, string valCaptcha)
    {
        bool boolToReturn;
        string tmpSession;

        valSession = valSession.Trim();
        valCaptcha = valCaptcha.Trim();
        if (string.IsNullOrEmpty(valSession) || string.IsNullOrEmpty(valCaptcha))
        {
            boolToReturn = false;
        }
        else
        {
            tmpSession = valSession;
            valSession = session[valSession].Trim();
            session[tmpSession] = "";
            if (string.IsNullOrEmpty(valSession))
            {
                boolToReturn = false;
            }
            else
            {
                valCaptcha = valCaptcha.Replace("i", "I");
                if (Strings.StrComp(valSession, valCaptcha, CompareMethod.Text) == 0)
                {
                    boolToReturn = true;
                }
                else
                {
                    boolToReturn = false;
                }
            }
        }

        return boolToReturn;

    }

    int check(string tipo, dynamic lunghezza, dynamic ifObbligatorio, TSRecordSet rs)
    {

        int intToReturn = 0;

        if (!string.IsNullOrEmpty(GetValueFromForm(Request, CStr(rs.Fields["mpcrCampo"]).Trim())))
        {

            if (tipo.ToLower() == "string" || tipo.ToLower() == "date")
            {

                //'-- Controllo se si sta passando codice malevolo tramite il form
                if (GetValueFromForm(Request, CStr(rs.Fields["mpcrCampo"]).Trim()).ToUpper().Contains("<SCRIPT>", StringComparison.Ordinal) ||
    GetValueFromForm(Request, CStr(rs.Fields["mpcrCampo"]).Trim()).ToUpper().Contains("<META>", StringComparison.Ordinal) ||
    GetValueFromForm(Request, CStr(rs.Fields["mpcrCampo"]).Trim()).ToUpper().Contains("<IFRAME>", StringComparison.Ordinal) ||
    GetValueFromForm(Request, CStr(rs.Fields["mpcrCampo"]).Trim()).ToUpper().Contains("<FRAME>", StringComparison.Ordinal) ||
    GetValueFromForm(Request, CStr(rs.Fields["mpcrCampo"]).Trim()).ToUpper().Contains(" ONLOAD", StringComparison.Ordinal) ||
    GetValueFromForm(Request, CStr(rs.Fields["mpcrCampo"]).Trim()).ToUpper().Contains(" ONCLICK", StringComparison.Ordinal) ||
    GetValueFromForm(Request, CStr(rs.Fields["mpcrCampo"]).Trim()).ToUpper().Contains("<OBJECT>", StringComparison.Ordinal) ||
    GetValueFromForm(Request, CStr(rs.Fields["mpcrCampo"]).Trim()).ToUpper().Contains("<APPLET>", StringComparison.Ordinal) ||
    GetValueFromForm(Request, CStr(rs.Fields["mpcrCampo"]).Trim()).ToUpper().Contains("<EMBED>", StringComparison.Ordinal) ||
    GetValueFromForm(Request, CStr(rs.Fields["mpcrCampo"]).Trim()).ToUpper().Contains("<A", StringComparison.Ordinal) ||
    GetValueFromForm(Request, CStr(rs.Fields["mpcrCampo"]).Trim()).ToUpper().Contains("<FORM>", StringComparison.Ordinal) ||
    GetValueFromForm(Request, CStr(rs.Fields["mpcrCampo"]).Trim()).ToUpper().Contains(" ONMOUSEOVER", StringComparison.Ordinal) ||
    GetValueFromForm(Request, CStr(rs.Fields["mpcrCampo"]).Trim()).ToUpper().Contains(" ONKEYUP", StringComparison.Ordinal) ||
    GetValueFromForm(Request, CStr(rs.Fields["mpcrCampo"]).Trim()).ToUpper().Contains(" ONKEYDOWN", StringComparison.Ordinal) ||
    GetValueFromForm(Request, CStr(rs.Fields["mpcrCampo"]).Trim()).ToUpper().Contains(" SELF.LOCATION", StringComparison.Ordinal)
    )
                {

                    //dim ObjSession

                    //ObjSession = session("Session")
                    //set ObjSession(0) = Request.QueryString
                    //set ObjSession(1) = Request.form
                    //set ObjSession(3) = request
                    //set ObjSession(5) = session
                    //set ObjSession(6) = application

                    //dim objDB
                    BlackList objDB = new BlackList();

                    //'-- Se non siamo in modalit� di sviluppo aggiungiamo l'ip alla blacklist
                    if (!objDB.isDevMode(session))
                    {
                        objDB.addIp(objDB.getAttackInfo(HttpContext, CStr(session["IdPfu"]), "Attacco XSS: Tentativo di invio di codice malevo tramite form "), session, ApplicationCommon.Application.ConnectionString);

                        //'Se � presente NOMEAPPLICAZIONE nell'application
                        if (!string.IsNullOrEmpty(CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"])))
                        {

                            throw new ResponseRedirectException("/" + ApplicationCommon.Application["NOMEAPPLICAZIONE"] + "/blocked.asp", Response);

                        }
                        else
                        {

                            throw new ResponseRedirectException("/Application/blocked.asp", Response);

                        }

                        throw new ResponseEndException(htmlToReturn.Out(), Response, "");


                    }

                }
                else
                {

                    if (CStr(GetValueFromForm(Request, CStr(rs.Fields["mpcrCampo"]).Trim())).Length > CInt(rs.Fields["mpcrLungh"]))
                    {
                        intToReturn = 0;
                    }
                    else
                    {
                        intToReturn = 1;
                    }

                }

            }
            else
            {



                if (GetValueFromForm(Request, CStr(rs.Fields["mpcrCampo"]).Trim()).GetType() == typeof(long) && tipo == "Long")
                {//' un long � compreso tra  -2147483647 e 2147483647
                    intToReturn = 1;

                    //' in un campo possiamo trovare un intero anche se il tipo scelto dall'utente � long. Condizione positiva
                }
                else if (GetValueFromForm(Request, CStr(rs.Fields["mpcrCampo"]).Trim()).GetType() == typeof(int) && tipo == "Long")
                {
                    intToReturn = 1;
                }
                else if (GetValueFromForm(Request, CStr(rs.Fields["mpcrCampo"]).Trim()).GetType() == typeof(int) && tipo == "Int")
                {//'un intero � compreso tra -32767 e 32767
                    intToReturn = 1;
                }
                else
                {
                    intToReturn = 0;
                }
            }




        }
        else
        {
            intToReturn = 1;
        }

        return intToReturn;

    }

    int checkMultiplo(dynamic lunghezza, dynamic ifObbligatorio, TSRecordSet rs)
    {

        IFormCollection? form = Request.HasFormContentType ? Request.Form : null;

        StringValues temp;
        bool hasValue = false;
        if (form != null)
        {
            if (form.TryGetValue(CStr(rs.Fields["mpcrCampo"]).Trim(), out temp))
            {
                hasValue = true;
            }
        }
        else
        {
            return 0;
        }



        if (hasValue && (temp.Count) <= CInt(rs.Fields["mpcrLungh"]))
        {
            return 1;
        }
        else
        {
            return 0;
        }

    }

    //'-- funzione di censimento per il solo utente.caso d'uso : azienda gi� censita
    void censimentoUtente()
    {

        string docID = CStr(session["SESSION_WORK_KEY"]);

        //'-- elimino eventuali record gia presenti per il session.id attuale
        strSql = "delete from FormRegistrazione where sessionid = '" + docID.Replace("'", "''") + "'";
        ExecSQL(strSql);

        //'-- se la sys REG_RICHIEDI_FIRMA_OE � a YES chieder� sempre la firma, anche nel caso 'azienda gi� censita'
        if (CStr(ApplicationCommon.Application["REG_RICHIEDI_FIRMA_OE"]).ToUpper() == "YES")
        {

            session["attiva_step_firma"] = "YES";

            //set objAzienda = createObject("AFLAzienda.Azienda")
            //set rs=objAzienda.GetMPCampiReg(clng(1),false, cstr(Application("ConnectionString")))

            strSql = "SELECT * FROM MPCampiReg with(nolock) WHERE mpcrIdMP = 1";
            rs = GetRS(strSql);

            if (rs != null)
            {

                rs.MoveFirst();

                while (!rs.EOF)
                {
                    string sVal = GetValueFromForm(Request, Strings.Trim(CStr(rs.Fields["mpcrCampo"])));
                    insertCampoReg( Strings.Trim(CStr(rs.Fields["mpcrNomeColonna"])), sVal);
                    rs.MoveNext();
                }
            }
            
            //'-- inserisco i dati dell'utente nella tabella 'FormRegistrazione'
            insertCampoReg("cfRapLeg", CStr(session["form_reg_cfRapLeg"]));
            insertCampoReg("funzAzi", CStr(session["form_reg_funzazi"]));
            insertCampoReg("emailRifAzi", CStr(session["form_reg_emailrifazi"]));
            insertCampoReg("emailRif", CStr(session["form_reg_emailrif"]));
            insertCampoReg("celRapLeg", CStr(session["form_reg_celrapleg"]));
            insertCampoReg("telRapLeg", CStr(session["form_reg_telrapleg"]));
            insertCampoReg("cognomeRapLeg", CStr(session["form_reg_CognomeRapLeg"]));
            insertCampoReg("nomeRapLeg", CStr(session["form_reg_NomeRapLeg"]));

            //'-- Se i dati parix non combaciano creo il documento di richiesta
            dynamic idDoc = generaDocumentoApprovazione(docID);
            session["REG_DOC_ID"] = idDoc;

            if (CInt(idDoc) > 0)
            {

                firmaPdf();

            }
            else
            {

                htmlToReturn.Write("Errore.Documento gia inviato");
                throw new ResponseEndException(htmlToReturn.Out(), Response, "Errore.Documento gia inviato");

            }

        }
        else
        {

            //'-- inserisco i dati dell'utente nella tabella 'FormRegistrazione'
            insertCampoReg("cfRapLeg", CStr(session["form_reg_cfRapLeg"]));
            insertCampoReg("funzAzi", CStr(session["form_reg_funzazi"]));
            insertCampoReg("emailRifAzi", CStr(session["form_reg_emailrifazi"]));
            insertCampoReg("emailRif", CStr(session["form_reg_emailrif"]));
            insertCampoReg("celRapLeg", CStr(session["form_reg_celrapleg"]));
            insertCampoReg("telRapLeg", CStr(session["form_reg_telrapleg"]));
            insertCampoReg("cognomeRapLeg", CStr(session["form_reg_CognomeRapLeg"]));
            insertCampoReg("nomeRapLeg", CStr(session["form_reg_NomeRapLeg"]));

            session["attiva_step_firma"] = "";
            censusOfCompany("");

        }


    }

    //'-- funzione di censimento censusOfCompany. crea sia l'azienda che l'utente. caso d'uso : azienda non ancora censita
    void censimento()
    {

        int verifica;

        dynamic[,] DataUpdate;//'la matrice da passare al metodo Savecompany
        dynamic?[] tempVettore;//'Vettore temporaneo
        TSRecordSet rs;

        string strMnemonicoMP = "PA";

        //'set objMP = createObject("AFLSrv.BOMarketPlace" )

        //'recupero il mnemonico del MP dall'url quando provengo dalle chiamate esterne oppure
        //'dal campo nascosto quando ricarico la form dopo la selezione delle attivit� economiche
        string strMnemonico;

        if (!string.IsNullOrEmpty(CStr(GetValueFromForm(Request, "strMnemonicoMP"))))
        {
            strMnemonico = CStr(GetValueFromForm(Request, "strMnemonicoMP"));
        }
        else
        {
            strMnemonico = GetParamURL(Request.QueryString.ToString(), "strMnemonicoMP");
        }

        if (string.IsNullOrEmpty(strMnemonico))
        {
            strMnemonico = strMnemonicoMP;
        }

        //'set objRsMP=objMP.GetInfoMP(cstr(strMnemonico))

        //'htmlToReturn.Write($@"<h1>" & strMnemonico & "</h1>"

        strSql = "SELECT a.*, b.aziRagioneSociale, c.lngSuffisso FROM MarketPlace a with(nolock) inner join Aziende b with(nolock) on b.idazi = a.mpIdAziMaster inner join Lingue c with(nolock) on c.IdLng = a.mpIdLng where a.mpDeleted = 0 and a.mpLog= '" + Strings.Replace(strMnemonico, "'", "''") + "'";
        //set objDB = createobject( "ctldb.clsTabManage" )
        CommonDbFunctions cdf = new();
        TSRecordSet objRsMP = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString);
        //set objDB = nothing

        //'response.write strSQL
        dynamic IdMp;
        if (objRsMP != null)
        {
            if (objRsMP.RecordCount > 0)
            {
                IdMp = objRsMP.Fields["IdMp"];
            }
            else
            {
                //'marketplace non valido
                htmlToReturn.Write($@"MarketPlace '" + HtmlEncode(strMnemonico) + "' Not Valid");
                throw new ResponseEndException(htmlToReturn.Out(), Response, "' Not Valid");
            }
        }
        else
        {
            htmlToReturn.Write($@"objRsMP is nothing");
            throw new ResponseEndException(htmlToReturn.Out(), Response, "objRsMP is nothing");
        }


        //'Recupero da una Tabella il dizionario attributi del MP (GetDizionarioAttributi(MPLog))
        //'Per ogni elemento ne controllo il tipo e il valore
        //'set objAzienda = createObject("AFLAzienda.Azienda")

        //'-- REFACTORING: sostituire GetMPCampiReg con "SELECT * FROM MPCampiReg WHERE mpcrIdMP = " & cstr(IdMp)
        //'set rs=objAzienda.GetMPCampiReg(clng(IdMp),false, cstr(Application("ConnectionString")))
        strSql = "SELECT * FROM MPCampiReg with(nolock) WHERE mpcrIdMP = " + CStr(IdMp);
        rs = GetRS(strSql);

        //'non aggiungiamo TipoUser alla matrice che contiene i dati dell'azienda da censire

        DataUpdate = new dynamic[2, rs.RecordCount - 1];    //'(nome,valore)
        int indiceRiga = 0;
        verifica = 1;
        //'-- REFACTORING: Rimuovere tutto questo IF. la validazione dei campi � gi� stata effettuata. non serve ripeterla con le vecchie procedure
        if (rs != null)
        {

            rs.MoveFirst();

            while (!rs.EOF && verifica == 1)
            {

                //'Aggiungo il VALORE all�array unidimensionale da passare al metodo di censimento

                if (CInt(rs.Fields[7]) != -1)
                {

                    if (Strings.UCase(Strings.Trim(CStr(rs.Fields["mpcrTipoHtml"]))) == "SINGOLO")
                    {

                        //'Settiamo il tipo di user
                        if (Strings.Trim(CStr(rs.Fields["mpcrCampo"])) == "TipoUser")
                        {

                            string VarUser;
                            //'-- Non prendiamo + il valore tipouser dal form utente.... . .
                            //'VarUser = Request.Form(trim(rs.fields.item("mpcrCampo")))
                            if (string.IsNullOrEmpty(CStr(ApplicationCommon.Application["CENSIMENTO_TIPOUSER"])))
                            {
                                VarUser = "3";
                            }
                            else
                            {
                                VarUser = CStr(ApplicationCommon.Application["CENSIMENTO_TIPOUSER"]);
                            }

                        }
                        else
                        {

                            DataUpdate[0, indiceRiga] = Strings.Trim(CStr(rs.Fields["mpcrNomeColonna"]));
                            //' odierno --- modifica per passare nel campo nome utente
                            //' nome + CognomeRapLeg
                            string sVal;

                            sVal = GetValueFromForm(Request, Strings.Trim(CStr(rs.Fields["mpcrCampo"])));

                            //'response.write "--Valore:" & sval

                            //'-- NON recuperiamo + questi valori da form : 'tipouser','iscrizionealbo','CancellatoDiUfficio'
                            if (Strings.UCase(Strings.Trim(CStr(rs.Fields["mpcrCampo"]))) == "ISCRIZIONEALBO")
                            {

                                if (string.IsNullOrEmpty(CStr(ApplicationCommon.Application["CENSIMENTO_ISCRIZIONEALBO"])))
                                {
                                    sVal = "0";
                                }
                                else
                                {
                                    sVal = CStr(ApplicationCommon.Application["CENSIMENTO_ISCRIZIONEALBO"]);
                                }

                            }

                            if (Strings.UCase(Strings.Trim(CStr(rs.Fields["mpcrCampo"]))) == "CANCELLATODIUFFICIO")
                            {

                                if (string.IsNullOrEmpty(CStr(ApplicationCommon.Application["CENSIMENTO_CANCELLATODIUFFICIO"])))
                                {
                                    sVal = "0";
                                }
                                else
                                {
                                    sVal = CStr(ApplicationCommon.Application["CENSIMENTO_CANCELLATODIUFFICIO"]);
                                }

                            }

                            if (Strings.UCase(DataUpdate[0, indiceRiga]) == "NOME")
                            {
                                sVal = Strings.Trim(GetValueFromForm(Request, "Nome") + " " + GetValueFromForm(Request, "CognomeRapLeg"));
                            }

                            DataUpdate[1, indiceRiga] = sVal;

                            //'response.write "<br/>VAL-VET:" & DataUpdate(1,indiceRiga) & "<br/>"

                            indiceRiga = indiceRiga + 1;

                        }

                    }
                    else
                    {

                        int countOfmpcrCampo = 0;

                        if (Request.HasFormContentType)
                        {
                            countOfmpcrCampo = Request.Form[Strings.Trim(CStr(rs.Fields["mpcrCampo"]))].Count;
                        }

                        if (countOfmpcrCampo != 0)
                        {
                            string strTechName = "codici" + CStr(rs.Fields["mpcrCampo"]);

                            if (Strings.Trim(Strings.LCase(CStr(rs.Fields["mpcrCampo"]))) == "cpv")
                            {
                                strTechName = "codicicpv";
                            }

                            if (Strings.Trim(Strings.LCase(CStr(rs.Fields["mpcrCampo"]))) == "ateco")
                            {
                                strTechName = "codici";
                            }

                            string IdentificativiAtv;
                            if (Strings.Right(CStr(GetValueFromForm(Request, strTechName)), 1) == "#")
                            {
                                IdentificativiAtv = Strings.Left(CStr(GetValueFromForm(Request, strTechName)), CStr(GetValueFromForm(Request, strTechName)).Length - 1);
                            }
                            else
                            {
                                IdentificativiAtv = CStr(GetValueFromForm(Request, strTechName));
                            }

                            DataUpdate[0, indiceRiga] = Strings.Trim(CStr(rs.Fields["mpcrNomeColonna"]));
                            string Identificativicpv;
                            if (Strings.Trim(Strings.LCase(CStr(rs.Fields["mpcrCampo"]))) != "cpv")
                            {
                                DataUpdate[1, indiceRiga] = Strings.Split(IdentificativiAtv, "#", -1, CompareMethod.Text);
                            }
                            else
                            {
                                Identificativicpv = IdentificativiAtv;
                                DataUpdate[1, indiceRiga] = Strings.Split(Identificativicpv, "#", -1, CompareMethod.Text);
                            }
                            indiceRiga = indiceRiga + 1;
                        }
                        else
                        {
                            tempVettore = new dynamic[1];
                            //redim tempVettore(0)
                            tempVettore[0] = null;
                            DataUpdate[0, indiceRiga] = Strings.Trim(CStr(rs.Fields["mpcrNomeColonna"]));
                            DataUpdate[1, indiceRiga] = tempVettore;
                            indiceRiga = indiceRiga + 1;
                        }

                    }

                }

                rs.MoveNext();
            }

        }

        string strSuffLing = GetParamURL(Request.QueryString.ToString(), "strSuffLing");

        if (string.IsNullOrEmpty(strSuffLing))
        {
            strSuffLing = "I";
        }


        //'-- Se c'� stato un errore di validit� nei dati
        //if(verifica == 0)   {

        //	//'htmlToReturn.Write($@"ERRORE VALIDAZIONE SERVER"
        //	string strMsgErr = "[Controlla le proprietà lunghezza e/o obbligatorietà del campo: " + "Err.Description" + "]";

        //  session["errore_campo"] = cstr(strMsgErr);
        //	avanzaRegistrazione("", true, strStep);

        //} else {

        //'-- elimino eventuali record gia presenti per il session.id attuale
        strSql = "delete from FormRegistrazione where sessionid = '" + CStr(session["SESSION_WORK_KEY"]).Replace("'", "''") + "'";
        ExecSQL(strSql);

        //'on error resume next
        for (int i = 0; i < DataUpdate.GetUpperBound(1); i++)
        { //to ubound(DataUpdate,2)

            if (!Information.IsArray(DataUpdate[1, i]))
            {
                insertCampoReg(CStr(DataUpdate[0, i]), CStr(DataUpdate[1, i]));
            }
            else
            {

                string tmpMultival = "###"; //'###p7m###
                for (int k = 0; k < DataUpdate[1, i].Length; k++)
                { // to ubound(DataUpdate(1,i))
                    tmpMultival = tmpMultival + DataUpdate[1, i][k] + "###";
                }

                insertCampoReg(CStr(DataUpdate[0, i]), tmpMultival);

            }

        }

        //'-- aggiungo nella tabella alcuni campi non presenti nel vettore di update
        insertCampoReg("CFRapLeg", CStr(session["form_reg_cfRapLeg"]));
        insertCampoReg("aziLocalitaLeg2", CStr(session["form_reg_localita_leg"]));
        insertCampoReg("aziProvinciaLeg2", CStr(session["form_reg_provincia_leg"]));
        insertCampoReg("aziStatoLeg2", CStr(session["form_reg_cstato"]));

        insertCampoReg("professionista", CStr(session["form_professionista"]));

        string docID = CStr(session["SESSION_WORK_KEY"]);

        session["reg_IdMp"] = IdMp;
        session["reg_DataUpdate"] = DataUpdate;
        session["reg_miscInfo"] = matriceMiscInfo;

        //'response.write session("reg_DataUpdate")

        //'-- Effettuo il controllo dei dati inseriti dall'utente rispetto ai dati ritornati da parix
        //'-- se ritorna true vuol dire che non ci sono differenze e posso censire l'utente
        if (CStr(ApplicationCommon.Application["REG_DISATTIVA_FIRMA"]).ToUpper() == "YES" || verificaParix(docID, codicefiscale))
        {

            censusOfCompany(CStr(IdMp));

            session["attiva_step_firma"] = "";

        }
        else
        {

            session["attiva_step_firma"] = "YES";

            //'-- Se i dati parix non combaciano creo il documento di richiesta
            dynamic idDoc = generaDocumentoApprovazione(docID);
            session["REG_DOC_ID"] = idDoc;

            if (CInt(idDoc) > 0)
            {

                firmaPdf();

            }
            else
            {

                htmlToReturn.Write($@"Errore.Documento gia inviato");
                throw new ResponseEndException(htmlToReturn.Out(), Response, "Errore.Documento gia inviato");

            }

        }

        //'end if


    }

    int censusOfCompany(string IdMp)
    {



        int intToReturn;

        dynamic idAz;
        dynamic? Login;
        dynamic? Pwd;
        dynamic TipoAzienda;
        dynamic CodeRit = 0;
        int IDAZI = 0;
        int idpfu;
        string docID;
        string strDescErrore;

        //'if aziendaGiaCensita = false or cstr(session("azienda_ente")) = "YES" ) {
        if (aziendaGiaCensita == false)
        {

            string strMnemonicoMP = "PA";

            //'set objMP = createObject("AFLSrv.BOMarketPlace" )

            //'recupero il mnemonico del MP dall'url quando provengo dalle chiamate esterne oppure
            //'dal campo nascosto quando ricarico la form dopo la selezione delle attivit� economiche
            string strMnemonico;
            StringValues temp;
            if (Request.HasFormContentType && Request.Form.TryGetValue("strMnemonicoMP", out temp))
            {
                strMnemonico = GetValueFromForm(Request, "strMnemonicoMP");
            }
            else
            {
                strMnemonico = GetParamURL(Request.QueryString.ToString(), "strMnemonicoMP");
            }

            if (string.IsNullOrEmpty(strMnemonico))
            {
                strMnemonico = strMnemonicoMP;
            }

            //'set objRsMP=objMP.GetInfoMP(cstr(strMnemonico))

            string strSQL = "SELECT a.*, b.aziRagioneSociale, c.lngSuffisso FROM MarketPlace a with(nolock) inner join Aziende b with(nolock) on b.idazi = a.mpIdAziMaster inner join Lingue c with(nolock) on c.IdLng = a.mpIdLng where a.mpDeleted = 0 and a.mpLog= '" + Strings.Replace(strMnemonico, "'", "''") + "'";
            //set objDB = createobject( "ctldb.clsTabManage" )
            CommonDbFunctions cdf = new CommonDbFunctions();
            TSRecordSet objRsMP = cdf.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString);
            //set objDB = nothing

            if (objRsMP != null)
            {
                if (objRsMP.RecordCount > 0)
                {
                    IdMp = CStr(objRsMP.Fields["IdMp"]);
                }
                else
                {
                    //'marketplace non valido
                    htmlToReturn.Write("MarketPlace" + HtmlEncode(strMnemonico) + "Not Valid");
                    throw new ResponseEndException(htmlToReturn.Out(), Response, "MarketPlace" + HtmlEncode(strMnemonico) + "Not Valid");
                }
            }
            else
            {
                htmlToReturn.Write("objRsMP is nothing");
                throw new ResponseEndException(htmlToReturn.Out(), Response, "objRsMP is nothing");
            }

            intToReturn = 0;

            //    'dim MyDataUpdate()	'la matrice da passare al metodo Savecompany
            //	'dim tmpDataUpdate
            //	'tmpDataUpdate = session("reg_DataUpdate")
            //	'
            //	'redim MyDataUpdate(1, ubound(tmpDataUpdate,2)+1)	'(nome,valore)
            //'
            //'	for i = 0 to ubound(tmpDataUpdate,2)
            //'		MyDataUpdate(0,i) = cstr(tmpDataUpdate(0,i))
            //'		MyDataUpdate(1,i) = tmpDataUpdate(1,i)
            //'	next

            //	'i = ubound(tmpDataUpdate,2)+1

            //	'MyDataUpdate(0,i) = "aziAcquirente"
            //	'MyDataUpdate(1,i) = "0"

            //	''--- Chiamo il metodo SaveCompany per il salvataggio dei dati
            //	'Login = null
            //	'Pwd = null

            //	''vettore dei market place dove l'azienda deve essere censita
            //	'dim arrayMP(0)
            //	'arrayMP(0)=clng(IdMp)

            //	'TipoUsr = "3"
            //	'if cstr(Request.Form("TipoUser")) <> "" then
            //	'	TipoUsr = Request.Form("TipoUser")
            //	'end if

            //	'redim matriceMiscInfo(1,3)
            //	'matriceMiscInfo(0,0)="TipoUser"
            //	'matriceMiscInfo(1,0)=TipoUsr
            //	'matriceMiscInfo(0,1)="IsAdmin"
            //	'matriceMiscInfo(1,1)="0"
            //	'matriceMiscInfo(0,2)="CompanyState"
            //	'matriceMiscInfo(1,2)="0"
            //	'matriceMiscInfo(0,3)="UserFeatures"
            //	'matriceMiscInfo(1,3)="0010000000000001111110000000000001111111000000100000000000000111111000000001111001110110011100101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000100000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"

            //	''vettore degli attributi su cui il metodo fa il controllo di univocit� dell'azienda
            //	'dim arrayCensusCheck(1)
            //	'arrayCensusCheck(0)="codicefiscale"
            //	'arrayCensusCheck(1)="aziAcquirente"

            //	'arrayCensusCheck(1)="PIVA"

            //	'dim nTipoCheck

            //	''--se nTipoCheck=1 OR degli attributi altrimenti AND
            //	''nTipoCheck=1

            //	''-- avendo aggiungo  arrayCensusCheck(1)="aziAcquirente" non faccio pi� in OR ma in AND
            //	'nTipoCheck=0


            //'Ritorna i seguenti valori:
            //'0: Errore
            //'1: Nuova azienda censita con successo
            //'2: Azienda gi� censita sicura non Prospect nel MarketPlace (non censita)
            //'3: Azienda gia censita sicura Prospect in tutti i MarketPlace (censita)
            //'4: Azienda gia censita sicura cancellata logicamente nel MarketPlace (non censita)
            //'5: Azienda gi� censita non sicura, esce senza fare niente (non censita)
            //'6: Azienda gia censita sicura Prospect nel MarketPlace (censita)
            //'7: Azienda gia censita sicura non attiva (aziDeleted = 2) (non censita)

            //on error resume next
            //'set objAzienda = createObject("AFLAzienda.Azienda")
            //'CodeRit= objAzienda.CensusOfCompany(arrayMP,MyDataUpdate,matriceMiscInfo,cstr(strSuffLing),idAz,Login,Pwd,TipoAzienda,arrayCensusCheck,,IDAZI,nTipoCheck, cstr( Application("ConnectionString")) )
            //'set objAzienda = nothing

            //'-- firma della stored :
            //'[CENSUS_OF_COMPANY]
            //'	(
            //'		@CodiceFiscaleAzi varchar(100),
            //'		@sessionID nvarchar(max),
            //'		@idMP int,
            //'		@NewIdAzi int output,
            //'		@newIdPfu int output
            //'	)



            if (!String.IsNullOrEmpty(CStr(session["form_reg_cf"])))
            {

                strSql = "SET NOCOUNT ON " + Environment.NewLine;
                strSql = strSql + " DECLARE @idAzi INT = 0 " + Environment.NewLine;
                strSql = strSql + " DECLARE @idPfu INT = 0 " + Environment.NewLine;

                strSql = strSql + " DECLARE @sessionID nvarchar(max) = '" + Strings.Replace(CStr(session["SESSION_WORK_KEY"]), "'", "''") + "'" + Environment.NewLine;
                strSql = strSql + " DECLARE @cfAzi nvarchar(1000) = '" + Strings.Replace(CStr(session["form_reg_cf"]), "'", "''") + "'" + Environment.NewLine;

                strSql = strSql + "	EXEC CENSUS_OF_COMPANY @cfAzi, @sessionID," + IdMp + ", @idAzi output, @idPfu output " + Environment.NewLine;
                strSql = strSql + "	select isnull(@idAzi,0) as idAziNew, isnull(@idPfu,0) as idPfuNew ";

                //'response.write strSql
                //'response.end
                try
                {
                    rs = GetRS(strSql);
                }
                catch (Exception ex)
                {
                    //'-- se la stored CENSUS_OF_COMPANY ha dato errore di runtime
                    strErrore = " Errore esecuzione stored CENSUS_OF_COMPANY. Descrizione : " + ex.Message + " ; Numero :";
                    MyErrore("", "", strErrore);
                }
            }

            else
            {
                strErrore = " Errore recupero dati, registrazione non completata per mancanza di informazioni. Ripetere la registrazione";
                MyErrore("", "", strErrore);
            }



            if (rs.RecordCount > 0)
            {

                rs.MoveFirst();
                IDAZI = CInt(rs.Fields["idAziNew"]);
                idpfu = CInt(rs.Fields["idPfuNew"]);

                if (IDAZI == 0 || idpfu == 0)
                {

                    strErrore = " Creazione utente e azienda fallita. verificare la stored CENSUS_OF_COMPANY ";
                    MyErrore("", "", strErrore);

                }
                else
                {

                    CodeRit = 1; //'--tutto ok

                }

            }
            else
            {

                //'-- oppure non ha ritornato record
                strErrore = " Errore esecuzione stored CENSUS_OF_COMPANY. Nessun record ritornato.";
                MyErrore("", "", strErrore);

            }



            //'-- Inserisco dei dati aggiuntivi nella tabella dei campi di registrazione per permettere ai processi di usare anche queste info
            insertCampoReg("CodeRit", CStr(CodeRit));
            insertCampoReg("ID_AZI", CStr(IDAZI));

            intToReturn = IDAZI;
            idpfu = -1; //'-- perch� passiamo questa variabile a -1 ?

            //'-----------------------------------------------------------------------------------------------
            //'-- SE SUL CLIENTE � ATTIVO IL BLOCCO DELLE CREDENZIALI FINO ALLA VALIDAZIONE DELL'EMAIL PEC  --
            //'--		SCHEDULO IL PROCESSO CHE METTE A CANCELLATA LOGICAMENTE L'AZIENDA DOPO 5 GIORNI		  --
            //'-----------------------------------------------------------------------------------------------
            //'-		non lo faccio pi� qui con una schedule_process ma nel servizio deputato
            //'if cstr(session("CONTROLLO_PEC")) = "1" then
            //'	strSQL = "INSERT INTO CTL_Schedule_Process ( DPR_DOC_ID, DPR_ID, IdDoc, IdUser, DataRequestExec ) values ( 'CENSIMENTO', 'PEC_NON_VALIDA', " & cstr(IDAZI) & ", -20, DATEADD (hh , 6 , GETDATE() ) )"
            //'	call ExecSQL( strSql )
            //'end if

        }
        else
        {

            docID = CStr(session["SESSION_WORK_KEY"]);
            IDAZI = session["ID_AZI"];
            //'censusOfCompany = IDAZI

            //'-- chiamo la stored per la creazione dell'utente, in output otterremo un recordset con l'idpfu dell'utente generato
            strSql = "declare @idpfu INT " + Environment.NewLine;
            strSql = strSql + "exec creaUtenteDaRegistrazione '" + docID.Replace("'", "''") + "'," + CStr(IDAZI) + ",'PROFILI_BASE','OE',@idPfu output" + Environment.NewLine;
            strSql = strSql + "select @idpfu as idpfu ";
            try{
                rs = GetRS(strSql);

            }catch (Exception ex)
            {

                MyErrore("", "", ex.ToString());
            }
            rs.MoveFirst();
            idpfu = CInt(rs.Fields["idpfu"]);
            //set rs = nothing

            CodeRit = 1;
            intToReturn = idpfu;

        }

        //on error resume next


        if (aziendaGiaCensita == false || CStr(ApplicationCommon.Application["REG_RICHIEDI_FIRMA_OE"]).ToUpper() == "YES")
        {

            if (CodeRit == 1 || CodeRit == 3)
            {

                //'-- Setto sulla colonna 'azienda' l'idazi dell'azienda appena creata
                strSql = "update ctl_doc set azienda = " + CStr(IDAZI) + " where id = " + CStr(session["SESSION_WORK_KEY"]);
                ExecSQL(strSql);

                string nomeProcesso = "";

                //'-- se � stata fatta la verifica dei dati parix e si � passati attraverso la firma del documento
                if (CStr(ApplicationCommon.Application["REG_RICHIEDI_FIRMA_OE"]).ToUpper() == "YES" || (!string.IsNullOrEmpty(CStr(session["verifica_parix"])) && CStr(session["verifica_parix"]) == "false"))
                {

                    //'-- se siamo nel giro di firma olografa entrer� nella registrazione con permessi limitati. altrimenti normale
                    if (session["firma_olografa"] == "1")
                    {
                        nomeProcesso = "COMPLETA_REGISTRAZIONE_LIMITATA";
                    }
                    else
                    {
                        nomeProcesso = "COMPLETA_REGISTRAZIONE";
                    }

                }
                else
                {

                    nomeProcesso = "COMPLETA_REGISTRAZIONE";

                }

                if (aziendaGiaCensita == true)
                {
                    insertCampoReg("idpfu_giro_richiedi_firma_oe", CStr(idpfu));
                }

                strDescErrore = "";
                try
                {
                    eProcurementNext.CtlProcess.ClsElab objProc = new eProcurementNext.CtlProcess.ClsElab();
                    objProc.Elaborate(nomeProcesso, "CENSIMENTO", CStr(session["SESSION_WORK_KEY"]), CLng(IDAZI), ref strDescErrore, 1, ApplicationCommon.Application.ConnectionString);
                    objProc = null;
                }
                catch (Exception ex)
                {
                    strErrore = " Errore CENSIMENTO,COMPLETA_REGISTRAZIONE " + ex.Message + "-" + strDescErrore + ":";

                    if (aziendaGiaCensita == false)
                    {

                        //'-- effettuo una cancellazione dell'azienda e dell'utente creato. (essendo nel caso aziendaGiaCensita=false c'� un solo utente per l'azienda)
                        //'strSql = "update aziende set aziDeleted = 1 where idazi = " & IDAZI
                        strSql = "exec DeleteAzienda " + IDAZI;
                        ExecSQL(strSql);

                        //'strSql = "update profiliutente set pfuDeleted = 1 where pfuIdAzi = " & IDAZI
                        strSql = "exec DeleteUtente " + IDAZI;
                        ExecSQL(strSql);

                    }
                    else
                    {

                        //'strSql = "update profiliutente set pfuDeleted = 1 where idpfu = " & idPfu
                        strSql = "exec DeleteUtente -100, " + idpfu;
                        ExecSQL(strSql);

                    }
                    MyErrore("", "", strErrore);


                }

                if (!string.IsNullOrEmpty(strDescErrore))
                {


                    strErrore = " Errore CENSIMENTO,COMPLETA_REGISTRAZIONE " + "-" + strDescErrore + ":";

                    if (aziendaGiaCensita == false)
                    {

                        //'-- effettuo una cancellazione dell'azienda e dell'utente creato. (essendo nel caso aziendaGiaCensita=false c'� un solo utente per l'azienda)
                        //'strSql = "update aziende set aziDeleted = 1 where idazi = " & IDAZI
                        strSql = "exec DeleteAzienda " + IDAZI;
                        ExecSQL(strSql);

                        //'strSql = "update profiliutente set pfuDeleted = 1 where pfuIdAzi = " & IDAZI
                        strSql = "exec DeleteUtente " + IDAZI;
                        ExecSQL(strSql);

                    }
                    else
                    {

                        //'strSql = "update profiliutente set pfuDeleted = 1 where idpfu = " & idPfu
                        strSql = "exec DeleteUtente -100, " + idpfu;
                        ExecSQL(strSql);

                    }

                    MyErrore("", "", strErrore);

                }

                //'-- per discriminare un utente censito con giro di firma olografa, da uno con firma digitale.
                //'-- vado a settare la colonna jumpcheck del documento verifica registrazione con un discriminante
                //'-- e se l'utente non � limitato setto anche lo statoFunzionale ad Confermato
                string idDocVerifica = CStr(session["REG_DOC_ID"]);
                string discriminante = "";
                string statoFunzionale = "";

                if (!string.IsNullOrEmpty(idDocVerifica))
                {

                    if (session["firma_olografa"] == "1")
                    {
                        discriminante = "OE-LIMITATO";
                        statoFunzionale = "InLavorazione";
                    }
                    else
                    {
                        discriminante = "";
                        //'statoFunzionale = "Confermato"
                        statoFunzionale = "InLavorazione";
                    }

                    strSql = "update ctl_doc set StatoFunzionale = '" + statoFunzionale.Replace("'", "''") + "',JumpCheck = '" + discriminante.Replace("'", "''") + "'";

                    if (session["firma_olografa"] == "1")
                    {
                        strSql = strSql + " ,Destinatario_User = 0,Destinatario_Azi = 0";
                    }

                    strSql = strSql + " where id = " + CStr(idDocVerifica);

                    ExecSQL(strSql);

                }

            }

        }

        //'--se tutto ok inserisco attivit� per il cambio pwd al primo login
        if (CodeRit == 1)
        {

            //'-- se � presente il parametro per disattivare l'inserimento dell'attivit� di cambio password obbligatoria
            string disattivaCambioPassword = Get_Func_Property("CENSIMENTO", "CHANGEPWD", "DISABLE", "0", -1);

            if (disattivaCambioPassword == "0")
            {

                strDescErrore = "";
                try
                {
                    eProcurementNext.CtlProcess.ClsElab objProc = new eProcurementNext.CtlProcess.ClsElab();
                    objProc.Elaborate("CHANGEPWD", "CENSIMENTO", CLng(IDAZI), CLng(idpfu), ref strDescErrore, 1, ApplicationCommon.Application.ConnectionString);
                    objProc = null;
                }
                catch (Exception ex)
                {
                    strErrore = " Errore CENSIMENTO,CHANGEPWD " + ex.Message + "-" + strDescErrore + ":";
                    MyErrore("", "", strErrore);
                }

                if (!string.IsNullOrEmpty(strDescErrore))
                {
                    strErrore = " Errore CENSIMENTO,CHANGEPWD " + "-" + strDescErrore + ":";
                    MyErrore("", "", strErrore);

                }

            }

        }

        //on error goto 0

        if (idpfu == -1)
        {
            strSql = "select idpfu from profiliutente with(nolock) where pfuidazi = " + IDAZI;
            rs = GetRS(strSql);
            rs.MoveFirst();
            idpfu = CInt(rs.Fields["idpfu"]);
            //set rs = nothing
        }
        string processoMail;
        long idProcessDoc;
        //'if aziendaGiaCensita = false or cstr(session("azienda_ente")) = "YES" ) {
        if (aziendaGiaCensita == false)
        {

            if (session["firma_olografa"] == "1")
            {

                processoMail = CStr("SEND_MAIL_OLOGRAFA");

                //'-- capire se devo settare il flag 'davalutare' sull'azienda anche in questo punto o meno. ( viene fatto nel processo 'COMPLETA_REGISTRAZIONE_LIMITATA' )
                //'strSQL = "UPDATE Aziende set daValutare = 1 where IdAzi = " & cstr(idAzi)
                //'call ExecSQL( strSQL )

            }
            else
            {
                processoMail = CStr("SEND_MAIL");
            }

            idProcessDoc = CLng(IDAZI);
        }
        else
        {
            //'-- Mando l'email all'utente con le credenziali per segnalare l'avvenuto censimento + un alert all'azienda associata
            //'-- per segnalare il nuovo utente. senza credenziali
            processoMail = CStr("SEND_MAIL_NEW_USER");
            idProcessDoc = CLng(idpfu);
        }

        if (CStr(session["CONTROLLO_PEC"]) == "1")
        {

            if (aziendaGiaCensita == false)
            {

                string strSQL = "UPDATE Aziende";
                strSQL = strSQL + "		SET daValutare = CASE when isnull(daValutare,0) = 0 then 2" + Environment.NewLine;
                strSQL = strSQL + " 						  when isnull(daValutare,1) = 0 then 3" + Environment.NewLine;
                strSQL = strSQL + "							  else 2" + Environment.NewLine;
                strSQL = strSQL + "						 END" + Environment.NewLine;
                strSQL = strSQL + "	WHERE IdAzi = " + CStr(session["ID_AZI"]);

                ExecSQL(strSQL);

            }

        }

        strDescErrore = "";
        eProcurementNext.CommonModule.Const.ELAB_RET_CODE? esitoProcesso = null;
        try
        {
            eProcurementNext.CtlProcess.ClsElab objProc = new eProcurementNext.CtlProcess.ClsElab();
            esitoProcesso = objProc.Elaborate(processoMail, "CENSIMENTO", idProcessDoc, CLng(idpfu), ref strDescErrore, 1, ApplicationCommon.Application.ConnectionString);
        }
        catch (Exception ex)
        {
            strErrore = " Errore CENSIMENTO," + processoMail + "." + ex.Message + "-" + strDescErrore + ":" + "---" + CStr(esitoProcesso);
            MyErrore("", "", strErrore);
        }

        //'response.write esitoProcesso


        if (!string.IsNullOrEmpty(strDescErrore) && CStr(esitoProcesso) != "3")
        {

            strErrore = " Errore CENSIMENTO," + processoMail + "." + "-" + strDescErrore + ":" + "---" + CStr(esitoProcesso);
            MyErrore("", "", strErrore);

        }

        if (CodeRit == 1)
        {
            fineRegistrazione();
        }
        else
        {

            //'0: Errore
            //'1: Nuova azienda
            //'2,3,4,5,6,7: Azienda gia censita

            if (CodeRit == 0)
            {

                htmlToReturn.Write("Errore server o nei dati utente" + CodeRit);

            }
            else
            {

                session["errore_campo"] = "azienda gia censita";
                erroreValidazione = true;

                avanzaRegistrazione("", erroreValidazione, strStep);

            }

        }

        return intToReturn;
    }

    void avanzaRegistrazione(string comando, bool erroreValidazione, string strStep)
    {

        //'response.write "Comando:" & comando
        //'response.write "<br/>erroreValidazione:" & erroreValidazione
        //'response.write "<br/>strStep:" & strStep
        //'response.end

        if (string.IsNullOrEmpty(comando) || comando.ToLower() == "continua")
        {

            //'-- se non ci sono errori di validazione per lo step da cui si proviene passo al successivo
            if (erroreValidazione == false)
            {

                session["err_validazione_registrazione"] = "";

                switch (strStep)
                {
                    case "":
                        drawStep1();
                        break;
                    case "1":
                        drawStep2();
                        break;
                    case "2":
                        drawStep3();
                        break;
                    case "3":
                        drawStep4();
                        break;
                    case "4":

                        //'-- Se l'azienda � gi� censita inserisco soltanto l'utente
                        if (aziendaGiaCensita == true)
                        {

                            censimentoUtente();

                        }
                        else
                        { //'-- censimento completo

                            censimento();

                        }
                        break;
                    case "5":
                        visualizzaInfo();
                        break;
                    default:
                        drawStep1();
                        break;

                }

            }
            else
            {

                session["err_validazione_registrazione"] = "Errore";

                switch (strStep)
                {
                    case "":
                        drawStep1();
                        break;
                    case "1":
                        drawStep1();
                        break;
                    case "2":
                        drawStep2();
                        break;
                    case "3":
                        drawStep3();
                        break;
                    case "4":
                        drawStep4();
                        break;
                    default:
                        drawStep1();
                        break;
                }

            }
        }

    }

    //'gestione errore
    //'on error resume next
    void MyErrore(string strNumErrore, string strPercorso, string strTipoErrore)
    {

        //on error resume next

        if (string.IsNullOrEmpty(strNumErrore))
        {
            strNumErrore = "0";
        }

        string strMsgErr = "registrazione_er.asp [Description:" + strTipoErrore + "][Code:" + strNumErrore + "][Source:" + strPercorso + "]";

        //'-- Scriviamo l'errore nell'event viewer
        TraceErr("registrazione_er.asp", strMsgErr, strNumErrore, "asp");

        //'-- se la sys indica di non mostrare gli errori tecnici a video
        if (CStr(ApplicationCommon.Application["dettaglio-errori"]).ToLower() != "yes" && CStr(ApplicationCommon.Application["dettaglio-errori"]).ToLower() != "si")
        {
            strMsgErr = ApplicationCommon.CNV("INFO_UTENTE_ERRORE_PROCESSO") + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
        }

        session["errore_campo"] = CStr(strMsgErr);
        avanzaRegistrazione("", true, session["last_step"]);

        throw new ResponseEndException(htmlToReturn.Out(), Response, "last step");

    }

    void TraceErr(string source, string text, string tipo, string _object)
    {

        //set l = CreateObject("AFLLogSrvc.logSrvc")

        //If Not (l Is Nothing) Then
        //	l.LogNTEvent CStr(text), CStr(object), CStr(source), CInt(1), CLng(0)
        //end if

        //Set l = Nothing

        //userIp = replace( getIpClient() , "'","''")
        //browserUsato = replace(request.ServerVariables("HTTP_USER_AGENT"),"'","''")

        //strSql = "INSERT INTO CTL_LOG_UTENTE " & _
        //					   "(ip,datalog,paginaDiArrivo,paginaDiPartenza,querystring,form,browserUsato,sessionID) VALUES " & _
        //					   "('" & userIp & "',getDate(),'registrazione_er.asp','registrazione_er.asp'," & _
        //					   "'ERRORE','" & replace(cstr(text),"'","''") & "','" & browserUsato & "','" & replace(cstr(Session.SessionID),"'","''") & "')"

        //call ExecSQL( strSql )
        eProcurementNext.CommonDB.Basic.TraceErr(new Exception(source + " " + text), ApplicationCommon.Application.ConnectionString);

    }

    void ExecSQL(string strSql)
    {

        //on error resume next

        //dim obj

        //set obj = server.CreateObject("ctldb.clsTabManage")
        _TabManage.ExecSql(strSql, ApplicationCommon.Application.ConnectionString);
        //set obj = nothing

    }

    void insertCampoReg(string nomeCampo, string valore)
    {

        string strSql = "INSERT INTO FormRegistrazione ";
        strSql = strSql + @" (sessionid ";
        strSql = strSql + @" , codice_fiscale ";
        strSql = strSql + @" , nome_campo ";
        strSql = strSql + @"  , sessionidasp , valore) VALUES ";
        strSql = strSql + @" ('" + CStr(session["SESSION_WORK_KEY"]).Replace("'", "''") + "'";
        strSql = strSql + @" ,'" + CStr(session["form_reg_cf"]).Replace("'", "''") + "'";
        strSql = strSql + @" ,'" + CStr(nomeCampo).Replace("'", "''") + "'";
        strSql = strSql + @" ,'" + CStr(session.SessionID).Replace("'", "''") + "'";
        //on error resume next

        if (!IsNull(valore))
        {
            strSql = strSql + " ,'" + CStr(valore).Replace("'", "''") + "')";
        }
        else
        {
            strSql = strSql + " ,'')";
        }



        //on error goto 0

        ExecSQL(strSql);

    }

    void fineRegistrazione()
    {

        htmlToReturn.Write($@"

        <script type=""text/javascript"">
	        function printDiv(divName)
	        {{
		        var printContents = document.getElementById(divName).innerHTML;
		        var originalContents = document.body.innerHTML;

		        document.body.innerHTML = printContents;
		        window.print();
		        document.body.innerHTML = originalContents;
	        }}


        </script>

        <div id=""main_registrazione"" class=""main_registrazione"">

		");
        drawSteps(6);
        htmlToReturn.Write($@"

	        <a style=""cursor:pointer"" onclick=""javascript:printDiv('testata');"">
		        <img alt=""stampa"" title=""Stampa"" src=""/" + ApplicationCommon.Application["NOMEAPPPORTALE_JOOMLA"] + $@"/images/printer.gif""/>
	        </a>

	        <div class=""infoview"">
               <div id=""testata"">

			        <div class=""note"">

				        " + ApplicationCommon.CNV("segnala_censimento_riuscito") + $@"

			        </div>

			        <table id=""ContainerForm"">
				        <tr>
					        <td colspan=""2"" class=""infodesc"">
						        <strong>" + ApplicationCommon.CNV("Riepilogo Dati Censiti") + $@"</strong>
					        </td>
				        </tr>

				        <tr>
					        <td class=""titlesgrid descgrid"">
		");
        if (!string.IsNullOrEmpty(CStr(session["form_professionista"])))
        {
            htmlToReturn.Write(ApplicationCommon.CNV("Ragione sociale ovvero Nome e Cognome del professionista"));
        }
        else
        {
            htmlToReturn.Write(ApplicationCommon.CNV("Ragione Sociale Portale"));
        }
        htmlToReturn.Write($@"
					        </td>
					        <td>
						        " + HtmlEncode(session["form_reg_ragsoc"]) + $@"
					        </td>
				        </tr>

				        <tr>
					        <td class=""titlesgrid descgrid"">
						        " + ApplicationCommon.CNV("Natura giuridica") + $@"
					        </td>
					        <td class=""fieldInput"">
						        " + HtmlEncode(session["form_reg_natgiu"]) + $@"
					        </td>
				        </tr>

				        <tr>
					        <td class=""titlesgrid descgrid"">
						        " + ApplicationCommon.CNV("Indirizzo") + $@"&nbsp;
					        </td>
					        <td class=""fieldInput"">
						        " + HtmlEncode(session["form_reg_indiriz"]) + $@"
					        </td>
				        </tr>

				        <tr>
					        <td class=""titlesgrid descgrid"">
						        " + ApplicationCommon.CNV("Località") + $@"

					        </td>
					        <td class=""fieldInput"">
						        " + HtmlEncode(session["form_reg_citta"]) + $@"
					        </td>
				        </tr>
				        <tr>
					        <td class=""titlesgrid descgrid"">
						        " + ApplicationCommon.CNV("Provincia") + $@"
					        </td>
					        <td class=""fieldInput"">
						        " + HtmlEncode(session["form_reg_provincia"]) + $@"
					        </td>
				        </tr>
				        <tr>
					        <td class=""titlesgrid descgrid"">
						        " + ApplicationCommon.CNV("C.A.P.") + $@"
					        </td>
					        <td class=""fieldInput"">
						        " + HtmlEncode(session["form_reg_cap"]) + $@"
					        </td>
				        </tr>

	    ");
        //'if aziendaGiaCensita = false or cstr(session("azienda_ente")) = "YES" then
        if (aziendaGiaCensita == false)
        {
            htmlToReturn.Write($@"

					        <tr>
						        <td class=""titlesgrid descgrid"">
							        " + ApplicationCommon.CNV("StatoForm") + $@"
						        </td>
						        <td class=""fieldInput"">
							        " + HtmlEncode(session["form_reg_dstato"]) + $@"
						        </td>
					        </tr>
					        <tr>
						        <td class=""titlesgrid descgrid"">
							        " + ApplicationCommon.CNV("Anno di costituzione") + $@"
						        </td>
						        <td class=""fieldInput"">
							        " + HtmlEncode(session["form_reg_annocostr"]) + $@"
						        </td>
					        </tr>
					        <tr>
						        <td class=""titlesgrid descgrid"">
							        " + ApplicationCommon.CNV("Iscrizione CCIAA") + $@"

						        </td>
						        <td class=""fieldInput"">
							        " + HtmlEncode(session["form_reg_iscrccia"]) + $@"
						        </td>
					        </tr>
					        <tr>
						        <td class=""titlesgrid descgrid"">
							        " + ApplicationCommon.CNV("Della CCIAA di") + $@"
						        </td>
						        <td class=""fieldInput"">
							        " + HtmlEncode(session["form_reg_sedeccia"]) + $@"
						        </td>
					        </tr>
					        <tr>
						        <td class=""titlesgrid descgrid"">
							        " + ApplicationCommon.CNV("Codice EORI") + $@"
						        </td>
						        <td class=""fieldInput"">
							        " + HtmlEncode(session["form_reg_codiceeori"]) + $@"
						        </td>
					        </tr>


		");
        }
        htmlToReturn.Write($@"

				        <tr>
					        <td class=""titlesgrid descgrid"">
						        " + ApplicationCommon.CNV("Codice Fiscale Ditta / Identificativo Fiscale Estero") + $@"
					        </td>
					        <td class=""fieldInput"">
						        " + HtmlEncode(session["form_reg_cf"]) + $@"
					        </td>
				        </tr>
				        <tr>
					        <td class=""titlesgrid descgrid"">
						        " + ApplicationCommon.CNV("Partita IVA") + $@"
					        </td>
					        <td class=""fieldInput"">
						        " + HtmlEncode(session["form_reg_piva"]) + $@"
					        </td>
				        </tr>
				        <tr>
					        <td class=""titlesgrid descgrid"">
						        " + ApplicationCommon.CNV("Telefono") + $@"
					        </td>
					        <td class=""fieldInput"">
						        " + HtmlEncode(session["form_reg_telefono"]) + $@"
					        </td>
				        </tr>
				        <tr>
					        <td class=""titlesgrid descgrid"">
						        " + ApplicationCommon.CNV("Fax") + $@"
					        </td>
					        <td class=""fieldInput"">
						        " + HtmlEncode(session["form_reg_numfax"]) + $@"
					        </td>
				        </tr>
				        <tr>
					        <td class=""titlesgrid descgrid"">
						        " + ApplicationCommon.CNV("E-Mail (PEC)") + $@"
					        </td>
					        <td class=""fieldInput"">
						        " + HtmlEncode(session["form_reg_email"]) + $@"
					        </td>
				        </tr>

				        <tr>
					        <td colspan=""2"" class=""infodesc"">
						        <strong>" + ApplicationCommon.CNV("Dati Utente") + $@"</strong>
					        </td>
				        </tr>
				        <tr>
					        <td class=""titlesgrid descgrid"">
						        " + ApplicationCommon.CNV("Nome") + $@"
					        </td>
					        <td class=""fieldInput"">
						        " + HtmlEncode(session["form_reg_NomeRapLeg"]) + $@"
					        </td>
				        </tr>
				        <tr>
					        <td class=""titlesgrid descgrid"">
						        " + ApplicationCommon.CNV("Cognome") + $@"
					        </td>
					        <td class=""fieldInput"">
						        " + HtmlEncode(session["form_reg_CognomeRapLeg"]) + $@"
					        </td>
				        </tr>
				        <tr>
					        <td class=""titlesgrid descgrid"">
						        " + ApplicationCommon.CNV("Telefono 1") + $@"
					        </td>
					        <td class=""fieldInput"">
						        " + HtmlEncode(session["form_reg_telrapleg"]) + $@"
					        </td>
				        </tr>
				        <tr>
					        <td class=""titlesgrid descgrid"">
						        " + ApplicationCommon.CNV("Telefono 2") + $@"
					        </td>
					        <td class=""fieldInput"">
						        " + HtmlEncode(session["form_reg_celrapleg"]) + $@"
					        </td>
				        </tr>
				        <tr>
					        <td class=""titlesgrid descgrid"">
						        " + ApplicationCommon.CNV("E_mail") + $@"
					        </td>
					        <td class=""fieldInput"">
						        " + HtmlEncode(session["form_reg_emailrif"]) + $@"
					        </td>
				        </tr>
				        <!--
				        <tr>
					        <td class=""titlesgrid descgrid"">
						        " + ApplicationCommon.CNV("Email Riferimento Azienda") + $@"
					        </td>
					        <td class=""fieldInput"">
						        " + HtmlEncode(session["form_reg_emailrifazi"]) + $@"
					        </td>
				        </tr>
				        -->
				        <tr>
					        <td class=""titlesgrid descgrid"">
						        " + ApplicationCommon.CNV("Funzione Aziendale") + $@"
					        </td>
					        <td class=""fieldInput"">
						        " + HtmlEncode(session["form_reg_funzazi"]) + $@"
					        </td>
				        </tr>
				        <tr>
					        <td class=""titlesgrid descgrid"">
						        " + ApplicationCommon.CNV("Codice Fiscale") + $@"
					        </td>
					        <td class=""fieldInput"">
						        " + HtmlEncode(session["form_reg_cfRapLeg"]) + $@"
					        </td>
				        </tr>

			        </table>

		        </div>
	        </div>
        </div>

        ");

        cleanSession = true;
        //Spostato il comando pulisci sessione in fondo alla pagina
        //pulisciSessione();

    }

    void firmaPdf()
    {

        session["last_step"] = "5";

        //'-- per motivi di sicurezza l'idDoc lo prendiamo sempre dalla sessione e non dal form
        //'if IdDoc = "" then
        dynamic IdDoc = session["REG_DOC_ID"];
        //'end if

        //'-- Se sono un azienda estera e non ho spuntato il flag sul possesso del kit di firma digitale
        if (CStr(session["azienda_estera"]).ToUpper() == "YES" && CStr(session["form_esterno_con_firma"]) != "1")
        {
            session["url_pdf"] = @"./ctl_library/pdf/pdf.asp?backoffice=yes&PDF_NAME=verifica_registrazione&SIGN=YES&OLOGRAFA=YES&TO_SIGN=YES&IDDOC=" + IdDoc + "&TYPEDOC=VERIFICA_REGISTRAZIONE_FORN&URL=/report/prn_VERIFICA_REGISTRAZIONE_FORN.ASP?";
        }
        else
        {
            session["url_pdf"] = @"./ctl_library/pdf/pdf.asp?backoffice=yes&PDF_NAME=verifica_registrazione&SIGN=YES&OLOGRAFA=NO&TO_SIGN=YES&IDDOC=" + IdDoc + "&TYPEDOC=VERIFICA_REGISTRAZIONE_FORN&URL=/report/prn_VERIFICA_REGISTRAZIONE_FORN.ASP?";
        }

        htmlToReturn.Write($@"

        <div id=""main_registrazione"" class=""main_registrazione"">

		");
        drawSteps(5);

        if (!string.IsNullOrEmpty(CStr(session["reg_form_esito_sign"])))
        {

            if (session["reg_form_errore_sign"] == true)
            {
                session["reg_form_esito_ok"] = "0";
            }
            else
            {
                session["reg_form_esito_ok"] = "1";
            }

        }
        else
        {

            session["reg_form_esito_ok"] = "";

        }

        htmlToReturn.Write($@"

		        <div class=""help note"">

			        " + ApplicationCommon.CNV("HELP_CENSIMENTO_STEP_FIRMA") + $@"

		        </div>

		        <br/>

		        <div class=""data_form"">
			        <div id=""accordion"">

				        <h3 class=""toggler atStart"" id=""h3rapleg"">

					        <span>5</span>

					        <span class=""data_form_title"">Firma Documento</span>

				        </h3>

		");
        if (CStr(ApplicationCommon.Application["DISATTIVA_CONTROLLO_CF_FIRMA"]).ToUpper() == "YES")
        {
            htmlToReturn.Write($@"
						        <div class=""form_help"">
							        <strong>
								        Fase di test ATTIVA.<br/>Il controllo di corrispondenza tra il codice fiscale del legale
								        rappresentante e il firmatario &egrave; disattivato
							        </strong>
						        </div>
		");
        }

        if (CStr(session["reg_form_esito_ok"]) != "1")
        {
            htmlToReturn.Write($@"
					        <ul class=""liststylenone"">
						        <li>
							        <form name=""FormCens"" id=""FormCens"" action="""" method=""post"" target=""_blank"">
							        <!-- <form name=""FormCens"" id=""FormCens"" action="""" method=""post"" target=""_self""> -->

								        <button class=""focusthis generapdf"" name=""comando"" type=""submit"" value=""scarica-pdf"" alt=""Scarica il pdf da firmare""> <!-- onclick=""document.getElementById('loading').style.display = 'block'""> -->
									        Scarica pdf
								        </button>

								        <input type=""hidden"" name=""step"" value=""5""/>

							        </form>
						        </li>
					        </ul>

        ");
        }





        string nomeFileTemporaneo = "";
        //'Controllo se ho gia generato un nome file temporaneo
        if (string.IsNullOrEmpty(CStr(session["form_reg_tmpname"])))
        {

            nomeFileTemporaneo = CommonStorage.GetTempName();
            //set fs = nothing
            session["form_reg_tmpname"] = nomeFileTemporaneo;

        }
        else
        {

            nomeFileTemporaneo = session["form_reg_tmpname"];

        }

        htmlToReturn.Write($@"

					        <form name=""FormCens"" id=""FormCens"" action=""?action=upload&rnd=" + nomeFileTemporaneo + $@"&step=5&comando=allega-pdf"" method=""post"" enctype=""multipart/form-data"">

						        <input type=""hidden"" name=""action"" value=""upload""/>
						        <input type=""hidden"" name=""rnd"" value=""" + nomeFileTemporaneo + $@"""/>
						        <input type=""hidden"" name=""step"" value=""5""/>

						        <ul>
		");
        //'if cstr(session("pdf_generato")) = "YES" then
        if (CStr(session["reg_form_esito_ok"]) != "1")
        {
            htmlToReturn.Write($@"
								        <li>
									        <label for=""file"">Filename:</label>
									        <input type=""file"" class=""seleziona_fila"" title=""Allega pdf firmato"" id=""file"" name=""file""/>
								        </li>
								        <li>
									        <button class=""attachpdf"" name=""comando"" type=""submit"" value=""allega-pdf"" alt=""Allega il pdf firmato"" onclick=""document.getElementById('loading').style.display = 'block'"">
										        " + ApplicationCommon.CNV("Allega file") + $@"
									        </button>
								        </li>
								        <li>
									        <div class=""form_help"">
		");
            //'if ucase(cstr(session("azienda_estera"))) = "YES" then
            if (CStr(session["azienda_estera"]).ToUpper() == "YES" && CStr(session["form_esterno_con_firma"]) != "1")
            {
                htmlToReturn.Write(ApplicationCommon.CNV("Allega pdf firmato o documento con firma olografa"));
            }
            else
            {
                htmlToReturn.Write(ApplicationCommon.CNV("Allega pdf firmato digitalmente"));
            }


            htmlToReturn.Write($@"
									        </div>
								        </li>
		");
        }
        //'end if
        htmlToReturn.Write($@"
						        </ul>



					        </form>

				        </div>

				        <div class=""note"">

		");

        //'session("reg_form_esito_sign") = messaggio
        //'session("reg_form_errore_sign") = errore

        if (!string.IsNullOrEmpty(CStr(session["reg_form_esito_ok"])))
        {

            if (CStr(session["reg_form_esito_ok"]) == "1")
            {
                htmlToReturn.Write($@"<strong>Allega file eseguito correttamente</strong>");
            }
            else if (CStr(session["reg_form_esito_ok"]) == "0")
            {
                htmlToReturn.Write($@"<strong>Attenzione:</strong>");
                htmlToReturn.Write($@"<label class=""label_error"">" + CStr(session["reg_form_esito_sign"]) + "</label>");
                session["reg_form_errore_sign"] = "";
                session["reg_form_esito_sign"] = "";
            }

        }

        htmlToReturn.Write($@"

				        </div>

				        <br/><br/>

				        <form name=""FormCens"" id=""FormCens"" action="""" method=""post"" onsubmit="" if ( document.getElementById('block_submit').value == 'block') return false; else {{ document.getElementById('block_submit').value = 'block';return true;}}"">

		");
        //'-- PER TEST senza bisogno di inviare il documento firmato
        dynamic bypassFileReg = Get_Func_Property("REGISTRAZIONE_OE", "allegaFile", "bypass", "0", -1);
        string enabled_reg;
        if (CStr(bypassFileReg) == "1")
        {
            enabled_reg = "";
        }
        else
        {

            if (CStr(session["reg_form_esito_ok"]) == "1")
            {
                enabled_reg = "";
            }
            else
            {
                enabled_reg = @"disabled=""disabled""";
            }

        }

        htmlToReturn.Write($@"

					        <div class=""comandi"">

						        <button class=""button btn_back"" name=""comando"" id=""btn_frm_mod"" type=""submit"" value=""indietro"" alt=""Modifica i dati di registrazione"" onclick=""document.getElementById('loading').style.display = 'block'"">
							        Modifica dati registrazione
						        </button>
						        <button class=""button btn_forward"" name=""comando"" id=""btn_frm_complete"" type=""submit"" value=""invia_documento"" " + enabled_reg + $@" alt=""Completa il processo di registrazione"" onclick=""document.getElementById('loading').style.display = 'block'"">
							        Completa registrazione
						        </button>

					        </div>

					        <input type=""hidden"" name=""step"" value=""5""/>
					        <input type=""hidden"" id=""block_submit"" name=""block_submit"" value=""""/>

				        </form>
		        </div>
	        </div>


        ");
    }

    bool isNumber(dynamic x)
    {

        return IsNumeric(x);

    }

    dynamic generaDocumentoApprovazione(dynamic id)
    {

        strSql = "declare @id bigint " + Environment.NewLine;
        strSql = strSql + " set @id = " + id + Environment.NewLine;
        strSql = strSql + " exec CREA_DOC_VERIFICA_REGISTRAZIONE @id, @id ";

        //dim outRs
        TSRecordSet outRs = GetRS(strSql);
        outRs.MoveFirst();

        if (string.IsNullOrEmpty(CStr(outRs.Fields["Errore"])))
        {
            return outRs.Fields["id"];
        }
        else
        {
            return -1;
        }

        //set outRs = nothing

    }

    bool verificaParix(string docID, string codicefiscale)
    {

        strSql = "exec Verifica_Dati_Parix '" + docID.Replace("'", "''") + "', '" + codicefiscale.Replace("'", "''") + "'";

        TSRecordSet rs = GetRS(strSql);

        if (rs.RecordCount > 0)
        {

            session["verifica_parix"] = "false";
            return false;

            //'rs.movefirst
            //''-- se l'email (pec) dell'azienda � variata segnalo al chiamante che c'� stata una sua variazione rispetto ai dati parix
            //'if rs("esito") = "variazione-email" then
            //'	docID = session("SESSION_WORK_KEY")
            //'	Set objProc = CreateObject("CtlProcess.clsElab")
            //'	call objProc.ElaborateWeb(cstr("ALERT_PEC_PARIX"), cstr("CENSIMENTO"), cstr(docID), clng(-1), strDescErrore ,1, cstr( Application("ConnectionString") ) )
            //'	set objProc = nothing
            //'end if

        }
        else
        {

            session["verifica_parix"] = "true";
            return true;

        }

        //set rs = nothing

        //exit function

    }

    //'-- ritorna un rs passata la query
    TSRecordSet GetRS(string strSql)
    {

        //dim obj
        //dim rs

        //set obj = server.CreateObject("ctldb.clsTabManage")

        eProcurementNext.CommonDB.CommonDbFunctions cdf = new eProcurementNext.CommonDB.CommonDbFunctions();
        return cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString);
        //set obj = nothing

        //set GetRS = rs

    }

    void drawSteps(dynamic stepCorrente)
    {
        if (IsMasterPageNew()){
            drawStepsFaseII(stepCorrente);
            return;
        }

        int currentStep = CInt(stepCorrente);

        htmlToReturn.Write($@"<ul class=""wizard ");

        //'-- se � stato attivato il passo extra di firma
        if (!string.IsNullOrEmpty(session["attiva_step_firma"]))
        {
            htmlToReturn.Write($@"steps_6");
        }
        else
        {
            htmlToReturn.Write($@"steps_5");
        }

        htmlToReturn.Write($@""">");

        htmlToReturn.Write($@"<li class=""step stepA ");

        if (currentStep > 1)
        {
            htmlToReturn.Write($@" stepFatto");
        }
        else if (currentStep == 1)
        {
            htmlToReturn.Write($@" stepCorrente");
        }
        else if (currentStep < 1)
        {
            htmlToReturn.Write($@" stepDaFare");
        }

        htmlToReturn.Write($@""">");
        htmlToReturn.Write(ApplicationCommon.CNV("reg_step_1") + @"<span>Step 1</span>");
        htmlToReturn.Write($@"</li>");

        htmlToReturn.Write($@"<li class=""step stepB ");

        if (currentStep > 2)
        {
            htmlToReturn.Write($@" stepFatto");
        }
        else if (currentStep == 2)
        {
            htmlToReturn.Write($@" stepCorrente");
        }
        else if (currentStep < 2)
        {
            htmlToReturn.Write($@" stepDaFare");
        }

        htmlToReturn.Write($@""">");
        htmlToReturn.Write(ApplicationCommon.CNV("reg_step_2") + @"<span>Step 2</span>");
        htmlToReturn.Write($@"</li>");

        htmlToReturn.Write($@"<li class=""step stepC ");

        if (currentStep > 3)
        {
            htmlToReturn.Write($@" stepFatto");
        }
        else if (currentStep == 3)
        {
            htmlToReturn.Write($@" stepCorrente");
        }
        else if (currentStep < 3)
        {
            htmlToReturn.Write($@" stepDaFare");
        }

        htmlToReturn.Write($@""">");
        htmlToReturn.Write(ApplicationCommon.CNV("reg_step_3") + @"<span>Step 3</span>");

        htmlToReturn.Write($@"</li>");

        htmlToReturn.Write($@"<li class=""step stepD ");

        if (currentStep > 4)
        {
            htmlToReturn.Write($@" stepFatto");
        }
        else if (currentStep == 4)
        {
            htmlToReturn.Write($@" stepCorrente");
        }
        else if (currentStep < 4)
        {
            htmlToReturn.Write($@" stepDaFare");
        }

        htmlToReturn.Write($@""">");
        htmlToReturn.Write(ApplicationCommon.CNV("reg_step_4") + @"<span>Step 4</span>");
        htmlToReturn.Write($@"</li>");

        htmlToReturn.Write($@"<li class=""step stepE ");

        if (currentStep > 5)
        {
            htmlToReturn.Write($@" stepFatto");
        }
        else if (currentStep == 5)
        {
            htmlToReturn.Write($@" stepCorrente");
        }
        else if (currentStep < 5)
        {
            htmlToReturn.Write($@" stepDaFare");
        }

        htmlToReturn.Write($@""">");


        //'-- se � stato attivato il passo extra di firma
        if (!string.IsNullOrEmpty(session["attiva_step_firma"]))
        {
            htmlToReturn.Write(ApplicationCommon.CNV("reg_step_5") + @"<span>Step 5</span>");
        }
        else
        {
            htmlToReturn.Write(ApplicationCommon.CNV("reg_step_6") + @"<span>Step 5</span>");
        }

        htmlToReturn.Write($@"</li>");

        if (!string.IsNullOrEmpty(session["attiva_step_firma"]))
        {

            htmlToReturn.Write($@"<li class=""step stepF ");

            if (currentStep > 6)
            {
                htmlToReturn.Write($@" stepFatto");
            }
            else if (currentStep == 6)
            {
                htmlToReturn.Write($@" stepCorrente");
            }
            else if (currentStep < 6)
            {
                htmlToReturn.Write($@" stepDaFare");
            }

            htmlToReturn.Write($@""">");

            //'-- se � stato attivato il passo extra di firma
            if (!string.IsNullOrEmpty(session["attiva_step_firma"]))
            {
                htmlToReturn.Write(ApplicationCommon.CNV("reg_step_6") + @"<span>Step 6</span>");
            }
            else
            {
                htmlToReturn.Write(ApplicationCommon.CNV("reg_step_5") + @"<span>Step 5</span>");
            }

            //'response.write CNV( "reg_step_5" ) & "<span>Step 6</span>"
            htmlToReturn.Write($@"</li>");

        }

        htmlToReturn.Write($@"</ul>");

    }

    void drawStepsFaseII(dynamic stepCorrente)
    {

        int currentStep = CInt(stepCorrente);

        htmlToReturn.Write($@"<ul class=""wizard ");

        //'-- se � stato attivato il passo extra di firma
        if (!string.IsNullOrEmpty(session["attiva_step_firma"]))
        {
            htmlToReturn.Write($@"steps_6");
        }
        else
        {
            htmlToReturn.Write($@"steps_5");
        }

        htmlToReturn.Write($@""">");

        htmlToReturn.Write($@"<li class=""step stepA ");

        if (currentStep > 1)
        {
            htmlToReturn.Write($@" stepFatto");
        }
        else if (currentStep == 1)
        {
            htmlToReturn.Write($@" stepCorrente");
        }
        else if (currentStep < 1)
        {
            htmlToReturn.Write($@" stepDaFare");
        }

        htmlToReturn.Write($@""">");
        htmlToReturn.Write(@"<span>1</span>" + ApplicationCommon.CNV("reg_step_1"));
        htmlToReturn.Write($@"</li>");

        htmlToReturn.Write($@"<li class=""step stepB ");

        if (currentStep > 2)
        {
            htmlToReturn.Write($@" stepFatto");
        }
        else if (currentStep == 2)
        {
            htmlToReturn.Write($@" stepCorrente");
        }
        else if (currentStep < 2)
        {
            htmlToReturn.Write($@" stepDaFare");
        }

        htmlToReturn.Write($@""">");
        htmlToReturn.Write(@"<span>2</span>" + ApplicationCommon.CNV("reg_step_2"));
        htmlToReturn.Write($@"</li>");

        htmlToReturn.Write($@"<li class=""step stepC ");

        if (currentStep > 3)
        {
            htmlToReturn.Write($@" stepFatto");
        }
        else if (currentStep == 3)
        {
            htmlToReturn.Write($@" stepCorrente");
        }
        else if (currentStep < 3)
        {
            htmlToReturn.Write($@" stepDaFare");
        }

        htmlToReturn.Write($@""">");
        htmlToReturn.Write(@"<span>3</span>" + ApplicationCommon.CNV("reg_step_3"));

        htmlToReturn.Write($@"</li>");

        htmlToReturn.Write($@"<li class=""step stepD ");

        if (currentStep > 4)
        {
            htmlToReturn.Write($@" stepFatto");
        }
        else if (currentStep == 4)
        {
            htmlToReturn.Write($@" stepCorrente");
        }
        else if (currentStep < 4)
        {
            htmlToReturn.Write($@" stepDaFare");
        }

        htmlToReturn.Write($@""">");
        htmlToReturn.Write(@"<span>4</span>" + ApplicationCommon.CNV("reg_step_4"));
        htmlToReturn.Write($@"</li>");

        htmlToReturn.Write($@"<li class=""step stepE ");

        if (currentStep > 5)
        {
            htmlToReturn.Write($@" stepFatto");
        }
        else if (currentStep == 5)
        {
            htmlToReturn.Write($@" stepCorrente");
        }
        else if (currentStep < 5)
        {
            htmlToReturn.Write($@" stepDaFare");
        }

        htmlToReturn.Write($@""">");


        //'-- se � stato attivato il passo extra di firma
        if (!string.IsNullOrEmpty(session["attiva_step_firma"]))
        {
            htmlToReturn.Write(@"<span>5</span>" + ApplicationCommon.CNV("reg_step_5"));
        }
        else
        {
            htmlToReturn.Write(@"<span>5</span>" + ApplicationCommon.CNV("reg_step_6"));
        }

        htmlToReturn.Write($@"</li>");

        if (!string.IsNullOrEmpty(session["attiva_step_firma"]))
        {

            htmlToReturn.Write($@"<li class=""step stepF ");

            if (currentStep > 6)
            {
                htmlToReturn.Write($@" stepFatto");
            }
            else if (currentStep == 6)
            {
                htmlToReturn.Write($@" stepCorrente");
            }
            else if (currentStep < 6)
            {
                htmlToReturn.Write($@" stepDaFare");
            }

            htmlToReturn.Write($@""">");

            //'-- se � stato attivato il passo extra di firma
            if (!string.IsNullOrEmpty(session["attiva_step_firma"]))
            {
                htmlToReturn.Write(@"<span>6</span>" + ApplicationCommon.CNV("reg_step_6"));
            }
            else
            {
                htmlToReturn.Write(@"<span>5</span>" + ApplicationCommon.CNV("reg_step_5"));
            }

            //'response.write CNV( "reg_step_5" ) & "<span>Step 6</span>"
            htmlToReturn.Write($@"</li>");

        }

        htmlToReturn.Write($@"</ul>");

    }

    string invokeParix(string cf, string PartitaIva = "")
    {

        //'response.write "PASSATO"
        //'response.end

        return eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.Azienda_info_extModel.Get_Dati_Azienda_Ext(cf, session, htmlToReturn, PartitaIva);


    }

    void ripulisciInfoparix()
    {

        session["form_reg_ragsoc"] = "";
        session["form_reg_natgiu"] = "";
        session["form_reg_indiriz"] = "";
        session["form_reg_annocostr"] = "";
        session["form_reg_iscrccia"] = "";
        session["form_reg_sedeccia"] = "";
        session["form_reg_codiceeori"] = "";
        session["form_reg_email"] = "";
        session["form_reg_telefono"] = "";
        session["form_reg_numfax"] = "";
        session["form_reg_cap"] = "";
        session["form_reg_citta"] = "";
        session["form_reg_provincia"] = "";
        session["form_reg_localita_leg"] = "";
        session["form_reg_provincia_leg"] = "";
        session["form_reg_cfRapLeg"] = "";
        session["form_reg_NomeRapLeg"] = "";
        session["form_reg_CognomeRapLeg"] = "";
        session["form_reg_telrapleg"] = "";
        session["form_reg_emailrif"] = "";
        session["form_reg_funzazi"] = "";

    }

    void recuperaInfoParix(dynamic chiaveDiAggancio, bool isFromParix)
    {

        TSRecordSet rs;

        if (isFromParix)
        {

            strSql = "select * from view_dati_parix where sessionId = '" + CStr(session["SESSION_WORK_KEY"]).Replace("'", "''") + "' and codice_fiscale = '" + chiaveDiAggancio.Replace("'", "''") + "'";

            rs = GetRS(strSql);

            if (rs.RecordCount > 0)
            {

                rs.MoveFirst();

                if (!string.IsNullOrEmpty(CStr(rs.Fields["RagSoc"])))
                {
                    session["form_reg_ragsoc"] = CStr(rs.Fields["RagSoc"]);//	'RAGSOC
                }

                if (!string.IsNullOrEmpty(CStr(rs.Fields["Nagi"])))
                {
                    session["form_reg_natgiu"] = CStr(rs.Fields["Nagi"]);// 'NAGI
                }

                if (!string.IsNullOrEmpty(CStr(rs.Fields["IndirizzoLeg"])))
                {
                    session["form_reg_indiriz"] = CStr(rs.Fields["IndirizzoLeg"]);// 'LOCALITALEG
                }

                if (!string.IsNullOrEmpty(CStr(rs.Fields["ANNOCOSTITUZIONE"])))
                {
                    session["form_reg_annocostr"] = CStr(rs.Fields["ANNOCOSTITUZIONE"]);// 'ANNOCOSTITUZIONE
                }

                if (!string.IsNullOrEmpty(CStr(rs.Fields["IscrCCIAA"])))
                {
                    session["form_reg_iscrccia"] = CStr(rs.Fields["IscrCCIAA"]);// 'IscrCCIAA
                }

                if (!string.IsNullOrEmpty(CStr(rs.Fields["SedeCCIAA"])))
                {
                    session["form_reg_sedeccia"] = CStr(rs.Fields["SedeCCIAA"]);// 'SedeCCIAA
                }

                if (!string.IsNullOrEmpty(CStr(rs.Fields["EMail"])))
                {
                    session["form_reg_email"] = CStr(rs.Fields["EMail"]);//	'EMail
                }

                if (!string.IsNullOrEmpty(CStr(rs.Fields["NUMTEL"])))
                {
                    session["form_reg_telefono"] = CStr(rs.Fields["NUMTEL"]);//
                }

                if (!string.IsNullOrEmpty(CStr(rs.Fields["NUMFAX"])))
                {
                    session["form_reg_numfax"] = CStr(rs.Fields["NUMFAX"]);//
                }

                if (!string.IsNullOrEmpty(CStr(rs.Fields["CAPLEG"])))
                {
                    session["form_reg_cap"] = CStr(rs.Fields["CAPLEG"]);//
                }

                if (!string.IsNullOrEmpty(CStr(rs.Fields["LOCALITALEG"])))
                {
                    session["form_reg_citta"] = CStr(rs.Fields["LOCALITALEG"]);//
                }

                if (!string.IsNullOrEmpty(CStr(rs.Fields["PROVINCIALEG"])))
                {
                    session["form_reg_provincia"] = CStr(rs.Fields["PROVINCIALEG"]);//
                }

                if (!string.IsNullOrEmpty(CStr(rs.Fields["aziLocalitaLeg2"])))
                {
                    session["form_reg_localita_leg"] = CStr(rs.Fields["aziLocalitaLeg2"]);//
                }

                if (!string.IsNullOrEmpty(CStr(rs.Fields["aziProvinciaLeg2"])))
                {
                    session["form_reg_provincia_leg"] = CStr(rs.Fields["aziProvinciaLeg2"]);//
                }

                if (!string.IsNullOrEmpty(CStr(rs.Fields["CFRapLeg"])))
                {
                    session["form_reg_cfRapLeg"] = CStr(rs.Fields["CFRapLeg"]);//
                }

                if (!string.IsNullOrEmpty(CStr(rs.Fields["NomeRapLeg"])))
                {
                    session["form_reg_NomeRapLeg"] = CStr(rs.Fields["NomeRapLeg"]);// 'NomeRapLeg
                }

                if (!string.IsNullOrEmpty(CStr(rs.Fields["CognomeRapLeg"])))
                {
                    session["form_reg_CognomeRapLeg"] = CStr(rs.Fields["CognomeRapLeg"]);// 'CognomeRapLeg
                }

                if (!string.IsNullOrEmpty(CStr(rs.Fields["PFUEMAIL"])))
                {
                    session["form_reg_emailrif"] = CStr(rs.Fields["PFUEMAIL"]);// 'PFUEMAIL
                }

                if (!string.IsNullOrEmpty(CStr(rs.Fields["RuoloRapLeg"])))
                {
                    session["form_reg_funzazi"] = CStr(rs.Fields["RuoloRapLeg"]);//	'RuoloRapLeg
                }

                if (!string.IsNullOrEmpty(CStr(rs.Fields["Piva"])))
                {
                    session["oe_piva_registro_imprese"] = CStr(rs.Fields["Piva"]);//
                }

                if (!string.IsNullOrEmpty(CStr(rs.Fields["CodiceFiscale"])))
                {
                    session["oe_CodiceFiscale_registro_imprese"] = CStr(rs.Fields["CodiceFiscale"]);//
                }

            }

            //set rs = nothing

        }
        else
        {

            strSql = "select * from registrazione_dati_azienda where idAzi = " + CStr(CLng(chiaveDiAggancio));

            //'response.write strSql

            rs = GetRS(strSql);

            if (rs.RecordCount > 0)
            {

                rs.MoveFirst();

                session["form_reg_ragsoc"] = CStr(rs.Fields["RagioneSociale"]);
                session["form_reg_natgiu"] = CStr(rs.Fields["FormaGiuridica"]);
                session["form_reg_annocostr"] = CStr(rs.Fields["AnnoCCIAA"]);
                session["form_reg_iscrccia"] = CStr(rs.Fields["NumeroREA"]);
                session["form_reg_sedeccia"] = CStr(rs.Fields["DellaCCIAA"]);
                session["form_reg_email"] = CStr(rs.Fields["Email"]);
                session["form_reg_telefono"] = CStr(rs.Fields["Telefono"]);
                session["form_reg_numfax"] = CStr(rs.Fields["Fax"]);
                session["form_reg_indiriz"] = CStr(rs.Fields["Indirizzo"]);
                session["form_reg_cap"] = CStr(rs.Fields["Cap"]);
                session["form_reg_citta"] = CStr(rs.Fields["Comune"]);
                session["form_reg_provincia"] = CStr(rs.Fields["Provincia"]);
                session["form_reg_cf"] = CStr(rs.Fields["CodiceFiscale"]);
                session["form_reg_piva"] = CStr(rs.Fields["partitaIVA"]);

            }

            //set rs = nothing

        }

    }

    void isFallimentare(dynamic qualificaRapLeg)
    {

        throw new NotImplementedException();

        //checkBloccoRegistrazione = false;

        //'-- Se il rapLeg ha una qualifica presente in questa lista dobbiamo bloccare
        //'-- la registrazione essendo in una situazione fallimentare
        //'-- se ci chiedono di ripristinare questo controllo aggiungere questi ruoli nel ctl_relations
        //'AMMINISTRATORE PROVVISORIO
        //'AMMINISTRATORE STRAORDINARIO
        //'AMMINISTRATORE GIUDIZIARIO
        //'COMMISSARIO MINISTERIALE
        //'COMMISSARIO STRAORDINARIO
        //'COMMISSARIO GIUDIZIARIO
        //'COMMISSARIO LIQUIDATORE
        //'COMMISSARIO PREFETTIZIO
        //'COMMISSARIO GOVERNATIVO
        //'CURATORE
        //'CURATORE FALLIMENTARE
        //'LIQUIDATORE
        //'LIQUIDATORE GIUDIZIARIO

    }

    void pulisciSessione()
    {

        MainGlobalAsa.SessionAbandon(session);

        //'session("SESSION_WORK_KEY") = ""
        //'session("form_reg_ragsoc") = ""
        //'session("form_reg_natgiu") = ""
        //'session("form_reg_indiriz") = ""
        //'session("form_reg_annocostr") = ""
        //'session("form_reg_iscrccia") = ""
        //'session("form_reg_sedeccia") = ""
        //'session("form_reg_email") = ""
        //'session("form_reg_telefono") = ""
        //'session("form_reg_numfax") = ""
        //'session("form_reg_cap") = ""
        //'session("form_reg_citta") = ""
        //'session("form_reg_provincia") = ""
        //'session("form_reg_localita_leg") = ""
        //'session("form_reg_provincia_leg") = ""
        //'session("form_reg_cfRapLeg") = ""
        //'session("form_reg_NomeRapLeg") = ""
        //'session("form_reg_CognomeRapLeg") = ""
        //'session("form_reg_emailrif") = ""
        //'session("form_reg_funzazi") = ""
        //'session("attiva_step_firma") = ""
        //'session("REG_DOC_ID") = ""
        //'session("verifica_parix") = ""
        //'session("form_reg_tmpname") = ""
        //'session("reg_form_esito_sign") = ""
        //'session("reg_form_esito_ok") = ""
        //'session("reg_form_errore_sign") = ""
        //'session("reg_form_esito_sign") = ""
        //'session("ID_AZI") = ""
        //'session("azienda_gia_censita") = ""
        //'session("last_step") = ""
        //'session("url_pdf") = ""
        //'session("firma_olografa") = ""
        //'session("pdf_generato") = ""

    }

    void loadValidationCollection()
    {

        string strSql = "select isnull(mpcrCampo,'') as campo ,isnull(mpcrLungh,'0') as maxLen ,isnull(mpcrLunghMin,'0') as minLen, isnull(regExp,'') as regExp from mpcampireg";

        TSRecordSet rs = GetRS(strSql);

        if (rs.RecordCount > 0)
        {

            rs.MoveFirst();

            while (!rs.EOF)
            {

                string regExp = CStr(rs.Fields["regExp"]).Trim();
                string nomecampo = CStr(rs.Fields["campo"]).Trim();
                string maxLen = CStr(rs.Fields["maxLen"]).Trim();
                string minLen = CStr(rs.Fields["minLen"]).Trim();

                session["valid_form_" + nomecampo.ToLower()] = minLen + "#@#" + maxLen + "#@#" + regExp;

                //'response.write "CHIAVE:valid_form_" & lcase(nomecampo)
                //'response.write "VALORE:" & cstr(session("valid_form_" & lcase(nomecampo))) & "<br/>"

                rs.MoveNext();

            }


        }

        //set rs = nothing

    }

    bool validateFieldReg(string nomeCampo, dynamic valore)
    {
        bool boolToReturn = true;
        //validateFieldReg = true
        nomeCampo = nomeCampo.ToLower().Trim();

        //'response.write "CERCO:" & nomeCampo

        if (!string.IsNullOrEmpty(CStr(session["valid_form_" + nomeCampo])))
        {

            string[] vet = CStr(session["valid_form_" + nomeCampo]).Split("#@#");

            if ((vet.Length - 1) > 0)
            {

                int minLen = IIF(!string.IsNullOrEmpty(CStr(vet[0])), CInt(vet[0]), 0);
                int maxLen = IIF(!string.IsNullOrEmpty(CStr(vet[1])), CInt(vet[1]), 100000);
                string regExp = CStr(vet[2]);

                int lunghezza = CStr(valore).Length;

                if ((lunghezza < minLen) || (lunghezza > maxLen))
                {

                    boolToReturn = false;
                    return boolToReturn;

                }

                //'response.write "........." & nomeCampo & " : " & valore & " - regExp: " & regExp

                if (!string.IsNullOrEmpty(regExp))
                {

                    boolToReturn = isValidString(valore, regExp);

                }

            }


        }

        return boolToReturn;

    }

    int checkEsistenzaAzienda(string codiceFiscale, string piva)
    {
        int intToReturn = -1;
        //checkEsistenzaAzienda = -1

        //'-- verifico se l'azienda � gi� censita (andando in uguaglanza per piva o cf), restringendo l'insieme delle aziende per quelle NON di tipo ente ( aziAcquirente = 0 )
        string strSql = "select top 1 az.idAzi,az.azideleted ";
        strSql = strSql + " from aziende az with (nolock) ";
        strSql = strSql + "       LEFT OUTER JOIN dm_attributi attr with (nolock)  ON attr.lnk = az.idazi ";//'and az.azideleted = 0 " ATTIVITA' 336256 ora blocco al primo passo se azienda deleted
        strSql = strSql + " where az.aziAcquirente = 0 and dztnome = 'codicefiscale' and  isnull(vatvalore_ft,'') = '" + codiceFiscale.Replace("'", "''") + "' order by azideleted asc ";

        //'-- se sto censendo un professionista la piva � opzionale
        //'if piva <> "" then
        //'	strSql = strSql & "			or aziPartitaIVA = '" & Replace(piva, "'", "''") & "') order by 1 desc"
        //'else
        //'	strSql = strSql & "			) order by 1 desc"
        //'end if

        TSRecordSet rs = GetRS(strSql);

        if (rs.RecordCount > 0)
        {

            rs.MoveFirst();
            if (CInt(rs.Fields["azideleted"]) != 1)
            {
                intToReturn = CInt(rs.Fields["idAzi"]);
            }
            else
            {
                intToReturn = -111; //'per indicare che l'azienda � deleted
            }

        }
        else
        {
            intToReturn = -1;
        }

        //set rs = nothing

        return intToReturn;

    }

    int checkEsistenzaAziendaEnte(string codiceFiscale)
    {
        int intToReturn = -1;
        //checkEsistenzaAziendaEnte = -1

        //'-- verifico se l'azienda � gi� censita ed � un ente
        string strSql = "select top 1 az.idAzi, azipartitaiva";
        strSql = strSql + " from aziende az with (nolock) ";
        strSql = strSql + "       LEFT OUTER JOIN dm_attributi attr with (nolock)  ON attr.lnk = az.idazi and az.azideleted = 0 ";
        strSql = strSql + " where az.aziAcquirente > 0 and dztnome = 'codicefiscale' and isnull(vatvalore_ft,'') = '" + codiceFiscale.Replace("'", "''") + "'";

        TSRecordSet rs = GetRS(strSql);

        if (rs.RecordCount > 0)
        {

            rs.MoveFirst();
            intToReturn = CInt(rs.Fields["idAzi"]);

        }
        else
        {
            intToReturn = -1;
        }

        return intToReturn;
        //set rs = nothing

    }

    int checkPIVA_esistenteOE(string piva)
    {
        int intToReturn = -1;
        //checkPIVA_esistenteOE = -1

        //'-- verifico se l'azienda � gi� censita con la partita iva passata
        strSql = "select top 1 az.idAzi, azipartitaiva";
        strSql = strSql + " from aziende az with (nolock) ";
        strSql = strSql + " where aziPartitaIVA <> '' and aziPartitaIVA = '" + piva.Replace("'", "''") + "' and aziDeleted = 0 and aziAcquirente = 0";

        TSRecordSet rs = GetRS(strSql);

        if (rs.RecordCount > 0)
        {

            rs.MoveFirst();
            intToReturn = CInt(rs.Fields["idAzi"]);

        }
        else
        {
            intToReturn = -1;
        }

        return intToReturn;
        //set rs = nothing

    }

    string getPIVA(dynamic idAzi)
    {
        string stringToReturn;
        stringToReturn = "";

        //'-- verifico se l'azienda � gi� censita ed � un ente
        strSql = "select top 1 azipartitaiva ";
        strSql = strSql + " from aziende az with (nolock) ";
        strSql = strSql + " where az.aziAcquirente > 0 and az.idAzi = " + CStr(idAzi);

        TSRecordSet rs = GetRS(strSql);

        if (rs.RecordCount > 0)
        {

            rs.MoveFirst();
            stringToReturn = CStr(rs.Fields["azipartitaiva"]);

        }
        else
        {
            stringToReturn = "";
        }

        //set rs = nothing

        return stringToReturn;

    }

    long timestamp(dynamic data)
    {
        return DateAndTime.DateDiff("s", "01/01/1970 00:00:00", data);
    }

    string generaChiaveSessione()
    {
        string sessionid = CStr(session.SessionID);
        string addKey = CStr(timestamp(DateAndTime.Now));
        addKey = Strings.Right(addKey, addKey.Length - 2);
        string extendedSessionId = addKey + Math.Abs(sessionid.GetHashCode());


        //'-- normalizzo togliendo gli 0 a sinistra
        while (!string.IsNullOrEmpty(extendedSessionId) && Strings.Left(extendedSessionId, 1) == 0.ToString())
        {
            extendedSessionId = Strings.Right(extendedSessionId, extendedSessionId.Length - 1);
        }

        session["SESSION_WORK_KEY"] = extendedSessionId;
        return extendedSessionId;
    }

    void jsFocus()
    {
        htmlToReturn.Write($@"

		        <script type=""text/javascript"">
			        window.addEvent('domready', function() {{

				        try
				        {{
					        var elementsWithError = document.getElementsByClassName('InputError');

					        if ( elementsWithError.length == 0 )
					        {{
						        var elementi = document.getElementsByClassName('focusthis');

						        if (elementi.length > 0)
							        elementi[0].focus();


						        //Se ci sono elementi superFocus vincono sugli altri focus
						        var superElements = document.getElementsByClassName('superFocus');

						        if ( superElements.length > 0 )
							        superElements[0].focus();

					        }}
					        else
					        {{
						        elementsWithError[0].focus();
					        }}
				        }}
				        catch(e)
				        {{
				        }}

				        try
				        {{
					        " + strJsOnLoad + $@"
				        }}
				        catch(e)
				        {{
				        }}

			        }});
			        function onchange_cfRapLeg()
			        {{

				        //TOGLIE IL BOTTONE SE CAMBIO IL CF
				        //try{{document.getElementById('messaggio_utente').style.display = 'none';}}catch(e){{}}
				        try{{document.getElementById('messaggio_errore').style.display = 'none';}}catch(e){{}}


			        }}

		        </script>

        ");
    }

    TSRecordSet getNaturaGiuridica()
    {

        string strQuery = "select dm_query from LIB_Domain with(nolock) where dm_id = 'DOM_131'";

        TSRecordSet rs = GetRS(strQuery);

        if (rs.RecordCount > 0)
        {

            rs.MoveFirst();

            string sqlDOM = CStr(rs.Fields["dm_query"]);
            sqlDOM = sqlDOM.Replace("#LNG#", "I");

            //Filtro sulla natura giuridica da applicare solo in presenza del parametro nella CTL_Doc con setting valore = 1
            strQuery = "select Valore from CTL_Parametri where Contesto = 'REGISTRAZIONE_OE' and Oggetto ='aziIdDscFormaSoc' and Proprieta = 'AttivaFiltro'";
            rs = GetRS(strQuery);

            if (rs.RecordCount > 0)
            {
                rs.MoveFirst();
                string isNaturaGiuridicaFilter = (string)rs["Valore"];
                if (isNaturaGiuridicaFilter == "1")
                {
                    string subFilter = string.Empty;
                    if (session["form_reg_cstato"] == "M-1-11-ITA")
                    {
                        //Lo stato è Italia
                        if (string.IsNullOrEmpty(session["form_reg_piva"]))
                        {
                            if (Len(session["form_reg_cf"]) == 16)
                            {
                                subFilter = "REL_ValueOutput = 'SI-SI'";
                            }
                            else
                            {
                                subFilter = "REL_ValueOutput = 'NO-SI'";
                            }
                        }
                        else
                        {
                            if (Len(session["form_reg_cf"]) == 16)
                            {
                                subFilter = "REL_ValueOutput = 'SI-NO'";
                            }
                            else
                            {
                                subFilter = "REL_ValueOutput = 'NO-NO'";

                            }
                        }
                    }
                    else
                    {
                        //Lo stato non è Italia
                        if (string.IsNullOrEmpty(session["form_reg_piva"]))
                        {
                            subFilter = "(REL_ValueOutput = 'SI-SI' or REL_ValueOutput = 'NO-SI')";
                        }
                        else
                        {
                            subFilter = "(REL_ValueOutput = 'SI-NO' or REL_ValueOutput = 'NO-NO')";

                        }
                    }

                    // Nella query appena ottenuta aggiungo una condizione di where per filtrare i dati ritornati in base alle condizioni attuali
                    string filterToAdd = string.Empty;
                    filterToAdd = "and (tdrcodice in ( select rel_valueinput from CTL_Relations with(nolock) where rel_type = 'DOM_131' and " + subFilter + " ))";
                    sqlDOM = Replace(sqlDOM, "order by", filterToAdd + " order by ");
                }
            }

            rs = GetRS(sqlDOM);
            rs.MoveFirst();
        }
        else
        {
            MyErrore("", "", "Dati Natura Giuridica non trovati!");
        }

        return rs;

    }

    bool checkCfPivaInvertiti(string codiceFiscale, string piva)
    {
        bool boolToReturn = false;
        //checkCfPivaInvertiti = false

        //se sto censendo un professionista la piva è opzionale
        if (!string.IsNullOrEmpty(piva))
        {

            string strSql = "select top 1 az.idAzi, azipartitaiva";
            strSql = strSql + " from aziende az with (nolock) ";
            strSql = strSql + "       INNER JOIN dm_attributi attr with (nolock)  ON attr.lnk = az.idazi and az.azideleted = 0 and dztnome = 'codicefiscale' and isnull(vatvalore_ft,'') = '" + codiceFiscale.Replace("'", "''") + "'";
            strSql = strSql + " where az.aziAcquirente > 0";

            TSRecordSet rs = GetRS(strSql);

            if (rs.RecordCount == 0)
            {

                //Se non esiste un azienda con il cf imputato passo a vedere se esiste un azienda gia censita con un codice fiscale uguale alla partita iva imputata
                strSql = "select top 1 az.idAzi, azipartitaiva";
                strSql = strSql + " from aziende az with (nolock) ";
                strSql = strSql + "       INNER JOIN dm_attributi attr with (nolock)  ON attr.lnk = az.idazi and az.azideleted = 0 and dztnome = 'codicefiscale' and isnull(vatvalore_ft,'') = '" + piva.Replace("'", "''") + "'";
                strSql = strSql + " where az.aziAcquirente > 0";

                rs = GetRS(strSql);

                if (rs.RecordCount > 0)
                {
                    boolToReturn = true;
                }
                else
                {
                    boolToReturn = false;
                }

            }
            else
            {

                boolToReturn = false;

            }

            //set rs = nothing

        }
        return boolToReturn;

    }

    if (cleanSession)
    {
        pulisciSessione();
    }
}
@Html.Raw(htmlToReturn.Out())
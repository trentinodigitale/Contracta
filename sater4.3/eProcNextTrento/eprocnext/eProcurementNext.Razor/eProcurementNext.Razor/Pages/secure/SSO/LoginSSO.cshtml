@page "/secure/SSO/LoginSSO.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using Microsoft.VisualBasic
@using System.Globalization
@using static eProcurementNext.CommonDB.Basic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.antiFixationModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.trace_in_log_utenteModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.logModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.secure.SSO.LoginSSOModel;
@model eProcurementNext.Razor.Pages.secure.SSO.LoginSSOModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	Layout = ConfigurationServices.GetKey("LayoutVersion", "_masterPage");
	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();
	
}
@{

	//'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//'---- SE LA CHIAMATA ARRIVA A QUESTA PAGINA VUOL DIRE CHE SIAMO IN UNA TRANSAZIONE PROTETTA DA SHIBBOLETH. ABBIAMO QUINDI SUPERATO UN AUTENTICAZIONE SAML ( COME AD. ESEMPIO SPID )    ----
	//'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	string attivaAccessoSSO = CStr(ApplicationCommon.Application["ATTIVA_SSO"]).ToUpper();
	//'-- PER I CLIENTI SENZA SHIBBOLETH ( PRIVI QUINDI DI UN REVERSE PROXY A PROTEZIONE DI QUESTA PAGINA ) LA SYS_ATTIVA_SSO DEVE AVERE UN VALORE DIVERSO DA YES ( O NON ESSERCI PROPRIO ) 

	if(!string.IsNullOrEmpty(attivaAccessoSSO))
	{
		htmlToReturn.Write("ACCESSO NON CONSENTITO");
		throw new ResponseEndException(htmlToReturn.Out(), Response, "ACCESSO NON CONSENTITO");
	}
	string httpHeaderName = "HTTP_FISCALNUMBER";
	if (!string.IsNullOrEmpty(CStr(ApplicationCommon.Application["SSO_HTTP_HEADER_NAME_CF"])))
	{
		httpHeaderName = CStr(ApplicationCommon.Application["SSO_HTTP_HEADER_NAME_CF"]);
	}
	//'-- recupero il Codice Fiscale dagli headers passati da shibboleth
	string CodiceFiscale = HttpContext.GetServerVariable(httpHeaderName);

	if(string.IsNullOrEmpty(CStr(CodiceFiscale)))
	{
		CodiceFiscale =  HttpContext.GetServerVariable("HTTP_CODICEFISCALE");//'-- Campo fuori standard SPID utilizzato dall'idp di test
	}

	TraceLogSPID(CodiceFiscale, "INIT", "1",HttpContext,session);
	CodiceFiscale = CodiceFiscale.Replace("TINIT-", "");
	if(string.IsNullOrEmpty(CodiceFiscale))
	{
		htmlToReturn.Write("ERRORE NEL RECUPERO DEL CODICE FISCALE");
		throw new ResponseEndException(htmlToReturn.Out(), Response, "ERRORE NEL RECUPERO DEL CODICE FISCALE");
	}
	//on error goto 0

	//'-- verifico che il parametro non contenga dati pericolosi

	validate("CodiceFiscale", CodiceFiscale, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0,HttpContext,session);
	validate("idPfu", GetParamURL(Request.QueryString.ToString(), "idpfu"), TIPO_PARAMETRO_NUMERO, CInt(""), "", 0,HttpContext,session);

	string TrustLevel = "alto";//	'Request.ServerVariables("HTTP_TrustLevel")

	//'traceInLogUtente   1 , "" , "LOGIN SSO - CF : '" & CodiceFiscale & "'"

	TSRecordSet rsLOGIN = null;
	string spidStatus = "SINGLE";
	string strSQL = "select idpfu, pfulogin , pfuidAzi , aziRagioneSociale from profiliutente with(nolock) inner join aziende with(nolock) on pfuidazi = idazi and pfuDeleted = 0 and aziDeleted = 0 /* aziVenditore = 0 */ where pfuCodiceFiscale = '" + CodiceFiscale.Replace("'", "''") + $@"' ";

	if(!string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "idpfu")))
	{
		strSQL = strSQL + " and idpfu = " + CStr(CLng(GetParamURL(Request.QueryString.ToString(), "idpfu")));
		spidStatus = "CONFIRM";
	}
	try
	{
		rsLOGIN = cdf.GetRSReadFromQuery_(strSQL, ApplicationCommon.Application.ConnectionString);	
	}
	catch
	{
		
	}

	//'-- nel caso sia ritornato un solo utente si accede direttamente
	if (rsLOGIN.RecordCount == 1)
	{
		session["idpfu"] = GetValueFromRS(rsLOGIN.Fields["idpfu"]);
		TraceLogSPID(CodiceFiscale, spidStatus, "1",HttpContext,session);
		rsLOGIN.MoveFirst();
		string accessGuid = insertAccessBarrier(session,HttpContext);
		throw new ResponseRedirectException("../../login.asp?redirectback=yes&chiamante=/portale/index.php&strMnemonicoMP=PA&acckey=" + URLEncode(CStr(accessGuid)), Response);
	}
	
	//drawMasterPage("../../", "Login SSO");
	void drawContent()
	{
		// '-- nel caso l'utente non è presente nel sistema
		if(rsLOGIN.RecordCount == 0)
		{
			TraceLogSPID(CodiceFiscale, "NOTFOUND","1",HttpContext,session);
			//'traceInLogUtente   1 , "" , "LOGIN SSO - " & CodiceFiscale & " Accesso negato utente non trovato"

			htmlToReturn.Write($@"
			<div id=""colcx"" classe=""large"">

             <p>");
			ApplicationCommon.CNV("Accesso negato. La sua utenza non risulta nel sistema. Proceda con il censimento o al completamento delle sue informazioni collegandosi con la terna applicativa");
			htmlToReturn.Write($@"
			</p>

				<br/>
				");
			<!-- <a href="/portale/LoginEsterno.asp">Torna al login</a> -->
			htmlToReturn.Write($@"
				<a class=""button"" onclick=""applicationLogOut('/portale/LoginEsterno.asp');"" href=""#"" >Torna al login</a>
            </div>");
			return;

		}
		if (rsLOGIN.RecordCount > 1)
		{
			//'response.redirect "/Application/secure/sso/output_sso.asp?lo=lista_attivita&ACCESSO=Multi&CF=" & CodiceFiscale & "&LOGINFEDERA=" & server.urlencode( rs.fields("ID").value )
			rsLOGIN.MoveFirst();
			htmlToReturn.Write($@"<div id=""colcx"" classe=""large"">");
			htmlToReturn.Write("    <p>");
			htmlToReturn.Write(ApplicationCommon.CNV("La sua utenza risulta collegata alle seguenti Aziende. Per proseguire e' necessario selezionarne una"));
			//'response.Write "    </p><br/><p class=""SelectEnte"" >" & CNV("Seleziona") & "</p><ul class=""ListaEnti"">"
			htmlToReturn.Write($@"    </p><br/><ul class=""ListaEnti"">");

			for (int i = 1; i < rsLOGIN.RecordCount; i++)
			{
				htmlToReturn.Write($@"<li class=""Ente"">");
				//'-- Chiamo me stesso con la stessa querystring ( per non perdermi parametri eventualmente passanti ) e con l'aggiunta dell'idpfu scelto dalla lista delle aziende
				htmlToReturn.Write($@"<a href=""LoginSSO.asp?idpfu=" + CStr(GetValueFromRS(rsLOGIN.Fields["idpfu"])) + $@"&" + GetQueryStringFromContext(Request.QueryString) + $@""">");
				htmlToReturn.Write(HtmlEncode(GetValueFromRS(rsLOGIN.Fields["aziRagioneSociale"])));
				htmlToReturn.Write("</a>");
				rsLOGIN.MoveNext();
			}
			htmlToReturn.Write("</ul></div>");

			htmlToReturn.Write($@"<br/><a class=""button"" onclick=""applicationLogOut('/portale/LoginEsterno.asp');"" href=""#"">Torna al login</a>");
			
			return;
		}
	}
	drawContent();
	long timestamp(DateTime data)
	{
	
		DateTime temp = DateTime.ParseExact("01/01/1970 00:00:00", "dd/MM/yyyy hh:mm:ss", CultureInfo.InvariantCulture);
		return DateDiff("s", temp, data);
	}
	string normalizza(string value )
	{
		string _normalizza = "";
		if((CStr(value).Length) < 2 )
		{
			_normalizza = "0" + value;
		}
		else
		{
			_normalizza = value;
		}
		return _normalizza;
	}
}@Html.Raw(htmlToReturn.Out())
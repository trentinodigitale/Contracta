@page "/CTL_LIBRARY/PDF/zip_pdf.asp"
@inject eProcurementNext.Session.ISession session;
@using System.IO;
@using eProcurementNext.CommonDB
@using eProcurementNext.Core.Storage
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonDB.Basic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.ctl_profiler
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.HTML.BasicFunction;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.PDF.pdf_functionsModel;
@using static eProcurementNext.CommonModule.Basic;
@using System.Diagnostics;
@using eProcurementNext.CtlProcess;
@using Microsoft.VisualBasic;
@using eProcurementNext.Razor;
@using static eProcurementNext.Session.SessionMiddleware
@using static eProcurementNext.CommonModule.Const;
@model eProcurementNext.Razor.Pages.CTL_LIBRARY.PDF.zip_pdfModel
@*'----------------------------------------------- PARAMETRI DI INPUT ----------------------------------------------
' - NOME_FILE : Nome del file zip che si vuole ottenere in output (senza estensione)							 |
' - VIEW	  : vista che ritorner� le informazioni sugli oggetti da generare per farne lo zip					 |
' - ID		  : Lista di ID (o ID singolo) separati da , da passare come where alla VIEW						 |
' - PDF_URL   : querystring che si passerebbe alla pdf.asp per ottenere un pdf comprensivo di giro di firma		 |
' - TYPEDOC   : (opz.) TipoDoc dei documenti di cui andremo a generare i pdf. Se non passato deve essere recuperato dalla colonna TIPO_DOC della VIEW 	 |
'-----------------------------------------------------------------------------------------------------------------
*@
@{
    string codiceOperazione = string.Empty;
    CommonDbFunctions cdf = new();
    LoadSession(HttpContext, session);
    EprocResponse HtmlToReturn = new();

    string id = CStr(GetParamURL(Request.QueryString.ToString(), "ID"));
    string view = CStr(GetParamURL(Request.QueryString.ToString(), "VIEW"));
    string pdf_url = CStr(GetParamURL(Request.QueryString.ToString(), "PDF_URL"));
    string TYPEDOC = CStr(GetParamURL(Request.QueryString.ToString(), "TYPEDOC"));

    string codOperation = string.Empty;
    long TimeStartPage = DateTime.Now.Ticks;
    dynamic DataUpdate = new dynamic[+1, +1];

    string strSql = string.Empty;
    string connectionString = ApplicationCommon.Application.ConnectionString;

    //'-- Se si sta aprendo il popup di download (la percentuale � messa a-100) faccio scaricare il file zip e ripulisco
    if (CStr(session["percentuale"]) == "-100")
    {
        codOperation = "session_id_" + session.SessionIDMinimal;
        session["percentuale"] = CLng(0);
        session["guid_session_zip"] = "";
        ApplicationCommon.Application[$"record-{CStr(session["id_record"])}"] = "";

        pulisci_e_scarica(true);
        finishImport(codOperation);

        Write_CTL_Profiler("ZIP_PDF.ASP", "", "", Request, TimeStartPage, ApplicationCommon.Configuration, ApplicationCommon.Application);

        //response.end
        //throw new ResponseEndException(HtmlToReturn.Out(), "");
    }
    else
    {
        //'-- Se l'utente sta richiedendo un nuovo import, ripuliamo un eventuale situazione pregressa
        if (!string.IsNullOrEmpty(CStr(id)))
        {
            session["id_record"] = id;
            codOperation = CStr(session["guid_session_zip"]);
            ApplicationCommon.Application[$"record-{CStr(session["id_record"])}"] = "";
            pulisci_e_scarica(false);
            finishImport(codOperation);
        }

        //'-- Se � la prima operazione e non si sta passando l'id dell'offerta
        if (string.IsNullOrEmpty(id) && string.IsNullOrEmpty(CStr(session["guid_session_zip"])))
        {
            message("Parametro ID Obbligatorio");
        }
        if (string.IsNullOrEmpty(view) && string.IsNullOrEmpty(CStr(session["guid_session_zip"])))
        {
            message("Parametro VIEW Obbligatorio");
        }
        if (string.IsNullOrEmpty(pdf_url) && string.IsNullOrEmpty(CStr(session["guid_session_zip"])))
        {
            message("Parametro PDF_URL Obbligatorio");
        }

        //'-- Verifico se � la prima invocazione per poi effettuare l'import iniziale
        if (string.IsNullOrEmpty(CStr(session["guid_session_zip"])))
        {
            validate("ID", id.Replace(",", "").Replace(" ", ""), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);
            validate("VIEW", view, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);
            validate("TYPEDOC", TYPEDOC, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);

            //'response.write "ID::" & id
            //'response.end

            session["id_record"] = id;
            session["nome_file_zip"] = CStr(GetParam(Request.QueryString.ToString(), "NOME_FILE"));
            session["zip_view"] = view;
            session["zip_pdf_url"] = pdf_url;
            session["zip_tipo_dc"] = TYPEDOC;

            //'response.write "ID:" & id
            //'response.end

            initImport(id);

            if (CLng(session["tot_record"]) > 0)
            {
                visualizzaPercentuale(0);
            }
            else
            {
                codiceOperazione = "session_id_" + session.SessionIDMinimal;
                finishImport(codiceOperazione);
                viewMessage("Nessun oggetto da generare");
            }
        }
        else
        {
            codOperation = CStr(session["guid_session_zip"]);
            long start_id = CLng(session["id_start"]);
            long totRecord = CLng(session["tot_record"]);
            long perc = 0;
            //'-- Calcolo la percentuale totale di elaborazione
            //'perc = 100 - ( ( clng(session["tot_elaborati")) * 100 ) / totRecord )
            //'perc = 100 - clng(100/totLotti * ( session["id_last") - end_id ) )

            if (start_id == 0)
            {
                perc = 1;
            }
            else
            {
                perc = 100 - CLng(100 / totRecord * (totRecord - start_id));
            }

            //'response.write "<h1>" & perc & "</h1>"

            //'-- Aggiornamento variabili in sessione
            session["percentuale"] = CLng(perc);

            execStepImport(codOperation, start_id);

            //'-- Incremento l'id di partenza di 1 in + rispetto all'ultimo elaborato
            session["id_start"] = start_id + 1;

            //'-- se abbiamo elaborato tutti i record usciamo altrimenti ri-iteriamo
            if (CLng(session["tot_elaborati"]) >= CLng(session["id_last"]))
            {
                session["percentuale"] = -100;

                visualizzaPercentuale(-100);
            }
            else
            {
                visualizzaPercentuale(perc);
            }
        }
    }

    Write_CTL_Profiler("ZIP_PDF.ASP", "", "", Request, TimeStartPage, ApplicationCommon.Configuration, ApplicationCommon.Application);
    //'-------------------------------------	FINE PAGINA ----------------'
    // throw new ResponseEndException(HtmlToReturn.Out(), Response, ""); // response.end
    //'-------------------------------------	FINE PAGINA ----------------'

    void execStepImport(string codOperation, long start_id)
    {
        //'-- elaboro il record con indice di matrice 'start_id'
        string nomeDirectoryTemporanea = CStr(session["dir_temp_lavoro"]);
        DataUpdate = session[codOperation];  

        //'response.write "START_ID:" & start_id
        //'response.end
        //'session["tot_elaborati") = session["tot_elaborati")  + 1

        //'-- matrice a 3 colonne (nomePDF,idRecord,tipoDoc)
        string nomeFile = CStr(DataUpdate[0, start_id]);
        string idRecord = CStr(DataUpdate[1, start_id]);
        TYPEDOC = CStr(DataUpdate[2, start_id]);
        if (string.IsNullOrEmpty(TYPEDOC))
        {
            TYPEDOC = CStr(session["zip_tipo_doc"]);
            if (string.IsNullOrEmpty(TYPEDOC))
            {
                pulisciFileUtente();
                ShowError("Errore di configurazione. Passare TYPE_DOC o come parametro o come colonna della vista");
            }
        }

        string parametri = CStr(session["zip_pdf_url"]);

        //'response.write parametri
        //'response.end

        //'-- se il parametro URL non � gia presente nella querystring passata lo aggiungo
        if (Strings.InStr(1, UCase(parametri), "URL=") <= 0)
        {
            parametri = $"URL={parametri}";
        }

        parametri = Strings.Replace(parametri,"<ID_DOC>", idRecord);					//'-- sostituisco ID_DOC sull'url nel caso si voglia dinamicizzare qualche meccanismo
        parametri = Strings.Replace(parametri,"%3CID_DOC%3E", idRecord);

        parametri = Strings.Replace(parametri,"<ID_PFU>", CStr(session["idpfu"]));	//'-- sostituisco ID_PFU sull'url nel caso si voglia dinamicizzare qualche meccanismo
        parametri = Strings.Replace(parametri,"%3CID_PFU%3E", CStr(session["idpfu"]));

        parametri = Strings.Replace(parametri,"<TIPO_DOC>", CStr(TYPEDOC));	//'-- sostituisco TIPO_DOC sull'url nel caso si voglia dinamicizzare qualche meccanismo
        parametri = Strings.Replace(parametri,"%3CTIPO_DOC%3E", CStr(TYPEDOC));

        parametri = parametri + "&TYPEDOC=" + TYPEDOC;
        parametri = parametri + "&DOCUMENT=" + TYPEDOC;
        parametri = parametri + "&IDDOC=" + idRecord;
        parametri = parametri + "&PATH_FILE=" + URLEncode(nomeDirectoryTemporanea + @"\" + nomeFile + ".pdf");

        //	'response.write parametri
        //'response.end

        string strPathfile = string.Empty;
        string pdfName = string.Empty;

        //'-- invoco la funzione di generazione e giro di firma (se richiesta) del pdf
        string esito = string.Empty;
        traceDB("zip_pdf.asp - AVVIO-generaPDF", CLng(session["idPfu"]), idRecord, Strings.Replace(parametri, "'", "''"));

        string mp_StrMsg_Process = "Errore";
        string mp_ICONMSG_Process = "2";
        ELAB_RET_CODE mp_vRetCode_Process = ELAB_RET_CODE.RET_CODE_OK;
        int mp_show_error = 0;

        esito = generaPDF(false, parametri, ref strPathfile, ref pdfName, HttpContext, session, ref mp_StrMsg_Process, ref mp_ICONMSG_Process, ref mp_vRetCode_Process, ref mp_show_error);

        traceDB("zip_pdf.asp - FINE-generaPDF", CLng(session["idPfu"]), idRecord, Strings.Replace(parametri, "'", "''"));

        //'response.write strPathfile

        //'-- se la funzione generaPDF mi ha ritornato un errore
        if (!string.IsNullOrEmpty(esito))
        {
            ShowError("generaPDF-" + esito);
        }

        session["tot_elaborati"] = CLng(session["tot_elaborati"]) + 1;
        session["id_documento_elab"] = idRecord;
    }

    void pulisci_e_scarica(bool bDownload)
    {
        string nomeFileZip = string.Empty;
        if (bDownload)
        {
            string id = CStr(session["id_record"]);
            string PathFolderAllegati = CStr(ApplicationCommon.Application["PathFolderAllegati"]);
            string tempDirName = CommonStorage.GetTempName(); //Tolta la  .Replace(".tmp", "_tmp"), adesso il nome file temporaneo non viene più preso dalal GetTempFileName di Path;
            string pathFolderZip = PathFolderAllegati + tempDirName + @"\";

            DirectoryInfo dr = new DirectoryInfo(pathFolderZip);

            if (!CommonStorage.ExistsDirectory(dr.FullName))
            {
                CommonStorage.CreateDirectory(dr.FullName);
            }

            if (string.IsNullOrEmpty(CStr(session["nome_file_zip"])))
            {
                nomeFileZip = pathFolderZip + "pdf_" + CStr(session["idPfu"]) + ".zip";
            }
            else
            {
                nomeFileZip = pathFolderZip + CStr(session["nome_file_zip"]) + ".zip";
            }

            //'-- Cancello un file zip precedente ( se presente )
            if (CommonStorage.FileExists(nomeFileZip))
            {
                CommonStorage.DeleteFile(nomeFileZip);
            }

            //'-- Produco il file zip della directory di lavoro
            Zip objZip = new Zip();
            objZip.Pack(CStr(session["dir_temp_lavoro"]), CStr(nomeFileZip));

            if (!string.IsNullOrEmpty(objZip.ErrorDescription()))
            {
                HtmlToReturn.Write(objZip.ErrorDescription());
                throw new ResponseEndException(HtmlToReturn.Out(), Response, "");
            }

            // '-- Verifico se il file zip � stato creato
            if (!CommonStorage.FileExists(nomeFileZip))
            {
                ShowError("Errore nella generazione del file zip."); 
            }

            ritornaFile(nomeFileZip);
            CommonStorage.DeleteFile(nomeFileZip);
            CommonStorage.DeleteDirectory(dr.FullName);
        }

        pulisciFileUtente();
    }

    void initImport(string id)
    {
        string codiceOperazione = string.Empty;
        TSRecordSet rs = new TSRecordSet();
        string strsql = string.Empty;
        codiceOperazione = "session_id_" + session.SessionIDMinimal;
        clearOperation(codiceOperazione);
        int errNumber = 0;

        try
        {
            rs = GetRS(@"Select * from " + CStr(session["zip_view"]).Replace(" ", "") + " where ID_FROM In ( " + id.Replace(@"'", @"''") + ") order by id_doc asc");
        }
        catch(Exception ex)
        {
            ShowError("initImport-" + ex.ToString());
            errNumber = 1;
        }

        int totRecord = 0;

        //'-- popola la matrice con i dati recuperati dalla vista
        if (rs != null && errNumber == 0)
        {
            if (rs.RecordCount > 0)
            {
                totRecord = rs.RecordCount;
                try{
                    rs.MoveFirst();

                }catch(Exception ex)
                {
                    ShowError("initImport-" + ex.ToString());
                }

                //DataUpdate = new dynamic[3, totRecord - 1];
                DataUpdate = new dynamic[2 + 1, totRecord - 1 + 1];

                int indiceRiga = 0;
                while (!rs.EOF && indiceRiga < 500)
                {
                    try
                    {
                        DataUpdate[0, indiceRiga] = CStr(rs["NOME_FILE"]).Trim();
                        DataUpdate[1, indiceRiga] = CStr(rs["ID_DOC"]).Trim();
                    }
                    catch(Exception ex)
                    {
                        ShowError("initImport-" + ex.ToString());
                    }

                    try
                    {
                        TYPEDOC = CStr(rs["TIPO_DOC"]);
                    }
                    catch(Exception ex)
                    {
                        errNumber = 1;
                    }

                    //'-- Nella vista la colonna TIPO_DOC � opzionale, quindi recupero il valore e poi testo l'errore
                    if (errNumber == 0)
                    {
                        DataUpdate[2, indiceRiga] = TYPEDOC;  // ' se non c'è errore
                    }
                    else
                    {
                        errNumber = 0;
                        DataUpdate[2, indiceRiga] = "";
                    }

                    indiceRiga = indiceRiga + 1;
                    rs.MoveNext();
                }
            }
        }

        session["tot_record"] = totRecord;
        session["id_record"] = id;

        //'-- start e last corrispondono con l'indice base (+1) e l'index max (+1) della matrice di dati

        if (totRecord > 0)
        {
            session["id_start"] = 0;
        }

        session["id_last"] = totRecord;
        session[codiceOperazione] = DataUpdate;

        //'-- Creo la directory di lavoro
        string nomeFileTemporaneo = CommonStorage.GetTempName();  //Tolta la  .Replace(".tmp", "_tmp"), adesso il nome file temporaneo non viene più preso dalal GetTempFileName di Path;
        string nomeDirectoryTemporanea = CStr(session["idPfu"]) + nomeFileTemporaneo;

        string path = CStr(ApplicationCommon.Application["PathFolderAllegati"]);

        session["dir_temp_lavoro"] = CStr(path + nomeDirectoryTemporanea);

        // 'response.write "createFolder:" & cstr(path & nomeDirectoryTemporanea)
        // 'response.end
        CommonStorage.CreateDirectory(CStr(path + nomeDirectoryTemporanea));

        session["guid_session_zip"] = codiceOperazione;
        session["percentuale"] = CLng(0);
        session["tot_elaborati"] = CLng(0);
    }

    void pulisciFileUtente()
    {
        string strObjFolder = CStr(session["dir_temp_lavoro"]);
        try
        {
            CommonStorage.DeleteDirectory(strObjFolder);
        }
        catch
        {

        }
    }

    void ritornaFile(string strFilePath)
    {
        HtmlToReturn.Clear();
        HttpContext.Response.Clear();

        //objStream.Read
        if (string.IsNullOrEmpty(CStr(session["nome_file_zip"])))
        {
            HttpContext.Response.Headers.TryAdd("Content-Disposition", "attachment; filename=offerta.zip");
        }
        else
        {
            HttpContext.Response.Headers.TryAdd("Content-Disposition", $@"attachment; filename={CStr(session["nome_file_zip"])}.zip");
        }
        using (FileStream fs = new FileStream(strFilePath, FileMode.Open, FileAccess.Read))
        {
            byte[] b = new byte[1024];
            int len;
            int counter = 0;
            while (true)
            {
                len = fs.Read(b, 0, b.Length);
                byte[] c = new byte[len];
                b.Take(len).ToArray().CopyTo(c, 0);
                HtmlToReturn.BinaryWrite(HttpContext, c);
                if (len == 0 || len < 1024)
                {
                    break;
                }
                counter++;
            }
        }
    }

    string ShowError(string ErrText)
    {
        
        string codOperation = "session_id_" + session.SessionIDMinimal;
        
        
        finishImport(codOperation);
        
        
        string debugMode = CStr(ApplicationCommon.Application["debug-mode"]);
        
        TracciaErrore("zip_pdf.asp", ErrText, 999, "ShowErrore");
        

        string strMlMsg = "yes";

        if (debugMode == "yes" || debugMode == "si" || debugMode == "true")
        {
            //ErrText = ErrText;
        }
        else
        {
            
            ErrText = ApplicationCommon.CNV("INFO_UTENTE_ERRORE_PROCESSO") + DateTime.Now;
            strMlMsg = "no";
            
        }

        // 'Response.Redirect "../MessageBoxWin.asp?ML=yes&MSG=" & ErrText & "&CAPTION=Errore&ICO=2"
        throw new ResponseRedirectException($"../MessageBoxWin.asp?ML={strMlMsg}&MSG={UrlEncode(TruncateMessage(ErrText))}&CAPTION=Errore&ICO=2", Response);
        // Response.Status = "500 " & ErrText

        //HtmlToReturn.Clear();
        //HtmlToReturn.Write("500 " + ErrText);
        //throw new ResponseEndException(HtmlToReturn.Out(), Response, "500 " + ErrText);
    }

    TSRecordSet GetRS(string strSql)
    {
        TSRecordSet rs = new TSRecordSet();
        rs = cdf.GetRSReadFromQuery_(CStr(strSql), connectionString);
        return rs;
    }

    void visualizzaPercentuale(long x)
    {
        HtmlToReturn.Write($@"
	        <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
	        <html xmlns=""http://www.w3.org/1999/xhtml"">
	        <head>
	        <meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
	        <title>Loading</title>

	        <style>
		         body, html{{ background:#fff; font-family:Arial, Helvetica, sans-serif; color:#333;}}
		        .main{{ width:400px; height:200px; /*background:#1B1C1C;*/ margin:0 auto; padding:20px 20px 20px 20px;}}
		        .loadingbox{{ width:300px; height:30px; margin:10px 0px 0px 50px; border:5px solid #ccc; /*#323f4f; background:#323f4f*/ background:#333 url(./LoadingBar.png) no-repeat;}}
		        .loading{{ width:300px; height:30px; background: url(./bg.png) top left no-repeat; margin:auto;}}
		        .end{{ background:#333; height:30px;}}
		        .button_center {{margin:0 auto;}}
		        p{{ text-align:center; color:#333; font-size:12px;}}
		        span{{color:#666; text-align:center; font-size:18px; font-weight:bold;}}
		        h1{{ font-size:16px; font-weight:normal; text-align:center;}}
		        .completata{{color:#ececec; padding:7px; text-align:center}}
		        .riepilogo{{ margin: 0 auto;}}
		        ul{{ list-style-type:none;}}
		        li{{ padding-left:120px;}}
		        .red{{ color:#990000;}}

	        </style>

	        <link rel=""stylesheet"" href=""../Themes/caption.css"" type=""text/css""/>
	        <link rel=""stylesheet"" href=""../Themes/buttonbar.css"" type=""text/css""/>


	           <script type=""text/javascript"">

			        function OnBeforeUnLoad () 
			        {{		
				        var xmlhttp;
				        var dateNoCache;

				        xmlhttp=new XMLHttpRequest();
				        dateNoCache = new Date().getTime();

				        //TODO Come mai con Chrome non parte sempre la chiamta? è un problema dell'evento onbeforeunload? lo possiamo sostituire o mettere direttamente la logica nella funzione download()
				        xmlhttp.open(""GET"",""pulisciSessioneBuste.asp?nocache="" + dateNoCache,false);
				        xmlhttp.send(null);
			        }}
		");
        if (x == CLng(-100)) {
            HtmlToReturn.Write($@"
                window.onbeforeunload = OnBeforeUnLoad;
            ");
        }
        HtmlToReturn.Write($@"
            </script>

	        <script language=""javascript"">	
		        var intervallo;
		        var dateNoCache;
		        dateNoCache = new Date().getTime();

		        function elab()
		        {{
			        /*window.setTimeout(
				        function () {{
					        window.location.replace(""zip_pdf.asp?id_documento="" + document.getElementById('IDDOC').value + ""&nocache="" + dateNoCache);						}}
					        ,10);			 					
			        */
			        window.location.replace(""zip_pdf.asp?id_documento="" + document.getElementById('IDDOC').value + ""&nocache="" + dateNoCache);

			        return;

			        /*
			        var xmlhttp;
			        xmlhttp=new XMLHttpRequest();

			        xmlhttp.open(""GET"",""zip_pdf.asp?id_documento="" + document.getElementById('IDDOC').value + ""&nocache="" + dateNoCache,false);

			        try
			        {{
				        xmlhttp.send(null);
			        }}
			        catch(e)
			        {{
				        //window.clearInterval(intervallo);
				        document.getElementById('percentuale').innerHTML = '<span style=""color:red"">Errore server.</span>Rieseguire l\'operazione';
			        }}

			        if (xmlhttp.readyState==4 && xmlhttp.status==200)
			        {{
				        //Sostituisco il contenuto del body con il testo della riposta
				        document.getElementById('body').innerHTML=xmlhttp.responseText;

				        //refresh
				        document.getElementById('main').style.display = 'none';
				        document.getElementById('main').style.display = 'block';

				        var indexesito = xmlhttp.responseText.indexOf('<input type=""hidden"" id=""esito"" value=""fine""/>')
				        console.log('esito value on response',indexesito);

				        //Quando � arrivata la fine dell'elaborazione
				        if ( xmlhttp.responseText.indexOf('<input type=""hidden"" id=""esito"" value=""fine""/>') > 0 )
				        {{
					        //BLocco l'iterazione
					        //window.clearInterval(intervallo);

					        try {{ opener.RefreshDocument('/" + CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"]) + $@"/ctl_library/document/'); }} catch(e) {{}}


					        //Apro un popup per il download del file zip
					        window.open( 'zip_pdf.asp' ,'_blank','toolbar=no,location=no,directories=no,status=yes,menubar=no,resizable=yes,copyhistory=yes,scrollbars=yes,width=600,height=600');
				        }}
				        else
				        {{
					        //intervallo = window.setTimeout( elab ,1);
					        intervallo = window.setTimeout( elab ,1);			 					
				        }}
			        }}
			        else
			        {{
				        //Se � andata in errore la pagina blocco l'iterazione
				        //window.clearInterval(intervallo);
				        document.getElementById('elab_in_corso').style.display = 'none';
				        document.getElementById('percentuale').innerHTML = '<span style=""color:red"">' + xmlhttp.statusText + '</span>'; //+ xmlhttp.responseText;
			        }}*/

		        }}

		        function download() {{
			        //Reload per download del file ZIP
			        try {{ opener.RefreshDocument('/" + CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"]) + $@"/ctl_library/document/'); }} catch(e) {{}}

			        //Apro un popup per il download del file zip
			        window.open( 'zip_pdf.asp' ,'_blank','toolbar=no,location=no,directories=no,status=yes,menubar=no,resizable=yes,copyhistory=yes,scrollbars=yes,width=600,height=600');						
		        }}
	        </script>
	        </head>
	        <body 
        ");

        if (x == CLng(-100))
        {
            HtmlToReturn.Write($@"onload=""download()""");
        }else{
            HtmlToReturn.Write($@"onload=""elab()""");
        }

        HtmlToReturn.Write($@"

		    id=""body"">


        ");

        HtmlToReturn.Write($@"
            <table width=""100%"" class=""Caption"" id="""" border=""0"" cellspacing=""0"" cellpadding=""0"">
		        <td width=""100%"">
			        " + ApplicationCommon.CNV("Generazione pdf buste") + $@"
		        </td>	
	        </table>

	        <img style=""display:none"" src=""LoadingBar.png""/>
	        <img style=""display:none"" src=""bg.png""/>

	        <div class=""main"" id=""main"">
        ");

        if (x == CLng(-100))
        {
            HtmlToReturn.Write($@"

			<p><span>100%</span></p>	

			<input type=""hidden"" id=""esito"" value=""fine""/>


			<div class=""loading end"">
				<p class=""completata"">
					" + ApplicationCommon.CNV("Elaborazione terminata") + $@"
				</p>
			</div>
			<p style=""color:#333"">
            ");

            if (CStr(session["warning_vecchi_pdf"]) == "SI" ){
                HtmlToReturn.Write($@"<br/>");
                HtmlToReturn.Write(ApplicationCommon.CNV("Attenzione. Cancellare il vecchi file generati per le buste"));
            }

            session["warning_vecchi_pdf"] = "";

            HtmlToReturn.Write($@"

    			</p>

            ");


        }
        else
        {
            HtmlToReturn.Write($@"
                <input type=""hidden"" id=""esito"" value=""inCorso""/>
			    <input type=""hidden"" id=""IDDOC"" name=""IDDOC"" value=""" + CStr(session["id_documento_elab"]) + $@"""/>

			    <p>
				    <span id=""percentuale"">" + CLng(x) + $@"%</span>
			    </p>
			    <p>
				    <span>Elaborati " + CStr(session["tot_elaborati"]) + $@" di " + CStr(session["tot_record"]) + $@"</span>
			    </p>

			    <div class=""loadingbox"" style=""background-position: " + CStr((300 / 100) * CLng(x)) + $@"px;"">
				    <div class=""loading"">
				    </div>
			    </div>			

            ");

            HtmlToReturn.Write($@"<p id=""elab_in_corso"">" + ApplicationCommon.CNV("Elaborazione in corso") + "</p>");
        }

        HtmlToReturn.Write($@"

            </div>

	        </body>
	        </html>
        ");

    }

    void viewMessage(string msg)
    {
        //Response.Flush 
        redirectJS("../MessageBoxWin.asp?MSG=" + ApplicationCommon.CNV(msg) + "&CAPTION=ESITO");
        throw new ResponseEndException(HtmlToReturn.Out(), Response, "");
    }

    void message(string msg)
    {
        throw new ResponseRedirectException($"../MessageBoxWin.asp?ML=yes&MSG={URLEncode(TruncateMessage(msg))}&CAPTION=Info&ICO=1", Response);
    }

    void redirectJS(string page)
    {
        HtmlToReturn.Write(@"<script language=""javascript"">");
        HtmlToReturn.Write(@"window.location.href = '" + page.Replace(@"'", @"\'") + "';");
        HtmlToReturn.Write("</script>");
        throw new ResponseEndException(HtmlToReturn.Out(), Response, "");
        //Response.End
    }

    //'--attiva l'esecuzione dei processi su un documento nuovo
    bool ExecuteProcess(string strProcessName, string strDocType, string strDocKey)
    {
        bool boolToReturn = true;

        ClsElab obj = new ClsElab();
        ELAB_RET_CODE vRetCode = ELAB_RET_CODE.RET_CODE_ERROR;
        string strDescrRetCode = string.Empty;

        string mp_strConnectionString = CStr(ApplicationCommon.Application["ConnectionString"]);
        try
        {
            vRetCode = obj.Elaborate(strProcessName, strDocType, strDocKey, CLng(session["idpfu"]), ref strDescrRetCode, 1, mp_strConnectionString);
        }
        catch (Exception ex)
        {
            //'-- se c'� stato un errore non gestito
            boolToReturn = false;
            TracciaErrore("zip_pdf.asp.ExecuteProcess(" + strProcessName + ")", ex.Message, 0, "ExecuteProcess()");
        }
        
        if (vRetCode != ELAB_RET_CODE.RET_CODE_OK)
        {
            boolToReturn = false;
            TracciaErrore("zip_pdf.asp.ExecuteProcess(" + strProcessName + ")", strDescrRetCode, 0, "ExecuteProcess()");
            //strOutput= strDescrRetCode
        }

        return boolToReturn;
    }

    void TracciaErrore(string source, string text, int tipo, string oggetto)
    {
        Exception e = new Exception(text);
        e.Source = source;
        StackTrace st = new StackTrace(true);
        e = eProcurementNext.CommonDB.Basic.SetStackTrace(e, st);
        // oltre allo StackTrace nel contesto aggiungere eventuali altre 
        // informazioni possano essere d'aiuto a chi dovrà valutare l'errore
        string contesto = "eventuale testo supplementare";
        TraceErr(e, ApplicationCommon.Application["ConnectionString"], contesto);
    }

    void execSQL(string strSql)
    {
        CommonDbFunctions cdf = new();
        cdf.Execute(strSql, ApplicationCommon.Application.ConnectionString);
    }

    void finishImport(string codiceOperazione)
    {
        
        clearOperation(codiceOperazione);
        

        //	'response.write "finish import"
        //  'response.end
        session["tot_record"] = CLng(-1);
        session["id_start"] = CLng(-1);
        session["guid_session_zip"] = "";

        //'-- elimino dalla sessione la matrice contenente i dati di lavoro
        session[codiceOperazione] = null;
       
        ApplicationCommon.Application["record-" + CStr(session["id_record"])] = "";
        

        session["nome_file_zip"] = "";
        session["zip_view"] = "";
        session["zip_pdf_url"] = "";
        session["zip_tipo_doc"] = "";
        session["id_record"] = "";
    }

    void clearOperation(string guidOperazione)
    {
        dynamic DataUpdate = new dynamic[2 + 1, 1 - 1 + 1];

        //'-- elimino dalla sessione la matrice contenente i dati di lavoro
        session[guidOperazione] = DataUpdate;   
    }

    void traceDB(string contesto, long idpfu, string iddoc, string descrizione)
    {
        if (ApplicationCommon.Application["ATTIVA_TRACE"] == "YES")
        {
            //  on error resume next
            try
            {
                strSql = "INSERT INTO CTL_TRACE (contesto,sessionIdASP,sessionIdApp,idpfu,idDoc,descrizione)";
                strSql = strSql + " VALUES ('" + contesto + "','',''," + idpfu + ", " + iddoc + ", '" + descrizione + "')";

                execSQL(strSql);
            }
            catch
            {

            }
            //on error goto 0
        }
    }
    //'-- TRACCIAMO IL TEMPO DI ESECUZIONE DELA PAGINA
    Write_CTL_Profiler("ZIP_PDF.ASP", "", "", Request, TimeStartPage, ApplicationCommon.Configuration, ApplicationCommon.Application);
}@Html.Raw(HtmlToReturn.Out())
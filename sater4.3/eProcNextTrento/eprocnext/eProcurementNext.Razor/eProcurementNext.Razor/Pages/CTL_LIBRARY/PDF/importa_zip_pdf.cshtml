@page "/CTL_LIBRARY/PDF/importa_zip_pdf.asp"
@inject eProcurementNext.Session.ISession session;
@using System.IO;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule
@using eProcurementNext.Core.Storage
@using static eProcurementNext.CommonDB.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.HTML.BasicFunction;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.trace_in_log_utenteModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.PDF.pdf_functionsModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.PDF.importa_zip_pdfModel;
@*//TODO: <!-- #Include File="../Functions/sendMailError.inc" -->*@
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.CtlProcess;
@using Microsoft.VisualBasic
@model eProcurementNext.Razor.Pages.CTL_LIBRARY.PDF.zip_pdfModel
@using Chilkat;
@using Newtonsoft.Json
@using static eProcurementNext.Session.SessionMiddleware
@using static eProcurementNext.CommonModule.Const;
@{
	CommonDbFunctions cdf = new CommonDbFunctions();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new EprocResponse();
}
@{
	//'----------------------------------------------- PARAMETRI DI INPUT ----------------------------------------------
	//' - VIEW	  : vista utilizzata anche nella generazione del file zip. la where andr� in input per nome_file e dovr� esserci
	//'				un match 1a1 con la colonna ID_DOC 																 |	
	//' - ID		  : Lista di ID (o ID singolo) separati da , da passare come where alla VIEW						 |	
	//' - PDF_URL   : querystring che si passerebbe alla pdf.asp per ottenere un pdf comprensivo di giro di firma		 |
	//'-----------------------------------------------------------------------------------------------------------------

	string idRecord = CStr(GetParamURL(Request.QueryString.ToString(), "ID")).Trim();
	string view = CStr(GetParamURL(Request.QueryString.ToString(), "VIEW"));
	string pdf_url = CStr(GetParamURL(Request.QueryString.ToString(), "PDF_URL"));
	string typeDoc = CStr(GetParamURL(Request.QueryString.ToString(), "TYPEDOC"));

	string codOperation;
	//'-- Se l'utente sta richiedendo un nuovo import, ripuliamo e ne iniziamo uno nuovo
	if (!string.IsNullOrEmpty(CStr(idRecord))) {

		session["ID"] = idRecord;
		codOperation = CStr(session["guid_session_zip"]);
		ApplicationCommon.Application["buste-" + CStr(session["ID"])] = "";
		pulisci_e_scarica();
		finishImport(codOperation);

	}

	//'-- Se � la prima operazione e non si sta passando l'id dell'offerta
	if (string.IsNullOrEmpty(idRecord) && string.IsNullOrEmpty(CStr(session["guid_session_zip"]))) {
		message("Parametro ID Obbligatorio");
	}
	if (string.IsNullOrEmpty(view) && string.IsNullOrEmpty(CStr(session["guid_session_zip"]))) {
		message("Parametro VIEW Obbligatorio;");
	}
	if (string.IsNullOrEmpty(pdf_url) && string.IsNullOrEmpty(CStr(session["guid_session_zip"]))) {
		message("Parametro PDF_URL Obbligatorio");
	}

	idRecord = CStr(session["ID"]);

	//'-- Verifico se � la prima invocazione
	if (string.IsNullOrEmpty(CStr(session["guid_session_zip"]))) {

		validate("ID", idRecord.Replace(",", "").Replace(" ", ""), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);
		validate("VIEW", view, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);
		validate("TYPEDOC", typeDoc, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);

		session["zip_view"] = view;
		session["zip_pdf_url"] = pdf_url;

		initImport(idRecord);

		//'response.write "INIT"
		//'response.end

		if (CLng(session["tot_record"]) > 0) {
			visualizzaPercentuale(0);
		} else {

			string codiceOperazione = session.SessionIDMinimal;
			finishImport(codiceOperazione);

			if (!string.IsNullOrEmpty(CStr(session["zip_error"]))) {
				viewMessage(CStr(session["zip_error"]));
			} else {
				viewMessage("File zip vuoto");
			}

		}

	} else {

		codOperation = CStr(session["guid_session_zip"]);
		int totRecords = CInt(session["tot_record"]);

		//'-- Calcolo la percentuale totale di elaborazione
		int perc = CInt(100 - CLng(100 / totRecords * CLng(totRecords - session["tot_elaborati"])));

		//'-- Aggiornamento variabili in sessione
		session["percentuale"] = perc;

		execStepImport();

		//'-- se abbiamo elaborato tutti i lotti usciamo altrimenti ri-iteriamo
		if (CLng(session["tot_elaborati"]) >= CLng(totRecords)) {

			session["percentuale"] = -100;
			visualizzaPercentuale(-100);

			codOperation = session.SessionIDMinimal;

			session["percentuale"] = CLng(0);
			session["guid_session_zip"] = "";
			session["zip_pdf_url"] = "";

			ApplicationCommon.Application["buste-" + CStr(session["ID"])] = "";
			pulisci_e_scarica();
			finishImport(codOperation);
			throw new ResponseEndException(htmlToReturn.Out(), Response, "");

		} else {
			visualizzaPercentuale(perc);
		}

	}

	//'-------------------------------------	FINE PAGINA ---'
	//Response end non necessaria
	//throw new ResponseEndException(htmlToReturn.Out(), Response, "");
	//'-------------------------------------	FINE PAGINA ---'

	void execStepImport() {

		dynamic idRecord;
		Dictionary<string, string> collezione = new Dictionary<string, string>();
		Dictionary<string, string>.ValueCollection elementi;
		Dictionary<string, string>.KeyCollection chiavi;
		string item;
		string chiave;
		int i;
		string nomeFile;
		string esito;

		idRecord = session["ID"];

		collezione = session["lista_file"];

		chiavi = collezione.Keys;
		elementi = collezione.Values;

		//'-- elaboro 1 file alla volta vedendo il prossimo non ancora elaborato
		for (i = 0; i <= collezione.Count - 1; i++) {// To collezione.Count - 1

			chiave = chiavi.ElementAt(i);
			item = elementi.ElementAt(i);

			//'-- se l'elemento non � gia stato elaborato
			if (string.IsNullOrEmpty(item)) 
			{
				esito = "OK";
				session["tot_elaborati"] = CInt(session["tot_elaborati"]) + 1;

				//'-- conservo il nome del file pulito dal percorso e lo utilizzo
				//'-- in input alla vista ,insieme all'id_from per ottenere il numero record
				string[] fv = Strings.Split(chiave, @"\");
				nomeFile = fv[fv.Length - 1];
				TSRecordSet rs;
				try 
				{
					rs = GetRS(CStr("select top 1 ID_DOC from " + CStr(session["zip_view"]).Replace(" ", "") + " where ID_FROM IN (" + CStr(idRecord).Replace("'", "''") + ") and CHARINDEX(NOME_FILE, '" + nomeFile.Replace("'", "''") + "' ) > 0"));
				} 
				catch (Exception ex)
				{
					ShowError(ex.ToString());
				}

				if (rs.RecordCount > 0) 
				{
					rs.MoveFirst();

					dynamic idDoc = rs.Fields["ID_DOC"];

					//'-- recupero i parametri di firma dal parametro passato alla pagina. PDF_URL
					string parametri = CStr(session["zip_pdf_url"]);
					string table = GetParamURL(parametri, "TABLE");
					string identity = GetParamURL(parametri, "IDENTITY");
					string area = GetParamURL(parametri, "AREA");

					//'-- 'uploadattachsigned.asp?TABLE=Document_Microlotto_Firme&IDDOC=49028&OPERATION=INSERTSIGN&IDENTITY=IdHeader&AREA=F2&DOMAIN=FileExtention&FORMAT=
					esito = "";
					esito = elaboraFile(chiave, area, identity, table, CStr(idDoc));

					if (string.IsNullOrEmpty(esito)) 
					{
						esito = "OK";
					}

					collezione[chiave] = CStr(esito);
				} 
				else 
				{
					collezione[chiave] = "Nome file non corretto o Firma gia allegata";
				}

				session["lista_file"] = collezione;

				break;
			}
		}
	}

	void pulisci_e_scarica() 
	{
		pulisciFilesUtente();
	}

	void initImport(dynamic idRecord) 
	{

		string codiceOperazione;
		TSRecordSet rs;
		string strSql;
		//dim fs
		Dictionary<string, string> collezione = new Dictionary<string, string>();

		codiceOperazione = session.SessionIDMinimal;

		//on error goto 0

		//set collezione = Server.CreateObject("Scripting.Dictionary")

		//'-- Creo la directory di lavoro
		//set fs=Server.CreateObject("Scripting.FileSystemObject") 
		string nomeFileTemporaneo = CommonStorage.GetTempName();//fs.GetTempName
		string nomeDirectoryTemporanea = CStr(session["idPfu"]) + nomeFileTemporaneo;

		string path = ApplicationCommon.Application["PathFolderAllegati"];

		session["dir_lavoro"] = CStr(path + nomeDirectoryTemporanea);

		//fs.CreateFolder(cstr(path & nomeDirectoryTemporanea))
		CommonStorage.CreateDirectory(CStr(path + nomeDirectoryTemporanea));

		//'-- scarico il file zip che ho in request nella directory appena creata e mi faccio restituire il nomeFile dello zip
		string fileZip = saveAttach(CStr(path + nomeDirectoryTemporanea));

		fileZip = CStr(path + nomeDirectoryTemporanea + @"\" + fileZip).ToLower();

		//Dim objZip

		//'-- estraggo il contenuto del file zip nella directory di lavoro
		//'Set objZip = Server.CreateObject("XStandard.Zip")
		//Set objZip = Server.CreateObject("AFUtils.Zip")
		try {
			new eProcurementNext.Razor.Zip().UnPack(CStr(fileZip), CStr(path + nomeDirectoryTemporanea) + @"\");
		} catch (Exception ex) {
			session["lista_file"] = collezione;
			session["dir_temp_lavoro"] = CStr(path + nomeDirectoryTemporanea) + @"\";
			session["percentuale"] = CLng(0);
			session["tot_elaborati"] = CLng(0);
			session["guid_session_zip"] = codiceOperazione;
			session["tot_record"] = CLng(0);
			session["ID"] = idRecord;
			session["id_start"] = CLng(1);
			session["id_last"] = CLng(0);
			session["zip_error"] = ex.Message;

			return;
		}
		//objZip.UnPack cstr(fileZip) , cstr(path & nomeDirectoryTemporanea) + @"\"

		//Dim objFolder
		//Dim fileCount
		//dim file



		int fileCount = 0;

		getAllFiles(CStr(path + nomeDirectoryTemporanea) + @"\", collezione);

		//'-- rimuovo dalla collezione il file zip stesso
		collezione.Remove(CStr(fileZip).Trim());

		fileCount = collezione.Count;

		session["lista_file"] = collezione;
		session["dir_temp_lavoro"] = CStr(path + nomeDirectoryTemporanea) + @"\";
		session["percentuale"] = CLng(0);
		session["tot_elaborati"] = CLng(0);
		session["guid_session_zip"] = codiceOperazione;
		session["tot_record"] = CLng(fileCount);
		session["ID"] = idRecord;
		session["id_start"] = CLng(1);
		session["id_last"] = CLng(fileCount);

	}

	void getAllFiles(string path, Dictionary<string, string> collezione) {

		//dim fs, folder, file, item

		//set fs = CreateObject("Scripting.FileSystemObject")
		//set folder = fs.GetFolder(path)
		string folder_ = System.IO.Path.GetDirectoryName(path);
		System.IO.DirectoryInfo folder = new System.IO.DirectoryInfo(folder_);
		//'response.write path
		//'response.end

		//'Lista delle sotto directory
		foreach (var item in folder.GetDirectories())
		{
			getAllFiles(item.FullName + @"\", collezione);
		}

		//'Lista dei file
		foreach (var item in folder.GetFiles()) {
			collezione.Add(CStr(item.FullName).ToLower(), "");
		}

		//set fs = nothing
		//set folder = nothing

	}


	void pulisciFilesUtente() {

		//on error resume next
		//dim objFolder
		//dim fs
		//set fs = Server.CreateObject("Scripting.FileSystemObject")
		//Set objFolder = fs.GetFolder(cstr(session("dir_lavoro")))
		//set fs = nothing
		//objFolder.Delete
		//set objFolder = nothing
		//on error goto 0
		if (CommonStorage.DirectoryExists(CStr(session["dir_lavoro"])))
		{
			CommonStorage.DeleteDirectory(CStr(session["dir_lavoro"]));
		}

	}

	void ritornaFile(string strFilePath) { }

	void elaboraBuste(TSRecordSet rsBuste, dynamic TipoDoc, dynamic prefissoFile, dynamic areaSign, dynamic pageOrientation, dynamic path) { }


	void ShowError(string ErrText) {

		throw new ResponseRedirectException("../MessageBoxWin.asp?ML=yes&MSG=" + URLEncode(TruncateMessage(ErrText)) + "&CAPTION=Errore&ICO=2", Response);
	}

	//'-- ritorna un rs passata la query
	TSRecordSet GetRS(string strSql)
	{

		//'on error resume next
		//dim obj
		//dim rs

		//set obj = server.CreateObject("ctldb.clsTabManage")
		//set rs = obj.GetRSReadFromQuery( cstr(strSql ) , cstr(session("Session")(8)) )

		//set obj = nothing

		//set GetRS = rs
		//'err.clear

		return cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString);
	}

	void visualizzaPercentuale(int x) {

		htmlToReturn.Write($@"
			<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
			<html xmlns=""http://www.w3.org/1999/xhtml"">
			<head>
				<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
				<title>Loading</title>

				<style>
					body, html{{ background:#fff; font-family:Arial, Helvetica, sans-serif; color:#333;}}
					.main{{ width:400px; height:200px; /*background:#1B1C1C;*/ margin:0 auto; padding:20px 20px 20px 20px;}}
					.loadingbox{{ width:300px; height:30px; margin:10px 0px 0px 50px; border:5px solid #ccc; /*#323f4f; background:#323f4f*/ background:#333 url(./LoadingBar.png) no-repeat;}}
					.loading{{ width:300px; height:30px; background: url(./bg.png) top left no-repeat; margin:auto;}}
					.end{{ background:#333; height:30px;}}
					.button_center {{margin:0 auto;}}
					p{{ text-align:center; color:#333; font-size:12px;}}
					span{{color:#666; text-align:center; font-size:18px; font-weight:bold;}}
					h1{{ font-size:16px; font-weight:normal; text-align:center;}}
					.completata{{color:#ececec; padding:7px; text-align:center}}
					.riepilogo{{ margin: 0 auto;}}
					ul{{ list-style-type:none;}}
					li{{ padding-left:120px;}}
					.red{{ color:#990000;}}

					.classe_tabella_errori {{ text-align:left; border:1px solid #ccc; border-collapse:collapse;   }}
					.classe_tabella_errori th {{ background: #ccc; color: #333; padding:7px; text-aglign:center }}

					.classe_tabella_errori td {{ padding: 7px }}

					.tr_dispari {{ background: #ececec; }}

				</style>

				<link rel=""stylesheet"" href=""../Themes/caption.css"" type=""text/css""/>
				<link rel=""stylesheet"" href=""../Themes/buttonbar.css"" type=""text/css""/>


				<script type=""text/javascript"">

						function OnBeforeUnLoad () 
						{{
							var xmlhttp;
							var dateNoCache;

							xmlhttp=new XMLHttpRequest();
							dateNoCache = new Date().getTime();

							xmlhttp.open(""GET"",""pulisciSessioneBuste.asp?nocache="" + dateNoCache,false);
							xmlhttp.send(null);
						}}

						function sleep(milliseconds) {{
						var start = new Date().getTime();
						for (var i = 0; i < 1e7; i++) {{
							if ((new Date().getTime() - start) > milliseconds){{
							break;
							}}
						}}
						}}

					</script>


			</head>

			<body id=""body""> 

				<table width=""100%"" class=""Caption"" id="""" border=""0"" cellspacing=""0"" cellpadding=""0"">
					<td width=""100%"">
						" + ApplicationCommon.CNV("Importazione buste firmate") + $@"
					</td>
				</tbody>
				</table>

				<img style=""display:none"" src=""LoadingBar.png""/>
				<img style=""display:none"" src=""bg.png""/>

				<div class=""main"" id=""main"">

		");
		if (x == -100) {
			//'call pulisci_e_scarica()
			htmlToReturn.Write($@"
							<!-- <p><span>100%</span></p>	 -->

							<input type=""hidden"" id=""esito"" value=""fine""/>

							<div class=""loading end"">
								<p class=""completata"">
									" + ApplicationCommon.CNV("Elaborazione terminata") + $@"
								</p>
							</div>
							<p style=""color:#333"">

			");

			//'-- tabella degli errori
			Dictionary<string, string> collezione = session["lista_file"];

			string output;
			int totErr;

			output = "";
			totErr = 0;

			Dictionary<string, string>.KeyCollection chiavi = collezione.Keys;
			Dictionary<string, string>.ValueCollection elementi = collezione.Values;

			//'-- elaboro 1 file alla volta vedendo il prossimo non ancora elaborato
			for (int i = 0; i <= collezione.Count - 1; i++) { //To collezione.Count - 1

				string chiave = chiavi.ElementAt(i);
				string item = elementi.ElementAt(i);

				//'-- se l'elemento � in errore
				if (!string.IsNullOrEmpty(CStr(item)) && CStr(item) != "OK") {

					totErr = totErr + 1;

					string[] fv = Strings.Split(chiave, @"\");
					string nomeFile = fv[fv.Length - 1];

					if (totErr % 2 == 0) {
						output = output + "<tr>";
					} else {
						output = output + @"<tr class=""tr_dispari"">";
					}

					output = output + "<td>";
					output = output + nomeFile;
					output = output + "</td>";

					output = output + "<td>";
					output = output + item;
					output = output + "</td>";

					output = output + "</tr>";
				}

			}

			if (!string.IsNullOrEmpty(output)) {

				htmlToReturn.Write($@"<table class=""classe_tabella_errori"">");

				htmlToReturn.Write($@"<tr align=""center"">");
				htmlToReturn.Write($@"<td colspan=""2"">");
				htmlToReturn.Write($@"<strong>");
				htmlToReturn.Write(ApplicationCommon.CNV("Riepilogo anomalie"));
				htmlToReturn.Write($@"</strong>");
				htmlToReturn.Write($@"</td>");
				htmlToReturn.Write($@"<tr>");

				htmlToReturn.Write($@"<th>");
				htmlToReturn.Write($@"<strong>Nome file</strong>");
				htmlToReturn.Write($@"</th>");

				htmlToReturn.Write($@"<th>");
				htmlToReturn.Write($@"<strong>Errore</strong>");
				htmlToReturn.Write($@"</th>");

				htmlToReturn.Write($@"</tr>");

				htmlToReturn.Write(output);

				htmlToReturn.Write($@"</table>");

				traceInLogUtente(1, "", "3 Click SIGN concluso con anomalie: " + output, HttpContext, session);

			} else {

				traceInLogUtente(1, "", "3 Click SIGN concluso senza errori", HttpContext, session);

			}

			htmlToReturn.Write($@"

							</p>
							<script type=""text/javascript"">
								try {{ opener.RefreshDocument('/" + CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"]) + $@"/ctl_library/document/'); }} catch(e) {{}}
							</script>

			");
		} else {
			htmlToReturn.Write($@"

					<input type=""hidden"" id=""esito"" value=""inCorso""/>

					<p>
						<span>Elaborati " + session["tot_elaborati"] + $@" di " + session["tot_record"] + $@"</span>
					</p>


						<script type=""text/javascript"">

							var intervallo;
							//intervallo = window.setInterval( function(){{ricarica()}} ,100);				
							intervallo = window.setTimeout( ricarica ,1);

							function ricarica()
							{{
								//window.clearInterval(intervallo);
								window.location = '/" + CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"]) + $@"/ctl_Library/pdf/importa_zip_pdf.asp?ID=';

							}}

						</script>


					<div class=""loadingbox"" style=""background-position: " + (300 / 100) * CLng(x) + $@"px;"">
						<div class=""loading"">
						</div>
					</div>			

			");
			htmlToReturn.Write("<p>" + ApplicationCommon.CNV("Elaborazione in corso") + "</p>");

		}

		htmlToReturn.Write($@"



				</div>

		");
		if (x <= 0) {
			htmlToReturn.Write($@"

			</body>
			</html>
			");

		}

		//Response.Flush 

	}

	void viewMessage(string msg) {
		htmlToReturn.Write($@"<script language=""javascript"">");
		htmlToReturn.Write($@" //try {{ opener.RefreshContent(); }} catch(e) {{}}");
		htmlToReturn.Write($@"</script>");
		//htmlToReturn.Flush 

		redirectJS("../MessageBoxWin.asp?MSG=" + ApplicationCommon.CNV(msg) + "&CAPTION=ESITO");

		throw new ResponseEndException(htmlToReturn.Out(), Response, msg);
	}

	void message(string msg) {
		throw new ResponseRedirectException("../MessageBoxWin.asp?ML=yes&MSG=" + URLEncode(TruncateMessage(msg)) + "&CAPTION=Info&ICO=1", Response);
	}

	void redirectJS(string page) {

		htmlToReturn.Write($@"<script language=""javascript"">");
		htmlToReturn.Write($@"window.location.href = '" + CStr(page).Replace(@"'", @"\'") + "';");
		htmlToReturn.Write($@"</script>");
		//Response.flush

		throw new ResponseEndException(htmlToReturn.Out(), Response, page);

	}

	//'--attiva l'esecuzione dei processi su un documento nuovo
	bool ExecuteProcess(string strProcessName, string strDocType, string strDocKey) {

		//ExecuteProcess = True

		//Dim obj 
		dynamic vRetCode;
		string strDescrRetCode = "";

		string mp_strConnectionString = ApplicationCommon.Application["ConnectionString"];

		//Set obj = server.CreateObject("ctlprocess.clselab")
		eProcurementNext.CtlProcess.ClsElab obj = new eProcurementNext.CtlProcess.ClsElab();

		try {
			vRetCode = obj.Elaborate(strProcessName, strDocType, strDocKey, CLng(session["idpfu"]), ref strDescrRetCode, 1, mp_strConnectionString);

		} catch (Exception ex) {
			TracciaErrore("genera_buste.asp.ExecuteProcess(" + strProcessName + ")", ex.Message, 0, "ExecuteProcess()");
			return false;
		}

		//'-- se c'� stato un errore gestito
		if (vRetCode != ELAB_RET_CODE.RET_CODE_OK)
		{
			TracciaErrore("genera_buste.asp.ExecuteProcess(" + strProcessName + ")", strDescrRetCode, 0, "ExecuteProcess()");
			//strOutput= strDescrRetCode
			return false;
		}

		return true;

	}

	void TracciaErrore(string source, string text, int tipo, string oggetto)
	{
		//Dim l
		//set l = CreateObject("AFLLogSrvc.logSrvc")

		//If Not (l Is Nothing) Then
		//	l.LogNTEvent CStr(text), CStr(oggetto), CStr(source), clng(1), CLng(0)
		//end if

		//Set l = Nothing
		TraceErr(new Exception(), ApplicationCommon.Application.ConnectionString, CStr(text) + CStr(oggetto) + CStr(source) + CLng(1) + CLng(0));
	}

	void execSQL(string strSql) {

		//dim obj

		//set obj = server.CreateObject("ctldb.clsTabManage")
		//call obj.ExecSql( cstr(strSql) , cstr(session("Session")(8)) )

		//set obj = nothing

		cdf.Execute(strSql, ApplicationCommon.Application.ConnectionString);

	}

	void finishImport(string codiceOperazione)
	{

		//on error resume next

		clearOperation(codiceOperazione);

		session["check_warning_lotti"] = "";
		session["tot_record"] = CLng(-1);
		session["id_start"] = CLng(-1);
		session["guid_session_zip"] = "";
		session["zip_pdf_url"] = "";
		session["lista_file"] = null;
		//'session("ID") = ""
		//'session("dir_temp_lavoro") = ""
		//'session("percentuale") = clng(0)

		//on error goto 0

	}

	void clearOperation(string guidOperazione) { }

	string elaboraFile(string strPathFile, string area, string strIdentity, string tabellaFirma, string idDoc) {

		string stringToReturn;

		Chilkat.Crypt2 crypt;
		string strValueHash;
		string strcause;
		string pdfOrigin;
		string[] arr;
		TSRecordSet rsObj;
		string strImprontaSave;
		string strColAttachSign;

		//'area = "F1"
		//'strIdentity = "IdHeader"
		//'tabellaFirma = "Document_Microlotto_Firme"

		if (!string.IsNullOrEmpty(area)) {
			area = area + "_";
		}

		string strColName = area + "SIGN_HASH";
		stringToReturn = "";

		strColAttachSign = "SIGN_ATTACH";
		strColAttachSign = area + strColAttachSign;

		//set fs=Server.CreateObject("Scripting.FileSystemObject")
		if (!CommonStorage.ExistsFile(strPathFile)) { //not fs.FileExists(strPathFile) ) {
			stringToReturn = "il file non esiste";
			return stringToReturn;
		}
		//set fs=nothing

		//on error goto 0

		crypt = new Chilkat.Crypt2();
		string licenza = ConfigurationServices.GetKey("Chilkat:UNLOCK_KEY", "");
		bool ChilkatActivated = crypt.UnlockComponent(licenza); //'licenza
		if (!ChilkatActivated)
		{
			throw new Exception("Chilkat Library not activated");
		}
		//'se il file � un pdf
		if (Strings.LCase(Strings.Right(strPathFile, 3)) == "pdf") {

			strcause = invokeLibrary("SIGN", strPathFile, "", "", "true");

			if (Strings.Split(strcause, "#")[0] != "1") {

				//' --- ERRORE SERVER
				stringToReturn = Strings.Split(strcause, "#")[1];
				return stringToReturn;

			} else {

				//'--recupero hash
				strValueHash = Strings.Split(strcause, "#")[1];

			}

		} else { //'se il file � un p7m

			arr = Strings.Split(strPathFile, @"\");
			pdfOrigin = arr[arr.Length - 1];
			pdfOrigin = Strings.Left(strPathFile, strPathFile.Length - pdfOrigin.Length) + "senzaLaFirma.pdf";

			//'Estraggo il file originale dal p7m e verifico se � corrotto
			if (crypt.VerifyP7M(strPathFile, pdfOrigin) == true) {

				//'Creiamo il txt a partire dal pdf estratto dal p7m e ne calcoliamo l'hash
				strcause = invokeLibrary("SIGN", pdfOrigin, "", "", "false");

				if (Strings.Split(strcause, "#")[0] != "1") {

					//' --- ERRORE SERVER
					stringToReturn = Strings.Split(strcause, "#")[1];
					return stringToReturn;

				} else {

					//'-- HASH DEL FILE
					strValueHash = Strings.Split(strcause, "#")[1];

				}
			} else {

				//'-- BUSTA P7M NON VALIDA
				stringToReturn = "Busta P7M non valida";
				return stringToReturn;

			}

		}

		//'--recupero hash del pdf salvato sul documento
		rsObj = GetRS(CStr("Select " + strColName.Replace(" ", "") + "  From " + tabellaFirma.Replace(" ", "") + " Where " + strIdentity.Replace(" ", "") + " = " + CLng(idDoc)));
		strImprontaSave = CStr(rsObj.Fields[strColName]);

		//'--se il file coincide allora salvo il file come allegato e la sua codifica tecnica sul documento
		if (strValueHash == strImprontaSave) {

			//'--salvo il file in base dati
			strcause = "salvo il file in base dati";
			string[] aInfo;
			string techValue;

			//on error resume next
			try {
				techValue = InsertCTL_Attach(strPathFile);
			} catch (Exception ex) {
				//'-- Scriviamo l'errore nell'event viewer
				//n = err.number
				string s = ex.Source;
				string d = ex.Message;

				TraceErr(ex, ApplicationCommon.Application.ConnectionString, s + d + "n" + "importa_zip_pdf.asp");

				stringToReturn = "Errore nel caricamento del file in base dati";
				return stringToReturn;
			}

			//on error goto 0

			aInfo = Strings.Split(techValue, "*");

			string strFileName = aInfo[0];

			//'--recupero type file
			string strType = aInfo[1];

			//'--recupero guid
			string strHash = aInfo[3];

			string strInfoTechAttach = techValue;

			dynamic idPfu = session["idPfu"];

			//'-- recupero dell'idAzi dell'utente loggato
			TSRecordSet tempRs = GetRS(CStr("select idAzi from aziende a,profiliutente b where a.idazi = b.pfuidazi and b.idpfu = " + idPfu));

			string idAzi = "";

			if (tempRs.RecordCount > 0) {

				tempRs.MoveFirst();
				idAzi = CStr(tempRs.Fields["idAzi"]);

			}

			//Set tempRs = nothing
			string mode;

			if (UCase(Strings.Right(strPathFile, 3)) == "P7M") {
				mode = "VERIFICA_P7M";
			} else {
				mode = "VERIFICA_PDF";
			}

			//'-- verifica estesa di firma digitale
			string esito = invokeLibrary(mode, strPathFile, strHash, idAzi, "true");

			if (esito != "" && Strings.Split(esito, "#")[0] != "1") {

				//' --- ERRORE 
				stringToReturn = Strings.Split(esito, "#")[1];
				return stringToReturn;

			} else {


				//'-- se la verifica di firma � andata a buon fine andiam oa controllare ( se la sys lo prevede ) se il file � firmato da una CA autorizzata. se cos� non fosse blocchiamo.
				stringToReturn = isValidCertificatore(strHash);
				if (!string.IsNullOrEmpty(stringToReturn)) {
					stringToReturn = ApplicationCommon.CNV(stringToReturn);
				}


			}

			if (string.IsNullOrEmpty(stringToReturn)) {
				//'--aggiorno sul documento la codifca tecnica dell 'allegato di firma
				string strSql = "update " + tabellaFirma.Replace(" ", "") + " set " + Replace(strColAttachSign, " ", "") + "='" + strInfoTechAttach.Replace("'", "''") + "' Where " + strIdentity.Replace(" ", "") + " = " + CLng(idDoc);
				//'response.write strSql
				//'response.flush			
				execSQL(strSql);
			}
		} else {

			//'-- ALLEGATO NON CORRISPONDENTE AL PDF GENERATO
			stringToReturn = "Allegato non corrispondente al pdf generato";

		}

		return stringToReturn;

	}

	string invokeLibrary(string mode, string strPathFile, string strHashName, string idAzi, string issigned) {

		//on error resume next

		//dim obj
		//'Set obj = server.CreateObject("Html2Pdf.COMVerificaEstesaFirma.AFLinkSign")

		//Set obj = server.CreateObject("COMVerificaEstesaFirma.AFLinkSign")

		////'firmaEstesaCOM(mode As String, pdf As String, isSigned As String, signedfile As String, att_hash As String, attIdMsg As String, attOrderFile As String, attIdObj As String, idAzi As String) As String

		//invokeLibrary = ""
		//invokeLibrary = obj.firmaEstesaCOM( cstr(mode), strPathFile,issigned,strPathFile,strHashName, "","","",idAzi)

		//if err.number <> 0 then
		//	invokeLibrary = "0#" & err.description
		//end if

		//set obj = nothing

		//on error goto 0
		string accessGuid = insertAccessBarrier(session, HttpContext);
		return newfirmaEstesaCOM(mode, strPathFile, strHashName, idAzi, issigned, HttpContext, accessGuid);

	}

	

	string InsertCTL_Attach(string strObjFile)
	{

		//dim objDB

		//set objDB = server.CreateObject("ctldb.Lib_dbAttach")

		var objDB = new eProcurementNext.BizDB.LibDbAttach();

		string accessGuid = insertAccessBarrier(session, HttpContext);

		return objDB.InsertCTL_Attach_FromFile(CStr(strObjFile), CStr(ApplicationCommon.Application.ConnectionString));

		//set objDB = nothing

	}


	string saveAttach(string directoryDest){

		try{
			if(Request.HasFormContentType && Request.Form.Files.Count > 0){
				IFormFileCollection files = Request.Form.Files;
				for (int i = 0; i < files.Count; i++)
				{
					IFormFile file = files[i];
					string filePath = System.IO.Path.Combine(directoryDest, file.FileName);
					using (System.IO.Stream fileStream = new FileStream(filePath, FileMode.Create))
					{
						file.CopyTo(fileStream);
					}

				}
			}
		}catch(Exception ex){

			//n = err.number
			string s = ex.Source;
			string d = ex.Message;

			TraceErr(ex, ApplicationCommon.Application.ConnectionString, s + d + "n" + "importa_zip_pdf.asp");

			if (ApplicationCommon.Application["dettaglio-errori"].ToLower() == "yes" ){
				htmlToReturn.Write(ex.Message);
			}else{
				htmlToReturn.Write(ApplicationCommon.CNV("INFO_UTENTE_ERRORE_PROCESSO") + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
			}

			throw new ResponseEndException(htmlToReturn.Out(), Response, "INFO_UTENTE_ERRORE_PROCESSO");

			//return ""
		}


		//on error goto 0

		if(Request.HasFormContentType && Request.Form.Files.Count > 0){

			//set ObjFile =  Upload.Files(1)
			IFormFile ObjFile = Request.Form.Files[0];

			//'-- controllo del file a taglia 0
			//if ObjFile.Size = 0 then

			//	on error resume next

			//	ObjFile.Delete
			//	Response.Write "<p><strong>File inviato corrotto o vuoto</strong></p>"

			//	err.Clear

			//	Response.end

			//}

			if(ObjFile.Length == 0){

				//ObjFile.Delete
				htmlToReturn.Write($@"<p><strong>File inviato corrotto o vuoto</strong></p>");

				//err.Clear

				throw new ResponseEndException(htmlToReturn.Out(), Response, "<p><strong>File inviato corrotto o vuoto</strong></p>");
			}

			//'-- conservo il nome del file pulito dal percorso
			string[] fv = Strings.Split(ObjFile.FileName, @"\");
			string fileOriginal = fv[fv.Length - 1];

			//'Se siamo non siamo in modalit� DEBUG (sviluppo) non validiamo il parametro
			if (UCase(ApplicationCommon.Application["debug-mode"]) != "SI" && UCase(ApplicationCommon.Application["debug-mode"]) != "TRUE" && UCase(ApplicationCommon.Application["debug-mode"]) != "YES") {

				if (Strings.InStr( 1, fileOriginal, CStr(@"/") ) > 0 ){

					//on error resume next

					//Set mp_objDB = CreateObject("ctldb.BlackList")
					eProcurementNext.BizDB.BlackList mp_objDB = new BlackList();

					//ObjSession = session("Session")
					//set ObjSession(0) = Request.QueryString
					//set ObjSession(1) = Request.form
					//set ObjSession(3) = request
					//set ObjSession(5) = session
					//set ObjSession(6) = application

					//'Aggiungo l'ip in blacklist collezionando le informazioni sull'attacco (a meno che non � attiva la sys di disattivablacklist)
					mp_objDB.addIp(mp_objDB.getAttackInfo(HttpContext, CStr(session["IdPfu"]), CStr("Tentativo di pathInjection")), session, CStr(ApplicationCommon.Application.ConnectionString));

					//set mp_objDB = nothing

					//'Se � presente NOMEAPPLICAZIONE nell'application
					if (!string.IsNullOrEmpty(CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"]))) {
						throw new ResponseRedirectException("/" + ApplicationCommon.Application["NOMEAPPLICAZIONE"] + "/blocked.asp", Response);
					}else{
						throw new ResponseRedirectException("/Application/blocked.asp", Response);
					}

					throw new ResponseEndException(htmlToReturn.Out(), Response, "");

				}


			}

			//err.Clear

			string[] arrSplit = Strings.Split(fileOriginal, ".");
			string estensione = arrSplit[arrSplit.Length - 1];

			if (estensione.ToUpper() != "ZIP" ){

				htmlToReturn.Clear();

				//ObjFile.Delete
				htmlToReturn.Write("Estensione '" + estensione + "' non consentita per il caricamento ZIP Buste Firmate");

				throw new ResponseEndException(htmlToReturn.Out(), Response, "");

			}


			return fileOriginal;

		}

		return "";

	}

	string isValidCertificatore( string hash ) {

		//'2 : Da settare sulla sys come default. aggiungo blocco certificatore su giro firma ( con o senza verifica hash, quindi anche se giroFirma = false )
		//'1 : Default per assenza della sys. Dove controlliamo l'hash ( giroFirma = true) , aggiungo blocco su certificatore
		//'0 : Comportamento attuale, senza blocco del certificatore


		string sysVerifica;
		string res;

		bool giroFirma;
		giroFirma = true;
		//'-- Il default � un OK
		res = "";


		sysVerifica = "";

		sysVerifica = CStr(ApplicationCommon.Application["VERIFICA_CERTIFICATORE"]);

		if (string.IsNullOrEmpty(sysVerifica) ){
			sysVerifica = "1";
		}

		if (sysVerifica == "0" ){
			res = "";
		}else{

			if ((giroFirma == true && sysVerifica == "1") || (sysVerifica == "2") ) {


				TSRecordSet rsCheck = GetRS(CStr("select top 1 isnull(isTrustedCA,1) as isTrustedCA, isnull(isCertificatoSottoscrizione,0) as isCertificatoSottoscrizione from CTL_SIGN_ATTACH_INFO with (nolock) where att_hash='" + hash.Replace("'", "''") + "' and isnull(isvalidsign,0) = 1 "));

				//'-- se il file non � firmato rispondo true non avendo a disposizione il certificatore
				if (rsCheck.RecordCount == 0 ){
					res = "";
				}else{

					rsCheck.MoveFirst();

					//'-- se il file � firmato e i flag per trustedCA e certificatoSottoscrizione sono a true
					if (CInt(rsCheck.Fields["isTrustedCA"]) == 1 && CInt(rsCheck.Fields["isCertificatoSottoscrizione"]) == 1 ){

						res = "";

					}else{

						//'-- Specializzo l'output in 3 possibili messaggi di blocco.
						if (CInt(rsCheck.Fields["isTrustedCA"]) == 0 && CInt(rsCheck.Fields["isCertificatoSottoscrizione"]) == 0 ){
							res = "errore_isTrustedCA_e_isCertificatoSottoscrizione"; //'-- Non � una CA valida E non � un certificato di sottoscrizione
						}else if( CInt(rsCheck.Fields["isTrustedCA"]) == 0 ){
							res = "errore_isTrustedCA"; //'-- Non � una CA valida
						}else if( CInt(rsCheck.Fields["isCertificatoSottoscrizione"]) == 0 ){
							res = "errore_isCertificatoSottoscrizione"; //'-- Non � un certificato di sottoscrizione
						}

					}
                
				}

				//Set rsCheck = Nothing

			}else{

				res = "";

			}

		}

		return res;

	}


}
@Html.Raw(htmlToReturn.Out())
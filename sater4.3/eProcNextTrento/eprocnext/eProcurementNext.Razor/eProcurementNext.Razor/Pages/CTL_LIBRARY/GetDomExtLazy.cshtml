@page "/CTL_LIBRARY/GetDomExtLazy.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.trace_in_log_utenteModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.GetDomExtLazyModel;
@using Microsoft.VisualBasic;
@using static eProcurementNext.CommonDB.Basic;
@using static eProcurementNext.Session.SessionMiddleware
@model eProcurementNext.Razor.Pages.CTL_LIBRARY.GetDomExtLazyModel
@*
<!-- #Include File="./Functions/verificabrowser.inc" -->
<!-- #Include File="./Functions/CheckSession.inc" -->
<!-- #INCLUDE FILE="./functions/security.inc" -->
<!-- #Include File="./functions/trace_in_log_utente.inc" -->

*@
@{
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new EprocResponse();
}
@{

	//'-- *********************************************************************
	//'-- * Versione=1&data=2021-04-20&Attivita=371896&Nominativo=Leone       *
	//'-- *********************************************************************

	string param_filter = CStr(GetParamURL(Request.QueryString.ToString(),"FILTER"));
	string param_domain = CStr(GetParamURL(Request.QueryString.ToString(),"DOMAIN"));
	string param_format = CStr(GetParamURL(Request.QueryString.ToString(),"FORMAT"));
	string param_init = CStr(GetParamURL(Request.QueryString.ToString(),"INIT"));	//'-- 0 o 1


	//'VALIDAZIONE DELL'INPUT UTENTE 
	validate( "DOMAIN", param_domain , TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 1,HttpContext,session);
	validate("INIT", param_init, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 1, HttpContext, session);
	validate("FORMAT", param_format, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0, HttpContext, session);
	validate("FILTER", param_filter, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_FILTROSQL, "", 0, HttpContext, session);

	//on error resume next

	Response.ContentType = "application/json";

	//dim ObjSession
	//Dim objLib 
	//dim objdom

	//ObjSession = session("Session")
	//set ObjSession(0) = Request.QueryString
	//set ObjSession(1) = Request.form
	//set ObjSession(5) = session
	//set ObjSession(6) = application
	//ObjSession(9) = application("Server_RDS")
	//ObjSession(10) = session("Funzionalita")
	//set ObjSession(13) = objNewDizMlng("MultiLinguismo")

	LibDBDomains objLib = new LibDBDomains();
	int lastPosition = 0;
	int totElem = 0;
	int nextPosition = 0;
	string listValues = "";
	try
	{
		ClsDomain objdom = objLib.GetFilteredDomExt(CStr(param_domain), CStr(session[eProcurementNext.Session.SessionProperty.SESSION_SUFFIX]), CLng(session[eProcurementNext.Session.SessionProperty.IdPfu]), CStr(param_filter), CInt(0), ApplicationCommon.Application.ConnectionString, session);


		TSRecordSet rsDati;
		try
		{
			rsDati = objdom.GetRsElem();

			if ( rsDati == null) {
				gestioneErrore("Recordset nullo", null, htmlToReturn);
			}

			if ( param_init == "1" ) {
				lastPosition = 1;
				session["dom_ext_lazt_last_position"] = 0; ////'--pulisco la sessione
				session.Save();
			}else{
				lastPosition = session["dom_ext_lazt_last_position"];
			}

			totElem = rsDati.RecordCount;

			////'-- diamo in output blocchi di 1000
			//'nextPosition = lastPosition + 199
			//'nextPosition = lastPosition + 299
			//'nextPosition = lastPosition + 2
			nextPosition = lastPosition + 999;

			if ( nextPosition > totElem ) {
				nextPosition = totElem;
			}

			listValues = "";
			int curPos = 0;

			for( curPos = lastPosition; curPos <= nextPosition; curPos++){

				rsDati.AbsolutePosition = curPos - 1;
				rsDati.position = curPos - 1;

				if ( rsDati.EOF == false ) {

					bool bIns = true;
					try{
						if (CInt(rsDati.Fields["DMV_Deleted"]) == 1)
						{
							if (!param_format.Contains("Y", StringComparison.Ordinal))
							{
								bIns = false;
							}
						}
					}
					catch
					{

					}
					if ( bIns ) {

						string visValue = "";

						string KeyElem = CStr(rsDati.Fields["DMV_Cod"]);
						string descElem = CStr(rsDati.Fields["DMV_DescML"]);
						string codExElem = CStr(rsDati.Fields["DMV_CodExt"]);

						visValue = descElem;

						if ( param_format.Contains("C", StringComparison.Ordinal)) {
							visValue = codExElem;
						}

						if ( param_format.Contains("D", StringComparison.Ordinal)) {

							if ( !string.IsNullOrEmpty(visValue)) {
								visValue = visValue + " - ";
							}

							visValue = visValue + descElem;

						}



						listValues = listValues + @"{""key"":""" + escapeJson(KeyElem) + @""",""desc"":""" + escapeJson(visValue) + @"""},";

					}

				}else{
					curPos = nextPosition;
					break;
				}

			}

			session["dom_ext_lazt_last_position"] = curPos;

			listValues = Strings.Left(listValues, listValues.Length - 1);
		}
		catch(Exception ex)
		{
			gestioneErrore("Recupero recordset", ex, htmlToReturn);
		}
	}
	catch(Exception ex)
	{
		gestioneErrore("Recupero dati", ex, htmlToReturn);
	}


	int percentage = CInt((nextPosition / totElem) * 100);



	string strJsonOut = @"{""percentage"":" + CStr(percentage) + @",""currentStatus"":""OK"", ""output"":[" + listValues + @"]}";

	htmlToReturn.Write(strJsonOut);
	//response.end

	void gestioneErrore(string contesto, Exception? ex, EprocResponse htmlToReturn)
	{
		string? n = ex != null ? ex.HelpLink : "";
		string? s = ex != null ? ex.Source : "";
		string? d = ex != null ? ex.Message : "";

		
		TraceErr(ex, ApplicationCommon.Application.ConnectionString,contesto);
		//TraceErr s, d, n, ProgID

		string strJsonOut = @"{""currentStatus"":""ERROR"", ""error"":{""description"":""##error##""}}";
		string strMsgError = "";


		traceInLogUtente(0, "GetDomExtLazy.asp", "Descrizione:" + d + " --- QueryString:" + GetQueryStringFromContext(Request.QueryString), HttpContext, session);

		if (CStr(ApplicationCommon.Application["dettaglio-errori"].ToLower()) == "yes" || CStr(ApplicationCommon.Application["dettaglio-errori"].ToLower() == "si")) {

			strMsgError = "contesto:" + contesto + ", " + "desc:" + d + ", " + "number:" + n + ", " + "source:" + s;

		} else {

			strMsgError = " Errore in data : " + DateAndTime.Now.ToString();

		}

		strJsonOut = strJsonOut.Replace("##error##", escapeJson(strMsgError));

		Response.StatusCode = 500;
		htmlToReturn.Write(strJsonOut);
		//response.end
	}

    string escapeJson( string str ){
		string strToReturn;
		//'--ripulisco i caratteri non ammessi
		strToReturn = NormString(str);

		string acapo = Strings.Chr(13).ToString() + Strings.Chr(10).ToString();

		strToReturn = strToReturn.Replace($@"\", $@"\\");
		strToReturn = strToReturn.Replace($@"""", $@"\""");
		strToReturn = strToReturn.Replace(acapo, $@" ");

		return strToReturn;

	}

    string NormString( string str ){
		
		string strOk = @" ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.:,;''|!""$%&/()=?^+*";
	
		string Tmp = str;
	
		string ValueOut = "";

		while (!string.IsNullOrEmpty(Tmp)){
	
	
			string NCH = Strings.Left(Tmp, 1);
        
			if(strOk.Contains((NCH).ToUpper(), StringComparison.Ordinal )){
    
				ValueOut = ValueOut + NCH;
			}
        
			Tmp = Strings.Right(Tmp, Tmp.Length - 1 );

		}

		return ValueOut;
	
	}


}
@Html.Raw(htmlToReturn.Out())
@page "/CTL_LIBRARY/DOCUMENT/OpenDocFromDossier.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.HTML.BasicFunction;
@using Microsoft.VisualBasic;
@using System.Data.SqlClient
@using static  eProcurementNext.CommonDB.CommonDbFunctions;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel
@using static eProcurementNext.Razor.Pages.Functions.costanti;
@inject eProcurementNext.Application.IEprocNextApplication _application;
@inject eProcurementNext.DashBoard.IViewer _viewer;
@inject IConfiguration configuration;
@model eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.OpenDocFromDossierModel;
@using static eProcurementNext.Session.SessionMiddleware
@{
	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
    EprocResponse htmlToReturn = new(GetParamURL(HttpContext.Request.QueryString.ToString(), "XML_ATTACH_TYPE"));
}
@{
	//throw new ResponseRedirectException("document.asp?JScript=" + DocName + "&DOCUMENT=" + DocName + "&MODE=OPEN&IDDOC=" + idDoc, Response);

	var sqlParams = new Dictionary<string, object?>();
	string URL = string.Empty;
	string idDoc = GetParamURL(Request.QueryString.ToString(), "IDDOC");

	//on error resume next

	string DocName = GetParamURL(Request.QueryString.ToString(), "DOCUMENT");

	validate("DOCUMENT", GetParamURL(Request.QueryString.ToString(), "DOCUMENT"), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0, HttpContext, session);
	validate( "IDDOC", GetParamURL(Request.QueryString.ToString(), "IDDOC") , TIPO_PARAMETRO_NUMERO, 0, "", 0, HttpContext, session);
	//'-- se il tipo di documento non e' passato si desume che viene recuperato dal dossier
	if (string.IsNullOrEmpty(DocName)) 
	{
		TSRecordSet rs;
		//'-- recupera dal dossier l'url della pagina da aprire
		sqlParams.Add("@idDoc", CInt(idDoc));
		try
		{
			rs = cdf.GetRSReadFromQuery_("select msgIdDcm, msgIdCDO from Messaggi where IdMsg = @idDoc", ApplicationCommon.Application.ConnectionString, sqlParams);
		} 
		catch 
		{
			ShowError("Errore in recupero documento");
		}

		try 
		{
			if (rs.RecordCount == 0) 
			{
				rs = cdf.GetRSReadFromQuery_("select dcmIType, dcmiSubType, dcmURL from Document d inner join TAB_MESSAGGI_FIELDS m on m.iType = d.dcmIType and m.iSubType = d.dcmIsubType where IdMsg = @idDoc", ApplicationCommon.Application.ConnectionString, sqlParams);
			} 
			else 
			{
				sqlParams.Clear();
				sqlParams.Add("@msgIdDcm", CInt(rs["msgIdDcm"]!));
				rs = cdf.GetRSReadFromQuery_("select dcmIType, dcmiSubType, dcmURL from Document where IdDcm = @msgIdDcm", ApplicationCommon.Application.ConnectionString, sqlParams);
			}
		} 
		catch 
		{
			ShowError("Errore in recupero documento");
		}

		if (rs.RecordCount == 0)
		{
			ShowError("Errore in recupero documento");
		}

		URL = Strings.Replace(PathMessaggio(rs.Fields["dcmIType"], rs.Fields["dcmiSubType"]), "'", "") + "?";

		if (string.IsNullOrEmpty(URL) || URL == "?") 
		{
			URL = CStr(rs["dcmURL"]);
		}

		if (IsNull(URL))
		{
			URL = string.Empty;
		}

		if (Trim(URL) == "string.Empty")
		{
			ShowError( "Non è presente la visualizzazione WEB");
		}

		URL = $"../{URL}";

		if (CInt(rs["dcmIType"]!) == 55 )
		{
			//'-- documento generico
			//'URL=URL & "?lIdMsgPar=" & idDoc & "&StrCommandPar=OPENDOC'+'&lITypePar='+iType+'&lISubTypePar='+iSubType+'&lIdmpPar=2&OnlyRead=1&IdPfuDossier=1';

			URL = $"../../Aflcommon/FolderGeneric/OpenDoc.asp?lIdMsgPar={idDoc}&Name=&lIdmpPar=1&StrCommandPar=OPENDOC";
		}
		else
		{
			if (CInt(rs["dcmIType"]!) == 1000 )
			{
				sqlParams.Clear();
				sqlParams.Add("@idDoc", CInt(idDoc));
				rs = cdf.GetRSReadFromQuery_("select msgIdCDO from Messaggi where IdMsg= @idDoc", ApplicationCommon.Application.ConnectionString, sqlParams);
				idDoc = CStr(rs["msgIdCDO"]);

				if (Strings.Right(URL, 1) != "&") 
				{
					URL = $"{URL}&Identificativo={idDoc}&IDMP=2&OnlyRead=1&IdPfuDossier=1&IDDOC={idDoc}";
				} 
				else 
				{
					URL = $"{URL}Identificativo={idDoc}&IDMP=2&OnlyRead=1&IdPfuDossier=1&IDDOC={idDoc}";
				}
			}
			else
			{    	
				if (Strings.Right(URL,1) != "&" )
				{
					URL = $"{URL}&Identificativo={idDoc}&IDMP=2&OnlyRead=1&IdPfuDossier=1&IDDOC={idDoc}";
				}
				else
				{
					URL = URL + $"Identificativo={idDoc}&IDMP=2&OnlyRead=1&IdPfuDossier=1&IDDOC={idDoc}";
				}
			}
		}
	}
	else
	{
		//'-- altrimenti si desume il documento dal nome
		string? dcmIType;
		string? dcmiSubType;
		int pInd;

		pInd = Strings.InStr(  1 , DocName , ";");

		//'-- se � persente il punto � virgola nel nome si assume ce sia della tipologia precedente
		if (pInd > 0)
		{
			DocName = Replace(DocName, "_", "-");

			dcmIType = Strings.Left( DocName , pInd -1) ;
			dcmiSubType = Strings.Mid(  DocName , pInd +1 ) ;

			URL = Strings.Replace(PathMessaggio(dcmIType, dcmiSubType), "'", "") + "?";

			if(string.IsNullOrEmpty(URL) || URL == "?")
			{
				TSRecordSet rs = cdf.GetRSReadFromQuery_("select * from Document where dcmIType = " + CLng(dcmIType) + " and dcmiSubType = " + CLng(dcmiSubType), ApplicationCommon.Application.ConnectionString);
				if (rs.RecordCount > 0 )
				{
					rs.MoveFirst();
					URL = CStr(rs["dcmURL"]);
				}
			}

			if (IsNull(URL))
			{
				URL = string.Empty;
			}

			if (Trim(URL) == string.Empty)
			{
				ShowError( "Non è presente la visualizzazione WEB");
			}

			URL = $"../{URL}";

			if (CInt(dcmIType) == 55 )
			{
				//'-- documento generico
				URL = $"../../Aflcommon/FolderGeneric/OpenDoc.asp?lIdMsgPar={idDoc}&Name=&lIdmpPar=1&StrCommandPar=OPENDOC";
			}
			else
			{
				URL = $"{URL}Identificativo={idDoc}&IDMP=2&OnlyRead=0&IdPfuDossier=&IDDOC={idDoc}";
			}
		}
		else
		{
			URL = $"document.asp?JScript={DocName}&DOCUMENT={DocName}&MODE=OPEN&IDDOC={idDoc}";  
		}
	}

	//'-- reindirizzo la pagina sull'apertura del documento
	//if (Strings.UCase(cstr(application("ACCESSIBLE"))) <> "YES" then
	//	Response.Redirect URL 
	//else
	if (Strings.UCase(CStr(ApplicationCommon.Application["SINGLEWIN"])) == "NO" )
	{
		Response.Redirect($"{URL}&lo=DOCUMENT");
	}
	else
	{
		Response.Redirect($"{URL}&lo=base");
	}

	void ShowError(string ErrText)
	{
		throw new ResponseRedirectException("../../ctl_library/MessageBoxWin.asp?ML=yes&MSG=" + URLEncode(TruncateMessage(ErrText)) + "&CAPTION=Errore&ICO=2", Response);
	}

	string PathMessaggio(dynamic iType, dynamic iSubType)
	{
		string PathMessaggioRet = string.Empty;

		switch (CInt(iType))
		{
			//'Offerta
			case CONST_ITYPEOFFERTE :
				//'PathMessaggio = "'../AFLSupplier/FolderOfferte/formOfferta.asp'"
				PathMessaggioRet = "'../AFLBuyer/FolderRdoBis/formOffertabis.asp'";
				break;
			//'Promozione
			case CONST_ITYPEPROMOZIONE :
				PathMessaggioRet = "'../AFLSupplier/FolderPromozione/FormPromozione.asp'";
				break;

			//'Offerta in arrivo
			case CONST_ITYPEOFFERTEINARRIVO :
				switch (CInt(iSubType))
				{
					case const_TypeOffer_Gpo:
						//'Visualizzazione di una gpo
						PathMessaggioRet = string.Empty;
						break;
					case CONST_ITYPEOFFERTAPROMOZIONALE:
					case const_TypeOffer_Promozione:
					case const_TypeOffer_Transazione:
						//'Visualizzazione di una promozione
						PathMessaggioRet = "'../AFLBuyer/FolderOfferteInArrivo/formOfferteInArrivo.asp'";
						break;
					case const_TypeOffer_Offerta:
					case CONST_ITYPEUNDEFINED:
					case const_TypeOffer_Procurement:
						PathMessaggioRet = "'../AFLBuyer/FolderRdoBis/formOfferteInArrivobis.asp'";
						break;
					case CONST_ITYPEGPOINARRIVO:
						PathMessaggioRet="'../AFLBuyer/FolderGPOInArrivo/formGpoInArrivo.asp'"	;
						break;
					default:
						PathMessaggioRet = string.Empty;
						break;
				}
				break;

			//'Rdo	
			case CONST_ITYPERDO :
				//'PathMessaggio = "'../AFLBuyer/FolderRdo/formRdo.asp'"
				PathMessaggioRet = "'../AFLBuyer/FolderRdoBis/formRdoBIS.asp'";
				break;
			//'Rdo in arrivo
			case CONST_ITYPERDOINARRIVO :
				//'PathMessaggio = "'../AFLSupplier/FolderRdoArrivo/formRdoinArrivo.asp'"
				PathMessaggioRet = "'../AFLBuyer/FolderRdoBis/formRdoinArrivobis.asp'";
				break;
			//'		'AFLMessage
			//'		case CONST_ITYPEMSGINBOX : 
			//'			if clng(TypeFolder) <> CONST_ITYPEMSGSENDEDMAILBOX then
			//'				 PathMessaggio = "'formAFLMsg.asp'"
			//'			else
			//'				Nome_Metodo = "'" +strNomeLinck + "'"
			//'			end if	

			//'Rig
			case CONST_ITYPERIGINARRIVO : 
				PathMessaggioRet = "'../AFLSupplier/FolderRIG/formRiginArrivo.asp'";
				break;

			//'Rig
			case CONST_ITYPERIG : 
				PathMessaggioRet = "'../AFLBuyer/FolderRIG/formRig.asp'";
				break;

			//'Gpo fatte da web
			case CONST_ITYPEGPO : 
				PathMessaggioRet = "'../AFLSupplier/FolderGPO/formGpo.asp'";
				break;

			//'Ordine
			case CONST_ITYPEORDINI : 
				PathMessaggioRet = "'../AFLBuyer/FolderOrdine/formOrdine.asp'";
				break;

			//'Ordine in arrivo
			case CONST_ITYPEORDINIINARRIVO : 
				PathMessaggioRet = "'../AFLSupplier/FolderOrdiniArrivo/formOrdiniArrivo.asp'";
				break;

			case CONST_ITYPERDAINARRIVO	:
				PathMessaggioRet = "'../AFLBuyer/FolderRdaInArrivo/formRdaInArrivo.asp'";
				break;

			case CONST_ITYPERDA	:
				PathMessaggioRet = "'../AFLBuyer/FolderRda/formRda.asp'";
				break;

			//'RNA in arrivo
			case CONST_ITYPERIAINARRIVO	:
				PathMessaggioRet = "'../AFLSupplier/FolderRnaInArrivo/formRnaInArrivo.asp'";
				break;
			//'E.P. 20-06-2003 modifica per kpf 2239
			//'RIA in uscita TNA,TNA In Arrivo
			case CONST_ITYPERIAINUSCITA:
			case CONST_ITYPEDAC:
				PathMessaggioRet = "'../AFLSupplier/FolderTNA/formTNA.asp'";
				break;

			//'A.C. 03/12/2003 kpf 3203
			case CONST_ITYPERIA:	//'RNA
				PathMessaggioRet = "'../AFLBuyer/FolderRdoBis/FolderRna/formRia.asp'";
				break;

			//case CONST_ITYPERIAINARRIVO:	//'RNA In Arrivo
			//	PathMessaggioRet = "'../AFLSupplier/FolderRnaInArrivo/formRnaInArrivo.asp'";
			//	break;

			//'A.C. 09/02/2004 KPF 3558
			case CONST_ITYPEGENERIC:	//'Documento generico
				PathMessaggioRet = "'../AFLCommon/FolderGeneric/opendoc.asp'";
				break;

			default:
				PathMessaggioRet = "''";
				break;
		}
		return PathMessaggioRet;
	}
}
@Html.Raw(htmlToReturn.Out())
@page "/CTL_LIBRARY/DOCUMENT/uploadexcel.asp"
@inject eProcurementNext.Session.ISession session;
@inject ITabManage _tabManage;
@using eProcurementNext.CommonDB
@using eProcurementNext.Core.Storage
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using Microsoft.AspNetCore.Http.Features
@using Microsoft.VisualBasic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.importCSVModel
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.sendmailerrorModel
@using static eProcurementNext.Session.SessionMiddleware
@{
    CommonDbFunctions cdf = new();
    LoadSession(HttpContext, session);
    EprocResponse htmlToReturn = new();
    string res = string.Empty; // ritenuto che impostare = null sia pericoloso per come viene gestita la stringa nel codice
    DebugTrace dt = new();
}
@{
    htmlToReturn.Write($@"
        <html>
        <head>
	        <script src=""../jscript/getObj.js""></script>
	        <link rel=""stylesheet"" href=""../Themes/field.css"" type=""text/css""/>
        </head>
    ");

    string strTable = GetParamURL(Request.QueryString.ToString(), "TABLE");
    string strParam = GetParamURL(Request.QueryString.ToString(), "PARAM");//' "0#posizionale"
    string strSheet = GetParamURL(Request.QueryString.ToString(), "SHEET");//' "0#posizionale"
    string strField = GetParamURL(Request.QueryString.ToString(), "FIELD");
    string ATTIVA_IDPFU_PROCESS = GetParamURL(Request.QueryString.ToString(), "ATTIVA_IDPFU_PROCESS");

    string strFieldValue = CStr(session["IdPfu"]); //' Request.QueryString("FIELD_VALUE")
    string strProcess = GetParamURL(Request.QueryString.ToString(), "PROCESS");
    string formatoInput = CStr(GetParamURL(Request.QueryString.ToString(), "FORMATO_IMPORT"));

    if (!string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "OWNER_FIELD")))
    {
        strField = GetParamURL(Request.QueryString.ToString(), "OWNER_FIELD");
    }

    validate("TABLE", strTable, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);
    validate("PARAM", Replace(Replace(strParam, "#", ""), "=", ""), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);
    validate("SHEET", Replace(strSheet, "#", ""), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);
    validate("FIELD", strField, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);
    validate("PROCESS", Replace(Replace(strProcess, ",", ""), ":", ""), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);
    validate("ATTIVA_IDPFU_PROCESS", ATTIVA_IDPFU_PROCESS, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);

    //'---------------------------------------------------------------------------------------------------------------------------
    //'-- SE IL VALORE DEL PARAMETRO TABLE E' DIVERSO DA CTL_IMPORT VADO A VERIFICARE SE E' UN VALORE PREVISTO DALLA WHITELIST ---
    //'---------------------------------------------------------------------------------------------------------------------------
    if (!string.IsNullOrEmpty(strTable) && strTable.ToUpper() != "CTL_IMPORT")
    {

        if (passWhiteList("UPLOADEXCEL", "TABLE", strTable) == false)
        {
            traceAttack("Valore del parametro table non ammesso", session, HttpContext);
        }
    }

    string pathFolderAllegati = CStr(ApplicationCommon.Application["PathFolderAllegati"]);
    string tempFileName = string.Empty; // = CommonStorage.GetTempName();
    string filePath = string.Empty; // = System.IO.Path.Combine(pathFolderAllegati, tempFileName);

    IFormFileCollection? Files = Request.HasFormContentType ? Request.Form.Files : null;

    IFormFile ObjFile;

    if (Files is not null && Files.Count > 0)
    {
        ObjFile = Files[0];

        string estensione = CommonStorage.GetNormalizedFileExtension(ObjFile.FileName);
        tempFileName = CommonStorage.GetTempName(estensione);
        filePath = System.IO.Path.Combine(pathFolderAllegati, tempFileName);


        //'-- Se non si sta inviando un file excel o CSV o un XML
        if (estensione != "XLS" && estensione != "XLSX" && estensione != "ODS" && estensione != "CSV" && estensione != "XML")
        {
            htmlToReturn.Clear();

            // CommonStorage.DeleteFile(filePath);

            htmlToReturn.Write("Estensione file allegato non corretta");
            throw new ResponseEndException(htmlToReturn.Out(), Response, "Estensione file allegato non corretta");
            //Response.End
        }

        //'-- se � presente il parametro FORMATO_IMPORT l'utente deve inserire per forza quel formato ( sotto insieme comunque delle estensioni consentite )
        if (!string.IsNullOrEmpty(formatoInput))
        {
            if (estensione != formatoInput.ToUpper())
            {
                htmlToReturn.Clear();
                // CommonStorage.DeleteFile(filePath);
                //ObjFile.Delete
                htmlToReturn.Write("Estensione file allegato non corretta.Atteso: " + formatoInput.ToUpper());
                throw new ResponseEndException(htmlToReturn.Out(), Response, "Estensione file allegato non corretta.Atteso: " + formatoInput.ToUpper());
            }
        }

        // non serve più ????

        //if (!string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "CAPTION_ROW")))
        //{

        //    //'--costruisco la connection string per includere nell'import
        //    //'--anche l'intestazione del foglio excel
        //    strParam = strParam + @"#Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + filePath + @"; Excel 8.0; HDR=NO; IMEX=1;";

        //}

        //'-- Se � presente la sys aggiungiamo a i parametri il limite massimo di righe importabili da un foglio excel
        //'-- serve ad evitare attacchi all'applicazione con fogli excel esorbitanti o pi� in generale per evitare
        //'-- che si pianti l'applicazione

        try
        {
            if (estensione == "CSV")
            {
                if (CStr(ApplicationCommon.Application["DISATTIVA_XLS_CSV"]).ToUpper() == "YES")
                {
                    // CommonStorage.DeleteFile(filePath);
                    throw new ResponseRedirectException("../MessageBoxWin.asp?ICO=2&MSG=Formato CSV non ammesso. Caricare un file XLSX", Response);
                    //response.redirect "../MessageBoxWin.asp?ICO=2&MSG=Formato CSV non ammesso. Caricare un file XLSX"
                }
                else
                {
                    if (CopyFile(filePath))
                    {
                        ImportCsvInTable(filePath, strTable, strSheet + "#" + strParam + "", strField, strFieldValue, ApplicationCommon.Application.ConnectionString, session);
                        //CommonStorage.DeleteFile(filePath);
                    }
                }

            }
            //else if (Strings.Right(filePath.ToUpper(), 4) == ".XML")
            else if (estensione == "XML")
            {
                if (CopyFile(filePath))
                {
                    //'idDoc = cstr(request.querystring("id_doc"))
                    string typeDoc = CStr(GetParamURL(Request.QueryString.ToString(), "typeDoc"));
                    string openDocImported = CStr(GetParamURL(Request.QueryString.ToString(), "openDocImported"));  //'-- SI o NO
                    string procName = CStr(GetParamURL(Request.QueryString.ToString(), "PROC_NAME"));
                    string reloadOpener = CStr(GetParamURL(Request.QueryString.ToString(), "RELOAD_OPENER"));   //'-- SI o NO

                    validate("typeDoc", typeDoc, TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);
                    validate("PROC_NAME", procName.Replace(",", ""), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);

                    string urlDocXml = filePath;

                    string loginService = CStr(ApplicationCommon.Application["WEBSERVERAPPLICAZIONE_INTERNO"]) + "/aflinkws/documents.asmx/Login";
                    string urlService = CStr(ApplicationCommon.Application["WEBSERVERAPPLICAZIONE_INTERNO"]) + "/aflinkws/documents.asmx/deserializeXmlDocument";

                    string urlRead = CStr(ApplicationCommon.Application["WEBSERVERAPPLICAZIONE_INTERNO"]) + "/" + ApplicationCommon.Application["NOMEAPPLICAZIONE"] + "/CTL_LIBRARY/DOCUMENT/readXml.asp?";
                    urlRead = urlRead + "FILE-PATH=" + URLEncode(urlDocXml);
                    urlRead = urlRead + "&FILE-NAME=document.xml";

                    //'parametri = "DOCUMENT_XML=" & server.urlencode(urlDocXml) & "&COMMAND=DOC_NAME%23%3D%23" & typeDoc & "%23%40%23PROC_NAME%23%3D%23" & procName & "&PARAMS=&URL_SERVIZIO_LOGIN=" & server.urlencode(loginService) & "&URL_SERVIZIO=" &  server.urlencode(urlService) & "&CHIAMANTE=APPLICATION&FILE_XML=YES"
                    string parametri = "DOCUMENT_XML=" + URLEncode(urlRead) + "&COMMAND=DOC_NAME%23%3D%23" + typeDoc + "%23%40%23PROC_NAME%23%3D%23" + procName;

                    if (ATTIVA_IDPFU_PROCESS.ToUpper() == "YES" && CStr(session["idpfu"]) != "")
                    {
                        parametri = parametri + "%23%40%23IDPFU_PROCESS%23%3D%23" + CStr(session["idpfu"]);
                    }

                    parametri = parametri + "&PARAMS=&URL_SERVIZIO_LOGIN=" + URLEncode(loginService) + "&URL_SERVIZIO=" + URLEncode(urlService) + "&CHIAMANTE=APPLICATION&FILE_XML=YES";

                    dt.Write($"Parametri pre lettura XML: {parametri}", "uploadexcel.asp");

                    res = invokePage("invokeWS.aspx?" + parametri, CStr(ApplicationCommon.Application["strVirtualDirectoryWebServices"]));
                    //CommonStorage.DeleteFile(filePath);

                    dt.Write($"Risposta ottenuta da ivokeWS.aspx: {res}", "uploadexcel.asp");

                    if (Strings.Left(res, 2) == "0#")
                    {
                        //'-- errore
                        res = res.Replace("0#", "");
                        if (!string.IsNullOrEmpty(CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"])))
                        {
                            throw new ResponseRedirectException("/" + CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"]) + $@"/CTL_LIBRARY/MessageBoxWin.asp?ICO=2&MSG=" + URLEncode(TruncateMessage(res)), Response);
                        }
                        else
                        {
                            throw new ResponseRedirectException("/application/CTL_LIBRARY/MessageBoxWin.asp?ICO=2&MSG=" + URLEncode(TruncateMessage(res)), Response);
                        }
                    }
                    else
                    {
                        res = Replace(res, "1#", "");

                        if (CStr(openDocImported).ToUpper() == "SI")
                        {
                            string strPageRedirect = "ctl_library/document/document.asp?DOCUMENT=" + URLEncode(typeDoc) + "&MODE=SHOW&COMMAND=&IDDOC=" + URLEncode(res) + "&JScript=" + URLEncode(typeDoc);

                            string strPathRoot = "./";
                            strPageRedirect = strPathRoot + strPageRedirect + "&lo=base";

                            htmlToReturn.Write($@"
					            <script type=""text/javascript"" language=""javascript"">

						            try
						            {{
							            opener.location = '../path.asp?url=" + URLEncode(strPageRedirect) + $@"&KEY=document';
						            }}
						            catch(e)
						            {{
							            opener.location = opener.location;
						            }}

						            self.close();

					            </script>
			                ");

                            throw new ResponseEndException(htmlToReturn.Out(), Response, "");
                        }
                    }

                    htmlToReturn.Write($@"
                        <script type=""text/javascript"" language=""javascript"">
				                        try
				                        {{

                    ");

                    if (reloadOpener == "SI")
                    {
                        htmlToReturn.Write($@"
                            try
						        {{opener.location = opener.location;
						        }}
						        catch(e)
						        {{

                                }}
                        ");

                    }
                    htmlToReturn.Write($@"
                        self.close();

				                        }} catch ( e ) {{}};
			                        </script>
                    ");

                    throw new ResponseEndException(htmlToReturn.Out(), Response, "");
                }
            }
            else
            {
                //'-- Se si invia un foglio xlxs invece di un normale xls invochiamo la libreria
                //'-- .net di import
                if (estensione == "XLSX")
                {
                    if (CopyFile(filePath))
                    {
                        //eProcurementNext.Xls.Aflink_xslx? objExcel = null;
                        eProcurementNext.Xls.Aflink_xslx? objExcel = new eProcurementNext.Xls.Aflink_xslx();

                        bool errore = false;

                        //try
                        //{
                        //    objExcel = new eProcurementNext.Xls.Aflink_xslx();
                        //}
                        //catch
                        //{
                        //    errore = true;
                        //}

                        //if (!errore && objExcel != null)
                        //{

                        //string strDescrErr = "Importazione file XLSX nella tabella " + CStr(strTable);
                        string strDescrErr = $"Importazione file XLSX nella tabella {strTable}";

                        string ss = string.Empty;
                        try
                        {
                            ss = objExcel.import_xlsx_intable_posizionale(filePath, strTable, strField, CStr(strFieldValue), CStr(strParam), ApplicationCommon.Application.ConnectionString);
                        }
                        catch
                        {
                            errore = true;
                        }

                        if (!errore && !string.IsNullOrEmpty(ss))
                        {

                            string[] sss = ss.Split('#');

                            if (sss[0] == "0")
                            {

                                //l'errore ritornato come stringa lo lanciamo come eccezione
                                throw new Exception($"ImportXLSX.Aflink_xslx.import_xlsx_intable_posizionale : {sss[1]}");
                            }

                        }

                        //}
                    }
                }
                else
                {
                    throw new ResponseRedirectException("../MessageBoxWin.asp?ICO=2&MSG=Formato XLS non ammesso. Caricare un file XLSX", Response);
                }
            }

            //'-- se richiesto aggiorno il campo html
            if (!string.IsNullOrEmpty(GetParamURL(Request.QueryString.ToString(), "OWNER_FIELD")))
            {
                string filePathForUpload = System.IO.Path.Combine(pathFolderAllegati, ObjFile.FileName);

                try
                {
                    LibDbAttach temp = new();
                    temp.run(session, htmlToReturn, HttpContext, insertAccessBarrier(session, HttpContext), filePathForUpload, ObjFile.FileName);

                    //'-- genero lo script per aggiornare il campo chiamante

                    string qsField = EncodeJSValue(GetParamURL(Request.QueryString.ToString(), "FIELD"));

                    htmlToReturn.Write($@"

		                    <script type=""text/javascript"" language=""javascript"" >

			                    try
			                    {{

				                    var obj;
				                    var objUpdate;

				                    self.opener.getObj( '{qsField}' ).value = self.getObj( '{qsField}' ).value;

				                    obj = self.opener.getObj( 'DIV_{qsField}' );

				                    objUpdate= self.getObj( 'DIV_{qsField}' );

				                    //-- aggiorno il valore della DIV del FIELD
				                    obj.innerHTML = objUpdate.innerHTML;


			                    }} catch ( e ) {{}};

			                    try
			                    {{
				                    self.opener.ExecDocProcess( '{strProcess}' );

			                    }} catch ( e ) {{}};

			                    self.close();

		                    </script>
	                    ");
                }
                catch (Exception ex)
                {
                    htmlToReturn.Write($@"Errore in aggiornamento attach sul db");

                    htmlToReturn.Write(Environment.NewLine);

                    htmlToReturn.Write(ex.Message);

                    htmlToReturn.Write("</html>");
                    //response.End
                    throw new ResponseEndException(htmlToReturn.Out(), Response, "Errore in aggiornamento attach sul db");
                }

            }


            //'-- genero lo script per aggiornare il campo chiamante
            htmlToReturn.Write($@"

		            <script type=""text/javascript"" language=""javascript"" >

			            try
			            {{
				            self.opener.ExecDocProcess( '{strProcess}' );

			            }} catch ( e ) {{}};

			            self.close();

		            </script>

                ");

        }
        catch (Exception ex) when (ex is not EprocNextException)
        {
            string strDescError = ex.Message;

            if (Strings.InStr(strDescError, "Il file non contiene righe dati") > 0)
            {
                throw new ResponseRedirectException("../MessageBoxWin.asp?CAPTION=Errore nel caricamento&ML=yes&MSG=Il file non contiene righe dati", Response);
            }
            else if (Strings.InStr(strDescError, "Apro il file XLSX") > 0)
            {
                throw new ResponseRedirectException("../MessageBoxWin.asp?CAPTION=Errore nel caricamento&ML=yes&MSG=Foglio excel non valido. Il suo contenuto non risulta leggibile", Response);
            }
            else if (Strings.InStr(strDescError, "Recupero il foglio di lavoro") > 0)
            {
                throw new ResponseRedirectException("../MessageBoxWin.asp?CAPTION=Errore nel caricamento&ML=yes&MSG=Foglio excel non valido. Lettura dei dati fallita. Il suo contenuto non risulta leggibile", Response);
            }
            else
            {
                //'-- Scriviamo l'errore nell'event viewer

                eProcurementNext.CommonDB.Basic.TraceErr(ex, ApplicationCommon.Application.ConnectionString, strDescError);

                if ((CStr(ApplicationCommon.Application["dettaglio-errori"])).ToLower() == "yes" || (CStr(ApplicationCommon.Application["dettaglio-errori"])).ToLower() == "si" || CStr(ApplicationCommon.Application["dettaglio-errori"]) == "")
                {
                    throw new ResponseRedirectException("../MessageBoxWin.asp?CAPTION=Errore nel caricamento&MSG=" + URLEncode(TruncateMessage(strDescError)), Response);
                }
                else
                {
                    throw new ResponseRedirectException("../MessageBoxWin.asp?CAPTION=Errore nel caricamento&MSG=" + ApplicationCommon.CNV("INFO_UTENTE_ERRORE_PROCESSO") + DateAndTime.Now.ToString(), Response);
                }
            }
        }
        finally
        {
            if (System.IO.File.Exists(filePath))
            {
                CommonStorage.DeleteFile(filePath);
            }
        }
    }
    else
    {
        htmlToReturn.Write($@"

            <script type=""text/javascript"" language=""javascript"" >
			            try
			            {{
				            self.close();
			            }} catch ( e ) {{}};

		            </script>


        ");
    }

    htmlToReturn.Write($@"</html>");

    string invokePage(string pagina, string nomeApp)
    {
        DebugTrace dt = new();
        string strToReturn = string.Empty;
        string protocol = string.Empty;
        string urlToInvoke;

        if (string.IsNullOrEmpty(nomeApp))
        {
            if (IsEmpty(ApplicationCommon.Application["NOMEAPPLICAZIONE"]) || (CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"])).Trim() == "")
            {
                nomeApp = CStr(ApplicationCommon.Application["ApplicationName"]);
            }
            else
            {
                nomeApp = CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"]);
            }

            if (nomeApp == "")
            {
                nomeApp = "Application";
            }
        }

        if (IsEmpty(ApplicationCommon.Application["WEBSERVERAPPLICAZIONE_INTERNO"]) || CStr(ApplicationCommon.Application["WEBSERVERAPPLICAZIONE_INTERNO"]) == "")
        {
            protocol = "http://";

            //if Request.ServerVariables("SERVER_PORT_SECURE")=1 then
            protocol = "https://";
            //}

            urlToInvoke = protocol + HttpContext.Features.Get<IHttpConnectionFeature>() != null ? HttpContext.Features.Get<IHttpConnectionFeature>().LocalIpAddress != null ? HttpContext.Features.Get<IHttpConnectionFeature>().LocalIpAddress.ToString() : "" : "" + @"/" + nomeApp + @"/" + pagina;
        }
        else
        {
            urlToInvoke = ApplicationCommon.Application["WEBSERVERAPPLICAZIONE_INTERNO"] + @"/" + nomeApp + "/" + pagina;
        }

        urlToInvoke = urlToInvoke.Replace(@"//", @"/");
        urlToInvoke = urlToInvoke.Replace(@"https:/", @"https://");
        urlToInvoke = urlToInvoke.Replace(@"http:/", @"http://");

        try
        {
            strToReturn = invokeUrl(urlToInvoke);
        }
        catch (Exception ex)
        {
            strToReturn = "0#" + ex.Message;
        }

        if (string.IsNullOrEmpty(strToReturn))
        {
            strToReturn = "0#Invocazione non riuscita";
        }
        return strToReturn;
    }

    bool CopyFile(string filePath)
    {
        // The formFile is the method parameter which type is IFormFile
        // Saves the files to the local file system using a file name generated by the app.

        try
        {
            using (FileStream stream = System.IO.File.Create(filePath))
            {
                ObjFile.CopyTo(stream);
                stream.Dispose();  // aggiunto per sicurezza in modo che le fasi successi relative al file non generino problemi di accesso
                return true;
            }
        }
        catch (IOException)
        {
            throw new ResponseEndException(htmlToReturn.Out(), Response, $"Errore nella creazione del file {filePath}");
        }
    }
}
@Html.Raw(htmlToReturn.Out())
@page "/CTL_LIBRARY/DOCUMENT/MakeDocFrom.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.Application;
@using Microsoft.VisualBasic;
@using System.Data.SqlClient
@inject IConfiguration configuration;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.ctl_profiler;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@model eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.MakeDocFromModel
@using static eProcurementNext.Session.SessionMiddleware
@inject eProcurementNext.Application.IEprocNextApplication _application;
@{
     CommonDbFunctions cdf = new();
    LoadSession(HttpContext, session);
    EprocResponse htmlToReturn = new(GetParamURL(HttpContext.Request.QueryString.ToString(), "XML_ATTACH_TYPE"));

    TSRecordSet? rsMsg = null;
    string idDoc;
    int User;
    var idNewDoc = "";
    var FOLDER = "";
    var strcause = "";
    strcause = "";
    User = session["IdPfu"];
    idDoc = GetParamURL(Request.QueryString.ToString(), "IDDOC");
    var TypeDocFrom = GetParamURL(Request.QueryString.ToString(), "TYPEDOC");
    var TypeDocTo = GetParamURL(Request.QueryString.ToString(), "TYPE_TO");
    var buffer = GetParamURL(Request.QueryString.ToString(), "BUFFER");
    var JSCRIPT = TypeDocTo;
    var msgErrore = "";
    string strSQL;
    SqlTransaction? transaction = null;
    SqlConnection? connAtt = null;
    int timeout;

    validate( "TYPE_TO", CStr(TypeDocTo) , TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0,HttpContext,session);
    validate("TYPEDOC", CStr(TypeDocFrom), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0,HttpContext,session);
    validate("IDDOC", idDoc.Replace("-", ""), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0,HttpContext,session);
    
    if (!string.IsNullOrEmpty(CStr(buffer)) && !string.IsNullOrEmpty(CStr(User)))
    {
        //'-- riporto il valore del buffer nella CTL_IMPORT
        strSQL = "DELETE FROM ctl_import where idpfu = @User;INSERT INTO CTL_IMPORT (idpfu,A) VALUES (@User, @buffer)";
        strcause = $"riporto il valore del buffer nella CTL_IMPORT : {strSQL}";

        try
        {
            var sqlp = new Dictionary<string, object?>
            {
                { "@User", User },
                { "@buffer", buffer }
            };

            cdf.Execute(strSQL, ApplicationCommon.Application.ConnectionString, parCollection:sqlp);
        }
        catch (Exception ex)
        {
            var errDescription = ex.ToString();
            var s = strcause;

            eProcurementNext.CommonDB.Basic.TraceErr(ex, ApplicationCommon.Application.ConnectionString,"MakeDocFrom.asp");

            if (CStr(ApplicationCommon.Application["dettaglio-errori"]).ToLower() == "yes" || CStr(ApplicationCommon.Application["dettaglio-errori"]).ToLower() == "si")
            {
                errDescription = "Errore in creazione documento, ripetere l'operazione - " + errDescription;
            }
            else
            {
                errDescription = ApplicationCommon.CNV("INFO_UTENTE_ERRORE_PROCESSO") + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            }

            ShowError(errDescription, "no");
        }
    }

    try
    { 
        connAtt = cdf.SetConnection(ApplicationCommon.Application.ConnectionString);
        timeout = 60; 

        connAtt.Open();
        transaction = connAtt.BeginTransaction();
    }
    catch(Exception ex)
    {
        ShowError("Errore nella composizione del nome della stored di creazione", "no");
        throw new ResponseEndException(htmlToReturn.Out(), Response, "Errore nella composizione del nome della stored di creazione");
    }

    try
    {
        strSQL = "exec " + TypeDocTo + "_CREATE_FROM_" + TypeDocFrom + " " + CLng(idDoc) + " , " + User;
        strcause = $"Eseguo la stored per la MAKEDOCFROM : {strSQL}";

        rsMsg  = cdf.GetRSReadFromQueryWithTransaction(strSQL, ApplicationCommon.Application.ConnectionString, connAtt,transaction, timeout);
        msgErrore = string.Empty;
    }
    catch(Exception ex)
    {
        var errDescription = strcause + " - " + ex.Message;

        transaction.Rollback();
        connAtt.Close();

        eProcurementNext.CommonDB.Basic.TraceErr(ex, ApplicationCommon.Application.ConnectionString,"MakeDocFrom.asp");

        if ( CStr(ApplicationCommon.Application["dettaglio-errori"]).ToLower() == "yes" || CStr(ApplicationCommon.Application["dettaglio-errori"]).ToLower() == "si" )
        {
            errDescription = $"Errore in creazione documento, ripetere l'operazione - {errDescription}";
        }	
        else
        {
            errDescription = $"{ApplicationCommon.CNV("INFO_UTENTE_ERRORE_PROCESSO")}{DateTime.Now:yyyy-MM-dd HH:mm:ss}";
        }

        ShowError(errDescription, "no");
    }

    try
    {
        if (rsMsg is not null && rsMsg.RecordCount > 0)
        {
            rsMsg.MoveFirst();
            FOLDER = string.Empty;
            var docToOpen = string.Empty;
            var jscriptTo = string.Empty;

            if (rsMsg.ColumnExists("Errore"))
            {
                msgErrore = CStr(rsMsg["Errore"]);
            }

            if (rsMsg.ColumnExists("id"))
            {
                idNewDoc = CStr(rsMsg["id"]);
            }

            //in caso di errore gestito non serve recuperare le altre informazioni ritornate (opzionalmente) dalla stored
            if (string.IsNullOrEmpty(msgErrore))
            {
                if (rsMsg.ColumnExists("FOLDER"))
                {
                    FOLDER = CStr(rsMsg["FOLDER"]);
                }

                if (rsMsg.ColumnExists("TYPE_TO"))
                {
                    docToOpen = CStr(rsMsg["TYPE_TO"]);
                }

                if (!string.IsNullOrEmpty(docToOpen))
                {
                    TypeDocTo = docToOpen;
                }
                
                if (rsMsg.ColumnExists("JSCRIPT"))
                {
                    jscriptTo = CStr(rsMsg["JSCRIPT"]);
                }

                JSCRIPT = !string.IsNullOrEmpty(jscriptTo) ? jscriptTo : TypeDocTo;
            }

        }
        transaction.Commit();
        connAtt.Close();
    }
    catch(Exception e)
    {
        if (string.IsNullOrEmpty(idNewDoc))
        {
            ShowError("Errore in creazione documento, ripetere l'operazione", "yes");
            throw new ResponseEndException(htmlToReturn.Out(), Response, "Errore in creazione documento");
        }
    }

    switch (idNewDoc.ToUpper())
    {
        case "ERRORE":
            ShowError(msgErrore, "yes");
            throw new ResponseEndException(htmlToReturn.Out(), Response, "");
        case "INFO":
            ShowError(msgErrore, "yes");  
            throw new ResponseEndException(htmlToReturn.Out(), Response, "");
        case "INFO_NOML":
            ShowError(msgErrore, "no");
            throw new ResponseEndException(htmlToReturn.Out(), Response, "");
    }

    //'--parametro MAKEWIN usato solo nel caso di BANDOCENTRICO
    //'--in questo caso la navigazione è fatta in un iframe nascosto che rende necessario modificare il target
    //'--per riportarlo nel Content.
    //'--Negli altri casi la navigazione continua nella stessa pagina e si fa redirect

    if (GetParamURL(Request.QueryString.ToString(), "MAKEWIN").ToUpper() != "YES")
    {
        // '-- TRACCIAMO IL TEMPO DI ESECUZIONE DELA PAGINA
        Write_CTL_Profiler("MakeDocFrom.ASP", TypeDocTo, "",Request,DateTime.Now.Ticks,configuration,_application);
        //'-- se è stato chiesto di aprire una pagina dedicata al posto del documento
        if (GetParamURL(Request.QueryString.ToString(), "URL") != "")
        {
            throw new ResponseRedirectException(GetParamURL(Request.QueryString.ToString(), "URL") + "&IDDOC=" + idNewDoc + "&lo=" + GetParamURL(Request.QueryString.ToString(), "lo"), Response);
        }
        else
        {
            //'-- reidirizzo la pagina sull'apertura del documento
            throw new ResponseRedirectException("document.asp?MODE=SHOW&COMMAND=RELOAD&JScript=" + JSCRIPT + "&DOCUMENT=" + TypeDocTo + "&IDDOC=" + idNewDoc + "&CUR_FLD_SELECTED_ON_DOC=" + FOLDER + "&lo=" + GetParamURL(Request.QueryString.ToString(), "lo") + "&SHOWCAPTION=" + GetParamURL(Request.QueryString.ToString(), "SHOWCAPTION") + "&NEW_WIN=" + GetParamURL(Request.QueryString.ToString(), "NEW_WIN"), Response);
        }
    }
    else
    {
        htmlToReturn.Write("</head>");
        htmlToReturn.Write($@"<script language=""javascript"">");

        //riporto nel Content
        htmlToReturn.Write($@"
		var Target='Content';
		var Left= (screen.availWidth - w) / 2;
		var Top= (screen.availHeight - h ) / 2;
		var w = screen.availWidth * 0.9;
		var h = screen.availHeight  * 0.9;

        ");
        //apro pop-up per il documento			
        htmlToReturn.Write($@"ExecFunction( 'document.asp?MODE=SHOW&COMMAND=RELOAD&JScript=" + JSCRIPT + $@"&DOCUMENT=" + TypeDocTo + $@"&IDDOC=" + idNewDoc + $@"&NEW_WIN=" + GetParamURL(Request.QueryString.ToString(), "NEW_WIN") + "$@&CUR_FLD_SELECTED_ON_DOC=" + FOLDER + "$@&lo=" + GetParamURL(Request.QueryString.ToString(), "lo") + $@"'   ,  Target , ',left=' + Left + ',top=' + Top + ',width=' + w + ',height=' + h );");
        //try{{self.close();}}catch(){{}}	

        htmlToReturn.Write("</script>");

        htmlToReturn.Write("</head>");
        htmlToReturn.Write("</html>");
    }

    void ShowError(string errText, string makeMl)
    {
        var captionMsg = "";
        var iconMsg = 0;
        var tailRedirect = "";
        errText = TruncateMessage(errText);
        if (errText.Contains("~~", StringComparison.Ordinal))
        {
            var v1 = errText.Split("~~");
            var c1 = v1.Length - 1;
            for(var i1 = 0;i1<=c1;i1++)
            {
                if(Strings.Left(v1[i1], 7) == "@TITLE=")
                {
                    //  '-- recupero la caption del messaggio se presente
                    captionMsg = Strings.Mid(v1[i1], 8);
                }
                else if ( Strings.Left(v1[i1], 6) == "@ICON=" )
                {
                    // '-- recupero l'icona se presente
                     iconMsg = CInt(Strings.Mid(v1[i1], 7));
                }
                else
                {
                    errText = v1[i1];
                }
            }

            if (makeMl == "no")
            {
                errText = "NO_ML###" + errText;
            }

            tailRedirect = "MSG=" + errText + "&CAPTION=" + captionMsg + "&ICO=" + iconMsg;
        }
        else
        {
            if (makeMl == "no")
            {
                errText = "NO_ML###" + errText;
            }

            tailRedirect = "MSG=" + errText + "&CAPTION=Errore&ICO=2";
        }
        
        //'-- TRACCIAMO IL TEMPO DI ESECUZIONE DELA PAGINA
        Write_CTL_Profiler("MakeDocFrom.ASP", TypeDocTo, "",Request,DateTime.Now.Ticks,configuration,_application);

        if (CStr(ApplicationCommon.Application["SINGLEWIN"]).ToUpper() == "NO")
        {
            throw new ResponseRedirectException("../../ctl_library/MessageBoxWin.asp?" + tailRedirect, Response);
        }

        throw new ResponseRedirectException("../path.asp?POP=YES&MSG_ERROR=" + URLEncode(tailRedirect), Response);
    }
    
    //'-- TRACCIAMO IL TEMPO DI ESECUZIONE DELA PAGINA
    Write_CTL_Profiler("MakeDocFrom.ASP", TypeDocTo,"",Request,DateTime.Now.Ticks,configuration,_application);

} @Html.Raw(htmlToReturn.Out())
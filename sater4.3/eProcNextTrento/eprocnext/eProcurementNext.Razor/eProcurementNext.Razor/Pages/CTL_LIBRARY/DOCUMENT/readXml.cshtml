@page "/CTL_LIBRARY/DOCUMENT/readXml.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.HTML.BasicFunction;
@using Microsoft.VisualBasic;
@using System.Data.SqlClient
@using static  eProcurementNext.CommonDB.CommonDbFunctions;
@inject eProcurementNext.Application.IEprocNextApplication _application;
@inject eProcurementNext.DashBoard.IViewer _viewer;
@inject IConfiguration configuration;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.verificaBrowserModel;
@model eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.readXmlModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	LoadSession(HttpContext, session);
    EprocResponse htmlToReturn = new(GetParamURL(HttpContext.Request.QueryString.ToString(), "XML_ATTACH_TYPE"));
}
@{
	string strFile ="";
	string  strPathFile="";
	strFile = GetParamURL(Request.QueryString.ToString(), "FILE-NAME");
	strPathFile = GetParamURL(Request.QueryString.ToString(), "FILE-PATH");

	string pathAllegati = ApplicationCommon.Application["PathFolderAllegati"].ToLower();
	FileInfo thisFile = new FileInfo(strPathFile);

	string estensione = System.IO.Path.GetExtension(strPathFile).ToLower();

	//'-- Validazione input, permettiamo il download solo di un file xml e che risiede nella directory degli allegati
	if (estensione.Equals(".xml") && strPathFile.ToLower().StartsWith(pathAllegati.ToLower(), StringComparison.Ordinal))
	{
		Response.ContentType = "application/xml";

		try
		{
			Response.Headers.TryAdd("Content-Disposition", "inline; filename=" + strFile);
			ReadBinaryFile(strPathFile);
		}
		catch
		{
			htmlToReturn.Clear();
			htmlToReturn.Write("Errore Caricamnto File");
		}

		//throw new ResponseEndException(htmlToReturn.Out(), Response, "");
	}
	else
	{
		htmlToReturn.Clear();
		htmlToReturn.Write("blocco");
		//throw new ResponseEndException(htmlToReturn.Out(), Response, "");
	}
	void ReadBinaryFile(string pathfile)
	{
		const int adTypeBinary = 1;
		const int adTypeText = 2;

		
		LoadFromFile(pathfile,htmlToReturn,HttpContext);

		
	}

}@Html.Raw(htmlToReturn.Out())
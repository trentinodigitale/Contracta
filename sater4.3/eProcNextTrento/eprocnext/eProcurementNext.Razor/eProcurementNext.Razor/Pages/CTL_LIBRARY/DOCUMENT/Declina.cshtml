@page "/CTL_LIBRARY/DOCUMENT/Declina.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.HTML.BasicFunction;
@using Microsoft.VisualBasic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.verificaBrowserModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.masterPageToolsModel;
@model eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.DeclinaModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	CommonDbFunctions cdf = new();	
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new(GetParamURL(HttpContext.Request.QueryString.ToString(), "XML_ATTACH_TYPE"));
}
@{

	validate("IdMsgPar", GetParamURL(Request.QueryString.ToString(), "IdMsgPar"), TIPO_PARAMETRO_INT, SOTTO_TIPO_VUOTO, "", 0, HttpContext, session);
	validate("TIPODOC", GetParamURL(Request.QueryString.ToString(), "TIPODOC"), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);

	//'-- verifico se è passato come parametro il documento da creare sul partecipa
	string TIPODOC = GetParamURL(Request.QueryString.ToString(), "TIPODOC");
	string idRow = GetParamURL(Request.QueryString.ToString(), "IdMsgPar");
	string sql;
	TSRecordSet? rs = null;
	string idAzienda;
	int tipoBandoGara = 0;

	//'-- Controllo di sicurezza per i nuovi documenti (non documento generico)
	//'-- Verifico se il bando al quale si vuole partecipare è ad invito e se l'utente (la sua azienda) è tra gli invitati
	//'-- Se lo è, o se il bando è aperto, lo faccio passare.
	var sqlParams = new Dictionary<string, object?>();
	sqlParams.Add("@idRow", CInt(idRow));
	sql = @"select isnull(TipoBandoGara, 0) as tipobandogara
			from CTL_DOC doc with(nolock)
			inner join Document_Bando db with(nolock) on doc.Id=db.idHeader
			where doc.Id = @idRow";

	rs = cdf.GetRSReadFromQuery_(sql,  ApplicationCommon.Application["ConnectionString"], sqlParams);

	//'response.write cstr(session("IdPfu"))
	//'response.end
	if(rs.RecordCount>0)
	{
		rs.MoveFirst();
		tipoBandoGara = CInt(rs["tipobandogara"]!);
		//'-- se la procedura è ad invito
		if (tipoBandoGara == 3)
		{
			sqlParams.Clear();
			sqlParams.Add("@IdPfu", CInt(session["IdPfu"]));
			sqlParams.Add("@idRow", CInt(idRow));
			sql = @"select dest.* from ProfiliUtente pfu with(nolock) 
						INNER JOIN Aziende az  with(nolock) ON pfu.pfuidazi = az.idazi and pfu.IdPfu = @IdPfu 
						INNER JOIN ctl_doc_destinatari dest  with(nolock) ON dest.idAzi = az.idazi 
						where dest.idheader = @idRow";
			rs = cdf.GetRSReadFromQuery_(sql, ApplicationCommon.Application["ConnectionString"], sqlParams);

			if (rs.RecordCount == 0)
			{
				//'response.write "Non sono tra gli invitati"
				//'response.end
				//dim ObjSession
				//
				//ObjSession = session("Session")
				//set ObjSession(0) = Request.QueryString
				//set ObjSession(1) = Request.form
				//set ObjSession(3) = request
				//set ObjSession(5) = session
				//set ObjSession(6) = application
				BlackList objDB = new BlackList();
				try
				{
					objDB.addIp(objDB.getAttackInfo(HttpContext, session["IdPfu"], "Privilege Escalation: Tentativo di accesso ad un bando ad invito da parte di un non invitato"), session, ApplicationCommon.Application["ConnectionString"]);
				}
				catch
				{

				}
				//'Se è presente NOMEAPPLICAZIONE nell'application
				
				if(!string.IsNullOrEmpty(CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"])))
				{
					throw new ResponseRedirectException("/" + ApplicationCommon.Application["NOMEAPPLICAZIONE"] + "/blocked.asp", Response);
				}
				else
				{
					throw new ResponseRedirectException("/application/blocked.asp", Response);
				}
				throw new ResponseEndException(htmlToReturn.Out(), Response, "");

			}
		}
	}

	//'-- Se l'utente non ha completato il giro di approvazione della sua anagrafica lo blocco.
	sqlParams.Clear();
	sqlParams.Add("@IdPfu", CInt(session["IdPfu"]));
	sql = "select IdPfu from ProfiliUtenteAttrib with(nolock) where dztNome = 'Profilo' and attValue = 'RapLegOE_Limitato' and IdPfu = @IdPfu";
	rs = cdf.GetRSReadFromQuery_(sql, ApplicationCommon.Application["ConnectionString"], sqlParams);
	if (rs.RecordCount >0)
	{
		exitError("Prima di procedere all'operazione e' necessario completare il giro di approvazione della propria anagrafica");
	}
	if (TIPODOC == "OFFERTA")
	{
		//'-- Se l'utente che vuole partecipare appartiene all'azienda che ha indetto la procedura. blocco
		sqlParams.Clear();
		sqlParams.Add("@idRow", idRow);
		sqlParams.Add("@IdPfu", CInt(session["IdPfu"]));
		sql = $"select top 1 doc.Id{Environment.NewLine}";
		sql = $"{sql} from CTL_DOC doc with(nolock) {Environment.NewLine}";
		sql = $"{sql}	inner join Aziende azi with(nolock) ON doc.Azienda = azi.IdAzi and aziVenditore = 0 {Environment.NewLine}";
		sql = $"{sql} inner join DM_Attributi attr1 with(nolock) ON attr1.lnk = azi.IdAzi and attr1.dztNome = 'codicefiscale' {Environment.NewLine}";
		sql = $"{sql}	inner join DM_Attributi attr2 with(nolock) ON attr2.vatValore_FT = attr1.vatValore_FT and attr2.dztNome = 'codicefiscale' {Environment.NewLine}";
		sql = $"{sql}	inner join Aziende azi2 with(nolock) ON azi2.IdAzi = attr2.lnk {Environment.NewLine}";
		sql = $"{sql}	inner join ProfiliUtente pfu with(nolock) ON pfu.pfuIdAzi = azi2.IdAzi {Environment.NewLine}";
		sql = $"{sql}	where doc.Id = @idRow and pfu.IdPfu = @IdPfu";

		//'response.write sql
		//'response.end

		if(rs.RecordCount >0)
		{
			exitError("Non e' possibile partecipare a procedure indette dalla propria azienda");
		}
	}
	sqlParams.Clear();
	sqlParams.Add("@IdPfu", CInt(session["IdPfu"]));
	rs = cdf.GetRSReadFromQuery_("select pfuIdAzi from ProfiliUtente where IdPfu=@IdPfu", ApplicationCommon.Application["ConnectionString"]);
	idAzienda = CStr(rs["pfuIdAzi"]);

	//'response.write idAzienda
	//'response.end
	sqlParams.Clear();
	sqlParams.Add("@idRow", CInt(idRow));
	sqlParams.Add("@IdPfu", CInt(idAzienda));
	cdf.Execute("update CTL_DOC_Destinatari set StatoIscrizione = 'Cancellato' where idHeader = @idRow and IdAzi=@idAzienda", ApplicationCommon.Application["ConnectionString"], parCollection: sqlParams);

	throw new ResponseRedirectException("../../dashboard/Viewer.asp?Table=DASHBOARD_VIEW_BANDI_FORN_SERV_PRIV&ModGriglia=DASHBOARD_VIEW_RDOIAGriglia&ModelloFiltro=DASHBOARD_VIEW_BANDI_FORN_SERV_PRIVFiltro&OWNER=idPfu&IDENTITY=IdMsg&TOOLBAR=DASHBOARD_VIEW_INVITI_TOOLBAR_IM&DOCUMENT=&JSCRIPT=../../customdoc/jsapp/Home_Collegati&PATHTOOLBAR=./&AreaAdd=no&CAPTION=Miei%20Inviti%20|%20Inviti_IM&Height=110,100*,210&numRowForPag=25&Sort=expirydate&SortOrder=DESC&ACTIVESEL=1&FilterHide=TipoProceduraCaratteristica%20=%20%27rfq%27%20and%20Scaduto=0%20and%20((msgISubType%20in%20(21,49,79,153,113,69,75,222,386)%20and%20(tipologia%20in(1,2,3)))%20or%20(msgISubType%20=%20168%20and%20(tipologia%20in(1,2,3))%20and%20TipoBando=3%20)%20)&FILTERCOLUMNFROMMODEL=yes&AreaFiltroWin=hide&FiltroWin=1&Filter=&TOOLBAR_PAGINAZIONE=1&TypeScroll=1&FILTER_BUTTON=right&FOLDER_GROUP=LINKED_ISCRIZIONE_ALBO&FilterCAPTION=no&ROWCONDITION=NOTREAD,bread=1~&HIDE_COL=SedutaVirtuale&lo=base", Response);

		
	void exitError(string msg)
	{
		//'-- Messaggio tramite modale
		session["MSG_ERROR"] = "ML=yes&MSG=" + msg + "&CAPTION=Stop&ICO=2";

		//'-- Ritorno sulla briciola di pane precedente
		//popBreadCrumb("../../");
		throw new ResponseEndException(htmlToReturn.Out(), Response, "");

	}
}@Html.Raw(htmlToReturn.Out())
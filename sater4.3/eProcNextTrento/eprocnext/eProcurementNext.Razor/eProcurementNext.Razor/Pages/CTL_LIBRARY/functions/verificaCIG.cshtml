@page "/CTL_LIBRARY/functions/verificaCIG.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.HTML.BasicFunction;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@model eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.verificaCIGModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new EprocResponse(GetParamURL(HttpContext.Request.QueryString.ToString(), "XML_ATTACH_TYPE"));
}
@{

	//	'--Versione=1&data=2020-10-30&Attvita=336412&Nominativo=Leone
	//
	//'-- Pagina atta alla validazione formale di un CIG 
	//
	//'-- Parametri di input : 
	//'--		* CIG = Codice Identificativo Gara di 10 cifre contenente il cig classico o lo smart cig
	//
	//'-- Output :  ( esempi )	- il chiamante deve verificare se l'output restituito è uguale a 1#OK altrimenti considerare il risultato come un CIG non valido. ( si otterebbe o 0#qualcosa o una blocked.asp di validate )
	//'--		* 1#OK
	//'--		* 0#NonValido
	//
	//on error resume next

	string cig  = CStr(GetParamURL(Request.QueryString.ToString(), "CIG"));
	string output   = "0#NonValido";

	validate( "CIG", cig , TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_FILTROSQL, "", 0,HttpContext,session);
	if(!(string.IsNullOrEmpty(cig.Trim())))
	{
		Dictionary <string,object> dict = new Dictionary<string, object>();
		dict.Add("@cig",cig.Replace("'", "''"));
		string strSQL = "select dbo.controllo_cig_valido(@cig,DEFAULT) as esito";
		//TSRecordSet rs = EprocNext.CommonDB.CommonDbFunctions.GetRSReadFromQuery_(CStr((strSQL)), ApplicationCommon.Application["ConnectionString"]);

		try
		{
			CommonDbFunctions cdb = new CommonDbFunctions();
			TSRecordSet rs = cdb.GetRSReadFromQuery_(CStr((strSQL)), ApplicationCommon.Application["ConnectionString"],dict);
			//if err.number = 0 then
			//{
			if(rs.RecordCount >0)
			{
				rs.MoveFirst();
				if(string.Equals(CStr(GetValueFromRS(rs.Fields["esito"])),"1"))
				{
					output = "1#OK";
				}
				else
				{
					output = "0#CIG non valido";
				}
			}
			else
			{
				output = "0#anomalia in controllo_cig_valido";
			}
			//}
		
		}
		catch
		{
			output = "0#errore di runtime in controllo_cig_valido";
		}
	
	}
	htmlToReturn.Write(output);
}@Html.Raw(htmlToReturn.Out())
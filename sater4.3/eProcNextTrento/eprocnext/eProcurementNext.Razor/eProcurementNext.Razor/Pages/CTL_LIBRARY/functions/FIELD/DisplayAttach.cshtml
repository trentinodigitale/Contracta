@page "/CTL_LIBRARY/functions/FIELD/DisplayAttach.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.HTML.BasicFunction;
@using static eProcurementNext.CommonDB.Basic;
@using Microsoft.VisualBasic;
@using System.Data
@using eProcurementNext.Razor;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.FIELD.displayAttachModel
@using static eProcurementNext.Session.SessionMiddleware
@model eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.FIELD.displayAttachModel
@{
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new(GetParamURL(HttpContext.Request.QueryString.ToString(), "XML_ATTACH_TYPE"));
}
@{
	CommonDbFunctions cdf = new();

	string strTechValue = string.Empty;

	strTechValue = GetParamURL(Request.QueryString.ToString(), "TECHVALUE");

	//'--gestione techvalue vuoto
	if (string.IsNullOrEmpty(strTechValue.Trim()))
	{
		string msgErr = ApplicationCommon.CNV("manca il riferimento allegato da scaricare");
		MsgError("../../../", msgErr, Response);
		throw new ResponseEndException(htmlToReturn.Out(), Response, "");
	}
	string strGuid;
	if (!string.IsNullOrEmpty(strTechValue)) 
	{
		string[] aInfo = strTechValue.Split("*");

		//'--recupero nome file
		string strFileName = aInfo[0];

		//'--recupero type file
		string strType = aInfo[1];

		//'--recupero guid
		strGuid = aInfo[3];

		//on error resume next

		TSRecordSet rsAtt = cdf.GetRSReadFromQuery_("select isnull(url_client,'') as url_client , ATT_IdRow from ctl_Attach with(nolock) where ATT_Hash ='" + Replace(strGuid, "'", "''") + "'", ApplicationCommon.Application.ConnectionString);

		if (rsAtt.RecordCount > 0) 
		{
			rsAtt.MoveFirst();

			//'-- Se è presente ed è avvalorata la colonna URL_CLIENT
			if (!string.IsNullOrEmpty(CStr(rsAtt["url_client"])))
			{
				//'response.write strGuid
				//'response.end

				string urlClient = CStr(rsAtt["url_client"]);

				if (true /*err.number = 0*/)  
				{
					//'-- Provo ad effettuare il download dell'allegato dall'url indicato in tabella

					long idpfu;

					if (string.IsNullOrEmpty(CStr(session["IdPfu"])) || CLng(session["IdPfu"]) < 0)
					{
						idpfu = 0;
					}
					else 
					{
						idpfu = CLng(session["IdPfu"]);
					}

					string strDescErrore = string.Empty;

					try
					{
						var objProc = new eProcurementNext.CtlProcess.ClsElab();
						objProc.Elaborate("DOWNLOAD_ATTACH", "HD_MESSAGE", CLng(rsAtt["ATT_IdRow"]!), idpfu, ref strDescErrore ,1, ApplicationCommon.Application.ConnectionString);
					}
					catch (Exception e)
					{
						throw new ResponseRedirectException(urlClient, Response);
					}

					//'-- Se il processo di download dell'allegato è fallito provo a fare la redirect a quell'url
					if (!string.IsNullOrEmpty(strDescErrore))
					{
						htmlToReturn.Write($@"Allegato al momento non disponibile. Riprovare più tardi");
						throw new ResponseEndException(htmlToReturn.Out(), Response, "Allegato al momento non disponibile. Riprovare più tardi");
					}
				}
			}
		}

		//on error goto 0
	}

	bool consentiAccesso = true;

	//on error resume next

	strGuid = string.Empty;
	//'-- se non c'è un utente in sessione o c'è un idpfu di backoffice
	if (string.IsNullOrEmpty(CStr(session["IdPfu"])) || session["IdPfu"] < 0)
	{
		//'NomeFile.pdf*pdf*32118*F1E09A9AF09D4939A3474E33676023FA
		strTechValue = GetParamURL(Request.QueryString.ToString(), "TECHVALUE");

		string[] aInfo = strTechValue.Split("*");
		strGuid = aInfo[3];

		//err.clear

		if (!string.IsNullOrEmpty(strGuid))
		{
			if (CStr(ApplicationCommon.Application["ATTACH_PUBBLICI"]).ToUpper() == "YES")
			{
				consentiAccesso = true;
			}
			else
			{
				string strSql = "select top 1 ATT_Pubblico from ctl_attach with(nolock) where att_hash = '" + Replace(strGuid, "'", "''") + "'";

				TSRecordSet rs = cdf.GetRSReadFromQuery_(strSql, ApplicationCommon.Application.ConnectionString);

				if (rs.RecordCount > 0)
				{
					rs.MoveFirst();

					string attPubblico = "";
					attPubblico = CStr(rs["ATT_Pubblico"]);
					//err.clear

					//'-- se l'allegato non è pubblico
					if (attPubblico == "0")
					{
						consentiAccesso = false;
					}
				}
			}
		}
	}

	//on error goto 0

	//'response.write "--" & session("IdPfu") & "-" & consentiAccesso
	//'response.end 

	if (consentiAccesso) 
	{
		var objDownLoad = new LibDbAttach();

		//on error resume next

		try
		{
			objDownLoad.run(session,htmlToReturn, HttpContext);
		}
		catch (Exception ex)
		{
			TraceErr(ex, ApplicationCommon.Application.ConnectionString);

			string msgErr = string.Empty;

			//'-- Se è attiva la modalità debug visualizziamo più informazioni riguardo l'errore, query sql comprese
			if (ApplicationCommon.Application["debug-mode"].ToLower() == "yes" || ApplicationCommon.Application["debug-mode"].ToLower() == "si" || ApplicationCommon.Application["debug-mode"] == "true")
			{
				msgErr = ex.ToString();
			} 
			else 
			{
				//'-- Se è disattivato il debug-mode ma è attiva ma la SYS di visione degli errori tecnici 
				if (ApplicationCommon.Application["dettaglio-errori"].ToLower() == "yes" || ApplicationCommon.Application["dettaglio-errori"].ToLower() == "si")
				{
					msgErr = ex.ToString();
				}
				else 
				{
					msgErr = ApplicationCommon.CNV("INFO_UTENTE_ERRORE_DISPLAY_ALLEGATO") + DateTime.Now;
					//'msgErr = "Errore nel recupero"
				}
			}

			MsgError("../../../", msgErr, Response);
		}

		// on error resume next
		InsertInTable(session["IdPfu"], strGuid, cdf);

		//'--faccio abandon se sessione utente vuota o -20
		if (string.IsNullOrEmpty(CStr(session["IdPfu"])) || CStr(session["IdPfu"]) == "-20" || CStr(session["IdPfu"]) == "-10")
		{
			MainGlobalAsa.SessionAbandon(session);
		}
	}
	else 
	{
		string msgErr = "Accesso al file bloccato";
		MsgError("../../../", msgErr, Response);
		throw new ResponseEndException(htmlToReturn.Out(), Response, "");
	}
}
@page "/CTL_LIBRARY/functions/FIELD/UploadXmlAvcp.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.Core.Storage
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.HTML.BasicFunction;
@using Microsoft.Extensions.Primitives;
@using Microsoft.VisualBasic;
@using System.Collections.Specialized
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel
@using static eProcurementNext.Session.SessionMiddleware
@{
    CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new(GetParamURL(HttpContext.Request.QueryString.ToString(), "XML_ATTACH_TYPE"));
}
@{
    IFormCollection? Upload = Request.HasFormContentType ? Request.Form : null;
    IFormFile ObjFile;
    string fileOriginal;
    string[] fv;
    string strSize;
    //'-- Parametri attesi :
    //'-- il file xml in form
    //'-- IDDOC : id del documento chiamante

    validate("IDDOC", GetParamURL(Request.QueryString.ToString(), "IDDOC"), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_TABLE, "", 0, HttpContext, session);

    if (Upload is not null && Upload.Files.Count > 0 )
    {
        ObjFile = Upload.Files[0];

        var filePath = $"{CStr(ApplicationCommon.Application["PathFolderAllegati"])}{CommonStorage.GetTempName()}";

        using (var stream = System.IO.File.Create(filePath))
        {
            // The formFile is the method parameter which type is IFormFile
            // Saves the files to the local file system using a file name generated by the app.
            await ObjFile.CopyToAsync(stream);

            //'-- controllo del file a taglia 0
            if (stream.Length == 0) {

                //on error resume next
                try 
                {
                    //ObjFile.Delete()
                    CommonStorage.DeleteFile(filePath);
                }
                catch
                {

                }
                htmlToReturn.Write("<p><strong>File inviato corrotto o vuoto</strong></p>");

                //err.Clear
                throw new ResponseEndException(htmlToReturn.Out(), Response, "File inviato corrotto o vuoto");
                //Response.end
            }

            //'-- conservo il nome del file pulito dal percorso
            fv = Strings.Split(filePath, @"\");

            fileOriginal = fv[fv.Length - 1];

            //on error resume next

            //'Se siamo non siamo in modalit� DEBUG (sviluppo) non validiamo il parametro
            if((UCase(ApplicationCommon.Application["debug-mode"]) != "SI" && UCase(ApplicationCommon.Application["debug-mode"]) != "TRUE" && UCase(ApplicationCommon.Application["debug-mode"]) != "YES")) 
            {
                if (fileOriginal.Contains("/", StringComparison.Ordinal)) 
                {
                    eProcurementNext.BizDB.BlackList mp_objDB = new BlackList();

                    //'Aggiungo l'ip in blacklist collezionando le informazioni sull'attacco (a meno che non � attiva la sys di disattivablacklist)
                    mp_objDB.addIp(mp_objDB.getAttackInfo(HttpContext, CStr(session["IdPfu"]), CStr("Tentativo di pathInjection")), session, CStr(ApplicationCommon.Application["ConnectionString"]) );

                    //'Se � presente NOMEAPPLICAZIONE nell'application
                    if ((!string.IsNullOrEmpty(CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"])))) 
                    {
                        throw new ResponseRedirectException("/" + ApplicationCommon.Application["NOMEAPPLICAZIONE"] + "/blocked.asp", Response);
                        //Response.redirect "/" & application("NOMEAPPLICAZIONE") & "/blocked.asp"
                    }
                    else
                    {
                        throw new ResponseRedirectException("/application/blocked.asp", Response);
                        //Response.redirect "/application/blocked.asp"
                    }

                    throw new ResponseEndException(htmlToReturn.Out(), Response, "");
                }
            }

            string[] arrSplit = Strings.Split(fileOriginal, ".");
            string estensione = arrSplit[arrSplit.Length - 1];

            if (estensione.ToUpper() != "XML")
            {
                htmlToReturn.Clear();

                CommonStorage.DeleteFile(filePath);
                htmlToReturn.Write("Estensione '" + estensione + "' non consentita per il caricamento XML");

                throw new ResponseEndException(htmlToReturn.Out(), Response, "Estensione '" + estensione + "' non consentita per il caricamento XML");
            }

            string fileXml = "";

            if (Strings.Right(ApplicationCommon.Application["PathFolderAllegati"],1) == @"\")
            {
                fileXml = ApplicationCommon.Application["PathFolderAllegati"] + fileOriginal;
            }
            else
            {
                fileXml=ApplicationCommon.Application["PathFolderAllegati"] + @"\" + fileOriginal;
            }

            //'-- passo il controlla alla pagina .net per l'import vero e proprio.
            //'-- ( sar� quella pagina a cancellare il file xml )

            htmlToReturn.Write($@"<script language=""javascript"">");
            htmlToReturn.Write($@"try {{ self.opener.RefreshDocument('../document/'); }} catch(err){{}}");
            //htmlToReturn.Write($@"location.href = '{urlFinale}';");
            htmlToReturn.Write($@"</script>");
            
            // NON VIENE PIù RICHIAMATA LA RISORSA CON UN HTTP REQUEST MA VIENE UTILIZZATA UNA FUNZIONE PER ACCEDERE ALLA RISORSA DA FILESYSTEM
            //throw new ResponseRedirectException("/" + ApplicationCommon.Application["NOMEAPPLICAZIONE"] + "/xmlutil.aspx?OPERATION=IMPORT_XML&idHeader=" + CLng(GetParamURL(Request.QueryString.ToString(), "IDDOC")) + "&FILE_XML=" + URLEncode(fileXml), Response);

            string idheader = GetParamURL(Request.QueryString.ToString(), "IDDOC");

            XmlUtil.Import_XML(idheader, URLEncode(fileXml), ApplicationCommon.Application.ConnectionString);

            //response.redirect "/" & application("NOMEAPPLICAZIONE") & "/xmlutil.aspx?OPERATION=IMPORT_XML&idHeader=" & clng(request.querystring("IDDOC")) & "&FILE_XML=" & server.urlencode(fileXml)
        }
    }
}
@Html.Raw(htmlToReturn.Out());
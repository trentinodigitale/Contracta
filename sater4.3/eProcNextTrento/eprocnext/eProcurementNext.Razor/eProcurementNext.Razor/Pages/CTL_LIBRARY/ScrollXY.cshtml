@page "/CTL_LIBRARY/ScrollXY.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.HTML.BasicFunction;
@using Microsoft.Extensions.Primitives
@using Microsoft.VisualBasic;
@using System.Text
@using static eProcurementNext.Session.SessionMiddleware
@{
    LoadSession(HttpContext, session);
    EprocResponse htmlToReturn = new(GetParamURL(HttpContext.Request.QueryString.ToString(), "XML_ATTACH_TYPE"));
}
@{
    string X = GetParamURL(Request.QueryString.ToString(), "X");
    string Y = GetParamURL(Request.QueryString.ToString(), "Y");

    dynamic mp_stack_ScrollXY;

    int posCorrente;

    if (!IsEmpty(session["stack_ScrollXY"])) 
    {
        mp_stack_ScrollXY = session["stack_ScrollXY"];
    }
    else
    {
        dynamic[,] m = new dynamic[50, 2];
        //dim m( 50 ,2 )
        session["stack_ScrollXY"] = m;
        mp_stack_ScrollXY = m;
	}

    //'-- recupera la posizione del path
    if (!IsEmpty(session["stack_index"])) 
    {
        posCorrente = session["stack_index"];
    }
    else
    {
        posCorrente = 0;
    }

    //'-- conservo la posizione delle scroll
    mp_stack_ScrollXY[ posCorrente , 0 ] = X;
    mp_stack_ScrollXY[ posCorrente , 1 ] = Y;

    //'-- svuoto le posizioni successive

    for (int i = posCorrente + 1; i <= 50; i++)
    {// to 50
        mp_stack_ScrollXY[ i , 0 ] = "";
        mp_stack_ScrollXY[ i , 1 ] = "";
    }

    session["stack_ScrollXY"] = mp_stack_ScrollXY;
    session.Save();
}
@Html.Raw(htmlToReturn.Out())
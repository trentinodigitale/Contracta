@page "/Report/prn_ESITO_CONTROLLI_OE.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using Microsoft.VisualBasic
@using System.Globalization
@using static eProcurementNext.CommonDB.Basic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.print_documentModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.Report.prn_ESITO_CONTROLLI_OEModel;
@model eProcurementNext.Razor.Pages.Report.prn_ESITO_CONTROLLI_OEModel
@using static eProcurementNext.Session.SessionMiddleware
@{

	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();

	objDoc = PrintDocument(session, htmlToReturn, HttpContext, Response, Request);//PrintDocument ok

}
@{
	var sqlParams = new Dictionary<string, object?>();
	htmlToReturn.Write($@"
	<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"">
	<html>
	<head>");
	addMetaTag(htmlToReturn);

	int NumPagCorrente;
	NumPagCorrente = 0;

	dynamic iif(dynamic a ,dynamic b,dynamic c)
	{
		if(a)
		{
			return b;
		}
		else
		{
			return c;

		}
	}
	//'--determino le info per le pagine da stampare
	int nNumProduct;
	int NumCol;
	double nLineeForPage;
	int nLineeSpazioHeader;
	double nNumLineeFirstPage;
	int nLineeTotali;
	int NumLineeStampate;
	int NumLineeStampatePagina;
	int LastRowDiplayed;
	int LastColDisplayed;
	int nNumPag_primo_giro =0;

	LastRowDiplayed = 0;
	LastColDisplayed = 0;

	NumLineeStampate = 0;

	NumCol = 3;

	//'--numero di linee per pagina	
	nLineeForPage = 48;
	nLineeSpazioHeader = 7;
	nNumLineeFirstPage = nLineeForPage - nLineeSpazioHeader;

	//'--recupero info ente
	TSRecordSet rsOE = null;
	sqlParams.Add("@statoIscrizione","iscritto");
	TSRecordSet rsOE_TEST_PAG = cdf.GetRSReadFromQuery_(" select A.aziRagioneSociale,vatValore_FT as codice_fiscale ,MAX(convert( varchar , ISNULL(C.DataIscrizione,GETDATE()) , 103 ) )   as Datascadenza " +
							" from CTL_DOC_Destinatari  C with(NOLOCK) " +
							"	inner join Aziende A with(NOLOCK)  on C.IdAzi=A.idazi " +
							"	inner join DM_Attributi with(NOLOCK)   on lnk=A.IdAzi and vatValore_FT is not null and dztNome='codicefiscale' " +
							" where C.StatoIscrizione=@statoIscrizione" +
							"group by A.aziRagioneSociale,vatValore_FT ", ApplicationCommon.Application.ConnectionString, sqlParams);
	sqlParams.Clear();
	sqlParams.Add("@typeDoc", "CONTROLLI_OE");
	sqlParams.Add("@check", "BANDO_ME");
	sqlParams.Add("@StatoFunzionale", "Confermato");
	sqlParams.Add("@StatoDoc", "Positivo");
	rsOE = cdf.GetRSReadFromQuery_(" 	select A.aziRagioneSociale,vatValore_FT as codice_fiscale ,MAX(convert( varchar , C.DataScadenza , 103 ) ) as Datascadenza " +
							"		from CTL_DOC C with(NOLOCK) " +
							"			inner join Aziende A with(NOLOCK)  on C.Destinatario_Azi=A.idazi " +
							"			inner join DM_Attributi with(NOLOCK) on lnk=A.IdAzi and dztNome='codicefiscale' " +
							"		where C.TipoDoc=@typeDoc and C.JumpCheck=@check " +
							"			and C.StatoFunzionale=@StatoFunzionale and C.Deleted=0 and C.DataScadenza > GETDATE() " +
							"			and C.StatoDoc=@StatoDoc " +
							"			group by A.aziRagioneSociale,vatValore_FT ", ApplicationCommon.Application.ConnectionString, sqlParams);
	rsOE.MoveFirst();

	double nNumLineeTotali = rsOE.RecordCount + nLineeSpazioHeader;
	double nNumPag = Fix(nNumLineeTotali / nLineeForPage);
	if(nNumLineeTotali % nLineeForPage != 0)
	{
		nNumPag = nNumPag + 1;
	}
	nNumPag = nNumPag * 2;
	htmlToReturn.Write($@"
	</head>
	<body>

		<style type=""text/css"">



			BODY,DIV ,TABLE, TD {{
			font-family:'Arial','Times New Roman',serif;
			font-size:9.9pt;
			font-style:normal;
			font-weight:normal


			}}
			.Input
			{{
			font-family:'Arial','Times New Roman',serif;
			font-size:10pt;
			font-style:normal;
			font-weight:bold;


			}}

			.TITLE{{
			font-family:'Arial','Times New Roman',serif;
			font-size:12pt;
			font-style: bold;
			font-weight:bold;




			}}
			.prodotti 
			{{
			font-family:'Arial','Times New Roman',serif;
			font-size:10pt;
			font-style:normal;


			}}



			@media print
			{{
			#Ricevuta {{}}
			}}

			@media screen
			{{
			#Ricevuta {{}}
			}}

			  ul li, table ul li {{ list-style-type:none; text-align:justify; }}
			  p	{{  text-align:justify;}}
			 .disc li {{ list-style-type:disc;}}
			 .disc li table td{{ vertical-align:bottom;}}
			  h1{{font-size:1.3em; font-weight:bold; text-align:center;}}
			 .PaddingLeft{{ padding-left:3em;}}
			 .nomargin{{margin-top: -13px;}}
			  ul.ListStyleTypeNone li{{padding-top:0em; }}
			 .ListStyleTypeNone{{ list-style-type:none; }}
			 table.list{{ vertical-align:middle; margin-top:1em;}}
			 ul.disc{{padding-left:0em;}}
			 table td ul.disc{{padding-top:0em;padding-bottom:0em;margin-top: 0em;margin-bottom: 0em;}}
			 .DataGUUE{{ width:25em;}}
			.DataGURI{{ width:17em;}}
			ul.ListStyleTypeNone {{padding-left:0em; }}

		</style>
		<div style=""text-align: center; "">		 
			<center>");

	Header();
	htmlToReturn.Write($@"
	<tr><td style=""height:100px"" >
	<table style=""width: 800px; height: 100px;"">
			<tr><td height=""50px"" style =""font-size:16px; text-align: left; width: 800px; ""><b>" + ApplicationCommon.CNV("Dati del documento") + $@"</b></td></tr>
			<tr><td height=""50px"" style =""font-size:16px; text-align: left; width: 800px; ""><b>" + ApplicationCommon.CNV("Registro") + $@":</b>" + DOC_Field("DOCUMENT", "Protocollo") + $@"&nbsp;&nbsp;<b>" + ApplicationCommon.CNV("Data") + $@":</b>" + DOC_Field("DOCUMENT", "DataInvio") + $@"	</td></tr>						
	</table>");

	rsOE.Sort("codice_fiscale ASC");
	int bexit_for = 0;
	for (int k=1 ;k< nNumPag;k++)
	{
		if(k>1)
		{
			Header();

		}
		htmlToReturn.Write($@"
		</td></tr>
				<tr><td style=""height:50px"" >
					<table style=""width: 800px; height: 50px;"">
						<tr>				
							<td height=""20px"" width=""80%"" valign=""top"" >
								<h3><center><b>Elenco Ordinato per Codice Fiscale</b></center></h3>
							</td>
						</tr>
					</table>
				</td></tr>");
		htmlToReturn.Write($@"
		<tr><td>
			<table border=0 style=""width: 800px; height:100%;"" align=""center"" >						
				<tr style=""width:80% ; font-size:7pt;"">			

					<th style=""border: 1px solid black;"" width=""30%""><font class=""TITLE"">Codice Fiscale OE</font></th>
					<th style=""border: 1px solid black;"" width=""50%""><font class=""TITLE"">Ragione Sociale OE</font></th>
					<th style=""border: 1px solid black;"" width=""20%""><font class=""TITLE"">Scadenza Validità controlli</font></th>

				</tr>");
		int z = 1;//  'variabile per capire quando ho raggiunto il numero massimo per pagina
		int bexit_while = 0;

		while(! rsOE.EOF && bexit_while == 0)
		{
			htmlToReturn.Write($@"
			<tr style=""width:80%;font-size:7pt;"">


				<td style=""border: 1px solid black;"" align=""left"" width=""30%""><font class=""prodotti"">"+ Myhtmlencode(GetValueFromRS( rsOE.Fields["codice_fiscale" ])) +$@"</font></td>
				<td style=""border: 1px solid black;"" align=""left"" width=""50%""><font class=""prodotti"">"+ Myhtmlencode(GetValueFromRS( rsOE.Fields["aziRagioneSociale" ])) +$@"</font></td>
				<td style=""border: 1px solid black;"" align=""center"" width=""20%""><font class=""prodotti"">"+ Myhtmlencode(GetValueFromRS( rsOE.Fields["Datascadenza" ])) +$@"</font></td>

			</tr>");	
			//'SE HO RIEMPITO LA PAGINA
			if(z == iif(k=1,nNumLineeFirstPage,nLineeForPage))
			{
				z = z + 1;

				rsOE.MoveNext();
			}
		}
		//'se ha fatto tutto il record set significa che ha finito il primo giro, ORDINAMENTO PER CODICE FISCALE
		if(rsOE.EOF)
		{
			bexit_for = 1;
		}
		htmlToReturn.Write($@"
		<tr style=""width: 800px; height:100%;"" ><td></td></tr>
					</table>

				</td></tr>");
		//'--PIE DI PAGINA
		footer();

		//'MANTIENE IL NUMERO DI PAGINE FATTE PER IL PRIMO GIRO
		nNumPag_primo_giro = k;

		//'--SALTO PAGINA
		if(k != nNumPag)
		{
			PrintPagina();
		}
		if(bexit_for == 1)
		{
			break;
		}

	}// 'FOR PRIMO GIRO DI STAMPA PER CODICE FISCALE
	rsOE.MoveFirst();
	rsOE.Sort("aziRagioneSociale ASC");

	for(int H = 1;H<nNumPag-nNumPag_primo_giro;H++)
	{
		if(H>0)
		{
			Header();
		}
		htmlToReturn.Write($@"
			<tr><td style=""height:50px"" >
						<table style=""width: 800px; height: 50px;"">
							<tr>				
								<td height=""20px"" width=""80%"" valign=""top"" >
									<h3><center><b>Elenco Ordinato per Ragione Sociale</b></center></h3>
								</td>
							</tr>
						</table>
					</td></tr>

					<tr><td>
						<table border=0 style=""width: 800px; height:100%;"" align=""center"" >

							<tr style=""width: 80% ; font-size:7pt;"">			

								<th style=""border: 1px solid black;"" width=""50%""><font class=""TITLE"">Ragione Sociale OE</font></th>
								<th style=""border: 1px solid black;"" width=""30%""><font class=""TITLE"">Codice Fiscale OE</font></th>								
								<th style=""border: 1px solid black;"" width=""20%""><font class=""TITLE"">Scadenza Validità controlli</font></th>

							</tr>");
		int z = 1;
		int k = 0;
		int bexit_while = 0;
		while(!(rsOE.EOF) && bexit_while== 0)
		{
			htmlToReturn.Write($@"
			<tr style=""width: 80%;font-size:7pt;"">

									<td style=""border: 1px solid black;"" align=""left"" width=""50%""><font class=""prodotti"">"+Myhtmlencode(GetValueFromRS( rsOE.Fields["aziRagioneSociale" ])) +$@"</font></td>	
									<td style=""border: 1px solid black;"" align=""left"" width=""30%""><font class=""prodotti"">"+ Myhtmlencode(GetValueFromRS( rsOE.Fields[ "codice_fiscale" ])) +$@"</font></td>									
									<td style=""border: 1px solid black;"" align=""center"" width=""20%""><font class=""prodotti"">"+ Myhtmlencode(GetValueFromRS( rsOE.Fields["Datascadenza"]))+ $@"</font></td>

											</tr>");	
			if (z == iif( k = 1,nNumLineeFirstPage,nLineeForPage))
			{
				bexit_while = 1;
			}
			z = z + 1;
			rsOE.MoveNext();
		}
		htmlToReturn.Write($@"
					<tr style=""width: 800px; height:100%;"" ><td></td></tr>
			</table>

		</td></tr>");
		//'--PIE DI PAGINA
		footer();
		//'--SALTO PAGINA
		if (( H  + nNumPag_primo_giro ) !=  nNumPag )
		{
			PrintPagina();
		}


	}// 'FOR SECONDO GIRO DI STAMPA PER RAGIONE SOCIALE
	htmlToReturn.Write($@"
	</center>		   
		</div>
	</body>
	</html>");
	void PrintPagina()
	{
		htmlToReturn.Write($@"<div style=""page-break-after: always""></div>");
	}
	void  Header()
	{
		htmlToReturn.Write($@"<table border=""0"" style=""width:800px;height:1400px;"">");
		htmlToReturn.Write($@"<tr><td height=""50px"" align=""center"" valign=""top"" >");

		string imgHeader = ApplicationCommon.CNV("HEADER_STAMPE");

		if(imgHeader.Contains("???", StringComparison.Ordinal))
		{
			htmlToReturn.Write($@"<img height=""50px"" src=""logo_new.gif"" border=""0"" alt=""" + ApplicationCommon.CNV("ALT LOGO") + $@"""/>");
		}
		else
		{
			htmlToReturn.Write(imgHeader);
		}
		htmlToReturn.Write($@"</td></tr>");
		htmlToReturn.Write($@"<tr><td height=""50px"" align=""center"" valign=""top"" style=""font-size:16px; text-align: center; width: 800px; align: center;font-weight:bold;"" >");
		htmlToReturn.Write($@"Elenco Operatori Economici Controllati");
		htmlToReturn.Write($@"</td></tr>");
	}
	//'------------------------------------------------------------------------------
	//'-- funzione per disegnare il pie pagina
	//'------------------------------------------------------------------------------
	void footer()
	{
		NumPagCorrente = NumPagCorrente + 1;

		htmlToReturn.Write($@"<tr><td valign=""bottom"" height=""10px"" >");
		htmlToReturn.Write($@"<table width=""800px"" height=""10px"" style=""vertical-align: bottom; bottom: 0px""> ");
		htmlToReturn.Write($@"        <tr><td align=""left"" ><b></b></td></tr><tr>");
		htmlToReturn.Write($@"            <td style=""border-bottom: 1px solid black;border-top: 1px solid black;""  valign=""bottom"" align=""right"" >");
		htmlToReturn.Write($@"                ");
		htmlToReturn.Write($@"                Pagina: " + NumPagCorrente);
		htmlToReturn.Write($@"            </td>");
		htmlToReturn.Write($@"        </tr>");
		htmlToReturn.Write($@"    </table>");
		htmlToReturn.Write($@"    </td></tr>");
		htmlToReturn.Write($@"    </table>");
	}

}@Html.Raw(htmlToReturn.Out())
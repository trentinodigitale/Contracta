@page "/Report/OFFERTA_BUSTA_ECO.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using Microsoft.VisualBasic
@using System.Globalization
@using System.Diagnostics
@using static eProcurementNext.CommonDB.Basic;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.print_documentModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.TemplateReportModel;
@using static eProcurementNext.Razor.Pages.Report.OFFERTA_BUSTA_ECOModel;
@model eProcurementNext.Razor.Pages.Report.OFFERTA_BUSTA_ECOModel
@using static eProcurementNext.Session.SessionMiddleware
@{
    CommonDbFunctions cdf = new();
    LoadSession(HttpContext, session);
    EprocResponse htmlToReturn = new();

    objDoc = PrintDocument(session, htmlToReturn, HttpContext, Response, Request);//PrintDocument ok
    string IDDOC = objDoc.mp_IDDoc;
}
@{
    htmlToReturn.Write($@"
	<html>
	<head>
	<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">

	<link rel=""stylesheet"" type=""text/css"" href=""../ctl_library/themes/main_base_print.css""  />
	<link rel=""stylesheet"" type=""text/css"" href=""../ctl_library/themes/GridPrint.css""  />

	<style>
	.display_none
	{{
		display: none;

	}}
	</style>
	<title>" + ApplicationCommon.CNV("OFFERTA") + $@"</title>
	</head>");
    void Header()
    {
        htmlToReturn.Write($@"<tr><td height=""50px"" align=""center"" valign=""top"" >");

        string imgHeader = ApplicationCommon.CNV("HEADER_STAMPE");
        if (imgHeader.Contains("???", StringComparison.Ordinal))
        {
            htmlToReturn.Write($@"<img height=""50px"" src=""logo_new.gif"" border=""0"" alt=""" + ApplicationCommon.CNV("ALT LOGO") + $@"""/>");
        }
        else
        {
            htmlToReturn.Write(imgHeader);
        }
        htmlToReturn.Write("</td></tr>");
        htmlToReturn.Write($@"<tr><td align=""center"" valign=""top"">" + ApplicationCommon.CNV("HEADER_STAMPA_BUSTA_OFFERTA") + "</td></tr>");
    }
    dynamic stazioneappaltante(dynamic cod)
    {
        //'--recupero info ente
        string ret = string.Empty;
        var sqlParams = new Dictionary<string, object?>();
        sqlParams.Add("@cod", CInt(cod));
        TSRecordSet rsEnte = cdf.GetRSReadFromQuery_("select aziRagioneSociale from Aziende with(nolock) where IdAzi=@cod", ApplicationCommon.Application.ConnectionString, sqlParams);
        if (rsEnte is not null && !(rsEnte.EOF && rsEnte.BOF))
        {
            rsEnte.MoveFirst();
            ret = CStr(rsEnte["aziRagioneSociale"]);
        }
        return ret;
    }
    string recuperoTipoProcedura(string cod)
    {
        string _recuperoTipoProcedura = string.Empty;
        var sqlParams = new Dictionary<string, object?>();
        sqlParams.Add("@cod", CInt(cod));
        TSRecordSet rstipoproc = cdf.GetRSReadFromQuery_("select c2.TipoDoc, ISNULL(DB.TipoProceduraCaratteristica,'') as TipoProceduraCaratteristica,dbo.GetCodDom2DescML('Caratteristica',ISNULL(DB.TipoProceduraCaratteristica,''),'I') as desc_carat,db.ProceduraGara, dbo.GetDescDominioFromDztNome('ProceduraGara','I',ISNULL(db.ProceduraGara,'')) as Desc_ProceduraGara from Document_MicroLotti_Dettagli_view D inner join CTL_DOC c with(nolock) on c.Id=D.IdHeader and C.TipoDoc='OFFERTA' inner join CTL_DOC C2 with(nolock) on C2.Id=C.LinkedDoc inner join document_bando DB with(nolock) on DB.idHeader=c2.id where D.Id=@cod", ApplicationCommon.Application.ConnectionString, sqlParams);

        if (rstipoproc is not null && !(rstipoproc.EOF && rstipoproc.BOF))
        {
            rstipoproc.MoveFirst();

            if (CStr(rstipoproc["TipoDoc"]) == "BANDO_SEMPLIFICATO")
            {
                _recuperoTipoProcedura = "Bando Semplificato";
            }
            if (CStr(rstipoproc["TipoDoc"]) == "BANDO_GARA" && !string.IsNullOrEmpty(CStr(rstipoproc["TipoProceduraCaratteristica"])))
            {
                _recuperoTipoProcedura = CStr(rstipoproc["desc_carat"]);
            }
            if (CStr(rstipoproc["TipoDoc"]) == "BANDO_GARA" && string.IsNullOrEmpty(CStr(rstipoproc["TipoProceduraCaratteristica"])))
            {
                _recuperoTipoProcedura = CStr(rstipoproc["Desc_ProceduraGara"]);
            }
        }
        return _recuperoTipoProcedura;
    }
    string infoOfferta(string cod, string param)
    {
        string _infoOfferta = string.Empty;

        var sqlParams = new Dictionary<string, object?>();
        sqlParams.Add("@cod", CInt(cod));
        TSRecordSet rsofferta = cdf.GetRSReadFromQuery_("select C.idpfu,p.pfuNomeUtente + ' ' + p.pfuCognome as Responsabile , isnull(C.Body,b.Body) as Body,C.ProtocolloRiferimento from  Document_MicroLotti_Dettagli_view D inner join ctl_doc C with(nolock) on C.id=D.idheader and C.tipodoc='OFFERTA' left join profiliUtente P with(nolock) on P.idpfu=C.idpfu inner join CTL_DOC b with(nolock) on b.Id = c.LinkedDoc where D.Id=@cod", ApplicationCommon.Application.ConnectionString, sqlParams);

        if (rsofferta is not null && !(rsofferta.EOF && rsofferta.BOF))
        {
            rsofferta.MoveFirst();
            if (param == "Oggetto")
            {
                _infoOfferta = CStr(rsofferta["Body"]);
            }
            if (param == "Registro_Bando")
            {
                _infoOfferta = CStr(rsofferta["ProtocolloRiferimento"]);
            }
            if (param == "Responsabile")
            {
                _infoOfferta = CStr(rsofferta["Responsabile"]);
            }
        }
        return _infoOfferta;
    }
    string DenominazioneATI(string cod)
    {
        string _DenominazioneATI = "";
        var sqlParams = new Dictionary<string, object?>();
        sqlParams.Add("@cod", CInt(cod));
        TSRecordSet rsDenominazioneATI = cdf.GetRSReadFromQuery_("select value from Document_MicroLotti_Dettagli_view D inner join CTL_DOC c with(nolock) on c.Id=D.IdHeader and C.TipoDoc='OFFERTA' inner join ctl_doc_value CV with(nolock) on CV.IdHeader=c.Id and DSE_ID='TESTATA_RTI' and CV.DZT_Name='DenominazioneATI' where D.Id=@cod", ApplicationCommon.Application.ConnectionString, sqlParams);

        if (rsDenominazioneATI is not null && rsDenominazioneATI.RecordCount > 0)
        {
            rsDenominazioneATI.MoveFirst();
            _DenominazioneATI = CStr(rsDenominazioneATI["value"]);
        }
        //'-- se il campo è vuoto recuperiamo la ragione sociale del fornitore
        if (string.IsNullOrEmpty(_DenominazioneATI.Trim()))
        {
            rsDenominazioneATI = cdf.GetRSReadFromQuery_("select aziRagioneSociale  from Document_MicroLotti_Dettagli_view D inner join CTL_DOC c with(nolock) on c.Id=D.IdHeader and C.TipoDoc='OFFERTA' inner join Aziende a on a.IdAzi = c.Azienda where D.Id=@cod", ApplicationCommon.Application.ConnectionString, sqlParams);
            if (rsDenominazioneATI is not null && rsDenominazioneATI.RecordCount > 0)
            {
                rsDenominazioneATI.MoveFirst();
                _DenominazioneATI = CStr(rsDenominazioneATI["aziRagioneSociale"]);
            }
        }
        return _DenominazioneATI;
    }
    void info_concorrente(string cod)
    {
        var sqlParams = new Dictionary<string, object?>();
        sqlParams.Add("@cod", CInt(cod));
        TSRecordSet rsinfo_concorrente = cdf.GetRSReadFromQuery_("select C.Azienda, aziIndirizzoLeg + ' - ' + aziCAPLeg + ' ' + aziLocalitaLeg + ' (' + aziProvinciaLeg +') ' as aziIndirizzoLeg,'C.F. '+ vatValore_FT as cF, 'P.IVA ' + aziPartitaIVA as PIVA  from Document_MicroLotti_Dettagli_view D inner join ctl_doc c with(nolock) on c.id=D.IdHeader and C.TipoDoc='OFFERTA' inner join Aziende A with(nolock) on A.IdAzi=C.Azienda inner join DM_Attributi with(nolock) on A.IdAzi=lnk and dztNome='codicefiscale' where D.Id=@cod", ApplicationCommon.Application.ConnectionString, sqlParams);
        if (rsinfo_concorrente is not null && !(rsinfo_concorrente.EOF && rsinfo_concorrente.BOF))
        {
            rsinfo_concorrente.MoveFirst();
            htmlToReturn.Write($@"<tr><td>" + CStr(rsinfo_concorrente["aziIndirizzoLeg"]) + "</td></tr>");
            htmlToReturn.Write($@"<tr><td>" + CStr(rsinfo_concorrente["cF"]) + "&nbsp;" + CStr(rsinfo_concorrente["PIVA"]) + "</td></tr>");
        }
    }
    htmlToReturn.Write($@"
	<body style=""min-width:1500px; padding-left:20px; padding-right:20px; padding-top:20px; padding-bottom:20px;"">
	<table  border=0 width=""100%"">
	<tr><td>
	<table style=""font-weight:bold; align=center; vertical-align:center;"" width=""100%"" >");
    Header();
    htmlToReturn.Write($@"
	</table>
	</td></tr>

	<tr><td>
	<table cellpadding=0 cellspacing=0>
		 <thead>



    	<tr><td>&nbsp;</td></tr>");
    string TemplateName = "";
    string ViewName = "";
    string[] aSplit;

    string paramValue = CStr(Get_Func_Property("OFFERTA_BUSTA_ECO.asp", "Template_header", "DefaultValue", "", CInt("-1")));

    //'response.write "paramValue=" + paramValue
    //'response.end
    if (string.IsNullOrEmpty(paramValue))
    {
        htmlToReturn.Write($@"
		<tr>
    	  <td nowrap style=""font-size:18px; align=left""><b>Stazione appaltante:</b> " + stazioneappaltante(DOC_FieldTecnical("TESTATA", "Destinatario_Azi")) + $@"</td>
    	</tr>
		<tr>
    	  <td nowrap style=""font-size:18px; align=left""><b>Tipo Procedura:</b> " + recuperoTipoProcedura(IDDOC) + $@"</td>
    	</tr>
		<tr>
    	  <td style=""font-size:18px; align=left""><b>Titolo:</b> " + infoOfferta(IDDOC, "Oggetto") + $@"

		 ");
        string regSisOff = infoOfferta(IDDOC, "Registro_Bando");

        if (!string.IsNullOrEmpty(regSisOff))
        {
            htmlToReturn.Write($@"<b>e numero registro di sistema:</b> " + regSisOff + $@"</td>");
        }

        htmlToReturn.Write($@"</tr>");
    }
    else
    {
        aSplit = paramValue.Split("#");

        TemplateName = aSplit[0];
        ViewName = aSplit[1];

        //' chiama la funzione che converte il template
        TSRecordSet rsTemp;

        var sqlParams2 = new Dictionary<string, object?>();
        sqlParams2.Add("@idDoc", GetParamURL(Request.QueryString.ToString(), "IDDOC"));
        rsTemp = cdf.GetRSReadFromQuery_($"select * from {ViewName} where iddoc=@idDoc", ApplicationCommon.Application.ConnectionString, sqlParams2);

        if (rsTemp.RecordCount > 0)
        {
            rsTemp.MoveFirst();
            htmlToReturn.Write(elabTemplate(ApplicationCommon.CNV(TemplateName), rsTemp));
        }
    }
    htmlToReturn.Write($@"
	<tr><td>&nbsp;</td></tr>

		</td></tr> ");
    TSRecordSet rs1;
    string concessione = string.Empty;
    string datainvio = string.Empty;
    string keymlng = string.Empty;

    datainvio = DOC_FieldTecnical("TESTATA", "DataInvio");

    if (!IsDate(datainvio))
    {
        datainvio = DateAndTime.DatePart("yyyy", DateAndTime.Now) + "-" + Strings.Right("00" + DateAndTime.DatePart("M", DateAndTime.Now), 2) + "-" + Strings.Right(CStr(DateAndTime.DatePart("d", DateAndTime.Now)), 2);
    }

    //
    //	'--se si tratta di una busta economica recupero la key per inserire il testo
    //	'if Request.QueryString("BUSTA") = "BUSTA_ECONOMICA" and DOC_FieldTecnical( "TESTATA", "CriterioAggiudicazioneGara" ) <> "16291"  and DOC_FieldTecnical( "TESTATA", "Concessione" ) <> "si"  then
    if (DOC_FieldTecnical("TESTATA", "Concessione") != "si")
    {
        //' vede se è una offerta su concessione
        concessione = DOC_FieldTecnical("TESTATA", "Concessione");

        if (concessione == "si")
        {
            rs1 = cdf.GetRSReadFromQuery_("select REL_ValueOutput from CTL_RelationsTime where REL_Type = 'PRINT_OFFERTA' and REL_ValueInput = 'TESTO_DICHIARAZIONE_OFFERTA_CONCESSIONI' and REL_Data_I <= '" + datainvio.Replace("'", "''") + "' and REL_Data_F >= '" + datainvio.Replace("'", "''") + "'", ApplicationCommon.Application.ConnectionString);
        }
        else
        {
            rs1 = cdf.GetRSReadFromQuery_("select REL_ValueOutput from CTL_RelationsTime where REL_Type = 'PRINT_OFFERTA' and REL_ValueInput = 'TESTO_DICHIARAZIONE_OFFERTA' and REL_Data_I <= '" + datainvio.Replace("'", "''") + "' and REL_Data_F >= '" + datainvio.Replace("'", "''") + "'", ApplicationCommon.Application.ConnectionString);
        }

        if (rs1.RecordCount > 0)
        {
            rs1.MoveFirst();
            keymlng = CStr(rs1["REL_ValueOutput"]);
        }

        if (!string.IsNullOrEmpty(keymlng) && !string.IsNullOrEmpty(ApplicationCommon.CNV(keymlng)))
        {
            htmlToReturn.Write($@"
			<tr><td>

					<table width=""100%"" >
						<tr>

							<td align=""left"" style=""text-align:justify"">
								" + ApplicationCommon.CNV(keymlng) + $@"<br/>
							</td>

						</tr>
					</table>
					</td></tr>");
        }
    }
    htmlToReturn.Write($@"</table>");
    if (!string.IsNullOrEmpty(paramValue) && !string.IsNullOrEmpty(keymlng) && !string.IsNullOrEmpty(ApplicationCommon.CNV(keymlng)))
    {
        SaltoPagina(htmlToReturn);

    }
    htmlToReturn.Write($@"
	<table border=0 width=""100%""  >



        <tr><td>&nbsp;</td></tr>
        <tr ><td style=""border:0px;"" ><label style=""font-size:18px; font-weight:bold; align:left"">");
    htmlToReturn.Write(ApplicationCommon.CNV("Offerta Economica"));
    string DSE_ID = "";
    DSE_ID = "BUSTA_ECONOMICA";
    if (GetParamURL(Request.QueryString.ToString(), "TYPEDOC") != "OFFERTA")
    {
        htmlToReturn.Write($@" - Lotto Numero:</label>" + DOC_Field("TESTATA", "NumeroLotto"));
        DSE_ID = "OFFERTA_BUSTA_ECO";
    }
    htmlToReturn.Write($@"
	<tr><td>&nbsp;</td></tr>
        </thead>

        <tr>
			<td style=""border:0px;"" >");
    //dim ObjSession
    //ObjSession = session("Session")
    //set ObjSession(0) = Request.QueryString
    //set ObjSession(1) = Request.form
    //
    //'-- Passiamo di nuovo anche la request all'indice 3 per permettere alla classe ctldb.blacklist di recuperare l'ip
    //set ObjSession(3) = request
    //set ObjSession(5) = session
    //set ObjSession(6) = application
    //ObjSession(9) = application("Server_RDS")
    //ObjSession(10) = session("Funzionalita")' permessi utenti
    //set ObjSession(13) = objNewDizMlng("MultiLinguismo")
    //session("Session") = ObjSession

    //'--stampo la griglia dell'offerta del microlotto
    //Set objDB = CreateObject("ctldb.clstabmanage")

    //'--recupero modello offerta microlotto
    TSRecordSet rsM;
    var sqlParams = new Dictionary<string, object?>();
    sqlParams.Add("@idDoc", IDDOC);
    sqlParams.Add("@DSE_ID", DSE_ID);
    rsM = cdf.GetRSReadFromQuery_("select MOD_Name from CTL_DOC_SECTION_MODEL with(nolock) where IdHeader = @idDoc and DSE_ID in (@DSE_ID)", ApplicationCommon.Application.ConnectionString, sqlParams);
    if (rsM is not null && rsM.RecordCount > 0)
    {
        string strModelloOfferta = CStr(rsM["MOD_Name"]);

        // '--recupero modello griglia
        Dictionary<string, Field> mp_Columns = new Dictionary<string, Field>();
        Dictionary<string, Grid_ColumnsProperty> mp_ColumnsProperty = new Dictionary<string, Grid_ColumnsProperty>();
        LibDbModelExt mp_objDB = new LibDbModelExt();
        mp_objDB.GetFilteredFieldsWeb(strModelloOfferta, ref mp_Columns, ref mp_ColumnsProperty, CStr(session["strSuffLing"]), 0, 0, ApplicationCommon.Application.ConnectionString, session, true);
        mp_Columns.Remove("FNZ_DEL");

        //'--rimuovo colonna Esito
        //'mp_Columns.Remove "EsitoRiga"
        //stop
        Grid_ColumnsProperty prop;
        try
        {
            prop = mp_ColumnsProperty["EsitoRiga"];
            prop.Hide = true;
        }
        catch
        {
            //err.Clear
            //'-- creo la property per nascondere la colonna
            prop = new Grid_ColumnsProperty();
            prop.Hide = true;
            mp_ColumnsProperty.Add("EsitoRiga", prop);
        }

        //'--recupero recordset dei dati per la griglia
        //
        //'set rs = objDB.GetRSReadFromQuery( cstr("select * from Document_MicroLotti_Dettagli where TipoDoc = 'OFFERTA' and idheaderlotto =" & idDoc  & " order by id asc") , application("connectionstring") )
        Grid mp_objGrid = new Grid();
        mp_objGrid.Columns = mp_Columns;
        mp_objGrid.ColumnsProperty = mp_ColumnsProperty;
        mp_objGrid.SetMatrixDisposition(false);
        //err.clear
        try
        {
            if (GetParamURL(Request.QueryString.ToString(), "TYPEDOC") == "OFFERTA")
            {
                mp_objGrid.SetMatrix(objDoc.Sections["BUSTA_ECONOMICA"].mp_Matrix);
            }
            else
            {
                mp_objGrid.SetMatrix(objDoc.Sections["OFFERTA_BUSTA_ECO"].mp_Matrix);
            }
        }
        catch (Exception e)
        {
            TracciaErrore("STAMPA-RECUPERO MATRICE", "Errore nel recupero matrice elenco prodotti - " + e.Message, 0, "OFFERTA_BUSTA_ECO.asp");
        }
        mp_objGrid.id = "GridViewer";
        mp_objGrid.width = "100%";
        mp_objGrid.Editable = false;
        //'mp_objGrid.ShowTotal CNV("totale") , "2"
        mp_objGrid.Html(htmlToReturn);
    }
    htmlToReturn.Write($@"
	  </td>
        </tr>
		<tr><td>&nbsp;</td></tr>");
    if (DOC_FieldTecnical("TESTATA", "CriterioAggiudicazioneGara") != "16291" && DOC_FieldTecnical("TESTATA", "Concessione") != "si" && Get_Func_Property("OFFERTA_TESTATA_TOTALI", "ValoreEconomico", "Hide", "0", -1) == "0")
    {
        htmlToReturn.Write($@"
		<tr>
    	  <td nowrap style=""font-size:18px; align=left""><b>VALORE OFFERTA DEL LOTTO " + DOC_Field("TESTATA", "NumeroLotto") + $@": </b> " + DOC_FieldRow("OFFERTA_BUSTA_ECO", "ValoreImportoLotto", 0) + $@" &euro; </td>
    	</tr>");
    }

    htmlToReturn.Write($@"
	<tr><td>&nbsp;</td></tr>");
    if (string.IsNullOrEmpty(paramValue))
    {
        htmlToReturn.Write($@"
		<tr>
    	  <td nowrap style=""font-size:18px; align=left""><b>Ragione sociale del Concorrente: </b> " + DenominazioneATI(IDDOC) + $@" </td>
    	</tr>");
        info_concorrente(IDDOC);
    }
    htmlToReturn.Write($@"
	<br/><br/><br/>

	<table width=""100%"">

		<tr>

			<td align=""right"">");
    string param_mostra_nome = CStr(Get_Func_Property("OFFERTA_BUSTA_ECO.asp", "Responsabile", "HIDE", "0", CInt("-1")));
    if (param_mostra_nome.ToUpper() == "0")
    {
        htmlToReturn.Write($@"" + infoOfferta(IDDOC, "Responsabile") + "<br/>");
    }
    htmlToReturn.Write($@"
	<b>Firmato digitalmente</b>
				</td>

			</tr>

		</table>


		</table>

	    </table>

	</body>
	</html>");
    void TracciaErrore(string source, string text, int tipo, string oggetto)
    {
        Exception e = new Exception(text);
        e.Source = source;
        StackTrace st = new StackTrace(true);
        e = eProcurementNext.CommonDB.Basic.SetStackTrace(e, st);


        // oltre allo StackTrace nel contesto aggiungere eventuali altre
        // informazioni che possano essere d'aiuto a chi dovrà valutare l'errore
        string contesto = st.ToString();
        TraceErr(e, ApplicationCommon.Application.ConnectionString, contesto);
        throw new ResponseRedirectException("../ctl_library/MessageBoxWin.asp?ML=yes&MSG=INFO_UTENTE_ERRORE_PROCESSO&CAPTION=Errore&ICO=2", Response);
    }

    //'-- Testo aggiunto in automatico per liberare la memoria dei nuovi report
    try
    {
        FreeMemDocument(session);
    }
    catch
    {

    }
}@Html.Raw(htmlToReturn.Out())
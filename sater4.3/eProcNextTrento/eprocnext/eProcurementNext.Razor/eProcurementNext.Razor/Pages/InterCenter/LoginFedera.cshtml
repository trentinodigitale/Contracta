@page "/InterCenter/LoginFedera.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using Microsoft.VisualBasic;
@using System.Globalization
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.DOCUMENT.CommonModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.trace_in_log_utenteModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.antiFixationModel;
@model eProcurementNext.Razor.Pages.InterCenter.LoginFederaModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	CommonDbFunctions cdf = new();
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new();
}
@{

    //on error resume next

    ////'-- Per impedire il session fixation genero un codice di controllo sessione a meno che non è già presente
    //if (string.IsNullOrEmpty(cstr(session["AFLINKFIXATION"])){
    //	AntiFixationInit();
    //}

    //on error goto 0

    //'-- recupero il Codice Fiscale ed il livello
    string? TrustLevel = HttpContext.GetServerVariable("HTTP_TrustLevel") is not null ? HttpContext.GetServerVariable("HTTP_TrustLevel") : "";//.ServerVariables("HTTP_TrustLevel");
    string? CodiceFiscale = HttpContext.GetServerVariable("HTTP_CodiceFiscale") is not null ? HttpContext.GetServerVariable("HTTP_CodiceFiscale") : "";
    TrustLevel = TrustLevel is not null ? TrustLevel : "";
    CodiceFiscale = CodiceFiscale is not null ? CodiceFiscale : "";
    traceInLogUtente(1 , "" , $"LOGIN FEDERA - CF:{CStr(CodiceFiscale)} - TrustLevel:{TrustLevel}", HttpContext, session);

    //'-- verifico che il parametro non contenga dati pericolosi
    validate("CodiceFiscale", CodiceFiscale is not null ? CodiceFiscale : "null", TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0, HttpContext, session);

    void drawContent()
	{
		//'response.write "CodiceFiscale:" & CodiceFiscale
		//'response.end 
		
		//'--se il CF vuoto usciamo con messaggio apposito
        if (string.IsNullOrEmpty(CStr(CodiceFiscale).Trim()))
        {
            throw new ResponseRedirectException($@"{ApplicationCommon.Application["strVirtualDirectory"]}/Intercenter/FederaOutput.asp?lo=lista_attivita&ACCESSO=CodiceFiscaleVuoto", Response);
		}
		
        //'-- nel caso il livello non sia sufficiente
		 if (TrustLevel.ToLower() != "alto")
		 {
            throw new ResponseRedirectException($@"{ApplicationCommon.Application["strVirtualDirectory"]}/Intercenter/FederaOutput.asp?lo=lista_attivita&ACCESSO=Negato", Response);
		 }
		
		//'-- verifico la presenza del CF sul DB

		//'-- Con l'introduzione di SPID dobbiamo far accedere sia enti che OE
		var sqlParams = new Dictionary<string, object?>();
		sqlParams.Add("@CodiceFiscale", CodiceFiscale);
		TSRecordSet rs = cdf.GetRSReadFromQuery_("select pfulogin , pfuidAzi , aziRagioneSociale , NEWID() as ID from profiliutente with(nolock) inner join aziende with(nolock) on pfuidazi = idazi where aziDeleted = 0 and pfuDeleted = 0 and pfuCodiceFiscale = @CodiceFiscale", ApplicationCommon.Application.ConnectionString, sqlParams);
        
        //'-- nel caso l'utente non è presente nel sistema
		if (rs.RecordCount == 0)
		{
			//''-- verifica se l'utente è un OE
            //'set rs = GetRS("select pfulogin , pfuidAzi , aziRagioneSociale , NEWID() as ID from profiliutente inner join aziende on pfuidazi = idazi and  aziVenditore > 0 where pfuCodiceFiscale = '" & Replace( CodiceFiscale , "'" , "''" ) & "' ")
			
            //'if rs.recordcount = 0 then
			if (!string.IsNullOrEmpty(CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"])))
			{
    			throw new ResponseRedirectException($@"/{CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"])}/Intercenter/FederaOutput.asp?lo=lista_attivita&ACCESSO=NonTrovato&CF={URLEncode(CodiceFiscale)}", Response);
			}
			else
			{
    			throw new ResponseRedirectException($"/Application/Intercenter/FederaOutput.asp?lo=lista_attivita&ACCESSO=NonTrovato&CF={URLEncode(CodiceFiscale)}", Response);
			}
    		//'else
    		//'	response.redirect "/Application/Intercenter/FederaOutput.asp?lo=lista_attivita&ACCESSO=OE_NEGATO"
            //'end if          
		}

        //'-- nel caso sia ritornato un solo utente si accede direttamente
		if (rs.RecordCount == 1)
		{
			rs.MoveFirst();

			TraceLoginFedera(CStr(rs["ID"]), CStr(rs["pfulogin"]), CStr(CodiceFiscale));

			throw new ResponseRedirectException($"../login.asp?redirectback=yes&amp;chiamante=/portale/index.php&amp;strMnemonicoMP=PA&amp;LOGINFEDERA={URLEncode(CStr(rs["ID"]))}&amp;FEDERA_AZI={CStr(rs["pfuidAzi"])}", Response);
		}
        
        if (rs.RecordCount > 1)
		{
			rs.MoveFirst();
			
			TraceLoginFedera(CStr(rs["ID"]), CStr(rs["pfulogin"]), CStr(CodiceFiscale));
			if (!string.IsNullOrEmpty(CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"])))
			{
				throw new ResponseRedirectException($@"/{CStr(ApplicationCommon.Application["NOMEAPPLICAZIONE"])}/Intercenter/FederaOutput.asp?lo=lista_attivita&ACCESSO=Multi&CF={CodiceFiscale}&LOGINFEDERA={URLEncode(CStr(rs["ID"]))}", Response);
			}
			else
			{
				throw new ResponseRedirectException($"/Application/Intercenter/FederaOutput.asp?lo=lista_attivita&ACCESSO=Multi&CF={CodiceFiscale}&LOGINFEDERA={URLEncode(CStr(rs["ID"]))}", Response);
			}
		}
   }
    
	//'--inserisce nella tabella TRACE_MULTILINGUISMO le chiavi del vecchio multilinguismo
	void TraceLoginFedera(string guid, string login, string codicefiscale)
	{
		CommonDbFunctions objDB = new();
		
		string strKeyFedera = @"federa_{guid}";
		string data = $"{DateAndTime.Year(DateTime.Now)}-{normalizza(DateAndTime.Month(DateTime.Now))}-{normalizza(DateAndTime.Day(DateTime.Now))} {normalizza(DateAndTime.Hour(DateTime.Now))}:{normalizza(DateAndTime.Minute(DateTime.Now))}";
		string strValueFedera = $"{CStr(data)}@@@{login}@@@{codicefiscale}";
		
		var sqlParams = new Dictionary<string, object?>();
		sqlParams.Add("@strKeyFedera", strKeyFedera);
		sqlParams.Add("@strValueFedera", strValueFedera);
		objDB.Execute("INSERT INTO [CTL_LOG_PROC]([DOC_NAME],[parametri]) VALUES (@strKeyFedera, @strValueFedera)", ApplicationCommon.Application["ConnectionString"], parCollection: sqlParams);
	}

	string normalizza(int value)
	{	
		string _normalizza = string.Empty;
		if( (CStr(value).Length) < 2){
			_normalizza = $"0{CStr(value)}";
		}
		else
		{
			_normalizza = CStr(value);
		}

		return _normalizza;
	}

    drawContent();
}
@Html.Raw(htmlToReturn.Out())
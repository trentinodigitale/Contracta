@page "/OpenID/output.asp"
@inject eProcurementNext.Session.ISession session;
@using eProcurementNext.CommonDB
@using eProcurementNext.CommonModule;
@using static eProcurementNext.CommonModule.Basic;
@using eProcurementNext.BizDB;
@using eProcurementNext.HTML;
@using eProcurementNext.Application;
@using static eProcurementNext.HTML.BasicFunction;
@using Microsoft.VisualBasic;
@using System.Data.SqlClient
@using System.Globalization
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.antiFixationModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.securityModel;
@using static  eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.trace_in_log_utenteModel;
@using static eProcurementNext.Razor.Pages.CTL_LIBRARY.functions.net_utilsModel;
@model eProcurementNext.Razor.Pages.OpenID.outputModel
@using static eProcurementNext.Session.SessionMiddleware
@{
	Layout = ConfigurationServices.GetKey("LayoutVersion", "_masterPage");
	LoadSession(HttpContext, session);
	EprocResponse htmlToReturn = new(GetParamURL(HttpContext.Request.QueryString.ToString(), "XML_ATTACH_TYPE"));
	CommonDbFunctions cdf = new();

	//'-- recupero il Codice Fiscale
	string CodiceFiscale = GetParamURL(Request.QueryString.ToString(), "CF"); //' ServerVariables("HTTP_CodiceFiscale")
	string ACCESSO       = GetParamURL(Request.QueryString.ToString(), "ACCESSO");

	//'-- verifico che il parametro non contenga dati pericolosi

	validate("CodiceFiscale", CodiceFiscale.Replace("-", ""), TIPO_PARAMETRO_STRING, SOTTO_TIPO_PARAMETRO_PAROLASINGOLA, "", 0, HttpContext, session);

	void drawContent()
	{
		var sqlParams = new Dictionary<string, object?>();

		//'-- nel caso il livello non sia sufficiente
		if(string.Equals(ACCESSO.ToUpper(),"CNV"))
		{
			string KEY_MLNG = GetParamURL(Request.QueryString.ToString(), "KEY_MLNG");

			traceInLogUtente(1, "", "LOGIN SSO - Blocco per il messaggio : " + KEY_MLNG,HttpContext,session);
			htmlToReturn.Write($@"<div id=""colcx"" classe=""large"">");
			htmlToReturn.Write("<p>");
			htmlToReturn.Write(ApplicationCommon.CNV(KEY_MLNG));
			htmlToReturn.Write("</p>");
			htmlToReturn.Write("</div>");

			//'response.end
			//da capire return
			//exit sub
		}
		if(String.Equals(ACCESSO.ToLower(), "codicefiscalevuoto" ))
		{
			traceInLogUtente(1, "", "LOGIN SSO - Accesso negato codice fiscale non passato dall'SSO",HttpContext,session);

			htmlToReturn.Write($@"<div id=""colcx"" classe=""large"">");
			htmlToReturn.Write("<p>");
			htmlToReturn.Write(ApplicationCommon.CNV("Accesso negato, codice fiscale non passato da Federa"));
			htmlToReturn.Write("</p>");
			htmlToReturn.Write("</div>");

			//'response.end
			return;
		}
		//'-- nel caso l'utente non sia presente
		if (String.Equals(ACCESSO, "NonTrovato"))
		{
			string TMPTK = CStr(GetParamURL(Request.QueryString.ToString(), "TMPTK"));

			//'- se è stato passato il token temporaneo per agganciarci all'id token IAM
			if (!string.IsNullOrEmpty(TMPTK))
			{
				//'-- lo recuperiamo e lo mettiamo in sessione
				sqlParams.Clear();
				sqlParams.Add("@TMPTK", TMPTK);
				TSRecordSet rsTmp = cdf.GetRSReadFromQuery_("exec SSO_GET_ID_TOKEN @TMPTK", ApplicationCommon.Application.ConnectionString, sqlParams);
				if (rsTmp.RecordCount >0)
				{
					string idToken = CStr(rsTmp["idToken"]);
					session["OPEN_ID_TOKEN"] = idToken;
				}
			}
			traceInLogUtente(1, "", $"LOGIN SSO - {CodiceFiscale} Accesso negato utente non trovato",HttpContext,session);
			sqlParams.Clear();
			sqlParams.Add("@CodiceFiscale", CodiceFiscale);
			TSRecordSet rs_cf = cdf.GetRSReadFromQuery_("select dbo.fn_checkCF_ANAC (@CodiceFiscale,'') as CF_VALUE", ApplicationCommon.Application.ConnectionString, sqlParams);
			string CF_VALUE = CStr(rs_cf["CF_VALUE"]);
			if(string.IsNullOrEmpty(CF_VALUE))//'verifico che il CF sia valido
			{
				htmlToReturn.Write($@"<div id=""colcx"" class=""large"">");
				htmlToReturn.Write("<p>");
				htmlToReturn.Write(ApplicationCommon.CNV("Accesso negato. Il codice fiscale @CF@ non risulta nel sistema. Provveda alla creazione della sua utenza prima di riprovare.").Replace("@CF@", CodiceFiscale) + "<br/>");
				htmlToReturn.Write(ApplicationCommon.CNV("Attenzione il Codice Fiscale ricevuto non e formalmente valido."));
				htmlToReturn.Write("</p>");
				htmlToReturn.Write("</div>");

				return;
			}
			else
			{
				sqlParams.Clear();
				sqlParams.Add("@CodiceFiscale", CodiceFiscale);
				rs_cf = cdf.GetRSReadFromQuery_("select idpfu from profiliutente with (nolock) where pfucodicefiscale=@CodiceFiscale", ApplicationCommon.Application.ConnectionString, sqlParams);
				if (rs_cf.RecordCount == 0)//'verifico se nell'elenco è presente l'utente
				{
					htmlToReturn.Write($@"<div id=""colcx"" class=""large"">");
					htmlToReturn.Write("<p>");
					htmlToReturn.Write(ApplicationCommon.CNV("Accesso negato. Il codice fiscale @CF@ non risulta nel sistema. Provveda alla creazione della sua utenza prima di riprovare.").Replace("@CF@", CodiceFiscale));
					htmlToReturn.Write("</p>");
					htmlToReturn.Write("</div>");

					return;
				}
				else
				{
					sqlParams.Clear();
					sqlParams.Add("@CodiceFiscale", CodiceFiscale);
					rs_cf = cdf.GetRSReadFromQuery_("select TOP 1 pfunome, pfudeleted from profiliutente with (nolock) where pfucodicefiscale=@CodiceFiscale order by pfuLastLogin desc", ApplicationCommon.Application.ConnectionString, sqlParams);
					string nome_utente = CStr(rs_cf["pfunome"]);
					string pfudeleted = CStr(rs_cf["pfudeleted"]);
					if (rs_cf.RecordCount > 0 && pfudeleted == 1.ToString())//'verifico se l'utente è cessato
					{
						htmlToReturn.Write($@"<div id=""colcx"" class=""large"">");
						htmlToReturn.Write("<p>");
						htmlToReturn.Write(ApplicationCommon.CNV("Accesso negato. l'utente: @NOME@, e stato cessato. Provveda alla riattivazione della sua utenza prima di riprovare.").Replace("@NOME@", nome_utente));
						htmlToReturn.Write("</p>");
						htmlToReturn.Write("</div>");

						return;
					}
				}
			}
		}
		string guid = GetParamURL(Request.QueryString.ToString(), "LOGINFEDERA");
		string ternaFedera = "";
		if(!string.IsNullOrEmpty(guid))
		{
			ternaFedera = getFederaValues(guid); //'now & "@@@" & login & "@@@" & codicefiscale
			if(!string.IsNullOrEmpty(ternaFedera))
			{
				string[] fv = ternaFedera.Split("@@@");

				//DateTime federaOra = DateTime.FromOADate(CDbl(fv[0]));
				DateTime federaOra = CDate(fv[0]);
				string Login = fv[1];
				string userCF = fv[2];
				if(!String.Equals(userCF,CodiceFiscale))
				{
					ternaFedera = "";// '-- Se il codice fiscale passato ad url non combacia con quello presente in tabella.mando errore
				}

				//'-- se il tempo trascorso dal collegamento a federa è inferiore a 30 minuti
				if(Math.Abs( DateDiff( "n" , federaOra  ,DateTime.Now)) > 30) 
				{
					ternaFedera = ""; //'-- Se il tempo tra la chiamata a federa e l'invocazione di questa pagina è troppo lungo.mando errore
				}
			}
		}
		if(string.IsNullOrEmpty(guid) || string.IsNullOrEmpty(ternaFedera))
		{
			traceInLogUtente(1, "", "LOGIN SSO - " + CodiceFiscale + " Accesso negato per tentativo di forzatura del sistema",HttpContext,session);
			htmlToReturn.Write($@"<div id=""colcx"" classe=""large"">");
			htmlToReturn.Write("<p>");
			htmlToReturn.Write(ApplicationCommon.CNV("La sessione di lavoro non e' valida. Sono state informate le autorita' del suo tentativo."));
			htmlToReturn.Write("</p>");
			htmlToReturn.Write("</div>");
			return;
		}
		if(string.Equals(ACCESSO,"Multi"))
		{
			//'-- verifico la presenza del CF sul DB
			sqlParams.Clear();
			sqlParams.Add("@CodiceFiscale", CodiceFiscale);
			TSRecordSet rs = cdf.GetRSReadFromQuery_("select pfulogin , pfuidAzi , aziRagioneSociale , NEWID() as ID from profiliutente with(nolock) inner join aziende with(nolock) on pfuidazi = idazi where aziDeleted = 0 and pfuDeleted = 0 and pfuCodiceFiscale = @CodiceFiscale", ApplicationCommon.Application.ConnectionString, sqlParams);
			//'-- nel caso l'utente non è presente nel sistema
			if(rs.RecordCount == 0)
			{
				htmlToReturn.Write($@"<div id=""colcx"" classe=""large"">");
				htmlToReturn.Write("<p>");
				htmlToReturn.Write(ApplicationCommon.CNV("Accesso negato. La sua utenza non risulta nel sistema. Provveda alla creazione della sua utenza prima di riprovare"));
				htmlToReturn.Write("</p>");
				htmlToReturn.Write("</div>");

				return;
			}
			string TMPTK = CStr(GetParamURL(Request.QueryString.ToString(), "TMPTK"));
			//'- se è stato passato il token temporaneo per agganciarci all'id token IAM
			if(!string.IsNullOrEmpty(TMPTK))
			{
				//'-- lo recuperiamo e lo mettiamo in sessione
				sqlParams.Clear();
				sqlParams.Add("@TMPTK", TMPTK);
				TSRecordSet rsTmp = cdf.GetRSReadFromQuery_("exec SSO_GET_ID_TOKEN @TMPTK", ApplicationCommon.Application.ConnectionString, sqlParams);
				if(rsTmp.RecordCount >0)
				{
					string idToken = CStr(rsTmp["idToken"]);
					session["OPEN_ID_TOKEN"] = idToken;
				}

			}
			//'-- nel caso sia ritornato un solo utente si accede direttamente
			if(rs.RecordCount == 1)
			{
				rs.MoveFirst();
				TraceLoginFedera(CStr(rs["ID"]), CStr(rs["pfulogin"]), CodiceFiscale);

				throw new ResponseRedirectException("../login.asp?redirectback=yes&chiamante=/portale/index.php&strMnemonicoMP=PA&LOGINFEDERA=" + UrlEncode(CStr(rs["ID"])) + "&FEDERA_AZI=" + CStr(rs["pfuidAzi"]), Response);
			}
			if(rs.RecordCount >1)
			{
				rs.MoveFirst();

				guid = CStr(rs["ID"]);
				TraceLoginFedera(guid, CStr(rs["pfulogin"]), CodiceFiscale);
				htmlToReturn.Write($@"<div id=""colcx"" classe=""large"">");
				htmlToReturn.Write("    <p>");
				htmlToReturn.Write(ApplicationCommon.CNV("La sua utenza risulta collegata ad i seguenti Enti. Per proseguire e' necessario selezionare un Ente"));
				htmlToReturn.Write($@"    </p><br/><p class=""SelectEnte"" >" + ApplicationCommon.CNV("Seleziona") + $@"</p><ul class=""ListaEnti"" >");

				for(int i = 0;i < rs.RecordCount;i++)
				{
					htmlToReturn.Write($@"<li class=""Ente""><a href=""../login.asp?redirectback=yes&amp;chiamante=/portale/index.php&amp;strMnemonicoMP=PA&amp;LOGINFEDERA=" + UrlEncode(guid) + $@"&amp;FEDERA_AZI=" + CStr(rs["pfuidAzi"]) + $@""">" + HtmlEncode(CStr(rs["aziRagioneSociale"])) + "</a>");

					rs.MoveNext();
				}
				htmlToReturn.Write("</ul></div>");

				return;
			}
		}
	}

	//'--inserisce nella tabella TRACE_MULTILINGUISMO le chiavi del vecchio multilinguismo
	void TraceLoginFedera(string guid,string login,string codicefiscale)
	{
		string strKeyFedera = $"federa_{guid}";

		string data = $"{DateAndTime.Year(DateTime.Now)}-{normalizza(CStr(DateAndTime.Month(DateTime.Now)))}-{normalizza(CStr(DateAndTime.Day(DateTime.Now)))} {normalizza(CStr(DateAndTime.Hour(DateTime.Now)))}:{normalizza(CStr(DateAndTime.Minute(DateTime.Now)))}";
		string strValueFedera = $"{data}@@@{login}@@@{codicefiscale}";

		var sqlParams = new Dictionary<string, object?>();
		sqlParams.Add("@KeyFedera", strKeyFedera);
		sqlParams.Add("@ValueFedera", strValueFedera);
		cdf.Execute("INSERT INTO [CTL_LOG_PROC]([DOC_NAME],[parametri]) VALUES (@KeyFedera,@ValueFedera)", ApplicationCommon.Application.ConnectionString, parCollection: sqlParams);
	}

	string normalizza(string value)
	{	
		string _normalizza = string.Empty;
		if( value.Length < 2)
		{
			_normalizza = $"0{value}";
		}
		else
		{
			_normalizza = value;
		}

		return _normalizza;
	}

	drawContent();
}@Html.Raw(htmlToReturn.Out())